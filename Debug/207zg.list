
207zg.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000184  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e93c  08000184  08000184  00010184  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000240c  0800eac0  0800eac0  0001eac0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010ecc  08010ecc  0003007c  2**0
                  CONTENTS
  4 .ARM          00000008  08010ecc  08010ecc  00020ecc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010ed4  08010ed4  0003007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010ed4  08010ed4  00020ed4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08010ed8  08010ed8  00020ed8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  08010edc  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00006878  2000007c  08010f58  0003007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200068f4  08010f58  000368f4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0003007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000291af  00000000  00000000  000300a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000052e1  00000000  00000000  00059254  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fb8  00000000  00000000  0005e538  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e98  00000000  00000000  0005f4f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002a5a8  00000000  00000000  00060388  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001f078  00000000  00000000  0008a930  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cf309  00000000  00000000  000a99a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00178cb1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004668  00000000  00000000  00178d04  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000184 <__do_global_dtors_aux>:
 8000184:	b510      	push	{r4, lr}
 8000186:	4c05      	ldr	r4, [pc, #20]	; (800019c <__do_global_dtors_aux+0x18>)
 8000188:	7823      	ldrb	r3, [r4, #0]
 800018a:	b933      	cbnz	r3, 800019a <__do_global_dtors_aux+0x16>
 800018c:	4b04      	ldr	r3, [pc, #16]	; (80001a0 <__do_global_dtors_aux+0x1c>)
 800018e:	b113      	cbz	r3, 8000196 <__do_global_dtors_aux+0x12>
 8000190:	4804      	ldr	r0, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x20>)
 8000192:	f3af 8000 	nop.w
 8000196:	2301      	movs	r3, #1
 8000198:	7023      	strb	r3, [r4, #0]
 800019a:	bd10      	pop	{r4, pc}
 800019c:	2000007c 	.word	0x2000007c
 80001a0:	00000000 	.word	0x00000000
 80001a4:	0800eaa8 	.word	0x0800eaa8

080001a8 <frame_dummy>:
 80001a8:	b508      	push	{r3, lr}
 80001aa:	4b03      	ldr	r3, [pc, #12]	; (80001b8 <frame_dummy+0x10>)
 80001ac:	b11b      	cbz	r3, 80001b6 <frame_dummy+0xe>
 80001ae:	4903      	ldr	r1, [pc, #12]	; (80001bc <frame_dummy+0x14>)
 80001b0:	4803      	ldr	r0, [pc, #12]	; (80001c0 <frame_dummy+0x18>)
 80001b2:	f3af 8000 	nop.w
 80001b6:	bd08      	pop	{r3, pc}
 80001b8:	00000000 	.word	0x00000000
 80001bc:	20000080 	.word	0x20000080
 80001c0:	0800eaa8 	.word	0x0800eaa8

080001c4 <__aeabi_uldivmod>:
 80001c4:	b953      	cbnz	r3, 80001dc <__aeabi_uldivmod+0x18>
 80001c6:	b94a      	cbnz	r2, 80001dc <__aeabi_uldivmod+0x18>
 80001c8:	2900      	cmp	r1, #0
 80001ca:	bf08      	it	eq
 80001cc:	2800      	cmpeq	r0, #0
 80001ce:	bf1c      	itt	ne
 80001d0:	f04f 31ff 	movne.w	r1, #4294967295
 80001d4:	f04f 30ff 	movne.w	r0, #4294967295
 80001d8:	f000 b96e 	b.w	80004b8 <__aeabi_idiv0>
 80001dc:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e4:	f000 f806 	bl	80001f4 <__udivmoddi4>
 80001e8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001ec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f0:	b004      	add	sp, #16
 80001f2:	4770      	bx	lr

080001f4 <__udivmoddi4>:
 80001f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001f8:	9e08      	ldr	r6, [sp, #32]
 80001fa:	460d      	mov	r5, r1
 80001fc:	4604      	mov	r4, r0
 80001fe:	468e      	mov	lr, r1
 8000200:	2b00      	cmp	r3, #0
 8000202:	f040 8083 	bne.w	800030c <__udivmoddi4+0x118>
 8000206:	428a      	cmp	r2, r1
 8000208:	4617      	mov	r7, r2
 800020a:	d947      	bls.n	800029c <__udivmoddi4+0xa8>
 800020c:	fab2 f382 	clz	r3, r2
 8000210:	b14b      	cbz	r3, 8000226 <__udivmoddi4+0x32>
 8000212:	f1c3 0120 	rsb	r1, r3, #32
 8000216:	fa05 fe03 	lsl.w	lr, r5, r3
 800021a:	fa20 f101 	lsr.w	r1, r0, r1
 800021e:	409f      	lsls	r7, r3
 8000220:	ea41 0e0e 	orr.w	lr, r1, lr
 8000224:	409c      	lsls	r4, r3
 8000226:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800022a:	fbbe fcf8 	udiv	ip, lr, r8
 800022e:	fa1f f987 	uxth.w	r9, r7
 8000232:	fb08 e21c 	mls	r2, r8, ip, lr
 8000236:	fb0c f009 	mul.w	r0, ip, r9
 800023a:	0c21      	lsrs	r1, r4, #16
 800023c:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
 8000240:	4290      	cmp	r0, r2
 8000242:	d90a      	bls.n	800025a <__udivmoddi4+0x66>
 8000244:	18ba      	adds	r2, r7, r2
 8000246:	f10c 31ff 	add.w	r1, ip, #4294967295
 800024a:	f080 8118 	bcs.w	800047e <__udivmoddi4+0x28a>
 800024e:	4290      	cmp	r0, r2
 8000250:	f240 8115 	bls.w	800047e <__udivmoddi4+0x28a>
 8000254:	f1ac 0c02 	sub.w	ip, ip, #2
 8000258:	443a      	add	r2, r7
 800025a:	1a12      	subs	r2, r2, r0
 800025c:	fbb2 f0f8 	udiv	r0, r2, r8
 8000260:	fb08 2210 	mls	r2, r8, r0, r2
 8000264:	fb00 f109 	mul.w	r1, r0, r9
 8000268:	b2a4      	uxth	r4, r4
 800026a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800026e:	42a1      	cmp	r1, r4
 8000270:	d909      	bls.n	8000286 <__udivmoddi4+0x92>
 8000272:	193c      	adds	r4, r7, r4
 8000274:	f100 32ff 	add.w	r2, r0, #4294967295
 8000278:	f080 8103 	bcs.w	8000482 <__udivmoddi4+0x28e>
 800027c:	42a1      	cmp	r1, r4
 800027e:	f240 8100 	bls.w	8000482 <__udivmoddi4+0x28e>
 8000282:	3802      	subs	r0, #2
 8000284:	443c      	add	r4, r7
 8000286:	1a64      	subs	r4, r4, r1
 8000288:	2100      	movs	r1, #0
 800028a:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800028e:	b11e      	cbz	r6, 8000298 <__udivmoddi4+0xa4>
 8000290:	2200      	movs	r2, #0
 8000292:	40dc      	lsrs	r4, r3
 8000294:	e9c6 4200 	strd	r4, r2, [r6]
 8000298:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029c:	b902      	cbnz	r2, 80002a0 <__udivmoddi4+0xac>
 800029e:	deff      	udf	#255	; 0xff
 80002a0:	fab2 f382 	clz	r3, r2
 80002a4:	2b00      	cmp	r3, #0
 80002a6:	d14f      	bne.n	8000348 <__udivmoddi4+0x154>
 80002a8:	1a8d      	subs	r5, r1, r2
 80002aa:	2101      	movs	r1, #1
 80002ac:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80002b0:	fa1f f882 	uxth.w	r8, r2
 80002b4:	fbb5 fcfe 	udiv	ip, r5, lr
 80002b8:	fb0e 551c 	mls	r5, lr, ip, r5
 80002bc:	fb08 f00c 	mul.w	r0, r8, ip
 80002c0:	0c22      	lsrs	r2, r4, #16
 80002c2:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 80002c6:	42a8      	cmp	r0, r5
 80002c8:	d907      	bls.n	80002da <__udivmoddi4+0xe6>
 80002ca:	197d      	adds	r5, r7, r5
 80002cc:	f10c 32ff 	add.w	r2, ip, #4294967295
 80002d0:	d202      	bcs.n	80002d8 <__udivmoddi4+0xe4>
 80002d2:	42a8      	cmp	r0, r5
 80002d4:	f200 80e9 	bhi.w	80004aa <__udivmoddi4+0x2b6>
 80002d8:	4694      	mov	ip, r2
 80002da:	1a2d      	subs	r5, r5, r0
 80002dc:	fbb5 f0fe 	udiv	r0, r5, lr
 80002e0:	fb0e 5510 	mls	r5, lr, r0, r5
 80002e4:	fb08 f800 	mul.w	r8, r8, r0
 80002e8:	b2a4      	uxth	r4, r4
 80002ea:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80002ee:	45a0      	cmp	r8, r4
 80002f0:	d907      	bls.n	8000302 <__udivmoddi4+0x10e>
 80002f2:	193c      	adds	r4, r7, r4
 80002f4:	f100 32ff 	add.w	r2, r0, #4294967295
 80002f8:	d202      	bcs.n	8000300 <__udivmoddi4+0x10c>
 80002fa:	45a0      	cmp	r8, r4
 80002fc:	f200 80d9 	bhi.w	80004b2 <__udivmoddi4+0x2be>
 8000300:	4610      	mov	r0, r2
 8000302:	eba4 0408 	sub.w	r4, r4, r8
 8000306:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800030a:	e7c0      	b.n	800028e <__udivmoddi4+0x9a>
 800030c:	428b      	cmp	r3, r1
 800030e:	d908      	bls.n	8000322 <__udivmoddi4+0x12e>
 8000310:	2e00      	cmp	r6, #0
 8000312:	f000 80b1 	beq.w	8000478 <__udivmoddi4+0x284>
 8000316:	2100      	movs	r1, #0
 8000318:	e9c6 0500 	strd	r0, r5, [r6]
 800031c:	4608      	mov	r0, r1
 800031e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000322:	fab3 f183 	clz	r1, r3
 8000326:	2900      	cmp	r1, #0
 8000328:	d14b      	bne.n	80003c2 <__udivmoddi4+0x1ce>
 800032a:	42ab      	cmp	r3, r5
 800032c:	d302      	bcc.n	8000334 <__udivmoddi4+0x140>
 800032e:	4282      	cmp	r2, r0
 8000330:	f200 80b9 	bhi.w	80004a6 <__udivmoddi4+0x2b2>
 8000334:	1a84      	subs	r4, r0, r2
 8000336:	eb65 0303 	sbc.w	r3, r5, r3
 800033a:	2001      	movs	r0, #1
 800033c:	469e      	mov	lr, r3
 800033e:	2e00      	cmp	r6, #0
 8000340:	d0aa      	beq.n	8000298 <__udivmoddi4+0xa4>
 8000342:	e9c6 4e00 	strd	r4, lr, [r6]
 8000346:	e7a7      	b.n	8000298 <__udivmoddi4+0xa4>
 8000348:	409f      	lsls	r7, r3
 800034a:	f1c3 0220 	rsb	r2, r3, #32
 800034e:	40d1      	lsrs	r1, r2
 8000350:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000354:	fbb1 f0fe 	udiv	r0, r1, lr
 8000358:	fa1f f887 	uxth.w	r8, r7
 800035c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000360:	fa24 f202 	lsr.w	r2, r4, r2
 8000364:	409d      	lsls	r5, r3
 8000366:	fb00 fc08 	mul.w	ip, r0, r8
 800036a:	432a      	orrs	r2, r5
 800036c:	0c15      	lsrs	r5, r2, #16
 800036e:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
 8000372:	45ac      	cmp	ip, r5
 8000374:	fa04 f403 	lsl.w	r4, r4, r3
 8000378:	d909      	bls.n	800038e <__udivmoddi4+0x19a>
 800037a:	197d      	adds	r5, r7, r5
 800037c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000380:	f080 808f 	bcs.w	80004a2 <__udivmoddi4+0x2ae>
 8000384:	45ac      	cmp	ip, r5
 8000386:	f240 808c 	bls.w	80004a2 <__udivmoddi4+0x2ae>
 800038a:	3802      	subs	r0, #2
 800038c:	443d      	add	r5, r7
 800038e:	eba5 050c 	sub.w	r5, r5, ip
 8000392:	fbb5 f1fe 	udiv	r1, r5, lr
 8000396:	fb0e 5c11 	mls	ip, lr, r1, r5
 800039a:	fb01 f908 	mul.w	r9, r1, r8
 800039e:	b295      	uxth	r5, r2
 80003a0:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 80003a4:	45a9      	cmp	r9, r5
 80003a6:	d907      	bls.n	80003b8 <__udivmoddi4+0x1c4>
 80003a8:	197d      	adds	r5, r7, r5
 80003aa:	f101 32ff 	add.w	r2, r1, #4294967295
 80003ae:	d274      	bcs.n	800049a <__udivmoddi4+0x2a6>
 80003b0:	45a9      	cmp	r9, r5
 80003b2:	d972      	bls.n	800049a <__udivmoddi4+0x2a6>
 80003b4:	3902      	subs	r1, #2
 80003b6:	443d      	add	r5, r7
 80003b8:	eba5 0509 	sub.w	r5, r5, r9
 80003bc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80003c0:	e778      	b.n	80002b4 <__udivmoddi4+0xc0>
 80003c2:	f1c1 0720 	rsb	r7, r1, #32
 80003c6:	408b      	lsls	r3, r1
 80003c8:	fa22 fc07 	lsr.w	ip, r2, r7
 80003cc:	ea4c 0c03 	orr.w	ip, ip, r3
 80003d0:	fa25 f407 	lsr.w	r4, r5, r7
 80003d4:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80003d8:	fbb4 f9fe 	udiv	r9, r4, lr
 80003dc:	fa1f f88c 	uxth.w	r8, ip
 80003e0:	fb0e 4419 	mls	r4, lr, r9, r4
 80003e4:	fa20 f307 	lsr.w	r3, r0, r7
 80003e8:	fb09 fa08 	mul.w	sl, r9, r8
 80003ec:	408d      	lsls	r5, r1
 80003ee:	431d      	orrs	r5, r3
 80003f0:	0c2b      	lsrs	r3, r5, #16
 80003f2:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003f6:	45a2      	cmp	sl, r4
 80003f8:	fa02 f201 	lsl.w	r2, r2, r1
 80003fc:	fa00 f301 	lsl.w	r3, r0, r1
 8000400:	d909      	bls.n	8000416 <__udivmoddi4+0x222>
 8000402:	eb1c 0404 	adds.w	r4, ip, r4
 8000406:	f109 30ff 	add.w	r0, r9, #4294967295
 800040a:	d248      	bcs.n	800049e <__udivmoddi4+0x2aa>
 800040c:	45a2      	cmp	sl, r4
 800040e:	d946      	bls.n	800049e <__udivmoddi4+0x2aa>
 8000410:	f1a9 0902 	sub.w	r9, r9, #2
 8000414:	4464      	add	r4, ip
 8000416:	eba4 040a 	sub.w	r4, r4, sl
 800041a:	fbb4 f0fe 	udiv	r0, r4, lr
 800041e:	fb0e 4410 	mls	r4, lr, r0, r4
 8000422:	fb00 fa08 	mul.w	sl, r0, r8
 8000426:	b2ad      	uxth	r5, r5
 8000428:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 800042c:	45a2      	cmp	sl, r4
 800042e:	d908      	bls.n	8000442 <__udivmoddi4+0x24e>
 8000430:	eb1c 0404 	adds.w	r4, ip, r4
 8000434:	f100 35ff 	add.w	r5, r0, #4294967295
 8000438:	d22d      	bcs.n	8000496 <__udivmoddi4+0x2a2>
 800043a:	45a2      	cmp	sl, r4
 800043c:	d92b      	bls.n	8000496 <__udivmoddi4+0x2a2>
 800043e:	3802      	subs	r0, #2
 8000440:	4464      	add	r4, ip
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	fba0 8902 	umull	r8, r9, r0, r2
 800044a:	eba4 040a 	sub.w	r4, r4, sl
 800044e:	454c      	cmp	r4, r9
 8000450:	46c6      	mov	lr, r8
 8000452:	464d      	mov	r5, r9
 8000454:	d319      	bcc.n	800048a <__udivmoddi4+0x296>
 8000456:	d016      	beq.n	8000486 <__udivmoddi4+0x292>
 8000458:	b15e      	cbz	r6, 8000472 <__udivmoddi4+0x27e>
 800045a:	ebb3 020e 	subs.w	r2, r3, lr
 800045e:	eb64 0405 	sbc.w	r4, r4, r5
 8000462:	fa04 f707 	lsl.w	r7, r4, r7
 8000466:	fa22 f301 	lsr.w	r3, r2, r1
 800046a:	431f      	orrs	r7, r3
 800046c:	40cc      	lsrs	r4, r1
 800046e:	e9c6 7400 	strd	r7, r4, [r6]
 8000472:	2100      	movs	r1, #0
 8000474:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000478:	4631      	mov	r1, r6
 800047a:	4630      	mov	r0, r6
 800047c:	e70c      	b.n	8000298 <__udivmoddi4+0xa4>
 800047e:	468c      	mov	ip, r1
 8000480:	e6eb      	b.n	800025a <__udivmoddi4+0x66>
 8000482:	4610      	mov	r0, r2
 8000484:	e6ff      	b.n	8000286 <__udivmoddi4+0x92>
 8000486:	4543      	cmp	r3, r8
 8000488:	d2e6      	bcs.n	8000458 <__udivmoddi4+0x264>
 800048a:	ebb8 0e02 	subs.w	lr, r8, r2
 800048e:	eb69 050c 	sbc.w	r5, r9, ip
 8000492:	3801      	subs	r0, #1
 8000494:	e7e0      	b.n	8000458 <__udivmoddi4+0x264>
 8000496:	4628      	mov	r0, r5
 8000498:	e7d3      	b.n	8000442 <__udivmoddi4+0x24e>
 800049a:	4611      	mov	r1, r2
 800049c:	e78c      	b.n	80003b8 <__udivmoddi4+0x1c4>
 800049e:	4681      	mov	r9, r0
 80004a0:	e7b9      	b.n	8000416 <__udivmoddi4+0x222>
 80004a2:	4608      	mov	r0, r1
 80004a4:	e773      	b.n	800038e <__udivmoddi4+0x19a>
 80004a6:	4608      	mov	r0, r1
 80004a8:	e749      	b.n	800033e <__udivmoddi4+0x14a>
 80004aa:	f1ac 0c02 	sub.w	ip, ip, #2
 80004ae:	443d      	add	r5, r7
 80004b0:	e713      	b.n	80002da <__udivmoddi4+0xe6>
 80004b2:	3802      	subs	r0, #2
 80004b4:	443c      	add	r4, r7
 80004b6:	e724      	b.n	8000302 <__udivmoddi4+0x10e>

080004b8 <__aeabi_idiv0>:
 80004b8:	4770      	bx	lr
 80004ba:	bf00      	nop

080004bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004bc:	b580      	push	{r7, lr}
 80004be:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004c0:	f000 f9da 	bl	8000878 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004c4:	f000 f807 	bl	80004d6 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004c8:	f000 f84c 	bl	8000564 <MX_GPIO_Init>
  MX_LWIP_Init();
 80004cc:	f002 f9f0 	bl	80028b0 <MX_LWIP_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  MX_LWIP_Process();
 80004d0:	f002 fa34 	bl	800293c <MX_LWIP_Process>
 80004d4:	e7fc      	b.n	80004d0 <main+0x14>

080004d6 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004d6:	b580      	push	{r7, lr}
 80004d8:	b092      	sub	sp, #72	; 0x48
 80004da:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004dc:	f107 0318 	add.w	r3, r7, #24
 80004e0:	2230      	movs	r2, #48	; 0x30
 80004e2:	2100      	movs	r1, #0
 80004e4:	4618      	mov	r0, r3
 80004e6:	f00d fab3 	bl	800da50 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004ea:	1d3b      	adds	r3, r7, #4
 80004ec:	2200      	movs	r2, #0
 80004ee:	601a      	str	r2, [r3, #0]
 80004f0:	605a      	str	r2, [r3, #4]
 80004f2:	609a      	str	r2, [r3, #8]
 80004f4:	60da      	str	r2, [r3, #12]
 80004f6:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80004f8:	2301      	movs	r3, #1
 80004fa:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80004fc:	2305      	movs	r3, #5
 80004fe:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000500:	2302      	movs	r3, #2
 8000502:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000504:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000508:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLM = 20;
 800050a:	2314      	movs	r3, #20
 800050c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLN = 192;
 800050e:	23c0      	movs	r3, #192	; 0xc0
 8000510:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000512:	2302      	movs	r3, #2
 8000514:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000516:	2304      	movs	r3, #4
 8000518:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800051a:	f107 0318 	add.w	r3, r7, #24
 800051e:	4618      	mov	r0, r3
 8000520:	f001 fdca 	bl	80020b8 <HAL_RCC_OscConfig>
 8000524:	4603      	mov	r3, r0
 8000526:	2b00      	cmp	r3, #0
 8000528:	d001      	beq.n	800052e <SystemClock_Config+0x58>
  {
    Error_Handler();
 800052a:	f000 f85d 	bl	80005e8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800052e:	230f      	movs	r3, #15
 8000530:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000532:	2302      	movs	r3, #2
 8000534:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000536:	2300      	movs	r3, #0
 8000538:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800053a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800053e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000540:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000544:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000546:	1d3b      	adds	r3, r7, #4
 8000548:	2103      	movs	r1, #3
 800054a:	4618      	mov	r0, r3
 800054c:	f002 f804 	bl	8002558 <HAL_RCC_ClockConfig>
 8000550:	4603      	mov	r3, r0
 8000552:	2b00      	cmp	r3, #0
 8000554:	d001      	beq.n	800055a <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000556:	f000 f847 	bl	80005e8 <Error_Handler>
  }
}
 800055a:	bf00      	nop
 800055c:	3748      	adds	r7, #72	; 0x48
 800055e:	46bd      	mov	sp, r7
 8000560:	bd80      	pop	{r7, pc}
	...

08000564 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000564:	b480      	push	{r7}
 8000566:	b085      	sub	sp, #20
 8000568:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800056a:	2300      	movs	r3, #0
 800056c:	60fb      	str	r3, [r7, #12]
 800056e:	4b1d      	ldr	r3, [pc, #116]	; (80005e4 <MX_GPIO_Init+0x80>)
 8000570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000572:	4a1c      	ldr	r2, [pc, #112]	; (80005e4 <MX_GPIO_Init+0x80>)
 8000574:	f043 0304 	orr.w	r3, r3, #4
 8000578:	6313      	str	r3, [r2, #48]	; 0x30
 800057a:	4b1a      	ldr	r3, [pc, #104]	; (80005e4 <MX_GPIO_Init+0x80>)
 800057c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800057e:	f003 0304 	and.w	r3, r3, #4
 8000582:	60fb      	str	r3, [r7, #12]
 8000584:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000586:	2300      	movs	r3, #0
 8000588:	60bb      	str	r3, [r7, #8]
 800058a:	4b16      	ldr	r3, [pc, #88]	; (80005e4 <MX_GPIO_Init+0x80>)
 800058c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800058e:	4a15      	ldr	r2, [pc, #84]	; (80005e4 <MX_GPIO_Init+0x80>)
 8000590:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000594:	6313      	str	r3, [r2, #48]	; 0x30
 8000596:	4b13      	ldr	r3, [pc, #76]	; (80005e4 <MX_GPIO_Init+0x80>)
 8000598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800059a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800059e:	60bb      	str	r3, [r7, #8]
 80005a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005a2:	2300      	movs	r3, #0
 80005a4:	607b      	str	r3, [r7, #4]
 80005a6:	4b0f      	ldr	r3, [pc, #60]	; (80005e4 <MX_GPIO_Init+0x80>)
 80005a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005aa:	4a0e      	ldr	r2, [pc, #56]	; (80005e4 <MX_GPIO_Init+0x80>)
 80005ac:	f043 0301 	orr.w	r3, r3, #1
 80005b0:	6313      	str	r3, [r2, #48]	; 0x30
 80005b2:	4b0c      	ldr	r3, [pc, #48]	; (80005e4 <MX_GPIO_Init+0x80>)
 80005b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005b6:	f003 0301 	and.w	r3, r3, #1
 80005ba:	607b      	str	r3, [r7, #4]
 80005bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005be:	2300      	movs	r3, #0
 80005c0:	603b      	str	r3, [r7, #0]
 80005c2:	4b08      	ldr	r3, [pc, #32]	; (80005e4 <MX_GPIO_Init+0x80>)
 80005c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005c6:	4a07      	ldr	r2, [pc, #28]	; (80005e4 <MX_GPIO_Init+0x80>)
 80005c8:	f043 0302 	orr.w	r3, r3, #2
 80005cc:	6313      	str	r3, [r2, #48]	; 0x30
 80005ce:	4b05      	ldr	r3, [pc, #20]	; (80005e4 <MX_GPIO_Init+0x80>)
 80005d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005d2:	f003 0302 	and.w	r3, r3, #2
 80005d6:	603b      	str	r3, [r7, #0]
 80005d8:	683b      	ldr	r3, [r7, #0]

}
 80005da:	bf00      	nop
 80005dc:	3714      	adds	r7, #20
 80005de:	46bd      	mov	sp, r7
 80005e0:	bc80      	pop	{r7}
 80005e2:	4770      	bx	lr
 80005e4:	40023800 	.word	0x40023800

080005e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005e8:	b480      	push	{r7}
 80005ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005ec:	b672      	cpsid	i
}
 80005ee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80005f0:	e7fe      	b.n	80005f0 <Error_Handler+0x8>
	...

080005f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005f4:	b480      	push	{r7}
 80005f6:	b083      	sub	sp, #12
 80005f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80005fa:	2300      	movs	r3, #0
 80005fc:	607b      	str	r3, [r7, #4]
 80005fe:	4b0f      	ldr	r3, [pc, #60]	; (800063c <HAL_MspInit+0x48>)
 8000600:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000602:	4a0e      	ldr	r2, [pc, #56]	; (800063c <HAL_MspInit+0x48>)
 8000604:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000608:	6453      	str	r3, [r2, #68]	; 0x44
 800060a:	4b0c      	ldr	r3, [pc, #48]	; (800063c <HAL_MspInit+0x48>)
 800060c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800060e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000612:	607b      	str	r3, [r7, #4]
 8000614:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000616:	2300      	movs	r3, #0
 8000618:	603b      	str	r3, [r7, #0]
 800061a:	4b08      	ldr	r3, [pc, #32]	; (800063c <HAL_MspInit+0x48>)
 800061c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800061e:	4a07      	ldr	r2, [pc, #28]	; (800063c <HAL_MspInit+0x48>)
 8000620:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000624:	6413      	str	r3, [r2, #64]	; 0x40
 8000626:	4b05      	ldr	r3, [pc, #20]	; (800063c <HAL_MspInit+0x48>)
 8000628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800062a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800062e:	603b      	str	r3, [r7, #0]
 8000630:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000632:	bf00      	nop
 8000634:	370c      	adds	r7, #12
 8000636:	46bd      	mov	sp, r7
 8000638:	bc80      	pop	{r7}
 800063a:	4770      	bx	lr
 800063c:	40023800 	.word	0x40023800

08000640 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000640:	b480      	push	{r7}
 8000642:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000644:	e7fe      	b.n	8000644 <NMI_Handler+0x4>

08000646 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000646:	b480      	push	{r7}
 8000648:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800064a:	e7fe      	b.n	800064a <HardFault_Handler+0x4>

0800064c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800064c:	b480      	push	{r7}
 800064e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000650:	e7fe      	b.n	8000650 <MemManage_Handler+0x4>

08000652 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000652:	b480      	push	{r7}
 8000654:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000656:	e7fe      	b.n	8000656 <BusFault_Handler+0x4>

08000658 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000658:	b480      	push	{r7}
 800065a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800065c:	e7fe      	b.n	800065c <UsageFault_Handler+0x4>

0800065e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800065e:	b480      	push	{r7}
 8000660:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000662:	bf00      	nop
 8000664:	46bd      	mov	sp, r7
 8000666:	bc80      	pop	{r7}
 8000668:	4770      	bx	lr

0800066a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800066a:	b480      	push	{r7}
 800066c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800066e:	bf00      	nop
 8000670:	46bd      	mov	sp, r7
 8000672:	bc80      	pop	{r7}
 8000674:	4770      	bx	lr

08000676 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000676:	b480      	push	{r7}
 8000678:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800067a:	bf00      	nop
 800067c:	46bd      	mov	sp, r7
 800067e:	bc80      	pop	{r7}
 8000680:	4770      	bx	lr

08000682 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000682:	b580      	push	{r7, lr}
 8000684:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000686:	f000 f949 	bl	800091c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800068a:	bf00      	nop
 800068c:	bd80      	pop	{r7, pc}

0800068e <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800068e:	b480      	push	{r7}
 8000690:	af00      	add	r7, sp, #0
	return 1;
 8000692:	2301      	movs	r3, #1
}
 8000694:	4618      	mov	r0, r3
 8000696:	46bd      	mov	sp, r7
 8000698:	bc80      	pop	{r7}
 800069a:	4770      	bx	lr

0800069c <_kill>:

int _kill(int pid, int sig)
{
 800069c:	b480      	push	{r7}
 800069e:	b083      	sub	sp, #12
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	6078      	str	r0, [r7, #4]
 80006a4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80006a6:	4b05      	ldr	r3, [pc, #20]	; (80006bc <_kill+0x20>)
 80006a8:	2216      	movs	r2, #22
 80006aa:	601a      	str	r2, [r3, #0]
	return -1;
 80006ac:	f04f 33ff 	mov.w	r3, #4294967295
}
 80006b0:	4618      	mov	r0, r3
 80006b2:	370c      	adds	r7, #12
 80006b4:	46bd      	mov	sp, r7
 80006b6:	bc80      	pop	{r7}
 80006b8:	4770      	bx	lr
 80006ba:	bf00      	nop
 80006bc:	200068e4 	.word	0x200068e4

080006c0 <_exit>:

void _exit (int status)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b082      	sub	sp, #8
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80006c8:	f04f 31ff 	mov.w	r1, #4294967295
 80006cc:	6878      	ldr	r0, [r7, #4]
 80006ce:	f7ff ffe5 	bl	800069c <_kill>
	while (1) {}		/* Make sure we hang here */
 80006d2:	e7fe      	b.n	80006d2 <_exit+0x12>

080006d4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b086      	sub	sp, #24
 80006d8:	af00      	add	r7, sp, #0
 80006da:	60f8      	str	r0, [r7, #12]
 80006dc:	60b9      	str	r1, [r7, #8]
 80006de:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80006e0:	2300      	movs	r3, #0
 80006e2:	617b      	str	r3, [r7, #20]
 80006e4:	e00a      	b.n	80006fc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80006e6:	f3af 8000 	nop.w
 80006ea:	4601      	mov	r1, r0
 80006ec:	68bb      	ldr	r3, [r7, #8]
 80006ee:	1c5a      	adds	r2, r3, #1
 80006f0:	60ba      	str	r2, [r7, #8]
 80006f2:	b2ca      	uxtb	r2, r1
 80006f4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80006f6:	697b      	ldr	r3, [r7, #20]
 80006f8:	3301      	adds	r3, #1
 80006fa:	617b      	str	r3, [r7, #20]
 80006fc:	697a      	ldr	r2, [r7, #20]
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	429a      	cmp	r2, r3
 8000702:	dbf0      	blt.n	80006e6 <_read+0x12>
	}

return len;
 8000704:	687b      	ldr	r3, [r7, #4]
}
 8000706:	4618      	mov	r0, r3
 8000708:	3718      	adds	r7, #24
 800070a:	46bd      	mov	sp, r7
 800070c:	bd80      	pop	{r7, pc}

0800070e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800070e:	b580      	push	{r7, lr}
 8000710:	b086      	sub	sp, #24
 8000712:	af00      	add	r7, sp, #0
 8000714:	60f8      	str	r0, [r7, #12]
 8000716:	60b9      	str	r1, [r7, #8]
 8000718:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800071a:	2300      	movs	r3, #0
 800071c:	617b      	str	r3, [r7, #20]
 800071e:	e009      	b.n	8000734 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000720:	68bb      	ldr	r3, [r7, #8]
 8000722:	1c5a      	adds	r2, r3, #1
 8000724:	60ba      	str	r2, [r7, #8]
 8000726:	781b      	ldrb	r3, [r3, #0]
 8000728:	4618      	mov	r0, r3
 800072a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800072e:	697b      	ldr	r3, [r7, #20]
 8000730:	3301      	adds	r3, #1
 8000732:	617b      	str	r3, [r7, #20]
 8000734:	697a      	ldr	r2, [r7, #20]
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	429a      	cmp	r2, r3
 800073a:	dbf1      	blt.n	8000720 <_write+0x12>
	}
	return len;
 800073c:	687b      	ldr	r3, [r7, #4]
}
 800073e:	4618      	mov	r0, r3
 8000740:	3718      	adds	r7, #24
 8000742:	46bd      	mov	sp, r7
 8000744:	bd80      	pop	{r7, pc}

08000746 <_close>:

int _close(int file)
{
 8000746:	b480      	push	{r7}
 8000748:	b083      	sub	sp, #12
 800074a:	af00      	add	r7, sp, #0
 800074c:	6078      	str	r0, [r7, #4]
	return -1;
 800074e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000752:	4618      	mov	r0, r3
 8000754:	370c      	adds	r7, #12
 8000756:	46bd      	mov	sp, r7
 8000758:	bc80      	pop	{r7}
 800075a:	4770      	bx	lr

0800075c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800075c:	b480      	push	{r7}
 800075e:	b083      	sub	sp, #12
 8000760:	af00      	add	r7, sp, #0
 8000762:	6078      	str	r0, [r7, #4]
 8000764:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000766:	683b      	ldr	r3, [r7, #0]
 8000768:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800076c:	605a      	str	r2, [r3, #4]
	return 0;
 800076e:	2300      	movs	r3, #0
}
 8000770:	4618      	mov	r0, r3
 8000772:	370c      	adds	r7, #12
 8000774:	46bd      	mov	sp, r7
 8000776:	bc80      	pop	{r7}
 8000778:	4770      	bx	lr

0800077a <_isatty>:

int _isatty(int file)
{
 800077a:	b480      	push	{r7}
 800077c:	b083      	sub	sp, #12
 800077e:	af00      	add	r7, sp, #0
 8000780:	6078      	str	r0, [r7, #4]
	return 1;
 8000782:	2301      	movs	r3, #1
}
 8000784:	4618      	mov	r0, r3
 8000786:	370c      	adds	r7, #12
 8000788:	46bd      	mov	sp, r7
 800078a:	bc80      	pop	{r7}
 800078c:	4770      	bx	lr

0800078e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800078e:	b480      	push	{r7}
 8000790:	b085      	sub	sp, #20
 8000792:	af00      	add	r7, sp, #0
 8000794:	60f8      	str	r0, [r7, #12]
 8000796:	60b9      	str	r1, [r7, #8]
 8000798:	607a      	str	r2, [r7, #4]
	return 0;
 800079a:	2300      	movs	r3, #0
}
 800079c:	4618      	mov	r0, r3
 800079e:	3714      	adds	r7, #20
 80007a0:	46bd      	mov	sp, r7
 80007a2:	bc80      	pop	{r7}
 80007a4:	4770      	bx	lr
	...

080007a8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80007a8:	b480      	push	{r7}
 80007aa:	b087      	sub	sp, #28
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80007b0:	4a14      	ldr	r2, [pc, #80]	; (8000804 <_sbrk+0x5c>)
 80007b2:	4b15      	ldr	r3, [pc, #84]	; (8000808 <_sbrk+0x60>)
 80007b4:	1ad3      	subs	r3, r2, r3
 80007b6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80007b8:	697b      	ldr	r3, [r7, #20]
 80007ba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80007bc:	4b13      	ldr	r3, [pc, #76]	; (800080c <_sbrk+0x64>)
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d102      	bne.n	80007ca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80007c4:	4b11      	ldr	r3, [pc, #68]	; (800080c <_sbrk+0x64>)
 80007c6:	4a12      	ldr	r2, [pc, #72]	; (8000810 <_sbrk+0x68>)
 80007c8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80007ca:	4b10      	ldr	r3, [pc, #64]	; (800080c <_sbrk+0x64>)
 80007cc:	681a      	ldr	r2, [r3, #0]
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	4413      	add	r3, r2
 80007d2:	693a      	ldr	r2, [r7, #16]
 80007d4:	429a      	cmp	r2, r3
 80007d6:	d205      	bcs.n	80007e4 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 80007d8:	4b0e      	ldr	r3, [pc, #56]	; (8000814 <_sbrk+0x6c>)
 80007da:	220c      	movs	r2, #12
 80007dc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80007de:	f04f 33ff 	mov.w	r3, #4294967295
 80007e2:	e009      	b.n	80007f8 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 80007e4:	4b09      	ldr	r3, [pc, #36]	; (800080c <_sbrk+0x64>)
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80007ea:	4b08      	ldr	r3, [pc, #32]	; (800080c <_sbrk+0x64>)
 80007ec:	681a      	ldr	r2, [r3, #0]
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	4413      	add	r3, r2
 80007f2:	4a06      	ldr	r2, [pc, #24]	; (800080c <_sbrk+0x64>)
 80007f4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80007f6:	68fb      	ldr	r3, [r7, #12]
}
 80007f8:	4618      	mov	r0, r3
 80007fa:	371c      	adds	r7, #28
 80007fc:	46bd      	mov	sp, r7
 80007fe:	bc80      	pop	{r7}
 8000800:	4770      	bx	lr
 8000802:	bf00      	nop
 8000804:	2001c000 	.word	0x2001c000
 8000808:	00000400 	.word	0x00000400
 800080c:	20000098 	.word	0x20000098
 8000810:	200068f8 	.word	0x200068f8
 8000814:	200068e4 	.word	0x200068e4

08000818 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000818:	b480      	push	{r7}
 800081a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800081c:	bf00      	nop
 800081e:	46bd      	mov	sp, r7
 8000820:	bc80      	pop	{r7}
 8000822:	4770      	bx	lr

08000824 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000824:	f8df d034 	ldr.w	sp, [pc, #52]	; 800085c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000828:	480d      	ldr	r0, [pc, #52]	; (8000860 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800082a:	490e      	ldr	r1, [pc, #56]	; (8000864 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800082c:	4a0e      	ldr	r2, [pc, #56]	; (8000868 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800082e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000830:	e002      	b.n	8000838 <LoopCopyDataInit>

08000832 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000832:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000834:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000836:	3304      	adds	r3, #4

08000838 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000838:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800083a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800083c:	d3f9      	bcc.n	8000832 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800083e:	4a0b      	ldr	r2, [pc, #44]	; (800086c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000840:	4c0b      	ldr	r4, [pc, #44]	; (8000870 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000842:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000844:	e001      	b.n	800084a <LoopFillZerobss>

08000846 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000846:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000848:	3204      	adds	r2, #4

0800084a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800084a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800084c:	d3fb      	bcc.n	8000846 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit
 800084e:	f7ff ffe3 	bl	8000818 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000852:	f00d f8bd 	bl	800d9d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000856:	f7ff fe31 	bl	80004bc <main>
  bx  lr
 800085a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800085c:	2001c000 	.word	0x2001c000
  ldr r0, =_sdata
 8000860:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000864:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8000868:	08010edc 	.word	0x08010edc
  ldr r2, =_sbss
 800086c:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8000870:	200068f4 	.word	0x200068f4

08000874 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000874:	e7fe      	b.n	8000874 <ADC_IRQHandler>
	...

08000878 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
   __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800087c:	4b0e      	ldr	r3, [pc, #56]	; (80008b8 <HAL_Init+0x40>)
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	4a0d      	ldr	r2, [pc, #52]	; (80008b8 <HAL_Init+0x40>)
 8000882:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000886:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
   __HAL_FLASH_DATA_CACHE_ENABLE();
 8000888:	4b0b      	ldr	r3, [pc, #44]	; (80008b8 <HAL_Init+0x40>)
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	4a0a      	ldr	r2, [pc, #40]	; (80008b8 <HAL_Init+0x40>)
 800088e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000892:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000894:	4b08      	ldr	r3, [pc, #32]	; (80008b8 <HAL_Init+0x40>)
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	4a07      	ldr	r2, [pc, #28]	; (80008b8 <HAL_Init+0x40>)
 800089a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800089e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008a0:	2003      	movs	r0, #3
 80008a2:	f000 f92b 	bl	8000afc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80008a6:	200f      	movs	r0, #15
 80008a8:	f000 f808 	bl	80008bc <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 80008ac:	f7ff fea2 	bl	80005f4 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 80008b0:	2300      	movs	r3, #0
}
 80008b2:	4618      	mov	r0, r3
 80008b4:	bd80      	pop	{r7, pc}
 80008b6:	bf00      	nop
 80008b8:	40023c00 	.word	0x40023c00

080008bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param  TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b082      	sub	sp, #8
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80008c4:	4b12      	ldr	r3, [pc, #72]	; (8000910 <HAL_InitTick+0x54>)
 80008c6:	681a      	ldr	r2, [r3, #0]
 80008c8:	4b12      	ldr	r3, [pc, #72]	; (8000914 <HAL_InitTick+0x58>)
 80008ca:	781b      	ldrb	r3, [r3, #0]
 80008cc:	4619      	mov	r1, r3
 80008ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80008d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80008da:	4618      	mov	r0, r3
 80008dc:	f000 f935 	bl	8000b4a <HAL_SYSTICK_Config>
 80008e0:	4603      	mov	r3, r0
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d001      	beq.n	80008ea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80008e6:	2301      	movs	r3, #1
 80008e8:	e00e      	b.n	8000908 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	2b0f      	cmp	r3, #15
 80008ee:	d80a      	bhi.n	8000906 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80008f0:	2200      	movs	r2, #0
 80008f2:	6879      	ldr	r1, [r7, #4]
 80008f4:	f04f 30ff 	mov.w	r0, #4294967295
 80008f8:	f000 f90b 	bl	8000b12 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80008fc:	4a06      	ldr	r2, [pc, #24]	; (8000918 <HAL_InitTick+0x5c>)
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000902:	2300      	movs	r3, #0
 8000904:	e000      	b.n	8000908 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000906:	2301      	movs	r3, #1
}
 8000908:	4618      	mov	r0, r3
 800090a:	3708      	adds	r7, #8
 800090c:	46bd      	mov	sp, r7
 800090e:	bd80      	pop	{r7, pc}
 8000910:	20000000 	.word	0x20000000
 8000914:	20000008 	.word	0x20000008
 8000918:	20000004 	.word	0x20000004

0800091c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800091c:	b480      	push	{r7}
 800091e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000920:	4b05      	ldr	r3, [pc, #20]	; (8000938 <HAL_IncTick+0x1c>)
 8000922:	781b      	ldrb	r3, [r3, #0]
 8000924:	461a      	mov	r2, r3
 8000926:	4b05      	ldr	r3, [pc, #20]	; (800093c <HAL_IncTick+0x20>)
 8000928:	681b      	ldr	r3, [r3, #0]
 800092a:	4413      	add	r3, r2
 800092c:	4a03      	ldr	r2, [pc, #12]	; (800093c <HAL_IncTick+0x20>)
 800092e:	6013      	str	r3, [r2, #0]
}
 8000930:	bf00      	nop
 8000932:	46bd      	mov	sp, r7
 8000934:	bc80      	pop	{r7}
 8000936:	4770      	bx	lr
 8000938:	20000008 	.word	0x20000008
 800093c:	20000220 	.word	0x20000220

08000940 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000940:	b480      	push	{r7}
 8000942:	af00      	add	r7, sp, #0
  return uwTick;
 8000944:	4b02      	ldr	r3, [pc, #8]	; (8000950 <HAL_GetTick+0x10>)
 8000946:	681b      	ldr	r3, [r3, #0]
}
 8000948:	4618      	mov	r0, r3
 800094a:	46bd      	mov	sp, r7
 800094c:	bc80      	pop	{r7}
 800094e:	4770      	bx	lr
 8000950:	20000220 	.word	0x20000220

08000954 <HAL_Delay>:
  *       implementations in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	b084      	sub	sp, #16
 8000958:	af00      	add	r7, sp, #0
 800095a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800095c:	f7ff fff0 	bl	8000940 <HAL_GetTick>
 8000960:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000966:	68fb      	ldr	r3, [r7, #12]
 8000968:	f1b3 3fff 	cmp.w	r3, #4294967295
 800096c:	d005      	beq.n	800097a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800096e:	4b0a      	ldr	r3, [pc, #40]	; (8000998 <HAL_Delay+0x44>)
 8000970:	781b      	ldrb	r3, [r3, #0]
 8000972:	461a      	mov	r2, r3
 8000974:	68fb      	ldr	r3, [r7, #12]
 8000976:	4413      	add	r3, r2
 8000978:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800097a:	bf00      	nop
 800097c:	f7ff ffe0 	bl	8000940 <HAL_GetTick>
 8000980:	4602      	mov	r2, r0
 8000982:	68bb      	ldr	r3, [r7, #8]
 8000984:	1ad3      	subs	r3, r2, r3
 8000986:	68fa      	ldr	r2, [r7, #12]
 8000988:	429a      	cmp	r2, r3
 800098a:	d8f7      	bhi.n	800097c <HAL_Delay+0x28>
  {
  }
}
 800098c:	bf00      	nop
 800098e:	bf00      	nop
 8000990:	3710      	adds	r7, #16
 8000992:	46bd      	mov	sp, r7
 8000994:	bd80      	pop	{r7, pc}
 8000996:	bf00      	nop
 8000998:	20000008 	.word	0x20000008

0800099c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800099c:	b480      	push	{r7}
 800099e:	b085      	sub	sp, #20
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	f003 0307 	and.w	r3, r3, #7
 80009aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80009ac:	4b0c      	ldr	r3, [pc, #48]	; (80009e0 <__NVIC_SetPriorityGrouping+0x44>)
 80009ae:	68db      	ldr	r3, [r3, #12]
 80009b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80009b2:	68ba      	ldr	r2, [r7, #8]
 80009b4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80009b8:	4013      	ands	r3, r2
 80009ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80009bc:	68fb      	ldr	r3, [r7, #12]
 80009be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80009c0:	68bb      	ldr	r3, [r7, #8]
 80009c2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80009c4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80009c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80009ce:	4a04      	ldr	r2, [pc, #16]	; (80009e0 <__NVIC_SetPriorityGrouping+0x44>)
 80009d0:	68bb      	ldr	r3, [r7, #8]
 80009d2:	60d3      	str	r3, [r2, #12]
}
 80009d4:	bf00      	nop
 80009d6:	3714      	adds	r7, #20
 80009d8:	46bd      	mov	sp, r7
 80009da:	bc80      	pop	{r7}
 80009dc:	4770      	bx	lr
 80009de:	bf00      	nop
 80009e0:	e000ed00 	.word	0xe000ed00

080009e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80009e4:	b480      	push	{r7}
 80009e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80009e8:	4b04      	ldr	r3, [pc, #16]	; (80009fc <__NVIC_GetPriorityGrouping+0x18>)
 80009ea:	68db      	ldr	r3, [r3, #12]
 80009ec:	0a1b      	lsrs	r3, r3, #8
 80009ee:	f003 0307 	and.w	r3, r3, #7
}
 80009f2:	4618      	mov	r0, r3
 80009f4:	46bd      	mov	sp, r7
 80009f6:	bc80      	pop	{r7}
 80009f8:	4770      	bx	lr
 80009fa:	bf00      	nop
 80009fc:	e000ed00 	.word	0xe000ed00

08000a00 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a00:	b480      	push	{r7}
 8000a02:	b083      	sub	sp, #12
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	4603      	mov	r3, r0
 8000a08:	6039      	str	r1, [r7, #0]
 8000a0a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	db0a      	blt.n	8000a2a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a14:	683b      	ldr	r3, [r7, #0]
 8000a16:	b2da      	uxtb	r2, r3
 8000a18:	490c      	ldr	r1, [pc, #48]	; (8000a4c <__NVIC_SetPriority+0x4c>)
 8000a1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a1e:	0112      	lsls	r2, r2, #4
 8000a20:	b2d2      	uxtb	r2, r2
 8000a22:	440b      	add	r3, r1
 8000a24:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a28:	e00a      	b.n	8000a40 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a2a:	683b      	ldr	r3, [r7, #0]
 8000a2c:	b2da      	uxtb	r2, r3
 8000a2e:	4908      	ldr	r1, [pc, #32]	; (8000a50 <__NVIC_SetPriority+0x50>)
 8000a30:	79fb      	ldrb	r3, [r7, #7]
 8000a32:	f003 030f 	and.w	r3, r3, #15
 8000a36:	3b04      	subs	r3, #4
 8000a38:	0112      	lsls	r2, r2, #4
 8000a3a:	b2d2      	uxtb	r2, r2
 8000a3c:	440b      	add	r3, r1
 8000a3e:	761a      	strb	r2, [r3, #24]
}
 8000a40:	bf00      	nop
 8000a42:	370c      	adds	r7, #12
 8000a44:	46bd      	mov	sp, r7
 8000a46:	bc80      	pop	{r7}
 8000a48:	4770      	bx	lr
 8000a4a:	bf00      	nop
 8000a4c:	e000e100 	.word	0xe000e100
 8000a50:	e000ed00 	.word	0xe000ed00

08000a54 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a54:	b480      	push	{r7}
 8000a56:	b089      	sub	sp, #36	; 0x24
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	60f8      	str	r0, [r7, #12]
 8000a5c:	60b9      	str	r1, [r7, #8]
 8000a5e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a60:	68fb      	ldr	r3, [r7, #12]
 8000a62:	f003 0307 	and.w	r3, r3, #7
 8000a66:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a68:	69fb      	ldr	r3, [r7, #28]
 8000a6a:	f1c3 0307 	rsb	r3, r3, #7
 8000a6e:	2b04      	cmp	r3, #4
 8000a70:	bf28      	it	cs
 8000a72:	2304      	movcs	r3, #4
 8000a74:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a76:	69fb      	ldr	r3, [r7, #28]
 8000a78:	3304      	adds	r3, #4
 8000a7a:	2b06      	cmp	r3, #6
 8000a7c:	d902      	bls.n	8000a84 <NVIC_EncodePriority+0x30>
 8000a7e:	69fb      	ldr	r3, [r7, #28]
 8000a80:	3b03      	subs	r3, #3
 8000a82:	e000      	b.n	8000a86 <NVIC_EncodePriority+0x32>
 8000a84:	2300      	movs	r3, #0
 8000a86:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a88:	f04f 32ff 	mov.w	r2, #4294967295
 8000a8c:	69bb      	ldr	r3, [r7, #24]
 8000a8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a92:	43da      	mvns	r2, r3
 8000a94:	68bb      	ldr	r3, [r7, #8]
 8000a96:	401a      	ands	r2, r3
 8000a98:	697b      	ldr	r3, [r7, #20]
 8000a9a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a9c:	f04f 31ff 	mov.w	r1, #4294967295
 8000aa0:	697b      	ldr	r3, [r7, #20]
 8000aa2:	fa01 f303 	lsl.w	r3, r1, r3
 8000aa6:	43d9      	mvns	r1, r3
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000aac:	4313      	orrs	r3, r2
         );
}
 8000aae:	4618      	mov	r0, r3
 8000ab0:	3724      	adds	r7, #36	; 0x24
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	bc80      	pop	{r7}
 8000ab6:	4770      	bx	lr

08000ab8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b082      	sub	sp, #8
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	3b01      	subs	r3, #1
 8000ac4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ac8:	d301      	bcc.n	8000ace <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000aca:	2301      	movs	r3, #1
 8000acc:	e00f      	b.n	8000aee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ace:	4a0a      	ldr	r2, [pc, #40]	; (8000af8 <SysTick_Config+0x40>)
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	3b01      	subs	r3, #1
 8000ad4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ad6:	210f      	movs	r1, #15
 8000ad8:	f04f 30ff 	mov.w	r0, #4294967295
 8000adc:	f7ff ff90 	bl	8000a00 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ae0:	4b05      	ldr	r3, [pc, #20]	; (8000af8 <SysTick_Config+0x40>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ae6:	4b04      	ldr	r3, [pc, #16]	; (8000af8 <SysTick_Config+0x40>)
 8000ae8:	2207      	movs	r2, #7
 8000aea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000aec:	2300      	movs	r3, #0
}
 8000aee:	4618      	mov	r0, r3
 8000af0:	3708      	adds	r7, #8
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bd80      	pop	{r7, pc}
 8000af6:	bf00      	nop
 8000af8:	e000e010 	.word	0xe000e010

08000afc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b082      	sub	sp, #8
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b04:	6878      	ldr	r0, [r7, #4]
 8000b06:	f7ff ff49 	bl	800099c <__NVIC_SetPriorityGrouping>
}
 8000b0a:	bf00      	nop
 8000b0c:	3708      	adds	r7, #8
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	bd80      	pop	{r7, pc}

08000b12 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b12:	b580      	push	{r7, lr}
 8000b14:	b086      	sub	sp, #24
 8000b16:	af00      	add	r7, sp, #0
 8000b18:	4603      	mov	r3, r0
 8000b1a:	60b9      	str	r1, [r7, #8]
 8000b1c:	607a      	str	r2, [r7, #4]
 8000b1e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000b20:	2300      	movs	r3, #0
 8000b22:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b24:	f7ff ff5e 	bl	80009e4 <__NVIC_GetPriorityGrouping>
 8000b28:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b2a:	687a      	ldr	r2, [r7, #4]
 8000b2c:	68b9      	ldr	r1, [r7, #8]
 8000b2e:	6978      	ldr	r0, [r7, #20]
 8000b30:	f7ff ff90 	bl	8000a54 <NVIC_EncodePriority>
 8000b34:	4602      	mov	r2, r0
 8000b36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b3a:	4611      	mov	r1, r2
 8000b3c:	4618      	mov	r0, r3
 8000b3e:	f7ff ff5f 	bl	8000a00 <__NVIC_SetPriority>
}
 8000b42:	bf00      	nop
 8000b44:	3718      	adds	r7, #24
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bd80      	pop	{r7, pc}

08000b4a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b4a:	b580      	push	{r7, lr}
 8000b4c:	b082      	sub	sp, #8
 8000b4e:	af00      	add	r7, sp, #0
 8000b50:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b52:	6878      	ldr	r0, [r7, #4]
 8000b54:	f7ff ffb0 	bl	8000ab8 <SysTick_Config>
 8000b58:	4603      	mov	r3, r0
}
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	3708      	adds	r7, #8
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bd80      	pop	{r7, pc}
	...

08000b64 <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b088      	sub	sp, #32
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0U, phyreg = 0U;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	61fb      	str	r3, [r7, #28]
 8000b70:	2300      	movs	r3, #0
 8000b72:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000U;
 8000b74:	4ba3      	ldr	r3, [pc, #652]	; (8000e04 <HAL_ETH_Init+0x2a0>)
 8000b76:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0U;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	613b      	str	r3, [r7, #16]

  /* Check the ETH peripheral state */
  if (heth == NULL)
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d101      	bne.n	8000b8a <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 8000b86:	2301      	movs	r3, #1
 8000b88:	e173      	b.n	8000e72 <HAL_ETH_Init+0x30e>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));

  if (heth->State == HAL_ETH_STATE_RESET)
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000b90:	b2db      	uxtb	r3, r3
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d106      	bne.n	8000ba4 <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	2200      	movs	r2, #0
 8000b9a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8000b9e:	6878      	ldr	r0, [r7, #4]
 8000ba0:	f001 fed8 	bl	8002954 <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	60bb      	str	r3, [r7, #8]
 8000ba8:	4b97      	ldr	r3, [pc, #604]	; (8000e08 <HAL_ETH_Init+0x2a4>)
 8000baa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bac:	4a96      	ldr	r2, [pc, #600]	; (8000e08 <HAL_ETH_Init+0x2a4>)
 8000bae:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000bb2:	6453      	str	r3, [r2, #68]	; 0x44
 8000bb4:	4b94      	ldr	r3, [pc, #592]	; (8000e08 <HAL_ETH_Init+0x2a4>)
 8000bb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bb8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000bbc:	60bb      	str	r3, [r7, #8]
 8000bbe:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8000bc0:	4b92      	ldr	r3, [pc, #584]	; (8000e0c <HAL_ETH_Init+0x2a8>)
 8000bc2:	685b      	ldr	r3, [r3, #4]
 8000bc4:	4a91      	ldr	r2, [pc, #580]	; (8000e0c <HAL_ETH_Init+0x2a8>)
 8000bc6:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8000bca:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8000bcc:	4b8f      	ldr	r3, [pc, #572]	; (8000e0c <HAL_ETH_Init+0x2a8>)
 8000bce:	685a      	ldr	r2, [r3, #4]
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	6a1b      	ldr	r3, [r3, #32]
 8000bd4:	498d      	ldr	r1, [pc, #564]	; (8000e0c <HAL_ETH_Init+0x2a8>)
 8000bd6:	4313      	orrs	r3, r2
 8000bd8:	604b      	str	r3, [r1, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000be2:	681a      	ldr	r2, [r3, #0]
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	f042 0201 	orr.w	r2, r2, #1
 8000bec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000bf0:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000bf2:	f7ff fea5 	bl	8000940 <HAL_GetTick>
 8000bf6:	6178      	str	r0, [r7, #20]

  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8000bf8:	e011      	b.n	8000c1e <HAL_ETH_Init+0xba>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > ETH_TIMEOUT_SWRESET)
 8000bfa:	f7ff fea1 	bl	8000940 <HAL_GetTick>
 8000bfe:	4602      	mov	r2, r0
 8000c00:	697b      	ldr	r3, [r7, #20]
 8000c02:	1ad3      	subs	r3, r2, r3
 8000c04:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000c08:	d909      	bls.n	8000c1e <HAL_ETH_Init+0xba>
    {
      heth->State = HAL_ETH_STATE_TIMEOUT;
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	2203      	movs	r2, #3
 8000c0e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	2200      	movs	r2, #0
 8000c16:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are
         not available, please check your external PHY or the IO configuration */
      return HAL_TIMEOUT;
 8000c1a:	2303      	movs	r3, #3
 8000c1c:	e129      	b.n	8000e72 <HAL_ETH_Init+0x30e>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	f003 0301 	and.w	r3, r3, #1
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d1e4      	bne.n	8000bfa <HAL_ETH_Init+0x96>
    }
  }

  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = (heth->Instance)->MACMIIAR;
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	691b      	ldr	r3, [r3, #16]
 8000c36:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg1 &= ETH_MACMIIAR_CR_MASK;
 8000c38:	69fb      	ldr	r3, [r7, #28]
 8000c3a:	f023 031c 	bic.w	r3, r3, #28
 8000c3e:	61fb      	str	r3, [r7, #28]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8000c40:	f001 fe2c 	bl	800289c <HAL_RCC_GetHCLKFreq>
 8000c44:	61b8      	str	r0, [r7, #24]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8000c46:	69bb      	ldr	r3, [r7, #24]
 8000c48:	4a71      	ldr	r2, [pc, #452]	; (8000e10 <HAL_ETH_Init+0x2ac>)
 8000c4a:	4293      	cmp	r3, r2
 8000c4c:	d908      	bls.n	8000c60 <HAL_ETH_Init+0xfc>
 8000c4e:	69bb      	ldr	r3, [r7, #24]
 8000c50:	4a70      	ldr	r2, [pc, #448]	; (8000e14 <HAL_ETH_Init+0x2b0>)
 8000c52:	4293      	cmp	r3, r2
 8000c54:	d804      	bhi.n	8000c60 <HAL_ETH_Init+0xfc>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8000c56:	69fb      	ldr	r3, [r7, #28]
 8000c58:	f043 0308 	orr.w	r3, r3, #8
 8000c5c:	61fb      	str	r3, [r7, #28]
 8000c5e:	e01a      	b.n	8000c96 <HAL_ETH_Init+0x132>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 8000c60:	69bb      	ldr	r3, [r7, #24]
 8000c62:	4a6c      	ldr	r2, [pc, #432]	; (8000e14 <HAL_ETH_Init+0x2b0>)
 8000c64:	4293      	cmp	r3, r2
 8000c66:	d908      	bls.n	8000c7a <HAL_ETH_Init+0x116>
 8000c68:	69bb      	ldr	r3, [r7, #24]
 8000c6a:	4a66      	ldr	r2, [pc, #408]	; (8000e04 <HAL_ETH_Init+0x2a0>)
 8000c6c:	4293      	cmp	r3, r2
 8000c6e:	d204      	bcs.n	8000c7a <HAL_ETH_Init+0x116>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8000c70:	69fb      	ldr	r3, [r7, #28]
 8000c72:	f043 030c 	orr.w	r3, r3, #12
 8000c76:	61fb      	str	r3, [r7, #28]
 8000c78:	e00d      	b.n	8000c96 <HAL_ETH_Init+0x132>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 8000c7a:	69bb      	ldr	r3, [r7, #24]
 8000c7c:	4a61      	ldr	r2, [pc, #388]	; (8000e04 <HAL_ETH_Init+0x2a0>)
 8000c7e:	4293      	cmp	r3, r2
 8000c80:	d303      	bcc.n	8000c8a <HAL_ETH_Init+0x126>
 8000c82:	69bb      	ldr	r3, [r7, #24]
 8000c84:	4a64      	ldr	r2, [pc, #400]	; (8000e18 <HAL_ETH_Init+0x2b4>)
 8000c86:	4293      	cmp	r3, r2
 8000c88:	d904      	bls.n	8000c94 <HAL_ETH_Init+0x130>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else /* ((hclk >= 100000000)&&(hclk < 120000000)) */
  {
    /* CSR Clock Range between 100-120 MHz */
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8000c8a:	69fb      	ldr	r3, [r7, #28]
 8000c8c:	f043 0304 	orr.w	r3, r3, #4
 8000c90:	61fb      	str	r3, [r7, #28]
 8000c92:	e000      	b.n	8000c96 <HAL_ETH_Init+0x132>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8000c94:	bf00      	nop
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg1;
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	69fa      	ldr	r2, [r7, #28]
 8000c9c:	611a      	str	r2, [r3, #16]

  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if ((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8000c9e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000ca2:	2100      	movs	r1, #0
 8000ca4:	6878      	ldr	r0, [r7, #4]
 8000ca6:	f000 fb92 	bl	80013ce <HAL_ETH_WritePHYRegister>
 8000caa:	4603      	mov	r3, r0
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d00b      	beq.n	8000cc8 <HAL_ETH_Init+0x164>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 8000cb0:	2301      	movs	r3, #1
 8000cb2:	613b      	str	r3, [r7, #16]

    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 8000cb4:	6939      	ldr	r1, [r7, #16]
 8000cb6:	6878      	ldr	r0, [r7, #4]
 8000cb8:	f000 fd48 	bl	800174c <ETH_MACDMAConfig>

    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	2201      	movs	r2, #1
 8000cc0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    /* Return HAL_ERROR */
    return HAL_ERROR;
 8000cc4:	2301      	movs	r3, #1
 8000cc6:	e0d4      	b.n	8000e72 <HAL_ETH_Init+0x30e>
  }

  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 8000cc8:	20ff      	movs	r0, #255	; 0xff
 8000cca:	f7ff fe43 	bl	8000954 <HAL_Delay>

  if ((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	685b      	ldr	r3, [r3, #4]
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	f000 80a2 	beq.w	8000e1c <HAL_ETH_Init+0x2b8>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8000cd8:	f7ff fe32 	bl	8000940 <HAL_GetTick>
 8000cdc:	6178      	str	r0, [r7, #20]

    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8000cde:	f107 030c 	add.w	r3, r7, #12
 8000ce2:	461a      	mov	r2, r3
 8000ce4:	2101      	movs	r1, #1
 8000ce6:	6878      	ldr	r0, [r7, #4]
 8000ce8:	f000 fb09 	bl	80012fe <HAL_ETH_ReadPHYRegister>

      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > ETH_TIMEOUT_LINKED_STATE)
 8000cec:	f7ff fe28 	bl	8000940 <HAL_GetTick>
 8000cf0:	4602      	mov	r2, r0
 8000cf2:	697b      	ldr	r3, [r7, #20]
 8000cf4:	1ad3      	subs	r3, r2, r3
 8000cf6:	f241 3288 	movw	r2, #5000	; 0x1388
 8000cfa:	4293      	cmp	r3, r2
 8000cfc:	d90f      	bls.n	8000d1e <HAL_ETH_Init+0x1ba>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8000cfe:	2301      	movs	r3, #1
 8000d00:	613b      	str	r3, [r7, #16]

        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8000d02:	6939      	ldr	r1, [r7, #16]
 8000d04:	6878      	ldr	r0, [r7, #4]
 8000d06:	f000 fd21 	bl	800174c <ETH_MACDMAConfig>

        heth->State = HAL_ETH_STATE_READY;
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	2201      	movs	r2, #1
 8000d0e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	2200      	movs	r2, #0
 8000d16:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        return HAL_TIMEOUT;
 8000d1a:	2303      	movs	r3, #3
 8000d1c:	e0a9      	b.n	8000e72 <HAL_ETH_Init+0x30e>
      }
    }
    while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 8000d1e:	68fb      	ldr	r3, [r7, #12]
 8000d20:	f003 0304 	and.w	r3, r3, #4
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d0da      	beq.n	8000cde <HAL_ETH_Init+0x17a>


    /* Enable Auto-Negotiation */
    if ((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 8000d28:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000d2c:	2100      	movs	r1, #0
 8000d2e:	6878      	ldr	r0, [r7, #4]
 8000d30:	f000 fb4d 	bl	80013ce <HAL_ETH_WritePHYRegister>
 8000d34:	4603      	mov	r3, r0
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d00b      	beq.n	8000d52 <HAL_ETH_Init+0x1ee>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8000d3a:	2301      	movs	r3, #1
 8000d3c:	613b      	str	r3, [r7, #16]

      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8000d3e:	6939      	ldr	r1, [r7, #16]
 8000d40:	6878      	ldr	r0, [r7, #4]
 8000d42:	f000 fd03 	bl	800174c <ETH_MACDMAConfig>

      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	2201      	movs	r2, #1
 8000d4a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

      /* Return HAL_ERROR */
      return HAL_ERROR;
 8000d4e:	2301      	movs	r3, #1
 8000d50:	e08f      	b.n	8000e72 <HAL_ETH_Init+0x30e>
    }

    /* Get tick */
    tickstart = HAL_GetTick();
 8000d52:	f7ff fdf5 	bl	8000940 <HAL_GetTick>
 8000d56:	6178      	str	r0, [r7, #20]

    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8000d58:	f107 030c 	add.w	r3, r7, #12
 8000d5c:	461a      	mov	r2, r3
 8000d5e:	2101      	movs	r1, #1
 8000d60:	6878      	ldr	r0, [r7, #4]
 8000d62:	f000 facc 	bl	80012fe <HAL_ETH_ReadPHYRegister>

      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8000d66:	f7ff fdeb 	bl	8000940 <HAL_GetTick>
 8000d6a:	4602      	mov	r2, r0
 8000d6c:	697b      	ldr	r3, [r7, #20]
 8000d6e:	1ad3      	subs	r3, r2, r3
 8000d70:	f241 3288 	movw	r2, #5000	; 0x1388
 8000d74:	4293      	cmp	r3, r2
 8000d76:	d90f      	bls.n	8000d98 <HAL_ETH_Init+0x234>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8000d78:	2301      	movs	r3, #1
 8000d7a:	613b      	str	r3, [r7, #16]

        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8000d7c:	6939      	ldr	r1, [r7, #16]
 8000d7e:	6878      	ldr	r0, [r7, #4]
 8000d80:	f000 fce4 	bl	800174c <ETH_MACDMAConfig>

        heth->State = HAL_ETH_STATE_READY;
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	2201      	movs	r2, #1
 8000d88:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	2200      	movs	r2, #0
 8000d90:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        return HAL_TIMEOUT;
 8000d94:	2303      	movs	r3, #3
 8000d96:	e06c      	b.n	8000e72 <HAL_ETH_Init+0x30e>
      }

    }
    while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8000d98:	68fb      	ldr	r3, [r7, #12]
 8000d9a:	f003 0320 	and.w	r3, r3, #32
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d0da      	beq.n	8000d58 <HAL_ETH_Init+0x1f4>

    /* Read the result of the auto-negotiation */
    if ((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8000da2:	f107 030c 	add.w	r3, r7, #12
 8000da6:	461a      	mov	r2, r3
 8000da8:	2110      	movs	r1, #16
 8000daa:	6878      	ldr	r0, [r7, #4]
 8000dac:	f000 faa7 	bl	80012fe <HAL_ETH_ReadPHYRegister>
 8000db0:	4603      	mov	r3, r0
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d00b      	beq.n	8000dce <HAL_ETH_Init+0x26a>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8000db6:	2301      	movs	r3, #1
 8000db8:	613b      	str	r3, [r7, #16]

      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8000dba:	6939      	ldr	r1, [r7, #16]
 8000dbc:	6878      	ldr	r0, [r7, #4]
 8000dbe:	f000 fcc5 	bl	800174c <ETH_MACDMAConfig>

      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	2201      	movs	r2, #1
 8000dc6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

      /* Return HAL_ERROR */
      return HAL_ERROR;
 8000dca:	2301      	movs	r3, #1
 8000dcc:	e051      	b.n	8000e72 <HAL_ETH_Init+0x30e>
    }

    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if ((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8000dce:	68fb      	ldr	r3, [r7, #12]
 8000dd0:	f003 0304 	and.w	r3, r3, #4
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d004      	beq.n	8000de2 <HAL_ETH_Init+0x27e>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000dde:	60da      	str	r2, [r3, #12]
 8000de0:	e002      	b.n	8000de8 <HAL_ETH_Init+0x284>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	2200      	movs	r2, #0
 8000de6:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if ((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 8000de8:	68fb      	ldr	r3, [r7, #12]
 8000dea:	f003 0302 	and.w	r3, r3, #2
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d003      	beq.n	8000dfa <HAL_ETH_Init+0x296>
    {
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M;
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	2200      	movs	r2, #0
 8000df6:	609a      	str	r2, [r3, #8]
 8000df8:	e032      	b.n	8000e60 <HAL_ETH_Init+0x2fc>
    }
    else
    {
      /* Set Ethernet speed to 100M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_100M;
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000e00:	609a      	str	r2, [r3, #8]
 8000e02:	e02d      	b.n	8000e60 <HAL_ETH_Init+0x2fc>
 8000e04:	03938700 	.word	0x03938700
 8000e08:	40023800 	.word	0x40023800
 8000e0c:	40013800 	.word	0x40013800
 8000e10:	01312cff 	.word	0x01312cff
 8000e14:	02160ebf 	.word	0x02160ebf
 8000e18:	05f5e0ff 	.word	0x05f5e0ff
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));

    /* Set MAC Speed and Duplex Mode */
    if (HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	68db      	ldr	r3, [r3, #12]
 8000e20:	08db      	lsrs	r3, r3, #3
 8000e22:	b29a      	uxth	r2, r3
                                                 (uint16_t)((heth->Init).Speed >> 1))) != HAL_OK)
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	689b      	ldr	r3, [r3, #8]
 8000e28:	085b      	lsrs	r3, r3, #1
 8000e2a:	b29b      	uxth	r3, r3
    if (HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 8000e2c:	4313      	orrs	r3, r2
 8000e2e:	b29b      	uxth	r3, r3
 8000e30:	461a      	mov	r2, r3
 8000e32:	2100      	movs	r1, #0
 8000e34:	6878      	ldr	r0, [r7, #4]
 8000e36:	f000 faca 	bl	80013ce <HAL_ETH_WritePHYRegister>
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d00b      	beq.n	8000e58 <HAL_ETH_Init+0x2f4>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8000e40:	2301      	movs	r3, #1
 8000e42:	613b      	str	r3, [r7, #16]

      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8000e44:	6939      	ldr	r1, [r7, #16]
 8000e46:	6878      	ldr	r0, [r7, #4]
 8000e48:	f000 fc80 	bl	800174c <ETH_MACDMAConfig>

      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	2201      	movs	r2, #1
 8000e50:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

      /* Return HAL_ERROR */
      return HAL_ERROR;
 8000e54:	2301      	movs	r3, #1
 8000e56:	e00c      	b.n	8000e72 <HAL_ETH_Init+0x30e>
    }

    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 8000e58:	f640 70ff 	movw	r0, #4095	; 0xfff
 8000e5c:	f7ff fd7a 	bl	8000954 <HAL_Delay>
  }

  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 8000e60:	6939      	ldr	r1, [r7, #16]
 8000e62:	6878      	ldr	r0, [r7, #4]
 8000e64:	f000 fc72 	bl	800174c <ETH_MACDMAConfig>

  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	2201      	movs	r2, #1
 8000e6c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Return function status */
  return HAL_OK;
 8000e70:	2300      	movs	r3, #0
}
 8000e72:	4618      	mov	r0, r3
 8000e74:	3720      	adds	r7, #32
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bd80      	pop	{r7, pc}
 8000e7a:	bf00      	nop

08000e7c <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff Pointer to the first TxBuffer list
  * @param  TxBuffCount Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	b087      	sub	sp, #28
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	60f8      	str	r0, [r7, #12]
 8000e84:	60b9      	str	r1, [r7, #8]
 8000e86:	607a      	str	r2, [r7, #4]
 8000e88:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;

  /* Process Locked */
  __HAL_LOCK(heth);
 8000e8e:	68fb      	ldr	r3, [r7, #12]
 8000e90:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000e94:	2b01      	cmp	r3, #1
 8000e96:	d101      	bne.n	8000e9c <HAL_ETH_DMATxDescListInit+0x20>
 8000e98:	2302      	movs	r3, #2
 8000e9a:	e052      	b.n	8000f42 <HAL_ETH_DMATxDescListInit+0xc6>
 8000e9c:	68fb      	ldr	r3, [r7, #12]
 8000e9e:	2201      	movs	r2, #1
 8000ea0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8000ea4:	68fb      	ldr	r3, [r7, #12]
 8000ea6:	2202      	movs	r2, #2
 8000ea8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 8000eac:	68fb      	ldr	r3, [r7, #12]
 8000eae:	68ba      	ldr	r2, [r7, #8]
 8000eb0:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0U; i < TxBuffCount; i++)
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	617b      	str	r3, [r7, #20]
 8000eb6:	e030      	b.n	8000f1a <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the member (i) of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 8000eb8:	697b      	ldr	r3, [r7, #20]
 8000eba:	015b      	lsls	r3, r3, #5
 8000ebc:	68ba      	ldr	r2, [r7, #8]
 8000ebe:	4413      	add	r3, r2
 8000ec0:	613b      	str	r3, [r7, #16]

    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;
 8000ec2:	693b      	ldr	r3, [r7, #16]
 8000ec4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000ec8:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i * ETH_TX_BUF_SIZE]);
 8000eca:	697b      	ldr	r3, [r7, #20]
 8000ecc:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000ed0:	fb02 f303 	mul.w	r3, r2, r3
 8000ed4:	687a      	ldr	r2, [r7, #4]
 8000ed6:	4413      	add	r3, r2
 8000ed8:	461a      	mov	r2, r3
 8000eda:	693b      	ldr	r3, [r7, #16]
 8000edc:	609a      	str	r2, [r3, #8]

    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8000ede:	68fb      	ldr	r3, [r7, #12]
 8000ee0:	69db      	ldr	r3, [r3, #28]
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d105      	bne.n	8000ef2 <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 8000ee6:	693b      	ldr	r3, [r7, #16]
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8000eee:	693b      	ldr	r3, [r7, #16]
 8000ef0:	601a      	str	r2, [r3, #0]
    }

    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if (i < (TxBuffCount - 1))
 8000ef2:	683b      	ldr	r3, [r7, #0]
 8000ef4:	3b01      	subs	r3, #1
 8000ef6:	697a      	ldr	r2, [r7, #20]
 8000ef8:	429a      	cmp	r2, r3
 8000efa:	d208      	bcs.n	8000f0e <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab + i + 1);
 8000efc:	697b      	ldr	r3, [r7, #20]
 8000efe:	3301      	adds	r3, #1
 8000f00:	015b      	lsls	r3, r3, #5
 8000f02:	68ba      	ldr	r2, [r7, #8]
 8000f04:	4413      	add	r3, r2
 8000f06:	461a      	mov	r2, r3
 8000f08:	693b      	ldr	r3, [r7, #16]
 8000f0a:	60da      	str	r2, [r3, #12]
 8000f0c:	e002      	b.n	8000f14 <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;
 8000f0e:	68ba      	ldr	r2, [r7, #8]
 8000f10:	693b      	ldr	r3, [r7, #16]
 8000f12:	60da      	str	r2, [r3, #12]
  for (i = 0U; i < TxBuffCount; i++)
 8000f14:	697b      	ldr	r3, [r7, #20]
 8000f16:	3301      	adds	r3, #1
 8000f18:	617b      	str	r3, [r7, #20]
 8000f1a:	697a      	ldr	r2, [r7, #20]
 8000f1c:	683b      	ldr	r3, [r7, #0]
 8000f1e:	429a      	cmp	r2, r3
 8000f20:	d3ca      	bcc.n	8000eb8 <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }

  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 8000f22:	68fb      	ldr	r3, [r7, #12]
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	68ba      	ldr	r2, [r7, #8]
 8000f28:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000f2c:	3310      	adds	r3, #16
 8000f2e:	601a      	str	r2, [r3, #0]

  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	2201      	movs	r2, #1
 8000f34:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8000f38:	68fb      	ldr	r3, [r7, #12]
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Return function status */
  return HAL_OK;
 8000f40:	2300      	movs	r3, #0
}
 8000f42:	4618      	mov	r0, r3
 8000f44:	371c      	adds	r7, #28
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bc80      	pop	{r7}
 8000f4a:	4770      	bx	lr

08000f4c <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff Pointer to the first RxBuffer list
  * @param  RxBuffCount Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	b087      	sub	sp, #28
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	60f8      	str	r0, [r7, #12]
 8000f54:	60b9      	str	r1, [r7, #8]
 8000f56:	607a      	str	r2, [r7, #4]
 8000f58:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;

  /* Process Locked */
  __HAL_LOCK(heth);
 8000f5e:	68fb      	ldr	r3, [r7, #12]
 8000f60:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000f64:	2b01      	cmp	r3, #1
 8000f66:	d101      	bne.n	8000f6c <HAL_ETH_DMARxDescListInit+0x20>
 8000f68:	2302      	movs	r3, #2
 8000f6a:	e056      	b.n	800101a <HAL_ETH_DMARxDescListInit+0xce>
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	2201      	movs	r2, #1
 8000f70:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8000f74:	68fb      	ldr	r3, [r7, #12]
 8000f76:	2202      	movs	r2, #2
 8000f78:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab;
 8000f7c:	68fb      	ldr	r3, [r7, #12]
 8000f7e:	68ba      	ldr	r2, [r7, #8]
 8000f80:	629a      	str	r2, [r3, #40]	; 0x28

  /* Fill each DMARxDesc descriptor with the right values */
  for (i = 0U; i < RxBuffCount; i++)
 8000f82:	2300      	movs	r3, #0
 8000f84:	617b      	str	r3, [r7, #20]
 8000f86:	e034      	b.n	8000ff2 <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the member (i) of the Rx Desc list */
    DMARxDesc = DMARxDescTab + i;
 8000f88:	697b      	ldr	r3, [r7, #20]
 8000f8a:	015b      	lsls	r3, r3, #5
 8000f8c:	68ba      	ldr	r2, [r7, #8]
 8000f8e:	4413      	add	r3, r2
 8000f90:	613b      	str	r3, [r7, #16]

    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 8000f92:	693b      	ldr	r3, [r7, #16]
 8000f94:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8000f98:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8000f9a:	693b      	ldr	r3, [r7, #16]
 8000f9c:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8000fa0:	605a      	str	r2, [r3, #4]

    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i * ETH_RX_BUF_SIZE]);
 8000fa2:	697b      	ldr	r3, [r7, #20]
 8000fa4:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000fa8:	fb02 f303 	mul.w	r3, r2, r3
 8000fac:	687a      	ldr	r2, [r7, #4]
 8000fae:	4413      	add	r3, r2
 8000fb0:	461a      	mov	r2, r3
 8000fb2:	693b      	ldr	r3, [r7, #16]
 8000fb4:	609a      	str	r2, [r3, #8]

    if ((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8000fb6:	68fb      	ldr	r3, [r7, #12]
 8000fb8:	699b      	ldr	r3, [r3, #24]
 8000fba:	2b01      	cmp	r3, #1
 8000fbc:	d105      	bne.n	8000fca <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 8000fbe:	693b      	ldr	r3, [r7, #16]
 8000fc0:	685b      	ldr	r3, [r3, #4]
 8000fc2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8000fc6:	693b      	ldr	r3, [r7, #16]
 8000fc8:	605a      	str	r2, [r3, #4]
    }

    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if (i < (RxBuffCount - 1U))
 8000fca:	683b      	ldr	r3, [r7, #0]
 8000fcc:	3b01      	subs	r3, #1
 8000fce:	697a      	ldr	r2, [r7, #20]
 8000fd0:	429a      	cmp	r2, r3
 8000fd2:	d208      	bcs.n	8000fe6 <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab + i + 1U);
 8000fd4:	697b      	ldr	r3, [r7, #20]
 8000fd6:	3301      	adds	r3, #1
 8000fd8:	015b      	lsls	r3, r3, #5
 8000fda:	68ba      	ldr	r2, [r7, #8]
 8000fdc:	4413      	add	r3, r2
 8000fde:	461a      	mov	r2, r3
 8000fe0:	693b      	ldr	r3, [r7, #16]
 8000fe2:	60da      	str	r2, [r3, #12]
 8000fe4:	e002      	b.n	8000fec <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab);
 8000fe6:	68ba      	ldr	r2, [r7, #8]
 8000fe8:	693b      	ldr	r3, [r7, #16]
 8000fea:	60da      	str	r2, [r3, #12]
  for (i = 0U; i < RxBuffCount; i++)
 8000fec:	697b      	ldr	r3, [r7, #20]
 8000fee:	3301      	adds	r3, #1
 8000ff0:	617b      	str	r3, [r7, #20]
 8000ff2:	697a      	ldr	r2, [r7, #20]
 8000ff4:	683b      	ldr	r3, [r7, #0]
 8000ff6:	429a      	cmp	r2, r3
 8000ff8:	d3c6      	bcc.n	8000f88 <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }

  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 8000ffa:	68fb      	ldr	r3, [r7, #12]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	68ba      	ldr	r2, [r7, #8]
 8001000:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001004:	330c      	adds	r3, #12
 8001006:	601a      	str	r2, [r3, #0]

  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	2201      	movs	r2, #1
 800100c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	2200      	movs	r2, #0
 8001014:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Return function status */
  return HAL_OK;
 8001018:	2300      	movs	r3, #0
}
 800101a:	4618      	mov	r0, r3
 800101c:	371c      	adds	r7, #28
 800101e:	46bd      	mov	sp, r7
 8001020:	bc80      	pop	{r7}
 8001022:	4770      	bx	lr

08001024 <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 8001024:	b480      	push	{r7}
 8001026:	b087      	sub	sp, #28
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
 800102c:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0U, size = 0U, i = 0U;
 800102e:	2300      	movs	r3, #0
 8001030:	617b      	str	r3, [r7, #20]
 8001032:	2300      	movs	r3, #0
 8001034:	60fb      	str	r3, [r7, #12]
 8001036:	2300      	movs	r3, #0
 8001038:	613b      	str	r3, [r7, #16]

  /* Process Locked */
  __HAL_LOCK(heth);
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001040:	2b01      	cmp	r3, #1
 8001042:	d101      	bne.n	8001048 <HAL_ETH_TransmitFrame+0x24>
 8001044:	2302      	movs	r3, #2
 8001046:	e0cd      	b.n	80011e4 <HAL_ETH_TransmitFrame+0x1c0>
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	2201      	movs	r2, #1
 800104c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	2202      	movs	r2, #2
 8001054:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  if (FrameLength == 0U)
 8001058:	683b      	ldr	r3, [r7, #0]
 800105a:	2b00      	cmp	r3, #0
 800105c:	d109      	bne.n	8001072 <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	2201      	movs	r2, #1
 8001062:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	2200      	movs	r2, #0
 800106a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

    return  HAL_ERROR;
 800106e:	2301      	movs	r3, #1
 8001070:	e0b8      	b.n	80011e4 <HAL_ETH_TransmitFrame+0x1c0>
  }

  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if (((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	2b00      	cmp	r3, #0
 800107a:	da09      	bge.n	8001090 <HAL_ETH_TransmitFrame+0x6c>
  {
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	2212      	movs	r2, #18
 8001080:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	2200      	movs	r2, #0
 8001088:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

    return HAL_ERROR;
 800108c:	2301      	movs	r3, #1
 800108e:	e0a9      	b.n	80011e4 <HAL_ETH_TransmitFrame+0x1c0>
  }

  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 8001090:	683b      	ldr	r3, [r7, #0]
 8001092:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001096:	4293      	cmp	r3, r2
 8001098:	d915      	bls.n	80010c6 <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength / ETH_TX_BUF_SIZE;
 800109a:	683b      	ldr	r3, [r7, #0]
 800109c:	4a54      	ldr	r2, [pc, #336]	; (80011f0 <HAL_ETH_TransmitFrame+0x1cc>)
 800109e:	fba2 2303 	umull	r2, r3, r2, r3
 80010a2:	0a9b      	lsrs	r3, r3, #10
 80010a4:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE)
 80010a6:	683a      	ldr	r2, [r7, #0]
 80010a8:	4b51      	ldr	r3, [pc, #324]	; (80011f0 <HAL_ETH_TransmitFrame+0x1cc>)
 80010aa:	fba3 1302 	umull	r1, r3, r3, r2
 80010ae:	0a9b      	lsrs	r3, r3, #10
 80010b0:	f240 51f4 	movw	r1, #1524	; 0x5f4
 80010b4:	fb01 f303 	mul.w	r3, r1, r3
 80010b8:	1ad3      	subs	r3, r2, r3
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d005      	beq.n	80010ca <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 80010be:	697b      	ldr	r3, [r7, #20]
 80010c0:	3301      	adds	r3, #1
 80010c2:	617b      	str	r3, [r7, #20]
 80010c4:	e001      	b.n	80010ca <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else
  {
    bufcount = 1U;
 80010c6:	2301      	movs	r3, #1
 80010c8:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1U)
 80010ca:	697b      	ldr	r3, [r7, #20]
 80010cc:	2b01      	cmp	r3, #1
 80010ce:	d11c      	bne.n	800110a <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |= ETH_DMATXDESC_FS | ETH_DMATXDESC_LS;
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010d4:	681a      	ldr	r2, [r3, #0]
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010da:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 80010de:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010e4:	683a      	ldr	r2, [r7, #0]
 80010e6:	f3c2 020c 	ubfx	r2, r2, #0, #13
 80010ea:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010f0:	681a      	ldr	r2, [r3, #0]
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010f6:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80010fa:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001100:	68db      	ldr	r3, [r3, #12]
 8001102:	461a      	mov	r2, r3
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	62da      	str	r2, [r3, #44]	; 0x2c
 8001108:	e04b      	b.n	80011a2 <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i = 0U; i < bufcount; i++)
 800110a:	2300      	movs	r3, #0
 800110c:	613b      	str	r3, [r7, #16]
 800110e:	e044      	b.n	800119a <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001114:	681a      	ldr	r2, [r3, #0]
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800111a:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800111e:	601a      	str	r2, [r3, #0]

      if (i == 0U)
 8001120:	693b      	ldr	r3, [r7, #16]
 8001122:	2b00      	cmp	r3, #0
 8001124:	d107      	bne.n	8001136 <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800112a:	681a      	ldr	r2, [r3, #0]
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001130:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001134:	601a      	str	r2, [r3, #0]
      }

      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800113a:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800113e:	605a      	str	r2, [r3, #4]

      if (i == (bufcount - 1U))
 8001140:	697b      	ldr	r3, [r7, #20]
 8001142:	3b01      	subs	r3, #1
 8001144:	693a      	ldr	r2, [r7, #16]
 8001146:	429a      	cmp	r2, r3
 8001148:	d116      	bne.n	8001178 <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800114e:	681a      	ldr	r2, [r3, #0]
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001154:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8001158:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount - 1U) * ETH_TX_BUF_SIZE;
 800115a:	697b      	ldr	r3, [r7, #20]
 800115c:	4a25      	ldr	r2, [pc, #148]	; (80011f4 <HAL_ETH_TransmitFrame+0x1d0>)
 800115e:	fb02 f203 	mul.w	r2, r2, r3
 8001162:	683b      	ldr	r3, [r7, #0]
 8001164:	4413      	add	r3, r2
 8001166:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 800116a:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001170:	68fa      	ldr	r2, [r7, #12]
 8001172:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8001176:	605a      	str	r2, [r3, #4]
      }

      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800117c:	681a      	ldr	r2, [r3, #0]
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001182:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001186:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800118c:	68db      	ldr	r3, [r3, #12]
 800118e:	461a      	mov	r2, r3
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	62da      	str	r2, [r3, #44]	; 0x2c
    for (i = 0U; i < bufcount; i++)
 8001194:	693b      	ldr	r3, [r7, #16]
 8001196:	3301      	adds	r3, #1
 8001198:	613b      	str	r3, [r7, #16]
 800119a:	693a      	ldr	r2, [r7, #16]
 800119c:	697b      	ldr	r3, [r7, #20]
 800119e:	429a      	cmp	r2, r3
 80011a0:	d3b6      	bcc.n	8001110 <HAL_ETH_TransmitFrame+0xec>
    }
  }

  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80011aa:	3314      	adds	r3, #20
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	f003 0304 	and.w	r3, r3, #4
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d00d      	beq.n	80011d2 <HAL_ETH_TransmitFrame+0x1ae>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80011be:	3314      	adds	r3, #20
 80011c0:	2204      	movs	r2, #4
 80011c2:	601a      	str	r2, [r3, #0]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0U;
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80011cc:	3304      	adds	r3, #4
 80011ce:	2200      	movs	r2, #0
 80011d0:	601a      	str	r2, [r3, #0]
  }

  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	2201      	movs	r2, #1
 80011d6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	2200      	movs	r2, #0
 80011de:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Return function status */
  return HAL_OK;
 80011e2:	2300      	movs	r3, #0
}
 80011e4:	4618      	mov	r0, r3
 80011e6:	371c      	adds	r7, #28
 80011e8:	46bd      	mov	sp, r7
 80011ea:	bc80      	pop	{r7}
 80011ec:	4770      	bx	lr
 80011ee:	bf00      	nop
 80011f0:	ac02b00b 	.word	0xac02b00b
 80011f4:	fffffa0c 	.word	0xfffffa0c

080011f8 <HAL_ETH_GetReceivedFrame>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetReceivedFrame(ETH_HandleTypeDef *heth)
{
 80011f8:	b480      	push	{r7}
 80011fa:	b085      	sub	sp, #20
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
  uint32_t framelength = 0U;
 8001200:	2300      	movs	r3, #0
 8001202:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(heth);
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800120a:	2b01      	cmp	r3, #1
 800120c:	d101      	bne.n	8001212 <HAL_ETH_GetReceivedFrame+0x1a>
 800120e:	2302      	movs	r3, #2
 8001210:	e070      	b.n	80012f4 <HAL_ETH_GetReceivedFrame+0xfc>
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	2201      	movs	r2, #1
 8001216:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Check the ETH state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	2202      	movs	r2, #2
 800121e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Check if segment is not owned by DMA */
  /* (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && ((heth->RxDesc->Status & ETH_DMARXDESC_LS) != (uint32_t)RESET)) */
  if (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET))
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	2b00      	cmp	r3, #0
 800122a:	db5a      	blt.n	80012e2 <HAL_ETH_GetReceivedFrame+0xea>
  {
    /* Check if last segment */
    if (((heth->RxDesc->Status & ETH_DMARXDESC_LS) != (uint32_t)RESET))
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001236:	2b00      	cmp	r3, #0
 8001238:	d030      	beq.n	800129c <HAL_ETH_GetReceivedFrame+0xa4>
    {
      /* increment segment count */
      (heth->RxFrameInfos).SegCount++;
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800123e:	1c5a      	adds	r2, r3, #1
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	639a      	str	r2, [r3, #56]	; 0x38

      /* Check if last segment is first segment: one segment contains the frame */
      if ((heth->RxFrameInfos).SegCount == 1U)
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001248:	2b01      	cmp	r3, #1
 800124a:	d103      	bne.n	8001254 <HAL_ETH_GetReceivedFrame+0x5c>
      {
        (heth->RxFrameInfos).FSRxDesc = heth->RxDesc;
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	631a      	str	r2, [r3, #48]	; 0x30
      }

      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      framelength = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	0c1b      	lsrs	r3, r3, #16
 8001264:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8001268:	3b04      	subs	r3, #4
 800126a:	60fb      	str	r3, [r7, #12]
      heth->RxFrameInfos.length = framelength;
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	68fa      	ldr	r2, [r7, #12]
 8001270:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Get the address of the buffer start address */
      heth->RxFrameInfos.buffer = ((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001276:	689a      	ldr	r2, [r3, #8]
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	641a      	str	r2, [r3, #64]	; 0x40
      /* point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef *)((heth->RxDesc)->Buffer2NextDescAddr);
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001280:	68db      	ldr	r3, [r3, #12]
 8001282:	461a      	mov	r2, r3
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set HAL State to Ready */
      heth->State = HAL_ETH_STATE_READY;
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	2201      	movs	r2, #1
 800128c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	2200      	movs	r2, #0
 8001294:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

      /* Return function status */
      return HAL_OK;
 8001298:	2300      	movs	r3, #0
 800129a:	e02b      	b.n	80012f4 <HAL_ETH_GetReceivedFrame+0xfc>
    }
    /* Check if first segment */
    else if ((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET)
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d010      	beq.n	80012cc <HAL_ETH_GetReceivedFrame+0xd4>
    {
      (heth->RxFrameInfos).FSRxDesc = heth->RxDesc;
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	631a      	str	r2, [r3, #48]	; 0x30
      (heth->RxFrameInfos).LSRxDesc = NULL;
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	2200      	movs	r2, #0
 80012b6:	635a      	str	r2, [r3, #52]	; 0x34
      (heth->RxFrameInfos).SegCount = 1U;
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	2201      	movs	r2, #1
 80012bc:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef *)(heth->RxDesc->Buffer2NextDescAddr);
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012c2:	68db      	ldr	r3, [r3, #12]
 80012c4:	461a      	mov	r2, r3
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	629a      	str	r2, [r3, #40]	; 0x28
 80012ca:	e00a      	b.n	80012e2 <HAL_ETH_GetReceivedFrame+0xea>
    }
    /* Check if intermediate segment */
    else
    {
      (heth->RxFrameInfos).SegCount++;
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80012d0:	1c5a      	adds	r2, r3, #1
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef *)(heth->RxDesc->Buffer2NextDescAddr);
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012da:	68db      	ldr	r3, [r3, #12]
 80012dc:	461a      	mov	r2, r3
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }

  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	2201      	movs	r2, #1
 80012e6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	2200      	movs	r2, #0
 80012ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Return function status */
  return HAL_ERROR;
 80012f2:	2301      	movs	r3, #1
}
 80012f4:	4618      	mov	r0, r3
 80012f6:	3714      	adds	r7, #20
 80012f8:	46bd      	mov	sp, r7
 80012fa:	bc80      	pop	{r7}
 80012fc:	4770      	bx	lr

080012fe <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param  RegValue PHY register value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 80012fe:	b580      	push	{r7, lr}
 8001300:	b086      	sub	sp, #24
 8001302:	af00      	add	r7, sp, #0
 8001304:	60f8      	str	r0, [r7, #12]
 8001306:	460b      	mov	r3, r1
 8001308:	607a      	str	r2, [r7, #4]
 800130a:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;
 800130c:	2300      	movs	r3, #0
 800130e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8001310:	2300      	movs	r3, #0
 8001312:	613b      	str	r3, [r7, #16]

  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));

  /* Check the ETH peripheral state */
  if (heth->State == HAL_ETH_STATE_BUSY_RD)
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800131a:	b2db      	uxtb	r3, r3
 800131c:	2b82      	cmp	r3, #130	; 0x82
 800131e:	d101      	bne.n	8001324 <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 8001320:	2302      	movs	r3, #2
 8001322:	e050      	b.n	80013c6 <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	2282      	movs	r2, #130	; 0x82
 8001328:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	691b      	ldr	r3, [r3, #16]
 8001332:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8001334:	697b      	ldr	r3, [r7, #20]
 8001336:	f003 031c 	and.w	r3, r3, #28
 800133a:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= (((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	8a1b      	ldrh	r3, [r3, #16]
 8001340:	02db      	lsls	r3, r3, #11
 8001342:	b29b      	uxth	r3, r3
 8001344:	697a      	ldr	r2, [r7, #20]
 8001346:	4313      	orrs	r3, r2
 8001348:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 800134a:	897b      	ldrh	r3, [r7, #10]
 800134c:	019b      	lsls	r3, r3, #6
 800134e:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001352:	697a      	ldr	r2, [r7, #20]
 8001354:	4313      	orrs	r3, r2
 8001356:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8001358:	697b      	ldr	r3, [r7, #20]
 800135a:	f023 0302 	bic.w	r3, r3, #2
 800135e:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8001360:	697b      	ldr	r3, [r7, #20]
 8001362:	f043 0301 	orr.w	r3, r3, #1
 8001366:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	697a      	ldr	r2, [r7, #20]
 800136e:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001370:	f7ff fae6 	bl	8000940 <HAL_GetTick>
 8001374:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001376:	e015      	b.n	80013a4 <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 8001378:	f7ff fae2 	bl	8000940 <HAL_GetTick>
 800137c:	4602      	mov	r2, r0
 800137e:	693b      	ldr	r3, [r7, #16]
 8001380:	1ad3      	subs	r3, r2, r3
 8001382:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001386:	d309      	bcc.n	800139c <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State = HAL_ETH_STATE_READY;
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	2201      	movs	r2, #1
 800138c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	2200      	movs	r2, #0
 8001394:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

      return HAL_TIMEOUT;
 8001398:	2303      	movs	r3, #3
 800139a:	e014      	b.n	80013c6 <HAL_ETH_ReadPHYRegister+0xc8>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	691b      	ldr	r3, [r3, #16]
 80013a2:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80013a4:	697b      	ldr	r3, [r7, #20]
 80013a6:	f003 0301 	and.w	r3, r3, #1
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d1e4      	bne.n	8001378 <HAL_ETH_ReadPHYRegister+0x7a>
  }

  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	695b      	ldr	r3, [r3, #20]
 80013b4:	b29b      	uxth	r3, r3
 80013b6:	461a      	mov	r2, r3
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	601a      	str	r2, [r3, #0]

  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	2201      	movs	r2, #1
 80013c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Return function status */
  return HAL_OK;
 80013c4:	2300      	movs	r3, #0
}
 80013c6:	4618      	mov	r0, r3
 80013c8:	3718      	adds	r7, #24
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}

080013ce <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 80013ce:	b580      	push	{r7, lr}
 80013d0:	b086      	sub	sp, #24
 80013d2:	af00      	add	r7, sp, #0
 80013d4:	60f8      	str	r0, [r7, #12]
 80013d6:	460b      	mov	r3, r1
 80013d8:	607a      	str	r2, [r7, #4]
 80013da:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;
 80013dc:	2300      	movs	r3, #0
 80013de:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 80013e0:	2300      	movs	r3, #0
 80013e2:	613b      	str	r3, [r7, #16]

  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));

  /* Check the ETH peripheral state */
  if (heth->State == HAL_ETH_STATE_BUSY_WR)
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80013ea:	b2db      	uxtb	r3, r3
 80013ec:	2b42      	cmp	r3, #66	; 0x42
 80013ee:	d101      	bne.n	80013f4 <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 80013f0:	2302      	movs	r3, #2
 80013f2:	e04e      	b.n	8001492 <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	2242      	movs	r2, #66	; 0x42
 80013f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	691b      	ldr	r3, [r3, #16]
 8001402:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8001404:	697b      	ldr	r3, [r7, #20]
 8001406:	f003 031c 	and.w	r3, r3, #28
 800140a:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= (((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	8a1b      	ldrh	r3, [r3, #16]
 8001410:	02db      	lsls	r3, r3, #11
 8001412:	b29b      	uxth	r3, r3
 8001414:	697a      	ldr	r2, [r7, #20]
 8001416:	4313      	orrs	r3, r2
 8001418:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 800141a:	897b      	ldrh	r3, [r7, #10]
 800141c:	019b      	lsls	r3, r3, #6
 800141e:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001422:	697a      	ldr	r2, [r7, #20]
 8001424:	4313      	orrs	r3, r2
 8001426:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8001428:	697b      	ldr	r3, [r7, #20]
 800142a:	f043 0302 	orr.w	r3, r3, #2
 800142e:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8001430:	697b      	ldr	r3, [r7, #20]
 8001432:	f043 0301 	orr.w	r3, r3, #1
 8001436:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	b29a      	uxth	r2, r3
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	697a      	ldr	r2, [r7, #20]
 8001448:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 800144a:	f7ff fa79 	bl	8000940 <HAL_GetTick>
 800144e:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001450:	e015      	b.n	800147e <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 8001452:	f7ff fa75 	bl	8000940 <HAL_GetTick>
 8001456:	4602      	mov	r2, r0
 8001458:	693b      	ldr	r3, [r7, #16]
 800145a:	1ad3      	subs	r3, r2, r3
 800145c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001460:	d309      	bcc.n	8001476 <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State = HAL_ETH_STATE_READY;
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	2201      	movs	r2, #1
 8001466:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	2200      	movs	r2, #0
 800146e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

      return HAL_TIMEOUT;
 8001472:	2303      	movs	r3, #3
 8001474:	e00d      	b.n	8001492 <HAL_ETH_WritePHYRegister+0xc4>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	691b      	ldr	r3, [r3, #16]
 800147c:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800147e:	697b      	ldr	r3, [r7, #20]
 8001480:	f003 0301 	and.w	r3, r3, #1
 8001484:	2b00      	cmp	r3, #0
 8001486:	d1e4      	bne.n	8001452 <HAL_ETH_WritePHYRegister+0x84>
  }

  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	2201      	movs	r2, #1
 800148c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Return function status */
  return HAL_OK;
 8001490:	2300      	movs	r3, #0
}
 8001492:	4618      	mov	r0, r3
 8001494:	3718      	adds	r7, #24
 8001496:	46bd      	mov	sp, r7
 8001498:	bd80      	pop	{r7, pc}

0800149a <HAL_ETH_Start>:
 * @param  heth pointer to a ETH_HandleTypeDef structure that contains
 *         the configuration information for ETHERNET module
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{
 800149a:	b580      	push	{r7, lr}
 800149c:	b082      	sub	sp, #8
 800149e:	af00      	add	r7, sp, #0
 80014a0:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80014a8:	2b01      	cmp	r3, #1
 80014aa:	d101      	bne.n	80014b0 <HAL_ETH_Start+0x16>
 80014ac:	2302      	movs	r3, #2
 80014ae:	e01f      	b.n	80014f0 <HAL_ETH_Start+0x56>
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	2201      	movs	r2, #1
 80014b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	2202      	movs	r2, #2
 80014bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 80014c0:	6878      	ldr	r0, [r7, #4]
 80014c2:	f000 fb43 	bl	8001b4c <ETH_MACTransmissionEnable>

  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 80014c6:	6878      	ldr	r0, [r7, #4]
 80014c8:	f000 fb7a 	bl	8001bc0 <ETH_MACReceptionEnable>

  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 80014cc:	6878      	ldr	r0, [r7, #4]
 80014ce:	f000 fc0d 	bl	8001cec <ETH_FlushTransmitFIFO>

  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 80014d2:	6878      	ldr	r0, [r7, #4]
 80014d4:	f000 fbae 	bl	8001c34 <ETH_DMATransmissionEnable>

  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 80014d8:	6878      	ldr	r0, [r7, #4]
 80014da:	f000 fbd9 	bl	8001c90 <ETH_DMAReceptionEnable>

  /* Set the ETH state to READY*/
  heth->State = HAL_ETH_STATE_READY;
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	2201      	movs	r2, #1
 80014e2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	2200      	movs	r2, #0
 80014ea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Return function status */
  return HAL_OK;
 80014ee:	2300      	movs	r3, #0
}
 80014f0:	4618      	mov	r0, r3
 80014f2:	3708      	adds	r7, #8
 80014f4:	46bd      	mov	sp, r7
 80014f6:	bd80      	pop	{r7, pc}

080014f8 <HAL_ETH_Stop>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b082      	sub	sp, #8
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001506:	2b01      	cmp	r3, #1
 8001508:	d101      	bne.n	800150e <HAL_ETH_Stop+0x16>
 800150a:	2302      	movs	r3, #2
 800150c:	e01f      	b.n	800154e <HAL_ETH_Stop+0x56>
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	2201      	movs	r2, #1
 8001512:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	2202      	movs	r2, #2
 800151a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Stop DMA transmission */
  ETH_DMATransmissionDisable(heth);
 800151e:	6878      	ldr	r0, [r7, #4]
 8001520:	f000 fb9f 	bl	8001c62 <ETH_DMATransmissionDisable>

  /* Stop DMA reception */
  ETH_DMAReceptionDisable(heth);
 8001524:	6878      	ldr	r0, [r7, #4]
 8001526:	f000 fbca 	bl	8001cbe <ETH_DMAReceptionDisable>

  /* Disable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionDisable(heth);
 800152a:	6878      	ldr	r0, [r7, #4]
 800152c:	f000 fb65 	bl	8001bfa <ETH_MACReceptionDisable>

  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8001530:	6878      	ldr	r0, [r7, #4]
 8001532:	f000 fbdb 	bl	8001cec <ETH_FlushTransmitFIFO>

  /* Disable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionDisable(heth);
 8001536:	6878      	ldr	r0, [r7, #4]
 8001538:	f000 fb25 	bl	8001b86 <ETH_MACTransmissionDisable>

  /* Set the ETH state*/
  heth->State = HAL_ETH_STATE_READY;
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	2201      	movs	r2, #1
 8001540:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	2200      	movs	r2, #0
 8001548:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Return function status */
  return HAL_OK;
 800154c:	2300      	movs	r3, #0
}
 800154e:	4618      	mov	r0, r3
 8001550:	3708      	adds	r7, #8
 8001552:	46bd      	mov	sp, r7
 8001554:	bd80      	pop	{r7, pc}
	...

08001558 <HAL_ETH_ConfigMAC>:
  *         the configuration information for ETHERNET module
  * @param  macconf MAC Configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ConfigMAC(ETH_HandleTypeDef *heth, ETH_MACInitTypeDef *macconf)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b084      	sub	sp, #16
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
 8001560:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0U;
 8001562:	2300      	movs	r3, #0
 8001564:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(heth);
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800156c:	2b01      	cmp	r3, #1
 800156e:	d101      	bne.n	8001574 <HAL_ETH_ConfigMAC+0x1c>
 8001570:	2302      	movs	r3, #2
 8001572:	e0e4      	b.n	800173e <HAL_ETH_ConfigMAC+0x1e6>
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	2201      	movs	r2, #1
 8001578:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	2202      	movs	r2, #2
 8001580:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  assert_param(IS_ETH_SPEED(heth->Init.Speed));
  assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));

  if (macconf != NULL)
 8001584:	683b      	ldr	r3, [r7, #0]
 8001586:	2b00      	cmp	r3, #0
 8001588:	f000 80b1 	beq.w	80016ee <HAL_ETH_ConfigMAC+0x196>
    assert_param(IS_ETH_VLAN_TAG_COMPARISON(macconf->VLANTagComparison));
    assert_param(IS_ETH_VLAN_TAG_IDENTIFIER(macconf->VLANTagIdentifier));

    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	60fb      	str	r3, [r7, #12]
    /* Clear WD, PCE, PS, TE and RE bits */
    tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8001594:	68fa      	ldr	r2, [r7, #12]
 8001596:	4b6c      	ldr	r3, [pc, #432]	; (8001748 <HAL_ETH_ConfigMAC+0x1f0>)
 8001598:	4013      	ands	r3, r2
 800159a:	60fb      	str	r3, [r7, #12]

    tmpreg1 |= (uint32_t)(macconf->Watchdog |
 800159c:	683b      	ldr	r3, [r7, #0]
 800159e:	681a      	ldr	r2, [r3, #0]
                          macconf->Jabber |
 80015a0:	683b      	ldr	r3, [r7, #0]
 80015a2:	685b      	ldr	r3, [r3, #4]
    tmpreg1 |= (uint32_t)(macconf->Watchdog |
 80015a4:	431a      	orrs	r2, r3
                          macconf->InterFrameGap |
 80015a6:	683b      	ldr	r3, [r7, #0]
 80015a8:	689b      	ldr	r3, [r3, #8]
                          macconf->Jabber |
 80015aa:	431a      	orrs	r2, r3
                          macconf->CarrierSense |
 80015ac:	683b      	ldr	r3, [r7, #0]
 80015ae:	68db      	ldr	r3, [r3, #12]
                          macconf->InterFrameGap |
 80015b0:	431a      	orrs	r2, r3
                          (heth->Init).Speed |
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	689b      	ldr	r3, [r3, #8]
                          macconf->CarrierSense |
 80015b6:	431a      	orrs	r2, r3
                          macconf->ReceiveOwn |
 80015b8:	683b      	ldr	r3, [r7, #0]
 80015ba:	691b      	ldr	r3, [r3, #16]
                          (heth->Init).Speed |
 80015bc:	431a      	orrs	r2, r3
                          macconf->LoopbackMode |
 80015be:	683b      	ldr	r3, [r7, #0]
 80015c0:	695b      	ldr	r3, [r3, #20]
                          macconf->ReceiveOwn |
 80015c2:	431a      	orrs	r2, r3
                          (heth->Init).DuplexMode |
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	68db      	ldr	r3, [r3, #12]
                          macconf->LoopbackMode |
 80015c8:	431a      	orrs	r2, r3
                          macconf->ChecksumOffload |
 80015ca:	683b      	ldr	r3, [r7, #0]
 80015cc:	699b      	ldr	r3, [r3, #24]
                          (heth->Init).DuplexMode |
 80015ce:	431a      	orrs	r2, r3
                          macconf->RetryTransmission |
 80015d0:	683b      	ldr	r3, [r7, #0]
 80015d2:	69db      	ldr	r3, [r3, #28]
                          macconf->ChecksumOffload |
 80015d4:	431a      	orrs	r2, r3
                          macconf->AutomaticPadCRCStrip |
 80015d6:	683b      	ldr	r3, [r7, #0]
 80015d8:	6a1b      	ldr	r3, [r3, #32]
                          macconf->RetryTransmission |
 80015da:	431a      	orrs	r2, r3
                          macconf->BackOffLimit |
 80015dc:	683b      	ldr	r3, [r7, #0]
 80015de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                          macconf->AutomaticPadCRCStrip |
 80015e0:	431a      	orrs	r2, r3
                          macconf->DeferralCheck);
 80015e2:	683b      	ldr	r3, [r7, #0]
 80015e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                          macconf->BackOffLimit |
 80015e6:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(macconf->Watchdog |
 80015e8:	68fa      	ldr	r2, [r7, #12]
 80015ea:	4313      	orrs	r3, r2
 80015ec:	60fb      	str	r3, [r7, #12]

    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	68fa      	ldr	r2, [r7, #12]
 80015f4:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80015fe:	2001      	movs	r0, #1
 8001600:	f7ff f9a8 	bl	8000954 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	68fa      	ldr	r2, [r7, #12]
 800160a:	601a      	str	r2, [r3, #0]

    /*----------------------- ETHERNET MACFFR Configuration --------------------*/
    /* Write to ETHERNET MACFFR */
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll |
 800160c:	683b      	ldr	r3, [r7, #0]
 800160e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
                                          macconf->SourceAddrFilter |
 8001610:	683b      	ldr	r3, [r7, #0]
 8001612:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll |
 8001614:	431a      	orrs	r2, r3
                                          macconf->PassControlFrames |
 8001616:	683b      	ldr	r3, [r7, #0]
 8001618:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                                          macconf->SourceAddrFilter |
 800161a:	431a      	orrs	r2, r3
                                          macconf->BroadcastFramesReception |
 800161c:	683b      	ldr	r3, [r7, #0]
 800161e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                          macconf->PassControlFrames |
 8001620:	431a      	orrs	r2, r3
                                          macconf->DestinationAddrFilter |
 8001622:	683b      	ldr	r3, [r7, #0]
 8001624:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                                          macconf->BroadcastFramesReception |
 8001626:	431a      	orrs	r2, r3
                                          macconf->PromiscuousMode |
 8001628:	683b      	ldr	r3, [r7, #0]
 800162a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                                          macconf->DestinationAddrFilter |
 800162c:	431a      	orrs	r2, r3
                                          macconf->MulticastFramesFilter |
 800162e:	683b      	ldr	r3, [r7, #0]
 8001630:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                                          macconf->PromiscuousMode |
 8001632:	ea42 0103 	orr.w	r1, r2, r3
                                          macconf->UnicastFramesFilter);
 8001636:	683b      	ldr	r3, [r7, #0]
 8001638:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll |
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
                                          macconf->MulticastFramesFilter |
 800163e:	430a      	orrs	r2, r1
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll |
 8001640:	605a      	str	r2, [r3, #4]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACFFR;
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	685b      	ldr	r3, [r3, #4]
 8001648:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800164a:	2001      	movs	r0, #1
 800164c:	f7ff f982 	bl	8000954 <HAL_Delay>
    (heth->Instance)->MACFFR = tmpreg1;
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	68fa      	ldr	r2, [r7, #12]
 8001656:	605a      	str	r2, [r3, #4]

    /*--------------- ETHERNET MACHTHR and MACHTLR Configuration ---------------*/
    /* Write to ETHERNET MACHTHR */
    (heth->Instance)->MACHTHR = (uint32_t)macconf->HashTableHigh;
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	683a      	ldr	r2, [r7, #0]
 800165e:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001660:	609a      	str	r2, [r3, #8]

    /* Write to ETHERNET MACHTLR */
    (heth->Instance)->MACHTLR = (uint32_t)macconf->HashTableLow;
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	683a      	ldr	r2, [r7, #0]
 8001668:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800166a:	60da      	str	r2, [r3, #12]
    /*----------------------- ETHERNET MACFCR Configuration --------------------*/

    /* Get the ETHERNET MACFCR value */
    tmpreg1 = (heth->Instance)->MACFCR;
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	699b      	ldr	r3, [r3, #24]
 8001672:	60fb      	str	r3, [r7, #12]
    /* Clear xx bits */
    tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8001674:	68fa      	ldr	r2, [r7, #12]
 8001676:	f64f 7341 	movw	r3, #65345	; 0xff41
 800167a:	4013      	ands	r3, r2
 800167c:	60fb      	str	r3, [r7, #12]

    tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800167e:	683b      	ldr	r3, [r7, #0]
 8001680:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001682:	041a      	lsls	r2, r3, #16
                          macconf->ZeroQuantaPause |
 8001684:	683b      	ldr	r3, [r7, #0]
 8001686:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001688:	431a      	orrs	r2, r3
                          macconf->PauseLowThreshold |
 800168a:	683b      	ldr	r3, [r7, #0]
 800168c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                          macconf->ZeroQuantaPause |
 800168e:	431a      	orrs	r2, r3
                          macconf->UnicastPauseFrameDetect |
 8001690:	683b      	ldr	r3, [r7, #0]
 8001692:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                          macconf->PauseLowThreshold |
 8001694:	431a      	orrs	r2, r3
                          macconf->ReceiveFlowControl |
 8001696:	683b      	ldr	r3, [r7, #0]
 8001698:	6e5b      	ldr	r3, [r3, #100]	; 0x64
                          macconf->UnicastPauseFrameDetect |
 800169a:	431a      	orrs	r2, r3
                          macconf->TransmitFlowControl);
 800169c:	683b      	ldr	r3, [r7, #0]
 800169e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                          macconf->ReceiveFlowControl |
 80016a0:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80016a2:	68fa      	ldr	r2, [r7, #12]
 80016a4:	4313      	orrs	r3, r2
 80016a6:	60fb      	str	r3, [r7, #12]

    /* Write to ETHERNET MACFCR */
    (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	68fa      	ldr	r2, [r7, #12]
 80016ae:	619a      	str	r2, [r3, #24]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACFCR;
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	699b      	ldr	r3, [r3, #24]
 80016b6:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80016b8:	2001      	movs	r0, #1
 80016ba:	f7ff f94b 	bl	8000954 <HAL_Delay>
    (heth->Instance)->MACFCR = tmpreg1;
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	68fa      	ldr	r2, [r7, #12]
 80016c4:	619a      	str	r2, [r3, #24]

    /*----------------------- ETHERNET MACVLANTR Configuration -----------------*/
    (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison |
 80016c6:	683b      	ldr	r3, [r7, #0]
 80016c8:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
                                             macconf->VLANTagIdentifier);
 80016ca:	683b      	ldr	r3, [r7, #0]
 80016cc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
    (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison |
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	430a      	orrs	r2, r1
 80016d4:	61da      	str	r2, [r3, #28]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACVLANTR;
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	69db      	ldr	r3, [r3, #28]
 80016dc:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80016de:	2001      	movs	r0, #1
 80016e0:	f7ff f938 	bl	8000954 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg1;
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	68fa      	ldr	r2, [r7, #12]
 80016ea:	61da      	str	r2, [r3, #28]
 80016ec:	e01e      	b.n	800172c <HAL_ETH_ConfigMAC+0x1d4>
  }
  else /* macconf == NULL : here we just configure Speed and Duplex mode */
  {
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	60fb      	str	r3, [r7, #12]

    /* Clear FES and DM bits */
    tmpreg1 &= ~(0x00004800U);
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 80016fc:	60fb      	str	r3, [r7, #12]

    tmpreg1 |= (uint32_t)(heth->Init.Speed | heth->Init.DuplexMode);
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	689a      	ldr	r2, [r3, #8]
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	68db      	ldr	r3, [r3, #12]
 8001706:	4313      	orrs	r3, r2
 8001708:	68fa      	ldr	r2, [r7, #12]
 800170a:	4313      	orrs	r3, r2
 800170c:	60fb      	str	r3, [r7, #12]

    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	68fa      	ldr	r2, [r7, #12]
 8001714:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account:
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800171e:	2001      	movs	r0, #1
 8001720:	f7ff f918 	bl	8000954 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	68fa      	ldr	r2, [r7, #12]
 800172a:	601a      	str	r2, [r3, #0]
  }

  /* Set the ETH state to Ready */
  heth->State = HAL_ETH_STATE_READY;
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	2201      	movs	r2, #1
 8001730:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	2200      	movs	r2, #0
 8001738:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Return function status */
  return HAL_OK;
 800173c:	2300      	movs	r3, #0
}
 800173e:	4618      	mov	r0, r3
 8001740:	3710      	adds	r7, #16
 8001742:	46bd      	mov	sp, r7
 8001744:	bd80      	pop	{r7, pc}
 8001746:	bf00      	nop
 8001748:	ff20810f 	.word	0xff20810f

0800174c <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b0b0      	sub	sp, #192	; 0xc0
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
 8001754:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg1 = 0U;
 8001756:	2300      	movs	r3, #0
 8001758:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 800175c:	683b      	ldr	r3, [r7, #0]
 800175e:	2b00      	cmp	r3, #0
 8001760:	d007      	beq.n	8001772 <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001768:	60da      	str	r2, [r3, #12]

    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001770:	609a      	str	r2, [r3, #8]
  }

  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 8001772:	2300      	movs	r3, #0
 8001774:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 8001776:	2300      	movs	r3, #0
 8001778:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 800177a:	2300      	movs	r3, #0
 800177c:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 800177e:	2300      	movs	r3, #0
 8001780:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 8001782:	2300      	movs	r3, #0
 8001784:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 8001786:	2300      	movs	r3, #0
 8001788:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	69db      	ldr	r3, [r3, #28]
 800178e:	2b00      	cmp	r3, #0
 8001790:	d103      	bne.n	800179a <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 8001792:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001796:	663b      	str	r3, [r7, #96]	; 0x60
 8001798:	e001      	b.n	800179e <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 800179a:	2300      	movs	r3, #0
 800179c:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 800179e:	f44f 7300 	mov.w	r3, #512	; 0x200
 80017a2:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 80017a4:	2300      	movs	r3, #0
 80017a6:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80017a8:	2300      	movs	r3, #0
 80017aa:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 80017ac:	2300      	movs	r3, #0
 80017ae:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 80017b0:	2300      	movs	r3, #0
 80017b2:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 80017b4:	2300      	movs	r3, #0
 80017b6:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 80017b8:	2340      	movs	r3, #64	; 0x40
 80017ba:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 80017bc:	2300      	movs	r3, #0
 80017be:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 80017c2:	2300      	movs	r3, #0
 80017c4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 80017c8:	2300      	movs	r3, #0
 80017ca:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 80017ce:	2300      	movs	r3, #0
 80017d0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 80017d4:	2300      	movs	r3, #0
 80017d6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0U;
 80017da:	2300      	movs	r3, #0
 80017dc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0U;
 80017e0:	2300      	movs	r3, #0
 80017e2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0U;
 80017e6:	2300      	movs	r3, #0
 80017e8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 80017ec:	2380      	movs	r3, #128	; 0x80
 80017ee:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 80017f2:	2300      	movs	r3, #0
 80017f4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 80017f8:	2300      	movs	r3, #0
 80017fa:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 80017fe:	2300      	movs	r3, #0
 8001800:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 8001804:	2300      	movs	r3, #0
 8001806:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 800180a:	2300      	movs	r3, #0
 800180c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0U;
 8001810:	2300      	movs	r3, #0
 8001812:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8001820:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001824:	4bac      	ldr	r3, [pc, #688]	; (8001ad8 <ETH_MACDMAConfig+0x38c>)
 8001826:	4013      	ands	r3, r2
 8001828:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg1 |= (uint32_t)(macinit.Watchdog |
 800182c:	6cba      	ldr	r2, [r7, #72]	; 0x48
                        macinit.Jabber |
 800182e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg1 |= (uint32_t)(macinit.Watchdog |
 8001830:	431a      	orrs	r2, r3
                        macinit.InterFrameGap |
 8001832:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                        macinit.Jabber |
 8001834:	431a      	orrs	r2, r3
                        macinit.CarrierSense |
 8001836:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                        macinit.InterFrameGap |
 8001838:	431a      	orrs	r2, r3
                        (heth->Init).Speed |
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	689b      	ldr	r3, [r3, #8]
                        macinit.CarrierSense |
 800183e:	431a      	orrs	r2, r3
                        macinit.ReceiveOwn |
 8001840:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                        (heth->Init).Speed |
 8001842:	431a      	orrs	r2, r3
                        macinit.LoopbackMode |
 8001844:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                        macinit.ReceiveOwn |
 8001846:	431a      	orrs	r2, r3
                        (heth->Init).DuplexMode |
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	68db      	ldr	r3, [r3, #12]
                        macinit.LoopbackMode |
 800184c:	431a      	orrs	r2, r3
                        macinit.ChecksumOffload |
 800184e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                        (heth->Init).DuplexMode |
 8001850:	431a      	orrs	r2, r3
                        macinit.RetryTransmission |
 8001852:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                        macinit.ChecksumOffload |
 8001854:	431a      	orrs	r2, r3
                        macinit.AutomaticPadCRCStrip |
 8001856:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                        macinit.RetryTransmission |
 8001858:	431a      	orrs	r2, r3
                        macinit.BackOffLimit |
 800185a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                        macinit.AutomaticPadCRCStrip |
 800185c:	431a      	orrs	r2, r3
                        macinit.DeferralCheck);
 800185e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                        macinit.BackOffLimit |
 8001860:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)(macinit.Watchdog |
 8001862:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001866:	4313      	orrs	r3, r2
 8001868:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001874:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001880:	2001      	movs	r0, #1
 8001882:	f7ff f867 	bl	8000954 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800188e:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll |
 8001890:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 8001892:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll |
 8001894:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 8001896:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 8001898:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception |
 800189a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 800189e:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 80018a0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception |
 80018a4:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 80018a6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 80018aa:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 80018ac:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 80018b0:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 80018b4:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll |
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 80018bc:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll |
 80018be:	605a      	str	r2, [r3, #4]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFFR;
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	685b      	ldr	r3, [r3, #4]
 80018c6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80018ca:	2001      	movs	r0, #1
 80018cc:	f7ff f842 	bl	8000954 <HAL_Delay>
  (heth->Instance)->MACFFR = tmpreg1;
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80018d8:	605a      	str	r2, [r3, #4]

  /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
  /* Write to ETHERNET MACHTHR */
  (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80018e2:	609a      	str	r2, [r3, #8]

  /* Write to ETHERNET MACHTLR */
  (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80018ec:	60da      	str	r2, [r3, #12]
  /*----------------------- ETHERNET MACFCR Configuration -------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	699b      	ldr	r3, [r3, #24]
 80018f4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 80018f8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80018fc:	f64f 7341 	movw	r3, #65345	; 0xff41
 8001900:	4013      	ands	r3, r2
 8001902:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
  /* Set the PLT bit according to ETH PauseLowThreshold value */
  /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
  /* Set the RFE bit according to ETH ReceiveFlowControl value */
  /* Set the TFE bit according to ETH TransmitFlowControl value */
  tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) |
 8001906:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800190a:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 800190c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
  tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) |
 8001910:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 8001912:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 8001916:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect |
 8001918:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 800191c:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 800191e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect |
 8001922:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl);
 8001924:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 8001928:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) |
 800192a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800192e:	4313      	orrs	r3, r2
 8001930:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800193c:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	699b      	ldr	r3, [r3, #24]
 8001944:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001948:	2001      	movs	r0, #1
 800194a:	f7ff f803 	bl	8000954 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001956:	619a      	str	r2, [r3, #24]

  /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
  /* Set the ETV bit according to ETH VLANTagComparison value */
  /* Set the VL bit according to ETH VLANTagIdentifier value */
  (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison |
 8001958:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                           macinit.VLANTagIdentifier);
 800195c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
  (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison |
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	430a      	orrs	r2, r1
 8001966:	61da      	str	r2, [r3, #28]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACVLANTR;
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	69db      	ldr	r3, [r3, #28]
 800196e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001972:	2001      	movs	r0, #1
 8001974:	f7fe ffee 	bl	8000954 <HAL_Delay>
  (heth->Instance)->MACVLANTR = tmpreg1;
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001980:	61da      	str	r2, [r3, #28]

  /* Ethernet DMA default initialization ************************************/
  dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 8001982:	2300      	movs	r3, #0
 8001984:	60bb      	str	r3, [r7, #8]
  dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 8001986:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800198a:	60fb      	str	r3, [r7, #12]
  dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 800198c:	2300      	movs	r3, #0
 800198e:	613b      	str	r3, [r7, #16]
  dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;
 8001990:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001994:	617b      	str	r3, [r7, #20]
  dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8001996:	2300      	movs	r3, #0
 8001998:	61bb      	str	r3, [r7, #24]
  dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 800199a:	2300      	movs	r3, #0
 800199c:	61fb      	str	r3, [r7, #28]
  dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 800199e:	2300      	movs	r3, #0
 80019a0:	623b      	str	r3, [r7, #32]
  dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80019a2:	2300      	movs	r3, #0
 80019a4:	627b      	str	r3, [r7, #36]	; 0x24
  dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 80019a6:	2304      	movs	r3, #4
 80019a8:	62bb      	str	r3, [r7, #40]	; 0x28
  dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 80019aa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80019ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 80019b0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80019b4:	633b      	str	r3, [r7, #48]	; 0x30
  dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80019b6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80019ba:	637b      	str	r3, [r7, #52]	; 0x34
  dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80019bc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80019c0:	63bb      	str	r3, [r7, #56]	; 0x38
  dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 80019c2:	2380      	movs	r3, #128	; 0x80
 80019c4:	63fb      	str	r3, [r7, #60]	; 0x3c
  dmainit.DescriptorSkipLength = 0x0U;
 80019c6:	2300      	movs	r3, #0
 80019c8:	643b      	str	r3, [r7, #64]	; 0x40
  dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80019ca:	2300      	movs	r3, #0
 80019cc:	647b      	str	r3, [r7, #68]	; 0x44

  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80019d6:	3318      	adds	r3, #24
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80019de:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80019e2:	4b3e      	ldr	r3, [pc, #248]	; (8001adc <ETH_MACDMAConfig+0x390>)
 80019e4:	4013      	ands	r3, r2
 80019e6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the TTC bit according to ETH TransmitThresholdControl value */
  /* Set the FEF bit according to ETH ForwardErrorFrames value */
  /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
  /* Set the RTC bit according to ETH ReceiveThresholdControl value */
  /* Set the OSF bit according to ETH SecondFrameOperate value */
  tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame |
 80019ea:	68ba      	ldr	r2, [r7, #8]
                        dmainit.ReceiveStoreForward |
 80019ec:	68fb      	ldr	r3, [r7, #12]
  tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame |
 80019ee:	431a      	orrs	r2, r3
                        dmainit.FlushReceivedFrame |
 80019f0:	693b      	ldr	r3, [r7, #16]
                        dmainit.ReceiveStoreForward |
 80019f2:	431a      	orrs	r2, r3
                        dmainit.TransmitStoreForward |
 80019f4:	697b      	ldr	r3, [r7, #20]
                        dmainit.FlushReceivedFrame |
 80019f6:	431a      	orrs	r2, r3
                        dmainit.TransmitThresholdControl |
 80019f8:	69bb      	ldr	r3, [r7, #24]
                        dmainit.TransmitStoreForward |
 80019fa:	431a      	orrs	r2, r3
                        dmainit.ForwardErrorFrames |
 80019fc:	69fb      	ldr	r3, [r7, #28]
                        dmainit.TransmitThresholdControl |
 80019fe:	431a      	orrs	r2, r3
                        dmainit.ForwardUndersizedGoodFrames |
 8001a00:	6a3b      	ldr	r3, [r7, #32]
                        dmainit.ForwardErrorFrames |
 8001a02:	431a      	orrs	r2, r3
                        dmainit.ReceiveThresholdControl |
 8001a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                        dmainit.ForwardUndersizedGoodFrames |
 8001a06:	431a      	orrs	r2, r3
                        dmainit.SecondFrameOperate);
 8001a08:	6abb      	ldr	r3, [r7, #40]	; 0x28
                        dmainit.ReceiveThresholdControl |
 8001a0a:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame |
 8001a0c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001a10:	4313      	orrs	r3, r2
 8001a12:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a1e:	3318      	adds	r3, #24
 8001a20:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001a24:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a2e:	3318      	adds	r3, #24
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001a36:	2001      	movs	r0, #1
 8001a38:	f7fe ff8c 	bl	8000954 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a44:	3318      	adds	r3, #24
 8001a46:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001a4a:	601a      	str	r2, [r3, #0]
  /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
  /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
  /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
  /* Set the DSL bit according to ETH DesciptorSkipLength value */
  /* Set the PR and DA bits according to ETH DMAArbitration value */
  (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats |
 8001a4c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                        dmainit.FixedBurst |
 8001a4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats |
 8001a50:	431a      	orrs	r2, r3
                                        dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8001a52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                        dmainit.FixedBurst |
 8001a54:	431a      	orrs	r2, r3
                                        dmainit.TxDMABurstLength |
 8001a56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                        dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8001a58:	431a      	orrs	r2, r3
                                        dmainit.EnhancedDescriptorFormat |
 8001a5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                        dmainit.TxDMABurstLength |
 8001a5c:	431a      	orrs	r2, r3
                                        (dmainit.DescriptorSkipLength << 2U) |
 8001a5e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001a60:	009b      	lsls	r3, r3, #2
                                        dmainit.EnhancedDescriptorFormat |
 8001a62:	431a      	orrs	r2, r3
                                        dmainit.DMAArbitration |
 8001a64:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                        (dmainit.DescriptorSkipLength << 2U) |
 8001a66:	431a      	orrs	r2, r3
  (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats |
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001a70:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a74:	601a      	str	r2, [r3, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001a84:	2001      	movs	r0, #1
 8001a86:	f7fe ff65 	bl	8000954 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a92:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001a96:	601a      	str	r2, [r3, #0]

  if ((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	699b      	ldr	r3, [r3, #24]
 8001a9c:	2b01      	cmp	r3, #1
 8001a9e:	d10f      	bne.n	8001ac0 <ETH_MACDMAConfig+0x374>
  {
    /* Enable the Ethernet Rx Interrupt */
    __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001aa8:	331c      	adds	r3, #28
 8001aaa:	681a      	ldr	r2, [r3, #0]
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001ab4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001ab8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001abc:	331c      	adds	r3, #28
 8001abe:	601a      	str	r2, [r3, #0]
  }

  /* Initialize MAC address in ethernet MAC */
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	695b      	ldr	r3, [r3, #20]
 8001ac4:	461a      	mov	r2, r3
 8001ac6:	2100      	movs	r1, #0
 8001ac8:	6878      	ldr	r0, [r7, #4]
 8001aca:	f000 f809 	bl	8001ae0 <ETH_MACAddressConfig>
}
 8001ace:	bf00      	nop
 8001ad0:	37c0      	adds	r7, #192	; 0xc0
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bd80      	pop	{r7, pc}
 8001ad6:	bf00      	nop
 8001ad8:	ff20810f 	.word	0xff20810f
 8001adc:	f8de3f23 	.word	0xf8de3f23

08001ae0 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	b087      	sub	sp, #28
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	60f8      	str	r0, [r7, #12]
 8001ae8:	60b9      	str	r1, [r7, #8]
 8001aea:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	3305      	adds	r3, #5
 8001af0:	781b      	ldrb	r3, [r3, #0]
 8001af2:	021b      	lsls	r3, r3, #8
 8001af4:	687a      	ldr	r2, [r7, #4]
 8001af6:	3204      	adds	r2, #4
 8001af8:	7812      	ldrb	r2, [r2, #0]
 8001afa:	4313      	orrs	r3, r2
 8001afc:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8001afe:	68ba      	ldr	r2, [r7, #8]
 8001b00:	4b10      	ldr	r3, [pc, #64]	; (8001b44 <ETH_MACAddressConfig+0x64>)
 8001b02:	4413      	add	r3, r2
 8001b04:	461a      	mov	r2, r3
 8001b06:	697b      	ldr	r3, [r7, #20]
 8001b08:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	3303      	adds	r3, #3
 8001b0e:	781b      	ldrb	r3, [r3, #0]
 8001b10:	061a      	lsls	r2, r3, #24
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	3302      	adds	r3, #2
 8001b16:	781b      	ldrb	r3, [r3, #0]
 8001b18:	041b      	lsls	r3, r3, #16
 8001b1a:	431a      	orrs	r2, r3
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	3301      	adds	r3, #1
 8001b20:	781b      	ldrb	r3, [r3, #0]
 8001b22:	021b      	lsls	r3, r3, #8
 8001b24:	4313      	orrs	r3, r2
 8001b26:	687a      	ldr	r2, [r7, #4]
 8001b28:	7812      	ldrb	r2, [r2, #0]
 8001b2a:	4313      	orrs	r3, r2
 8001b2c:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8001b2e:	68ba      	ldr	r2, [r7, #8]
 8001b30:	4b05      	ldr	r3, [pc, #20]	; (8001b48 <ETH_MACAddressConfig+0x68>)
 8001b32:	4413      	add	r3, r2
 8001b34:	461a      	mov	r2, r3
 8001b36:	697b      	ldr	r3, [r7, #20]
 8001b38:	6013      	str	r3, [r2, #0]
}
 8001b3a:	bf00      	nop
 8001b3c:	371c      	adds	r7, #28
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	bc80      	pop	{r7}
 8001b42:	4770      	bx	lr
 8001b44:	40028040 	.word	0x40028040
 8001b48:	40028044 	.word	0x40028044

08001b4c <ETH_MACTransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b084      	sub	sp, #16
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8001b54:	2300      	movs	r3, #0
 8001b56:	60fb      	str	r3, [r7, #12]

  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	681a      	ldr	r2, [r3, #0]
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f042 0208 	orr.w	r2, r2, #8
 8001b66:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8001b70:	2001      	movs	r0, #1
 8001b72:	f000 f8e5 	bl	8001d40 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	68fa      	ldr	r2, [r7, #12]
 8001b7c:	601a      	str	r2, [r3, #0]
}
 8001b7e:	bf00      	nop
 8001b80:	3710      	adds	r7, #16
 8001b82:	46bd      	mov	sp, r7
 8001b84:	bd80      	pop	{r7, pc}

08001b86 <ETH_MACTransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MACTransmissionDisable(ETH_HandleTypeDef *heth)
{
 8001b86:	b580      	push	{r7, lr}
 8001b88:	b084      	sub	sp, #16
 8001b8a:	af00      	add	r7, sp, #0
 8001b8c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8001b8e:	2300      	movs	r3, #0
 8001b90:	60fb      	str	r3, [r7, #12]

  /* Disable the MAC transmission */
  (heth->Instance)->MACCR &= ~ETH_MACCR_TE;
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	681a      	ldr	r2, [r3, #0]
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f022 0208 	bic.w	r2, r2, #8
 8001ba0:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8001baa:	2001      	movs	r0, #1
 8001bac:	f000 f8c8 	bl	8001d40 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	68fa      	ldr	r2, [r7, #12]
 8001bb6:	601a      	str	r2, [r3, #0]
}
 8001bb8:	bf00      	nop
 8001bba:	3710      	adds	r7, #16
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	bd80      	pop	{r7, pc}

08001bc0 <ETH_MACReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b084      	sub	sp, #16
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8001bc8:	2300      	movs	r3, #0
 8001bca:	60fb      	str	r3, [r7, #12]

  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	681a      	ldr	r2, [r3, #0]
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f042 0204 	orr.w	r2, r2, #4
 8001bda:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8001be4:	2001      	movs	r0, #1
 8001be6:	f000 f8ab 	bl	8001d40 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	68fa      	ldr	r2, [r7, #12]
 8001bf0:	601a      	str	r2, [r3, #0]
}
 8001bf2:	bf00      	nop
 8001bf4:	3710      	adds	r7, #16
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	bd80      	pop	{r7, pc}

08001bfa <ETH_MACReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MACReceptionDisable(ETH_HandleTypeDef *heth)
{
 8001bfa:	b580      	push	{r7, lr}
 8001bfc:	b084      	sub	sp, #16
 8001bfe:	af00      	add	r7, sp, #0
 8001c00:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8001c02:	2300      	movs	r3, #0
 8001c04:	60fb      	str	r3, [r7, #12]

  /* Disable the MAC reception */
  (heth->Instance)->MACCR &= ~ETH_MACCR_RE;
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	681a      	ldr	r2, [r3, #0]
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f022 0204 	bic.w	r2, r2, #4
 8001c14:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8001c1e:	2001      	movs	r0, #1
 8001c20:	f000 f88e 	bl	8001d40 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	68fa      	ldr	r2, [r7, #12]
 8001c2a:	601a      	str	r2, [r3, #0]
}
 8001c2c:	bf00      	nop
 8001c2e:	3710      	adds	r7, #16
 8001c30:	46bd      	mov	sp, r7
 8001c32:	bd80      	pop	{r7, pc}

08001c34 <ETH_DMATransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 8001c34:	b480      	push	{r7}
 8001c36:	b083      	sub	sp, #12
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c44:	3318      	adds	r3, #24
 8001c46:	681a      	ldr	r2, [r3, #0]
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001c50:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c54:	3318      	adds	r3, #24
 8001c56:	601a      	str	r2, [r3, #0]
}
 8001c58:	bf00      	nop
 8001c5a:	370c      	adds	r7, #12
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	bc80      	pop	{r7}
 8001c60:	4770      	bx	lr

08001c62 <ETH_DMATransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATransmissionDisable(ETH_HandleTypeDef *heth)
{
 8001c62:	b480      	push	{r7}
 8001c64:	b083      	sub	sp, #12
 8001c66:	af00      	add	r7, sp, #0
 8001c68:	6078      	str	r0, [r7, #4]
  /* Disable the DMA transmission */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c72:	3318      	adds	r3, #24
 8001c74:	681a      	ldr	r2, [r3, #0]
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001c7e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c82:	3318      	adds	r3, #24
 8001c84:	601a      	str	r2, [r3, #0]
}
 8001c86:	bf00      	nop
 8001c88:	370c      	adds	r7, #12
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	bc80      	pop	{r7}
 8001c8e:	4770      	bx	lr

08001c90 <ETH_DMAReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{
 8001c90:	b480      	push	{r7}
 8001c92:	b083      	sub	sp, #12
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ca0:	3318      	adds	r3, #24
 8001ca2:	681a      	ldr	r2, [r3, #0]
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f042 0202 	orr.w	r2, r2, #2
 8001cac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001cb0:	3318      	adds	r3, #24
 8001cb2:	601a      	str	r2, [r3, #0]
}
 8001cb4:	bf00      	nop
 8001cb6:	370c      	adds	r7, #12
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	bc80      	pop	{r7}
 8001cbc:	4770      	bx	lr

08001cbe <ETH_DMAReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMAReceptionDisable(ETH_HandleTypeDef *heth)
{
 8001cbe:	b480      	push	{r7}
 8001cc0:	b083      	sub	sp, #12
 8001cc2:	af00      	add	r7, sp, #0
 8001cc4:	6078      	str	r0, [r7, #4]
  /* Disable the DMA reception */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_SR;
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001cce:	3318      	adds	r3, #24
 8001cd0:	681a      	ldr	r2, [r3, #0]
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f022 0202 	bic.w	r2, r2, #2
 8001cda:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001cde:	3318      	adds	r3, #24
 8001ce0:	601a      	str	r2, [r3, #0]
}
 8001ce2:	bf00      	nop
 8001ce4:	370c      	adds	r7, #12
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bc80      	pop	{r7}
 8001cea:	4770      	bx	lr

08001cec <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b084      	sub	sp, #16
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d00:	3318      	adds	r3, #24
 8001d02:	681a      	ldr	r2, [r3, #0]
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8001d0c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d10:	3318      	adds	r3, #24
 8001d12:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d1c:	3318      	adds	r3, #24
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8001d22:	2001      	movs	r0, #1
 8001d24:	f000 f80c 	bl	8001d40 <ETH_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	68fa      	ldr	r2, [r7, #12]
 8001d2e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d32:	3318      	adds	r3, #24
 8001d34:	601a      	str	r2, [r3, #0]
}
 8001d36:	bf00      	nop
 8001d38:	3710      	adds	r7, #16
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bd80      	pop	{r7, pc}
	...

08001d40 <ETH_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay specifies the delay time length, in milliseconds.
  * @retval None
  */
static void ETH_Delay(uint32_t mdelay)
{
 8001d40:	b480      	push	{r7}
 8001d42:	b085      	sub	sp, #20
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001d48:	4b0a      	ldr	r3, [pc, #40]	; (8001d74 <ETH_Delay+0x34>)
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	4a0a      	ldr	r2, [pc, #40]	; (8001d78 <ETH_Delay+0x38>)
 8001d4e:	fba2 2303 	umull	r2, r3, r2, r3
 8001d52:	0a5b      	lsrs	r3, r3, #9
 8001d54:	687a      	ldr	r2, [r7, #4]
 8001d56:	fb02 f303 	mul.w	r3, r2, r3
 8001d5a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001d5c:	bf00      	nop
  }
  while (Delay --);
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	1e5a      	subs	r2, r3, #1
 8001d62:	60fa      	str	r2, [r7, #12]
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d1f9      	bne.n	8001d5c <ETH_Delay+0x1c>
}
 8001d68:	bf00      	nop
 8001d6a:	bf00      	nop
 8001d6c:	3714      	adds	r7, #20
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	bc80      	pop	{r7}
 8001d72:	4770      	bx	lr
 8001d74:	20000000 	.word	0x20000000
 8001d78:	10624dd3 	.word	0x10624dd3

08001d7c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	b087      	sub	sp, #28
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
 8001d84:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001d86:	2300      	movs	r3, #0
 8001d88:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d8a:	e16f      	b.n	800206c <HAL_GPIO_Init+0x2f0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	681a      	ldr	r2, [r3, #0]
 8001d90:	2101      	movs	r1, #1
 8001d92:	697b      	ldr	r3, [r7, #20]
 8001d94:	fa01 f303 	lsl.w	r3, r1, r3
 8001d98:	4013      	ands	r3, r2
 8001d9a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	f000 8161 	beq.w	8002066 <HAL_GPIO_Init+0x2ea>
    {
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	685b      	ldr	r3, [r3, #4]
 8001da8:	f003 0303 	and.w	r3, r3, #3
 8001dac:	2b01      	cmp	r3, #1
 8001dae:	d005      	beq.n	8001dbc <HAL_GPIO_Init+0x40>
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	685b      	ldr	r3, [r3, #4]
 8001db4:	f003 0303 	and.w	r3, r3, #3
 8001db8:	2b02      	cmp	r3, #2
 8001dba:	d130      	bne.n	8001e1e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	689b      	ldr	r3, [r3, #8]
 8001dc0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001dc2:	697b      	ldr	r3, [r7, #20]
 8001dc4:	005b      	lsls	r3, r3, #1
 8001dc6:	2203      	movs	r2, #3
 8001dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dcc:	43db      	mvns	r3, r3
 8001dce:	693a      	ldr	r2, [r7, #16]
 8001dd0:	4013      	ands	r3, r2
 8001dd2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	68da      	ldr	r2, [r3, #12]
 8001dd8:	697b      	ldr	r3, [r7, #20]
 8001dda:	005b      	lsls	r3, r3, #1
 8001ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8001de0:	693a      	ldr	r2, [r7, #16]
 8001de2:	4313      	orrs	r3, r2
 8001de4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	693a      	ldr	r2, [r7, #16]
 8001dea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	685b      	ldr	r3, [r3, #4]
 8001df0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001df2:	2201      	movs	r2, #1
 8001df4:	697b      	ldr	r3, [r7, #20]
 8001df6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dfa:	43db      	mvns	r3, r3
 8001dfc:	693a      	ldr	r2, [r7, #16]
 8001dfe:	4013      	ands	r3, r2
 8001e00:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001e02:	683b      	ldr	r3, [r7, #0]
 8001e04:	685b      	ldr	r3, [r3, #4]
 8001e06:	091b      	lsrs	r3, r3, #4
 8001e08:	f003 0201 	and.w	r2, r3, #1
 8001e0c:	697b      	ldr	r3, [r7, #20]
 8001e0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e12:	693a      	ldr	r2, [r7, #16]
 8001e14:	4313      	orrs	r3, r2
 8001e16:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	693a      	ldr	r2, [r7, #16]
 8001e1c:	605a      	str	r2, [r3, #4]
      }
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001e1e:	683b      	ldr	r3, [r7, #0]
 8001e20:	685b      	ldr	r3, [r3, #4]
 8001e22:	f003 0303 	and.w	r3, r3, #3
 8001e26:	2b03      	cmp	r3, #3
 8001e28:	d017      	beq.n	8001e5a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	68db      	ldr	r3, [r3, #12]
 8001e2e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001e30:	697b      	ldr	r3, [r7, #20]
 8001e32:	005b      	lsls	r3, r3, #1
 8001e34:	2203      	movs	r2, #3
 8001e36:	fa02 f303 	lsl.w	r3, r2, r3
 8001e3a:	43db      	mvns	r3, r3
 8001e3c:	693a      	ldr	r2, [r7, #16]
 8001e3e:	4013      	ands	r3, r2
 8001e40:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001e42:	683b      	ldr	r3, [r7, #0]
 8001e44:	689a      	ldr	r2, [r3, #8]
 8001e46:	697b      	ldr	r3, [r7, #20]
 8001e48:	005b      	lsls	r3, r3, #1
 8001e4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e4e:	693a      	ldr	r2, [r7, #16]
 8001e50:	4313      	orrs	r3, r2
 8001e52:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	693a      	ldr	r2, [r7, #16]
 8001e58:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e5a:	683b      	ldr	r3, [r7, #0]
 8001e5c:	685b      	ldr	r3, [r3, #4]
 8001e5e:	f003 0303 	and.w	r3, r3, #3
 8001e62:	2b02      	cmp	r3, #2
 8001e64:	d123      	bne.n	8001eae <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001e66:	697b      	ldr	r3, [r7, #20]
 8001e68:	08da      	lsrs	r2, r3, #3
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	3208      	adds	r2, #8
 8001e6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e72:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001e74:	697b      	ldr	r3, [r7, #20]
 8001e76:	f003 0307 	and.w	r3, r3, #7
 8001e7a:	009b      	lsls	r3, r3, #2
 8001e7c:	220f      	movs	r2, #15
 8001e7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e82:	43db      	mvns	r3, r3
 8001e84:	693a      	ldr	r2, [r7, #16]
 8001e86:	4013      	ands	r3, r2
 8001e88:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001e8a:	683b      	ldr	r3, [r7, #0]
 8001e8c:	691a      	ldr	r2, [r3, #16]
 8001e8e:	697b      	ldr	r3, [r7, #20]
 8001e90:	f003 0307 	and.w	r3, r3, #7
 8001e94:	009b      	lsls	r3, r3, #2
 8001e96:	fa02 f303 	lsl.w	r3, r2, r3
 8001e9a:	693a      	ldr	r2, [r7, #16]
 8001e9c:	4313      	orrs	r3, r2
 8001e9e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001ea0:	697b      	ldr	r3, [r7, #20]
 8001ea2:	08da      	lsrs	r2, r3, #3
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	3208      	adds	r2, #8
 8001ea8:	6939      	ldr	r1, [r7, #16]
 8001eaa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001eb4:	697b      	ldr	r3, [r7, #20]
 8001eb6:	005b      	lsls	r3, r3, #1
 8001eb8:	2203      	movs	r2, #3
 8001eba:	fa02 f303 	lsl.w	r3, r2, r3
 8001ebe:	43db      	mvns	r3, r3
 8001ec0:	693a      	ldr	r2, [r7, #16]
 8001ec2:	4013      	ands	r3, r2
 8001ec4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001ec6:	683b      	ldr	r3, [r7, #0]
 8001ec8:	685b      	ldr	r3, [r3, #4]
 8001eca:	f003 0203 	and.w	r2, r3, #3
 8001ece:	697b      	ldr	r3, [r7, #20]
 8001ed0:	005b      	lsls	r3, r3, #1
 8001ed2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed6:	693a      	ldr	r2, [r7, #16]
 8001ed8:	4313      	orrs	r3, r2
 8001eda:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	693a      	ldr	r2, [r7, #16]
 8001ee0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	685b      	ldr	r3, [r3, #4]
 8001ee6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	f000 80bb 	beq.w	8002066 <HAL_GPIO_Init+0x2ea>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	60bb      	str	r3, [r7, #8]
 8001ef4:	4b64      	ldr	r3, [pc, #400]	; (8002088 <HAL_GPIO_Init+0x30c>)
 8001ef6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ef8:	4a63      	ldr	r2, [pc, #396]	; (8002088 <HAL_GPIO_Init+0x30c>)
 8001efa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001efe:	6453      	str	r3, [r2, #68]	; 0x44
 8001f00:	4b61      	ldr	r3, [pc, #388]	; (8002088 <HAL_GPIO_Init+0x30c>)
 8001f02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f04:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f08:	60bb      	str	r3, [r7, #8]
 8001f0a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001f0c:	4a5f      	ldr	r2, [pc, #380]	; (800208c <HAL_GPIO_Init+0x310>)
 8001f0e:	697b      	ldr	r3, [r7, #20]
 8001f10:	089b      	lsrs	r3, r3, #2
 8001f12:	3302      	adds	r3, #2
 8001f14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f18:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001f1a:	697b      	ldr	r3, [r7, #20]
 8001f1c:	f003 0303 	and.w	r3, r3, #3
 8001f20:	009b      	lsls	r3, r3, #2
 8001f22:	220f      	movs	r2, #15
 8001f24:	fa02 f303 	lsl.w	r3, r2, r3
 8001f28:	43db      	mvns	r3, r3
 8001f2a:	693a      	ldr	r2, [r7, #16]
 8001f2c:	4013      	ands	r3, r2
 8001f2e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	4a57      	ldr	r2, [pc, #348]	; (8002090 <HAL_GPIO_Init+0x314>)
 8001f34:	4293      	cmp	r3, r2
 8001f36:	d031      	beq.n	8001f9c <HAL_GPIO_Init+0x220>
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	4a56      	ldr	r2, [pc, #344]	; (8002094 <HAL_GPIO_Init+0x318>)
 8001f3c:	4293      	cmp	r3, r2
 8001f3e:	d02b      	beq.n	8001f98 <HAL_GPIO_Init+0x21c>
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	4a55      	ldr	r2, [pc, #340]	; (8002098 <HAL_GPIO_Init+0x31c>)
 8001f44:	4293      	cmp	r3, r2
 8001f46:	d025      	beq.n	8001f94 <HAL_GPIO_Init+0x218>
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	4a54      	ldr	r2, [pc, #336]	; (800209c <HAL_GPIO_Init+0x320>)
 8001f4c:	4293      	cmp	r3, r2
 8001f4e:	d01f      	beq.n	8001f90 <HAL_GPIO_Init+0x214>
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	4a53      	ldr	r2, [pc, #332]	; (80020a0 <HAL_GPIO_Init+0x324>)
 8001f54:	4293      	cmp	r3, r2
 8001f56:	d019      	beq.n	8001f8c <HAL_GPIO_Init+0x210>
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	4a52      	ldr	r2, [pc, #328]	; (80020a4 <HAL_GPIO_Init+0x328>)
 8001f5c:	4293      	cmp	r3, r2
 8001f5e:	d013      	beq.n	8001f88 <HAL_GPIO_Init+0x20c>
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	4a51      	ldr	r2, [pc, #324]	; (80020a8 <HAL_GPIO_Init+0x32c>)
 8001f64:	4293      	cmp	r3, r2
 8001f66:	d00d      	beq.n	8001f84 <HAL_GPIO_Init+0x208>
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	4a50      	ldr	r2, [pc, #320]	; (80020ac <HAL_GPIO_Init+0x330>)
 8001f6c:	4293      	cmp	r3, r2
 8001f6e:	d007      	beq.n	8001f80 <HAL_GPIO_Init+0x204>
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	4a4f      	ldr	r2, [pc, #316]	; (80020b0 <HAL_GPIO_Init+0x334>)
 8001f74:	4293      	cmp	r3, r2
 8001f76:	d101      	bne.n	8001f7c <HAL_GPIO_Init+0x200>
 8001f78:	2308      	movs	r3, #8
 8001f7a:	e010      	b.n	8001f9e <HAL_GPIO_Init+0x222>
 8001f7c:	2309      	movs	r3, #9
 8001f7e:	e00e      	b.n	8001f9e <HAL_GPIO_Init+0x222>
 8001f80:	2307      	movs	r3, #7
 8001f82:	e00c      	b.n	8001f9e <HAL_GPIO_Init+0x222>
 8001f84:	2306      	movs	r3, #6
 8001f86:	e00a      	b.n	8001f9e <HAL_GPIO_Init+0x222>
 8001f88:	2305      	movs	r3, #5
 8001f8a:	e008      	b.n	8001f9e <HAL_GPIO_Init+0x222>
 8001f8c:	2304      	movs	r3, #4
 8001f8e:	e006      	b.n	8001f9e <HAL_GPIO_Init+0x222>
 8001f90:	2303      	movs	r3, #3
 8001f92:	e004      	b.n	8001f9e <HAL_GPIO_Init+0x222>
 8001f94:	2302      	movs	r3, #2
 8001f96:	e002      	b.n	8001f9e <HAL_GPIO_Init+0x222>
 8001f98:	2301      	movs	r3, #1
 8001f9a:	e000      	b.n	8001f9e <HAL_GPIO_Init+0x222>
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	697a      	ldr	r2, [r7, #20]
 8001fa0:	f002 0203 	and.w	r2, r2, #3
 8001fa4:	0092      	lsls	r2, r2, #2
 8001fa6:	4093      	lsls	r3, r2
 8001fa8:	461a      	mov	r2, r3
 8001faa:	693b      	ldr	r3, [r7, #16]
 8001fac:	4313      	orrs	r3, r2
 8001fae:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001fb0:	4936      	ldr	r1, [pc, #216]	; (800208c <HAL_GPIO_Init+0x310>)
 8001fb2:	697b      	ldr	r3, [r7, #20]
 8001fb4:	089b      	lsrs	r3, r3, #2
 8001fb6:	3302      	adds	r3, #2
 8001fb8:	693a      	ldr	r2, [r7, #16]
 8001fba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001fbe:	4b3d      	ldr	r3, [pc, #244]	; (80020b4 <HAL_GPIO_Init+0x338>)
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	43db      	mvns	r3, r3
 8001fc8:	693a      	ldr	r2, [r7, #16]
 8001fca:	4013      	ands	r3, r2
 8001fcc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001fce:	683b      	ldr	r3, [r7, #0]
 8001fd0:	685b      	ldr	r3, [r3, #4]
 8001fd2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d003      	beq.n	8001fe2 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001fda:	693a      	ldr	r2, [r7, #16]
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	4313      	orrs	r3, r2
 8001fe0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001fe2:	4a34      	ldr	r2, [pc, #208]	; (80020b4 <HAL_GPIO_Init+0x338>)
 8001fe4:	693b      	ldr	r3, [r7, #16]
 8001fe6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001fe8:	4b32      	ldr	r3, [pc, #200]	; (80020b4 <HAL_GPIO_Init+0x338>)
 8001fea:	685b      	ldr	r3, [r3, #4]
 8001fec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	43db      	mvns	r3, r3
 8001ff2:	693a      	ldr	r2, [r7, #16]
 8001ff4:	4013      	ands	r3, r2
 8001ff6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	685b      	ldr	r3, [r3, #4]
 8001ffc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002000:	2b00      	cmp	r3, #0
 8002002:	d003      	beq.n	800200c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8002004:	693a      	ldr	r2, [r7, #16]
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	4313      	orrs	r3, r2
 800200a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800200c:	4a29      	ldr	r2, [pc, #164]	; (80020b4 <HAL_GPIO_Init+0x338>)
 800200e:	693b      	ldr	r3, [r7, #16]
 8002010:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002012:	4b28      	ldr	r3, [pc, #160]	; (80020b4 <HAL_GPIO_Init+0x338>)
 8002014:	689b      	ldr	r3, [r3, #8]
 8002016:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	43db      	mvns	r3, r3
 800201c:	693a      	ldr	r2, [r7, #16]
 800201e:	4013      	ands	r3, r2
 8002020:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002022:	683b      	ldr	r3, [r7, #0]
 8002024:	685b      	ldr	r3, [r3, #4]
 8002026:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800202a:	2b00      	cmp	r3, #0
 800202c:	d003      	beq.n	8002036 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800202e:	693a      	ldr	r2, [r7, #16]
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	4313      	orrs	r3, r2
 8002034:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002036:	4a1f      	ldr	r2, [pc, #124]	; (80020b4 <HAL_GPIO_Init+0x338>)
 8002038:	693b      	ldr	r3, [r7, #16]
 800203a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800203c:	4b1d      	ldr	r3, [pc, #116]	; (80020b4 <HAL_GPIO_Init+0x338>)
 800203e:	68db      	ldr	r3, [r3, #12]
 8002040:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	43db      	mvns	r3, r3
 8002046:	693a      	ldr	r2, [r7, #16]
 8002048:	4013      	ands	r3, r2
 800204a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	685b      	ldr	r3, [r3, #4]
 8002050:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002054:	2b00      	cmp	r3, #0
 8002056:	d003      	beq.n	8002060 <HAL_GPIO_Init+0x2e4>
        {
          temp |= iocurrent;
 8002058:	693a      	ldr	r2, [r7, #16]
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	4313      	orrs	r3, r2
 800205e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002060:	4a14      	ldr	r2, [pc, #80]	; (80020b4 <HAL_GPIO_Init+0x338>)
 8002062:	693b      	ldr	r3, [r7, #16]
 8002064:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002066:	697b      	ldr	r3, [r7, #20]
 8002068:	3301      	adds	r3, #1
 800206a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	681a      	ldr	r2, [r3, #0]
 8002070:	697b      	ldr	r3, [r7, #20]
 8002072:	fa22 f303 	lsr.w	r3, r2, r3
 8002076:	2b00      	cmp	r3, #0
 8002078:	f47f ae88 	bne.w	8001d8c <HAL_GPIO_Init+0x10>
  }
}
 800207c:	bf00      	nop
 800207e:	bf00      	nop
 8002080:	371c      	adds	r7, #28
 8002082:	46bd      	mov	sp, r7
 8002084:	bc80      	pop	{r7}
 8002086:	4770      	bx	lr
 8002088:	40023800 	.word	0x40023800
 800208c:	40013800 	.word	0x40013800
 8002090:	40020000 	.word	0x40020000
 8002094:	40020400 	.word	0x40020400
 8002098:	40020800 	.word	0x40020800
 800209c:	40020c00 	.word	0x40020c00
 80020a0:	40021000 	.word	0x40021000
 80020a4:	40021400 	.word	0x40021400
 80020a8:	40021800 	.word	0x40021800
 80020ac:	40021c00 	.word	0x40021c00
 80020b0:	40022000 	.word	0x40022000
 80020b4:	40013c00 	.word	0x40013c00

080020b8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b08a      	sub	sp, #40	; 0x28
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d101      	bne.n	80020ca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80020c6:	2301      	movs	r3, #1
 80020c8:	e237      	b.n	800253a <HAL_RCC_OscConfig+0x482>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f003 0301 	and.w	r3, r3, #1
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d050      	beq.n	8002178 <HAL_RCC_OscConfig+0xc0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80020d6:	4ba3      	ldr	r3, [pc, #652]	; (8002364 <HAL_RCC_OscConfig+0x2ac>)
 80020d8:	689b      	ldr	r3, [r3, #8]
 80020da:	f003 030c 	and.w	r3, r3, #12
 80020de:	2b04      	cmp	r3, #4
 80020e0:	d00c      	beq.n	80020fc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80020e2:	4ba0      	ldr	r3, [pc, #640]	; (8002364 <HAL_RCC_OscConfig+0x2ac>)
 80020e4:	689b      	ldr	r3, [r3, #8]
 80020e6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80020ea:	2b08      	cmp	r3, #8
 80020ec:	d112      	bne.n	8002114 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80020ee:	4b9d      	ldr	r3, [pc, #628]	; (8002364 <HAL_RCC_OscConfig+0x2ac>)
 80020f0:	685b      	ldr	r3, [r3, #4]
 80020f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80020f6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80020fa:	d10b      	bne.n	8002114 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020fc:	4b99      	ldr	r3, [pc, #612]	; (8002364 <HAL_RCC_OscConfig+0x2ac>)
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002104:	2b00      	cmp	r3, #0
 8002106:	d036      	beq.n	8002176 <HAL_RCC_OscConfig+0xbe>
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	685b      	ldr	r3, [r3, #4]
 800210c:	2b00      	cmp	r3, #0
 800210e:	d132      	bne.n	8002176 <HAL_RCC_OscConfig+0xbe>
      {
        return HAL_ERROR;
 8002110:	2301      	movs	r3, #1
 8002112:	e212      	b.n	800253a <HAL_RCC_OscConfig+0x482>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	685a      	ldr	r2, [r3, #4]
 8002118:	4b93      	ldr	r3, [pc, #588]	; (8002368 <HAL_RCC_OscConfig+0x2b0>)
 800211a:	b2d2      	uxtb	r2, r2
 800211c:	701a      	strb	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	685b      	ldr	r3, [r3, #4]
 8002122:	2b00      	cmp	r3, #0
 8002124:	d013      	beq.n	800214e <HAL_RCC_OscConfig+0x96>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002126:	f7fe fc0b 	bl	8000940 <HAL_GetTick>
 800212a:	6238      	str	r0, [r7, #32]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800212c:	e008      	b.n	8002140 <HAL_RCC_OscConfig+0x88>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800212e:	f7fe fc07 	bl	8000940 <HAL_GetTick>
 8002132:	4602      	mov	r2, r0
 8002134:	6a3b      	ldr	r3, [r7, #32]
 8002136:	1ad3      	subs	r3, r2, r3
 8002138:	2b64      	cmp	r3, #100	; 0x64
 800213a:	d901      	bls.n	8002140 <HAL_RCC_OscConfig+0x88>
          {
            return HAL_TIMEOUT;
 800213c:	2303      	movs	r3, #3
 800213e:	e1fc      	b.n	800253a <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002140:	4b88      	ldr	r3, [pc, #544]	; (8002364 <HAL_RCC_OscConfig+0x2ac>)
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002148:	2b00      	cmp	r3, #0
 800214a:	d0f0      	beq.n	800212e <HAL_RCC_OscConfig+0x76>
 800214c:	e014      	b.n	8002178 <HAL_RCC_OscConfig+0xc0>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800214e:	f7fe fbf7 	bl	8000940 <HAL_GetTick>
 8002152:	6238      	str	r0, [r7, #32]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002154:	e008      	b.n	8002168 <HAL_RCC_OscConfig+0xb0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002156:	f7fe fbf3 	bl	8000940 <HAL_GetTick>
 800215a:	4602      	mov	r2, r0
 800215c:	6a3b      	ldr	r3, [r7, #32]
 800215e:	1ad3      	subs	r3, r2, r3
 8002160:	2b64      	cmp	r3, #100	; 0x64
 8002162:	d901      	bls.n	8002168 <HAL_RCC_OscConfig+0xb0>
          {
            return HAL_TIMEOUT;
 8002164:	2303      	movs	r3, #3
 8002166:	e1e8      	b.n	800253a <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002168:	4b7e      	ldr	r3, [pc, #504]	; (8002364 <HAL_RCC_OscConfig+0x2ac>)
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002170:	2b00      	cmp	r3, #0
 8002172:	d1f0      	bne.n	8002156 <HAL_RCC_OscConfig+0x9e>
 8002174:	e000      	b.n	8002178 <HAL_RCC_OscConfig+0xc0>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002176:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f003 0302 	and.w	r3, r3, #2
 8002180:	2b00      	cmp	r3, #0
 8002182:	d077      	beq.n	8002274 <HAL_RCC_OscConfig+0x1bc>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002184:	4b77      	ldr	r3, [pc, #476]	; (8002364 <HAL_RCC_OscConfig+0x2ac>)
 8002186:	689b      	ldr	r3, [r3, #8]
 8002188:	f003 030c 	and.w	r3, r3, #12
 800218c:	2b00      	cmp	r3, #0
 800218e:	d00b      	beq.n	80021a8 <HAL_RCC_OscConfig+0xf0>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002190:	4b74      	ldr	r3, [pc, #464]	; (8002364 <HAL_RCC_OscConfig+0x2ac>)
 8002192:	689b      	ldr	r3, [r3, #8]
 8002194:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002198:	2b08      	cmp	r3, #8
 800219a:	d126      	bne.n	80021ea <HAL_RCC_OscConfig+0x132>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800219c:	4b71      	ldr	r3, [pc, #452]	; (8002364 <HAL_RCC_OscConfig+0x2ac>)
 800219e:	685b      	ldr	r3, [r3, #4]
 80021a0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d120      	bne.n	80021ea <HAL_RCC_OscConfig+0x132>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021a8:	4b6e      	ldr	r3, [pc, #440]	; (8002364 <HAL_RCC_OscConfig+0x2ac>)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f003 0302 	and.w	r3, r3, #2
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d005      	beq.n	80021c0 <HAL_RCC_OscConfig+0x108>
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	68db      	ldr	r3, [r3, #12]
 80021b8:	2b01      	cmp	r3, #1
 80021ba:	d001      	beq.n	80021c0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80021bc:	2301      	movs	r3, #1
 80021be:	e1bc      	b.n	800253a <HAL_RCC_OscConfig+0x482>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021c0:	4b68      	ldr	r3, [pc, #416]	; (8002364 <HAL_RCC_OscConfig+0x2ac>)
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	691b      	ldr	r3, [r3, #16]
 80021cc:	21f8      	movs	r1, #248	; 0xf8
 80021ce:	61b9      	str	r1, [r7, #24]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021d0:	69b9      	ldr	r1, [r7, #24]
 80021d2:	fa91 f1a1 	rbit	r1, r1
 80021d6:	6179      	str	r1, [r7, #20]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80021d8:	6979      	ldr	r1, [r7, #20]
 80021da:	fab1 f181 	clz	r1, r1
 80021de:	b2c9      	uxtb	r1, r1
 80021e0:	408b      	lsls	r3, r1
 80021e2:	4960      	ldr	r1, [pc, #384]	; (8002364 <HAL_RCC_OscConfig+0x2ac>)
 80021e4:	4313      	orrs	r3, r2
 80021e6:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021e8:	e044      	b.n	8002274 <HAL_RCC_OscConfig+0x1bc>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	68db      	ldr	r3, [r3, #12]
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d02a      	beq.n	8002248 <HAL_RCC_OscConfig+0x190>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80021f2:	4b5e      	ldr	r3, [pc, #376]	; (800236c <HAL_RCC_OscConfig+0x2b4>)
 80021f4:	2201      	movs	r2, #1
 80021f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021f8:	f7fe fba2 	bl	8000940 <HAL_GetTick>
 80021fc:	6238      	str	r0, [r7, #32]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021fe:	e008      	b.n	8002212 <HAL_RCC_OscConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002200:	f7fe fb9e 	bl	8000940 <HAL_GetTick>
 8002204:	4602      	mov	r2, r0
 8002206:	6a3b      	ldr	r3, [r7, #32]
 8002208:	1ad3      	subs	r3, r2, r3
 800220a:	2b02      	cmp	r3, #2
 800220c:	d901      	bls.n	8002212 <HAL_RCC_OscConfig+0x15a>
          {
            return HAL_TIMEOUT;
 800220e:	2303      	movs	r3, #3
 8002210:	e193      	b.n	800253a <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002212:	4b54      	ldr	r3, [pc, #336]	; (8002364 <HAL_RCC_OscConfig+0x2ac>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f003 0302 	and.w	r3, r3, #2
 800221a:	2b00      	cmp	r3, #0
 800221c:	d0f0      	beq.n	8002200 <HAL_RCC_OscConfig+0x148>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800221e:	4b51      	ldr	r3, [pc, #324]	; (8002364 <HAL_RCC_OscConfig+0x2ac>)
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	691b      	ldr	r3, [r3, #16]
 800222a:	21f8      	movs	r1, #248	; 0xf8
 800222c:	6139      	str	r1, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800222e:	6939      	ldr	r1, [r7, #16]
 8002230:	fa91 f1a1 	rbit	r1, r1
 8002234:	60f9      	str	r1, [r7, #12]
  return result;
 8002236:	68f9      	ldr	r1, [r7, #12]
 8002238:	fab1 f181 	clz	r1, r1
 800223c:	b2c9      	uxtb	r1, r1
 800223e:	408b      	lsls	r3, r1
 8002240:	4948      	ldr	r1, [pc, #288]	; (8002364 <HAL_RCC_OscConfig+0x2ac>)
 8002242:	4313      	orrs	r3, r2
 8002244:	600b      	str	r3, [r1, #0]
 8002246:	e015      	b.n	8002274 <HAL_RCC_OscConfig+0x1bc>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002248:	4b48      	ldr	r3, [pc, #288]	; (800236c <HAL_RCC_OscConfig+0x2b4>)
 800224a:	2200      	movs	r2, #0
 800224c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800224e:	f7fe fb77 	bl	8000940 <HAL_GetTick>
 8002252:	6238      	str	r0, [r7, #32]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002254:	e008      	b.n	8002268 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002256:	f7fe fb73 	bl	8000940 <HAL_GetTick>
 800225a:	4602      	mov	r2, r0
 800225c:	6a3b      	ldr	r3, [r7, #32]
 800225e:	1ad3      	subs	r3, r2, r3
 8002260:	2b02      	cmp	r3, #2
 8002262:	d901      	bls.n	8002268 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8002264:	2303      	movs	r3, #3
 8002266:	e168      	b.n	800253a <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002268:	4b3e      	ldr	r3, [pc, #248]	; (8002364 <HAL_RCC_OscConfig+0x2ac>)
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f003 0302 	and.w	r3, r3, #2
 8002270:	2b00      	cmp	r3, #0
 8002272:	d1f0      	bne.n	8002256 <HAL_RCC_OscConfig+0x19e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f003 0308 	and.w	r3, r3, #8
 800227c:	2b00      	cmp	r3, #0
 800227e:	d030      	beq.n	80022e2 <HAL_RCC_OscConfig+0x22a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	695b      	ldr	r3, [r3, #20]
 8002284:	2b00      	cmp	r3, #0
 8002286:	d016      	beq.n	80022b6 <HAL_RCC_OscConfig+0x1fe>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002288:	4b39      	ldr	r3, [pc, #228]	; (8002370 <HAL_RCC_OscConfig+0x2b8>)
 800228a:	2201      	movs	r2, #1
 800228c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800228e:	f7fe fb57 	bl	8000940 <HAL_GetTick>
 8002292:	6238      	str	r0, [r7, #32]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002294:	e008      	b.n	80022a8 <HAL_RCC_OscConfig+0x1f0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002296:	f7fe fb53 	bl	8000940 <HAL_GetTick>
 800229a:	4602      	mov	r2, r0
 800229c:	6a3b      	ldr	r3, [r7, #32]
 800229e:	1ad3      	subs	r3, r2, r3
 80022a0:	2b02      	cmp	r3, #2
 80022a2:	d901      	bls.n	80022a8 <HAL_RCC_OscConfig+0x1f0>
        {
          return HAL_TIMEOUT;
 80022a4:	2303      	movs	r3, #3
 80022a6:	e148      	b.n	800253a <HAL_RCC_OscConfig+0x482>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022a8:	4b2e      	ldr	r3, [pc, #184]	; (8002364 <HAL_RCC_OscConfig+0x2ac>)
 80022aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80022ac:	f003 0302 	and.w	r3, r3, #2
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d0f0      	beq.n	8002296 <HAL_RCC_OscConfig+0x1de>
 80022b4:	e015      	b.n	80022e2 <HAL_RCC_OscConfig+0x22a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80022b6:	4b2e      	ldr	r3, [pc, #184]	; (8002370 <HAL_RCC_OscConfig+0x2b8>)
 80022b8:	2200      	movs	r2, #0
 80022ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022bc:	f7fe fb40 	bl	8000940 <HAL_GetTick>
 80022c0:	6238      	str	r0, [r7, #32]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022c2:	e008      	b.n	80022d6 <HAL_RCC_OscConfig+0x21e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80022c4:	f7fe fb3c 	bl	8000940 <HAL_GetTick>
 80022c8:	4602      	mov	r2, r0
 80022ca:	6a3b      	ldr	r3, [r7, #32]
 80022cc:	1ad3      	subs	r3, r2, r3
 80022ce:	2b02      	cmp	r3, #2
 80022d0:	d901      	bls.n	80022d6 <HAL_RCC_OscConfig+0x21e>
        {
          return HAL_TIMEOUT;
 80022d2:	2303      	movs	r3, #3
 80022d4:	e131      	b.n	800253a <HAL_RCC_OscConfig+0x482>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022d6:	4b23      	ldr	r3, [pc, #140]	; (8002364 <HAL_RCC_OscConfig+0x2ac>)
 80022d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80022da:	f003 0302 	and.w	r3, r3, #2
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d1f0      	bne.n	80022c4 <HAL_RCC_OscConfig+0x20c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f003 0304 	and.w	r3, r3, #4
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	f000 8088 	beq.w	8002400 <HAL_RCC_OscConfig+0x348>
  {
    FlagStatus       pwrclkchanged = RESET;
 80022f0:	2300      	movs	r3, #0
 80022f2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80022f6:	4b1b      	ldr	r3, [pc, #108]	; (8002364 <HAL_RCC_OscConfig+0x2ac>)
 80022f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d110      	bne.n	8002324 <HAL_RCC_OscConfig+0x26c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002302:	2300      	movs	r3, #0
 8002304:	60bb      	str	r3, [r7, #8]
 8002306:	4b17      	ldr	r3, [pc, #92]	; (8002364 <HAL_RCC_OscConfig+0x2ac>)
 8002308:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800230a:	4a16      	ldr	r2, [pc, #88]	; (8002364 <HAL_RCC_OscConfig+0x2ac>)
 800230c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002310:	6413      	str	r3, [r2, #64]	; 0x40
 8002312:	4b14      	ldr	r3, [pc, #80]	; (8002364 <HAL_RCC_OscConfig+0x2ac>)
 8002314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002316:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800231a:	60bb      	str	r3, [r7, #8]
 800231c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800231e:	2301      	movs	r3, #1
 8002320:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8002324:	4b13      	ldr	r3, [pc, #76]	; (8002374 <HAL_RCC_OscConfig+0x2bc>)
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	4a12      	ldr	r2, [pc, #72]	; (8002374 <HAL_RCC_OscConfig+0x2bc>)
 800232a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800232e:	6013      	str	r3, [r2, #0]

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002330:	4b10      	ldr	r3, [pc, #64]	; (8002374 <HAL_RCC_OscConfig+0x2bc>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002338:	2b00      	cmp	r3, #0
 800233a:	d123      	bne.n	8002384 <HAL_RCC_OscConfig+0x2cc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800233c:	4b0d      	ldr	r3, [pc, #52]	; (8002374 <HAL_RCC_OscConfig+0x2bc>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	4a0c      	ldr	r2, [pc, #48]	; (8002374 <HAL_RCC_OscConfig+0x2bc>)
 8002342:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002346:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002348:	f7fe fafa 	bl	8000940 <HAL_GetTick>
 800234c:	6238      	str	r0, [r7, #32]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800234e:	e013      	b.n	8002378 <HAL_RCC_OscConfig+0x2c0>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002350:	f7fe faf6 	bl	8000940 <HAL_GetTick>
 8002354:	4602      	mov	r2, r0
 8002356:	6a3b      	ldr	r3, [r7, #32]
 8002358:	1ad3      	subs	r3, r2, r3
 800235a:	2b02      	cmp	r3, #2
 800235c:	d90c      	bls.n	8002378 <HAL_RCC_OscConfig+0x2c0>
        {
          return HAL_TIMEOUT;
 800235e:	2303      	movs	r3, #3
 8002360:	e0eb      	b.n	800253a <HAL_RCC_OscConfig+0x482>
 8002362:	bf00      	nop
 8002364:	40023800 	.word	0x40023800
 8002368:	40023802 	.word	0x40023802
 800236c:	42470000 	.word	0x42470000
 8002370:	42470e80 	.word	0x42470e80
 8002374:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002378:	4b72      	ldr	r3, [pc, #456]	; (8002544 <HAL_RCC_OscConfig+0x48c>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002380:	2b00      	cmp	r3, #0
 8002382:	d0e5      	beq.n	8002350 <HAL_RCC_OscConfig+0x298>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	689a      	ldr	r2, [r3, #8]
 8002388:	4b6f      	ldr	r3, [pc, #444]	; (8002548 <HAL_RCC_OscConfig+0x490>)
 800238a:	b2d2      	uxtb	r2, r2
 800238c:	701a      	strb	r2, [r3, #0]
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	689b      	ldr	r3, [r3, #8]
 8002392:	2b00      	cmp	r3, #0
 8002394:	d015      	beq.n	80023c2 <HAL_RCC_OscConfig+0x30a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002396:	f7fe fad3 	bl	8000940 <HAL_GetTick>
 800239a:	6238      	str	r0, [r7, #32]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800239c:	e00a      	b.n	80023b4 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800239e:	f7fe facf 	bl	8000940 <HAL_GetTick>
 80023a2:	4602      	mov	r2, r0
 80023a4:	6a3b      	ldr	r3, [r7, #32]
 80023a6:	1ad3      	subs	r3, r2, r3
 80023a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80023ac:	4293      	cmp	r3, r2
 80023ae:	d901      	bls.n	80023b4 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80023b0:	2303      	movs	r3, #3
 80023b2:	e0c2      	b.n	800253a <HAL_RCC_OscConfig+0x482>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023b4:	4b65      	ldr	r3, [pc, #404]	; (800254c <HAL_RCC_OscConfig+0x494>)
 80023b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023b8:	f003 0302 	and.w	r3, r3, #2
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d0ee      	beq.n	800239e <HAL_RCC_OscConfig+0x2e6>
 80023c0:	e014      	b.n	80023ec <HAL_RCC_OscConfig+0x334>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023c2:	f7fe fabd 	bl	8000940 <HAL_GetTick>
 80023c6:	6238      	str	r0, [r7, #32]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023c8:	e00a      	b.n	80023e0 <HAL_RCC_OscConfig+0x328>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80023ca:	f7fe fab9 	bl	8000940 <HAL_GetTick>
 80023ce:	4602      	mov	r2, r0
 80023d0:	6a3b      	ldr	r3, [r7, #32]
 80023d2:	1ad3      	subs	r3, r2, r3
 80023d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80023d8:	4293      	cmp	r3, r2
 80023da:	d901      	bls.n	80023e0 <HAL_RCC_OscConfig+0x328>
        {
          return HAL_TIMEOUT;
 80023dc:	2303      	movs	r3, #3
 80023de:	e0ac      	b.n	800253a <HAL_RCC_OscConfig+0x482>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023e0:	4b5a      	ldr	r3, [pc, #360]	; (800254c <HAL_RCC_OscConfig+0x494>)
 80023e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023e4:	f003 0302 	and.w	r3, r3, #2
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d1ee      	bne.n	80023ca <HAL_RCC_OscConfig+0x312>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80023ec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80023f0:	2b01      	cmp	r3, #1
 80023f2:	d105      	bne.n	8002400 <HAL_RCC_OscConfig+0x348>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80023f4:	4b55      	ldr	r3, [pc, #340]	; (800254c <HAL_RCC_OscConfig+0x494>)
 80023f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023f8:	4a54      	ldr	r2, [pc, #336]	; (800254c <HAL_RCC_OscConfig+0x494>)
 80023fa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80023fe:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	699b      	ldr	r3, [r3, #24]
 8002404:	2b00      	cmp	r3, #0
 8002406:	f000 8097 	beq.w	8002538 <HAL_RCC_OscConfig+0x480>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800240a:	4b50      	ldr	r3, [pc, #320]	; (800254c <HAL_RCC_OscConfig+0x494>)
 800240c:	689b      	ldr	r3, [r3, #8]
 800240e:	f003 030c 	and.w	r3, r3, #12
 8002412:	2b08      	cmp	r3, #8
 8002414:	d061      	beq.n	80024da <HAL_RCC_OscConfig+0x422>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	699b      	ldr	r3, [r3, #24]
 800241a:	2b02      	cmp	r3, #2
 800241c:	d146      	bne.n	80024ac <HAL_RCC_OscConfig+0x3f4>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800241e:	4b4c      	ldr	r3, [pc, #304]	; (8002550 <HAL_RCC_OscConfig+0x498>)
 8002420:	2200      	movs	r2, #0
 8002422:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002424:	f7fe fa8c 	bl	8000940 <HAL_GetTick>
 8002428:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800242a:	e008      	b.n	800243e <HAL_RCC_OscConfig+0x386>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800242c:	f7fe fa88 	bl	8000940 <HAL_GetTick>
 8002430:	4602      	mov	r2, r0
 8002432:	6a3b      	ldr	r3, [r7, #32]
 8002434:	1ad3      	subs	r3, r2, r3
 8002436:	2b64      	cmp	r3, #100	; 0x64
 8002438:	d901      	bls.n	800243e <HAL_RCC_OscConfig+0x386>
          {
            return HAL_TIMEOUT;
 800243a:	2303      	movs	r3, #3
 800243c:	e07d      	b.n	800253a <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800243e:	4b43      	ldr	r3, [pc, #268]	; (800254c <HAL_RCC_OscConfig+0x494>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002446:	2b00      	cmp	r3, #0
 8002448:	d1f0      	bne.n	800242c <HAL_RCC_OscConfig+0x374>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800244a:	4b40      	ldr	r3, [pc, #256]	; (800254c <HAL_RCC_OscConfig+0x494>)
 800244c:	685a      	ldr	r2, [r3, #4]
 800244e:	4b41      	ldr	r3, [pc, #260]	; (8002554 <HAL_RCC_OscConfig+0x49c>)
 8002450:	4013      	ands	r3, r2
 8002452:	687a      	ldr	r2, [r7, #4]
 8002454:	69d1      	ldr	r1, [r2, #28]
 8002456:	687a      	ldr	r2, [r7, #4]
 8002458:	6a12      	ldr	r2, [r2, #32]
 800245a:	4311      	orrs	r1, r2
 800245c:	687a      	ldr	r2, [r7, #4]
 800245e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002460:	0192      	lsls	r2, r2, #6
 8002462:	4311      	orrs	r1, r2
 8002464:	687a      	ldr	r2, [r7, #4]
 8002466:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002468:	0612      	lsls	r2, r2, #24
 800246a:	4311      	orrs	r1, r2
 800246c:	687a      	ldr	r2, [r7, #4]
 800246e:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8002470:	0852      	lsrs	r2, r2, #1
 8002472:	3a01      	subs	r2, #1
 8002474:	0412      	lsls	r2, r2, #16
 8002476:	430a      	orrs	r2, r1
 8002478:	4934      	ldr	r1, [pc, #208]	; (800254c <HAL_RCC_OscConfig+0x494>)
 800247a:	4313      	orrs	r3, r2
 800247c:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800247e:	4b34      	ldr	r3, [pc, #208]	; (8002550 <HAL_RCC_OscConfig+0x498>)
 8002480:	2201      	movs	r2, #1
 8002482:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002484:	f7fe fa5c 	bl	8000940 <HAL_GetTick>
 8002488:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800248a:	e008      	b.n	800249e <HAL_RCC_OscConfig+0x3e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800248c:	f7fe fa58 	bl	8000940 <HAL_GetTick>
 8002490:	4602      	mov	r2, r0
 8002492:	6a3b      	ldr	r3, [r7, #32]
 8002494:	1ad3      	subs	r3, r2, r3
 8002496:	2b64      	cmp	r3, #100	; 0x64
 8002498:	d901      	bls.n	800249e <HAL_RCC_OscConfig+0x3e6>
          {
            return HAL_TIMEOUT;
 800249a:	2303      	movs	r3, #3
 800249c:	e04d      	b.n	800253a <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800249e:	4b2b      	ldr	r3, [pc, #172]	; (800254c <HAL_RCC_OscConfig+0x494>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d0f0      	beq.n	800248c <HAL_RCC_OscConfig+0x3d4>
 80024aa:	e045      	b.n	8002538 <HAL_RCC_OscConfig+0x480>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024ac:	4b28      	ldr	r3, [pc, #160]	; (8002550 <HAL_RCC_OscConfig+0x498>)
 80024ae:	2200      	movs	r2, #0
 80024b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024b2:	f7fe fa45 	bl	8000940 <HAL_GetTick>
 80024b6:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024b8:	e008      	b.n	80024cc <HAL_RCC_OscConfig+0x414>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024ba:	f7fe fa41 	bl	8000940 <HAL_GetTick>
 80024be:	4602      	mov	r2, r0
 80024c0:	6a3b      	ldr	r3, [r7, #32]
 80024c2:	1ad3      	subs	r3, r2, r3
 80024c4:	2b64      	cmp	r3, #100	; 0x64
 80024c6:	d901      	bls.n	80024cc <HAL_RCC_OscConfig+0x414>
          {
            return HAL_TIMEOUT;
 80024c8:	2303      	movs	r3, #3
 80024ca:	e036      	b.n	800253a <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024cc:	4b1f      	ldr	r3, [pc, #124]	; (800254c <HAL_RCC_OscConfig+0x494>)
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d1f0      	bne.n	80024ba <HAL_RCC_OscConfig+0x402>
 80024d8:	e02e      	b.n	8002538 <HAL_RCC_OscConfig+0x480>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	699b      	ldr	r3, [r3, #24]
 80024de:	2b01      	cmp	r3, #1
 80024e0:	d101      	bne.n	80024e6 <HAL_RCC_OscConfig+0x42e>
      {
        return HAL_ERROR;
 80024e2:	2301      	movs	r3, #1
 80024e4:	e029      	b.n	800253a <HAL_RCC_OscConfig+0x482>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        uint32_t pllcfgr = RCC->PLLCFGR;
 80024e6:	4b19      	ldr	r3, [pc, #100]	; (800254c <HAL_RCC_OscConfig+0x494>)
 80024e8:	685b      	ldr	r3, [r3, #4]
 80024ea:	61fb      	str	r3, [r7, #28]
      
        if((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024ec:	69fb      	ldr	r3, [r7, #28]
 80024ee:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	69db      	ldr	r3, [r3, #28]
 80024f6:	429a      	cmp	r2, r3
 80024f8:	d11c      	bne.n	8002534 <HAL_RCC_OscConfig+0x47c>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80024fa:	69fb      	ldr	r3, [r7, #28]
 80024fc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002504:	429a      	cmp	r2, r3
 8002506:	d115      	bne.n	8002534 <HAL_RCC_OscConfig+0x47c>
           ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8002508:	69fb      	ldr	r3, [r7, #28]
 800250a:	099b      	lsrs	r3, r3, #6
 800250c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002514:	429a      	cmp	r2, r3
 8002516:	d10d      	bne.n	8002534 <HAL_RCC_OscConfig+0x47c>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002518:	69fb      	ldr	r3, [r7, #28]
 800251a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8002522:	429a      	cmp	r2, r3
 8002524:	d106      	bne.n	8002534 <HAL_RCC_OscConfig+0x47c>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8002526:	69fb      	ldr	r3, [r7, #28]
 8002528:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002530:	429a      	cmp	r2, r3
 8002532:	d001      	beq.n	8002538 <HAL_RCC_OscConfig+0x480>
        {
          return HAL_ERROR;
 8002534:	2301      	movs	r3, #1
 8002536:	e000      	b.n	800253a <HAL_RCC_OscConfig+0x482>
        }
      }
    }
  }
  return HAL_OK;
 8002538:	2300      	movs	r3, #0
}
 800253a:	4618      	mov	r0, r3
 800253c:	3728      	adds	r7, #40	; 0x28
 800253e:	46bd      	mov	sp, r7
 8002540:	bd80      	pop	{r7, pc}
 8002542:	bf00      	nop
 8002544:	40007000 	.word	0x40007000
 8002548:	40023870 	.word	0x40023870
 800254c:	40023800 	.word	0x40023800
 8002550:	42470060 	.word	0x42470060
 8002554:	f0bc8000 	.word	0xf0bc8000

08002558 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b086      	sub	sp, #24
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
 8002560:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	2b00      	cmp	r3, #0
 8002566:	d101      	bne.n	800256c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002568:	2301      	movs	r3, #1
 800256a:	e0d2      	b.n	8002712 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800256c:	4b6b      	ldr	r3, [pc, #428]	; (800271c <HAL_RCC_ClockConfig+0x1c4>)
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f003 030f 	and.w	r3, r3, #15
 8002574:	683a      	ldr	r2, [r7, #0]
 8002576:	429a      	cmp	r2, r3
 8002578:	d90c      	bls.n	8002594 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800257a:	4b68      	ldr	r3, [pc, #416]	; (800271c <HAL_RCC_ClockConfig+0x1c4>)
 800257c:	683a      	ldr	r2, [r7, #0]
 800257e:	b2d2      	uxtb	r2, r2
 8002580:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002582:	4b66      	ldr	r3, [pc, #408]	; (800271c <HAL_RCC_ClockConfig+0x1c4>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f003 030f 	and.w	r3, r3, #15
 800258a:	683a      	ldr	r2, [r7, #0]
 800258c:	429a      	cmp	r2, r3
 800258e:	d001      	beq.n	8002594 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002590:	2301      	movs	r3, #1
 8002592:	e0be      	b.n	8002712 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f003 0302 	and.w	r3, r3, #2
 800259c:	2b00      	cmp	r3, #0
 800259e:	d020      	beq.n	80025e2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f003 0304 	and.w	r3, r3, #4
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d005      	beq.n	80025b8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80025ac:	4b5c      	ldr	r3, [pc, #368]	; (8002720 <HAL_RCC_ClockConfig+0x1c8>)
 80025ae:	689b      	ldr	r3, [r3, #8]
 80025b0:	4a5b      	ldr	r2, [pc, #364]	; (8002720 <HAL_RCC_ClockConfig+0x1c8>)
 80025b2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80025b6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f003 0308 	and.w	r3, r3, #8
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d005      	beq.n	80025d0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3U));
 80025c4:	4b56      	ldr	r3, [pc, #344]	; (8002720 <HAL_RCC_ClockConfig+0x1c8>)
 80025c6:	689b      	ldr	r3, [r3, #8]
 80025c8:	4a55      	ldr	r2, [pc, #340]	; (8002720 <HAL_RCC_ClockConfig+0x1c8>)
 80025ca:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80025ce:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80025d0:	4b53      	ldr	r3, [pc, #332]	; (8002720 <HAL_RCC_ClockConfig+0x1c8>)
 80025d2:	689b      	ldr	r3, [r3, #8]
 80025d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	689b      	ldr	r3, [r3, #8]
 80025dc:	4950      	ldr	r1, [pc, #320]	; (8002720 <HAL_RCC_ClockConfig+0x1c8>)
 80025de:	4313      	orrs	r3, r2
 80025e0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f003 0301 	and.w	r3, r3, #1
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d040      	beq.n	8002670 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	685b      	ldr	r3, [r3, #4]
 80025f2:	2b01      	cmp	r3, #1
 80025f4:	d107      	bne.n	8002606 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025f6:	4b4a      	ldr	r3, [pc, #296]	; (8002720 <HAL_RCC_ClockConfig+0x1c8>)
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d115      	bne.n	800262e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002602:	2301      	movs	r3, #1
 8002604:	e085      	b.n	8002712 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	685b      	ldr	r3, [r3, #4]
 800260a:	2b02      	cmp	r3, #2
 800260c:	d107      	bne.n	800261e <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800260e:	4b44      	ldr	r3, [pc, #272]	; (8002720 <HAL_RCC_ClockConfig+0x1c8>)
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002616:	2b00      	cmp	r3, #0
 8002618:	d109      	bne.n	800262e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800261a:	2301      	movs	r3, #1
 800261c:	e079      	b.n	8002712 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800261e:	4b40      	ldr	r3, [pc, #256]	; (8002720 <HAL_RCC_ClockConfig+0x1c8>)
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f003 0302 	and.w	r3, r3, #2
 8002626:	2b00      	cmp	r3, #0
 8002628:	d101      	bne.n	800262e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800262a:	2301      	movs	r3, #1
 800262c:	e071      	b.n	8002712 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800262e:	4b3c      	ldr	r3, [pc, #240]	; (8002720 <HAL_RCC_ClockConfig+0x1c8>)
 8002630:	689b      	ldr	r3, [r3, #8]
 8002632:	f023 0203 	bic.w	r2, r3, #3
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	685b      	ldr	r3, [r3, #4]
 800263a:	4939      	ldr	r1, [pc, #228]	; (8002720 <HAL_RCC_ClockConfig+0x1c8>)
 800263c:	4313      	orrs	r3, r2
 800263e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002640:	f7fe f97e 	bl	8000940 <HAL_GetTick>
 8002644:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002646:	e00a      	b.n	800265e <HAL_RCC_ClockConfig+0x106>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002648:	f7fe f97a 	bl	8000940 <HAL_GetTick>
 800264c:	4602      	mov	r2, r0
 800264e:	697b      	ldr	r3, [r7, #20]
 8002650:	1ad3      	subs	r3, r2, r3
 8002652:	f241 3288 	movw	r2, #5000	; 0x1388
 8002656:	4293      	cmp	r3, r2
 8002658:	d901      	bls.n	800265e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800265a:	2303      	movs	r3, #3
 800265c:	e059      	b.n	8002712 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800265e:	4b30      	ldr	r3, [pc, #192]	; (8002720 <HAL_RCC_ClockConfig+0x1c8>)
 8002660:	689b      	ldr	r3, [r3, #8]
 8002662:	f003 020c 	and.w	r2, r3, #12
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	685b      	ldr	r3, [r3, #4]
 800266a:	009b      	lsls	r3, r3, #2
 800266c:	429a      	cmp	r2, r3
 800266e:	d1eb      	bne.n	8002648 <HAL_RCC_ClockConfig+0xf0>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002670:	4b2a      	ldr	r3, [pc, #168]	; (800271c <HAL_RCC_ClockConfig+0x1c4>)
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f003 030f 	and.w	r3, r3, #15
 8002678:	683a      	ldr	r2, [r7, #0]
 800267a:	429a      	cmp	r2, r3
 800267c:	d20c      	bcs.n	8002698 <HAL_RCC_ClockConfig+0x140>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800267e:	4b27      	ldr	r3, [pc, #156]	; (800271c <HAL_RCC_ClockConfig+0x1c4>)
 8002680:	683a      	ldr	r2, [r7, #0]
 8002682:	b2d2      	uxtb	r2, r2
 8002684:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002686:	4b25      	ldr	r3, [pc, #148]	; (800271c <HAL_RCC_ClockConfig+0x1c4>)
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f003 030f 	and.w	r3, r3, #15
 800268e:	683a      	ldr	r2, [r7, #0]
 8002690:	429a      	cmp	r2, r3
 8002692:	d001      	beq.n	8002698 <HAL_RCC_ClockConfig+0x140>
    {
      return HAL_ERROR;
 8002694:	2301      	movs	r3, #1
 8002696:	e03c      	b.n	8002712 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f003 0304 	and.w	r3, r3, #4
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d008      	beq.n	80026b6 <HAL_RCC_ClockConfig+0x15e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80026a4:	4b1e      	ldr	r3, [pc, #120]	; (8002720 <HAL_RCC_ClockConfig+0x1c8>)
 80026a6:	689b      	ldr	r3, [r3, #8]
 80026a8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	68db      	ldr	r3, [r3, #12]
 80026b0:	491b      	ldr	r1, [pc, #108]	; (8002720 <HAL_RCC_ClockConfig+0x1c8>)
 80026b2:	4313      	orrs	r3, r2
 80026b4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f003 0308 	and.w	r3, r3, #8
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d009      	beq.n	80026d6 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80026c2:	4b17      	ldr	r3, [pc, #92]	; (8002720 <HAL_RCC_ClockConfig+0x1c8>)
 80026c4:	689b      	ldr	r3, [r3, #8]
 80026c6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	691b      	ldr	r3, [r3, #16]
 80026ce:	00db      	lsls	r3, r3, #3
 80026d0:	4913      	ldr	r1, [pc, #76]	; (8002720 <HAL_RCC_ClockConfig+0x1c8>)
 80026d2:	4313      	orrs	r3, r2
 80026d4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 80026d6:	f000 f82b 	bl	8002730 <HAL_RCC_GetSysClockFreq>
 80026da:	4601      	mov	r1, r0
 80026dc:	4b10      	ldr	r3, [pc, #64]	; (8002720 <HAL_RCC_ClockConfig+0x1c8>)
 80026de:	689b      	ldr	r3, [r3, #8]
 80026e0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80026e4:	22f0      	movs	r2, #240	; 0xf0
 80026e6:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026e8:	693a      	ldr	r2, [r7, #16]
 80026ea:	fa92 f2a2 	rbit	r2, r2
 80026ee:	60fa      	str	r2, [r7, #12]
  return result;
 80026f0:	68fa      	ldr	r2, [r7, #12]
 80026f2:	fab2 f282 	clz	r2, r2
 80026f6:	b2d2      	uxtb	r2, r2
 80026f8:	40d3      	lsrs	r3, r2
 80026fa:	4a0a      	ldr	r2, [pc, #40]	; (8002724 <HAL_RCC_ClockConfig+0x1cc>)
 80026fc:	5cd3      	ldrb	r3, [r2, r3]
 80026fe:	fa21 f303 	lsr.w	r3, r1, r3
 8002702:	4a09      	ldr	r2, [pc, #36]	; (8002728 <HAL_RCC_ClockConfig+0x1d0>)
 8002704:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002706:	4b09      	ldr	r3, [pc, #36]	; (800272c <HAL_RCC_ClockConfig+0x1d4>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	4618      	mov	r0, r3
 800270c:	f7fe f8d6 	bl	80008bc <HAL_InitTick>

  return HAL_OK;
 8002710:	2300      	movs	r3, #0
}
 8002712:	4618      	mov	r0, r3
 8002714:	3718      	adds	r7, #24
 8002716:	46bd      	mov	sp, r7
 8002718:	bd80      	pop	{r7, pc}
 800271a:	bf00      	nop
 800271c:	40023c00 	.word	0x40023c00
 8002720:	40023800 	.word	0x40023800
 8002724:	08010c78 	.word	0x08010c78
 8002728:	20000000 	.word	0x20000000
 800272c:	20000004 	.word	0x20000004

08002730 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002730:	b5b0      	push	{r4, r5, r7, lr}
 8002732:	b084      	sub	sp, #16
 8002734:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002736:	2100      	movs	r1, #0
 8002738:	6079      	str	r1, [r7, #4]
 800273a:	2100      	movs	r1, #0
 800273c:	60f9      	str	r1, [r7, #12]
 800273e:	2100      	movs	r1, #0
 8002740:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002742:	2100      	movs	r1, #0
 8002744:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002746:	4952      	ldr	r1, [pc, #328]	; (8002890 <HAL_RCC_GetSysClockFreq+0x160>)
 8002748:	6889      	ldr	r1, [r1, #8]
 800274a:	f001 010c 	and.w	r1, r1, #12
 800274e:	2908      	cmp	r1, #8
 8002750:	d00d      	beq.n	800276e <HAL_RCC_GetSysClockFreq+0x3e>
 8002752:	2908      	cmp	r1, #8
 8002754:	f200 8094 	bhi.w	8002880 <HAL_RCC_GetSysClockFreq+0x150>
 8002758:	2900      	cmp	r1, #0
 800275a:	d002      	beq.n	8002762 <HAL_RCC_GetSysClockFreq+0x32>
 800275c:	2904      	cmp	r1, #4
 800275e:	d003      	beq.n	8002768 <HAL_RCC_GetSysClockFreq+0x38>
 8002760:	e08e      	b.n	8002880 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002762:	4b4c      	ldr	r3, [pc, #304]	; (8002894 <HAL_RCC_GetSysClockFreq+0x164>)
 8002764:	60bb      	str	r3, [r7, #8]
       break;
 8002766:	e08e      	b.n	8002886 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002768:	4b4b      	ldr	r3, [pc, #300]	; (8002898 <HAL_RCC_GetSysClockFreq+0x168>)
 800276a:	60bb      	str	r3, [r7, #8]
      break;
 800276c:	e08b      	b.n	8002886 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800276e:	4948      	ldr	r1, [pc, #288]	; (8002890 <HAL_RCC_GetSysClockFreq+0x160>)
 8002770:	6849      	ldr	r1, [r1, #4]
 8002772:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8002776:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002778:	4945      	ldr	r1, [pc, #276]	; (8002890 <HAL_RCC_GetSysClockFreq+0x160>)
 800277a:	6849      	ldr	r1, [r1, #4]
 800277c:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8002780:	2900      	cmp	r1, #0
 8002782:	d024      	beq.n	80027ce <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002784:	4942      	ldr	r1, [pc, #264]	; (8002890 <HAL_RCC_GetSysClockFreq+0x160>)
 8002786:	6849      	ldr	r1, [r1, #4]
 8002788:	0989      	lsrs	r1, r1, #6
 800278a:	4608      	mov	r0, r1
 800278c:	f04f 0100 	mov.w	r1, #0
 8002790:	f240 14ff 	movw	r4, #511	; 0x1ff
 8002794:	f04f 0500 	mov.w	r5, #0
 8002798:	ea00 0204 	and.w	r2, r0, r4
 800279c:	ea01 0305 	and.w	r3, r1, r5
 80027a0:	493d      	ldr	r1, [pc, #244]	; (8002898 <HAL_RCC_GetSysClockFreq+0x168>)
 80027a2:	fb01 f003 	mul.w	r0, r1, r3
 80027a6:	2100      	movs	r1, #0
 80027a8:	fb01 f102 	mul.w	r1, r1, r2
 80027ac:	1844      	adds	r4, r0, r1
 80027ae:	493a      	ldr	r1, [pc, #232]	; (8002898 <HAL_RCC_GetSysClockFreq+0x168>)
 80027b0:	fba2 0101 	umull	r0, r1, r2, r1
 80027b4:	1863      	adds	r3, r4, r1
 80027b6:	4619      	mov	r1, r3
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	461a      	mov	r2, r3
 80027bc:	f04f 0300 	mov.w	r3, #0
 80027c0:	f7fd fd00 	bl	80001c4 <__aeabi_uldivmod>
 80027c4:	4602      	mov	r2, r0
 80027c6:	460b      	mov	r3, r1
 80027c8:	4613      	mov	r3, r2
 80027ca:	60fb      	str	r3, [r7, #12]
 80027cc:	e04a      	b.n	8002864 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80027ce:	4b30      	ldr	r3, [pc, #192]	; (8002890 <HAL_RCC_GetSysClockFreq+0x160>)
 80027d0:	685b      	ldr	r3, [r3, #4]
 80027d2:	099b      	lsrs	r3, r3, #6
 80027d4:	461a      	mov	r2, r3
 80027d6:	f04f 0300 	mov.w	r3, #0
 80027da:	f240 10ff 	movw	r0, #511	; 0x1ff
 80027de:	f04f 0100 	mov.w	r1, #0
 80027e2:	ea02 0400 	and.w	r4, r2, r0
 80027e6:	ea03 0501 	and.w	r5, r3, r1
 80027ea:	4620      	mov	r0, r4
 80027ec:	4629      	mov	r1, r5
 80027ee:	f04f 0200 	mov.w	r2, #0
 80027f2:	f04f 0300 	mov.w	r3, #0
 80027f6:	014b      	lsls	r3, r1, #5
 80027f8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80027fc:	0142      	lsls	r2, r0, #5
 80027fe:	4610      	mov	r0, r2
 8002800:	4619      	mov	r1, r3
 8002802:	1b00      	subs	r0, r0, r4
 8002804:	eb61 0105 	sbc.w	r1, r1, r5
 8002808:	f04f 0200 	mov.w	r2, #0
 800280c:	f04f 0300 	mov.w	r3, #0
 8002810:	018b      	lsls	r3, r1, #6
 8002812:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002816:	0182      	lsls	r2, r0, #6
 8002818:	1a12      	subs	r2, r2, r0
 800281a:	eb63 0301 	sbc.w	r3, r3, r1
 800281e:	f04f 0000 	mov.w	r0, #0
 8002822:	f04f 0100 	mov.w	r1, #0
 8002826:	00d9      	lsls	r1, r3, #3
 8002828:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800282c:	00d0      	lsls	r0, r2, #3
 800282e:	4602      	mov	r2, r0
 8002830:	460b      	mov	r3, r1
 8002832:	1912      	adds	r2, r2, r4
 8002834:	eb45 0303 	adc.w	r3, r5, r3
 8002838:	f04f 0000 	mov.w	r0, #0
 800283c:	f04f 0100 	mov.w	r1, #0
 8002840:	0299      	lsls	r1, r3, #10
 8002842:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002846:	0290      	lsls	r0, r2, #10
 8002848:	4602      	mov	r2, r0
 800284a:	460b      	mov	r3, r1
 800284c:	4610      	mov	r0, r2
 800284e:	4619      	mov	r1, r3
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	461a      	mov	r2, r3
 8002854:	f04f 0300 	mov.w	r3, #0
 8002858:	f7fd fcb4 	bl	80001c4 <__aeabi_uldivmod>
 800285c:	4602      	mov	r2, r0
 800285e:	460b      	mov	r3, r1
 8002860:	4613      	mov	r3, r2
 8002862:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002864:	4b0a      	ldr	r3, [pc, #40]	; (8002890 <HAL_RCC_GetSysClockFreq+0x160>)
 8002866:	685b      	ldr	r3, [r3, #4]
 8002868:	0c1b      	lsrs	r3, r3, #16
 800286a:	f003 0303 	and.w	r3, r3, #3
 800286e:	3301      	adds	r3, #1
 8002870:	005b      	lsls	r3, r3, #1
 8002872:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002874:	68fa      	ldr	r2, [r7, #12]
 8002876:	683b      	ldr	r3, [r7, #0]
 8002878:	fbb2 f3f3 	udiv	r3, r2, r3
 800287c:	60bb      	str	r3, [r7, #8]
      break;
 800287e:	e002      	b.n	8002886 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002880:	4b04      	ldr	r3, [pc, #16]	; (8002894 <HAL_RCC_GetSysClockFreq+0x164>)
 8002882:	60bb      	str	r3, [r7, #8]
      break;
 8002884:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002886:	68bb      	ldr	r3, [r7, #8]
}
 8002888:	4618      	mov	r0, r3
 800288a:	3710      	adds	r7, #16
 800288c:	46bd      	mov	sp, r7
 800288e:	bdb0      	pop	{r4, r5, r7, pc}
 8002890:	40023800 	.word	0x40023800
 8002894:	00f42400 	.word	0x00f42400
 8002898:	017d7840 	.word	0x017d7840

0800289c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800289c:	b480      	push	{r7}
 800289e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80028a0:	4b02      	ldr	r3, [pc, #8]	; (80028ac <HAL_RCC_GetHCLKFreq+0x10>)
 80028a2:	681b      	ldr	r3, [r3, #0]
}
 80028a4:	4618      	mov	r0, r3
 80028a6:	46bd      	mov	sp, r7
 80028a8:	bc80      	pop	{r7}
 80028aa:	4770      	bx	lr
 80028ac:	20000000 	.word	0x20000000

080028b0 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b084      	sub	sp, #16
 80028b4:	af04      	add	r7, sp, #16
  /* Initilialize the LwIP stack without RTOS */
  lwip_init();
 80028b6:	f000 fbf1 	bl	800309c <lwip_init>

  /* IP addresses initialization with DHCP (IPv4) */
  ipaddr.addr = 0;
 80028ba:	4b19      	ldr	r3, [pc, #100]	; (8002920 <MX_LWIP_Init+0x70>)
 80028bc:	2200      	movs	r2, #0
 80028be:	601a      	str	r2, [r3, #0]
  netmask.addr = 0;
 80028c0:	4b18      	ldr	r3, [pc, #96]	; (8002924 <MX_LWIP_Init+0x74>)
 80028c2:	2200      	movs	r2, #0
 80028c4:	601a      	str	r2, [r3, #0]
  gw.addr = 0;
 80028c6:	4b18      	ldr	r3, [pc, #96]	; (8002928 <MX_LWIP_Init+0x78>)
 80028c8:	2200      	movs	r2, #0
 80028ca:	601a      	str	r2, [r3, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 80028cc:	4b17      	ldr	r3, [pc, #92]	; (800292c <MX_LWIP_Init+0x7c>)
 80028ce:	9302      	str	r3, [sp, #8]
 80028d0:	4b17      	ldr	r3, [pc, #92]	; (8002930 <MX_LWIP_Init+0x80>)
 80028d2:	9301      	str	r3, [sp, #4]
 80028d4:	2300      	movs	r3, #0
 80028d6:	9300      	str	r3, [sp, #0]
 80028d8:	4b13      	ldr	r3, [pc, #76]	; (8002928 <MX_LWIP_Init+0x78>)
 80028da:	4a12      	ldr	r2, [pc, #72]	; (8002924 <MX_LWIP_Init+0x74>)
 80028dc:	4910      	ldr	r1, [pc, #64]	; (8002920 <MX_LWIP_Init+0x70>)
 80028de:	4815      	ldr	r0, [pc, #84]	; (8002934 <MX_LWIP_Init+0x84>)
 80028e0:	f000 ffdc 	bl	800389c <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 80028e4:	4813      	ldr	r0, [pc, #76]	; (8002934 <MX_LWIP_Init+0x84>)
 80028e6:	f001 f8c1 	bl	8003a6c <netif_set_default>

  if (netif_is_link_up(&gnetif))
 80028ea:	4b12      	ldr	r3, [pc, #72]	; (8002934 <MX_LWIP_Init+0x84>)
 80028ec:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 80028f0:	089b      	lsrs	r3, r3, #2
 80028f2:	f003 0301 	and.w	r3, r3, #1
 80028f6:	b2db      	uxtb	r3, r3
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d003      	beq.n	8002904 <MX_LWIP_Init+0x54>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 80028fc:	480d      	ldr	r0, [pc, #52]	; (8002934 <MX_LWIP_Init+0x84>)
 80028fe:	f001 f8c3 	bl	8003a88 <netif_set_up>
 8002902:	e002      	b.n	800290a <MX_LWIP_Init+0x5a>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 8002904:	480b      	ldr	r0, [pc, #44]	; (8002934 <MX_LWIP_Init+0x84>)
 8002906:	f001 f903 	bl	8003b10 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernetif_update_config);
 800290a:	490b      	ldr	r1, [pc, #44]	; (8002938 <MX_LWIP_Init+0x88>)
 800290c:	4809      	ldr	r0, [pc, #36]	; (8002934 <MX_LWIP_Init+0x84>)
 800290e:	f001 f921 	bl	8003b54 <netif_set_link_callback>

  /* Create the Ethernet link handler thread */

  /* Start DHCP negotiation for a network interface (IPv4) */
  dhcp_start(&gnetif);
 8002912:	4808      	ldr	r0, [pc, #32]	; (8002934 <MX_LWIP_Init+0x84>)
 8002914:	f007 fa98 	bl	8009e48 <dhcp_start>

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8002918:	bf00      	nop
 800291a:	46bd      	mov	sp, r7
 800291c:	bd80      	pop	{r7, pc}
 800291e:	bf00      	nop
 8002920:	2000025c 	.word	0x2000025c
 8002924:	20000260 	.word	0x20000260
 8002928:	20000264 	.word	0x20000264
 800292c:	0800d815 	.word	0x0800d815
 8002930:	08002edd 	.word	0x08002edd
 8002934:	20000224 	.word	0x20000224
 8002938:	08002f49 	.word	0x08002f49

0800293c <MX_LWIP_Process>:
 * Send it to the lwIP stack for handling
 * Handle timeouts if LWIP_TIMERS is set and without RTOS
 * Handle the llink status if LWIP_NETIF_LINK_CALLBACK is set and without RTOS
 */
void MX_LWIP_Process(void)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	af00      	add	r7, sp, #0
/* USER CODE BEGIN 4_1 */
/* USER CODE END 4_1 */
  ethernetif_input(&gnetif);
 8002940:	4803      	ldr	r0, [pc, #12]	; (8002950 <MX_LWIP_Process+0x14>)
 8002942:	f000 faab 	bl	8002e9c <ethernetif_input>

/* USER CODE BEGIN 4_2 */
/* USER CODE END 4_2 */
  /* Handle timeouts */
  sys_check_timeouts();
 8002946:	f006 fb83 	bl	8009050 <sys_check_timeouts>

/* USER CODE BEGIN 4_3 */
/* USER CODE END 4_3 */
}
 800294a:	bf00      	nop
 800294c:	bd80      	pop	{r7, pc}
 800294e:	bf00      	nop
 8002950:	20000224 	.word	0x20000224

08002954 <HAL_ETH_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	b08e      	sub	sp, #56	; 0x38
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800295c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002960:	2200      	movs	r2, #0
 8002962:	601a      	str	r2, [r3, #0]
 8002964:	605a      	str	r2, [r3, #4]
 8002966:	609a      	str	r2, [r3, #8]
 8002968:	60da      	str	r2, [r3, #12]
 800296a:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	4a46      	ldr	r2, [pc, #280]	; (8002a8c <HAL_ETH_MspInit+0x138>)
 8002972:	4293      	cmp	r3, r2
 8002974:	f040 8085 	bne.w	8002a82 <HAL_ETH_MspInit+0x12e>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8002978:	2300      	movs	r3, #0
 800297a:	623b      	str	r3, [r7, #32]
 800297c:	4b44      	ldr	r3, [pc, #272]	; (8002a90 <HAL_ETH_MspInit+0x13c>)
 800297e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002980:	4a43      	ldr	r2, [pc, #268]	; (8002a90 <HAL_ETH_MspInit+0x13c>)
 8002982:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002986:	6313      	str	r3, [r2, #48]	; 0x30
 8002988:	4b41      	ldr	r3, [pc, #260]	; (8002a90 <HAL_ETH_MspInit+0x13c>)
 800298a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800298c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002990:	623b      	str	r3, [r7, #32]
 8002992:	6a3b      	ldr	r3, [r7, #32]
 8002994:	2300      	movs	r3, #0
 8002996:	61fb      	str	r3, [r7, #28]
 8002998:	4b3d      	ldr	r3, [pc, #244]	; (8002a90 <HAL_ETH_MspInit+0x13c>)
 800299a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800299c:	4a3c      	ldr	r2, [pc, #240]	; (8002a90 <HAL_ETH_MspInit+0x13c>)
 800299e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80029a2:	6313      	str	r3, [r2, #48]	; 0x30
 80029a4:	4b3a      	ldr	r3, [pc, #232]	; (8002a90 <HAL_ETH_MspInit+0x13c>)
 80029a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029a8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80029ac:	61fb      	str	r3, [r7, #28]
 80029ae:	69fb      	ldr	r3, [r7, #28]
 80029b0:	2300      	movs	r3, #0
 80029b2:	61bb      	str	r3, [r7, #24]
 80029b4:	4b36      	ldr	r3, [pc, #216]	; (8002a90 <HAL_ETH_MspInit+0x13c>)
 80029b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029b8:	4a35      	ldr	r2, [pc, #212]	; (8002a90 <HAL_ETH_MspInit+0x13c>)
 80029ba:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80029be:	6313      	str	r3, [r2, #48]	; 0x30
 80029c0:	4b33      	ldr	r3, [pc, #204]	; (8002a90 <HAL_ETH_MspInit+0x13c>)
 80029c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029c4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80029c8:	61bb      	str	r3, [r7, #24]
 80029ca:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80029cc:	2300      	movs	r3, #0
 80029ce:	617b      	str	r3, [r7, #20]
 80029d0:	4b2f      	ldr	r3, [pc, #188]	; (8002a90 <HAL_ETH_MspInit+0x13c>)
 80029d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029d4:	4a2e      	ldr	r2, [pc, #184]	; (8002a90 <HAL_ETH_MspInit+0x13c>)
 80029d6:	f043 0304 	orr.w	r3, r3, #4
 80029da:	6313      	str	r3, [r2, #48]	; 0x30
 80029dc:	4b2c      	ldr	r3, [pc, #176]	; (8002a90 <HAL_ETH_MspInit+0x13c>)
 80029de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029e0:	f003 0304 	and.w	r3, r3, #4
 80029e4:	617b      	str	r3, [r7, #20]
 80029e6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029e8:	2300      	movs	r3, #0
 80029ea:	613b      	str	r3, [r7, #16]
 80029ec:	4b28      	ldr	r3, [pc, #160]	; (8002a90 <HAL_ETH_MspInit+0x13c>)
 80029ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029f0:	4a27      	ldr	r2, [pc, #156]	; (8002a90 <HAL_ETH_MspInit+0x13c>)
 80029f2:	f043 0301 	orr.w	r3, r3, #1
 80029f6:	6313      	str	r3, [r2, #48]	; 0x30
 80029f8:	4b25      	ldr	r3, [pc, #148]	; (8002a90 <HAL_ETH_MspInit+0x13c>)
 80029fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029fc:	f003 0301 	and.w	r3, r3, #1
 8002a00:	613b      	str	r3, [r7, #16]
 8002a02:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a04:	2300      	movs	r3, #0
 8002a06:	60fb      	str	r3, [r7, #12]
 8002a08:	4b21      	ldr	r3, [pc, #132]	; (8002a90 <HAL_ETH_MspInit+0x13c>)
 8002a0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a0c:	4a20      	ldr	r2, [pc, #128]	; (8002a90 <HAL_ETH_MspInit+0x13c>)
 8002a0e:	f043 0302 	orr.w	r3, r3, #2
 8002a12:	6313      	str	r3, [r2, #48]	; 0x30
 8002a14:	4b1e      	ldr	r3, [pc, #120]	; (8002a90 <HAL_ETH_MspInit+0x13c>)
 8002a16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a18:	f003 0302 	and.w	r3, r3, #2
 8002a1c:	60fb      	str	r3, [r7, #12]
 8002a1e:	68fb      	ldr	r3, [r7, #12]
    PC5     ------> ETH_RXD1
    PB11     ------> ETH_TX_EN
    PB12     ------> ETH_TXD0
    PB13     ------> ETH_TXD1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8002a20:	2332      	movs	r3, #50	; 0x32
 8002a22:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a24:	2302      	movs	r3, #2
 8002a26:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a28:	2300      	movs	r3, #0
 8002a2a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a2c:	2303      	movs	r3, #3
 8002a2e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002a30:	230b      	movs	r3, #11
 8002a32:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a34:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a38:	4619      	mov	r1, r3
 8002a3a:	4816      	ldr	r0, [pc, #88]	; (8002a94 <HAL_ETH_MspInit+0x140>)
 8002a3c:	f7ff f99e 	bl	8001d7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8002a40:	2386      	movs	r3, #134	; 0x86
 8002a42:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a44:	2302      	movs	r3, #2
 8002a46:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a48:	2300      	movs	r3, #0
 8002a4a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a4c:	2303      	movs	r3, #3
 8002a4e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002a50:	230b      	movs	r3, #11
 8002a52:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a54:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a58:	4619      	mov	r1, r3
 8002a5a:	480f      	ldr	r0, [pc, #60]	; (8002a98 <HAL_ETH_MspInit+0x144>)
 8002a5c:	f7ff f98e 	bl	8001d7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 8002a60:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8002a64:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a66:	2302      	movs	r3, #2
 8002a68:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a6e:	2303      	movs	r3, #3
 8002a70:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002a72:	230b      	movs	r3, #11
 8002a74:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a76:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a7a:	4619      	mov	r1, r3
 8002a7c:	4807      	ldr	r0, [pc, #28]	; (8002a9c <HAL_ETH_MspInit+0x148>)
 8002a7e:	f7ff f97d 	bl	8001d7c <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8002a82:	bf00      	nop
 8002a84:	3738      	adds	r7, #56	; 0x38
 8002a86:	46bd      	mov	sp, r7
 8002a88:	bd80      	pop	{r7, pc}
 8002a8a:	bf00      	nop
 8002a8c:	40028000 	.word	0x40028000
 8002a90:	40023800 	.word	0x40023800
 8002a94:	40020800 	.word	0x40020800
 8002a98:	40020000 	.word	0x40020000
 8002a9c:	40020400 	.word	0x40020400

08002aa0 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b086      	sub	sp, #24
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	613b      	str	r3, [r7, #16]
  HAL_StatusTypeDef hal_eth_init_status;

/* Init ETH */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8002aac:	4b4d      	ldr	r3, [pc, #308]	; (8002be4 <low_level_init+0x144>)
 8002aae:	4a4e      	ldr	r2, [pc, #312]	; (8002be8 <low_level_init+0x148>)
 8002ab0:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 8002ab2:	4b4c      	ldr	r3, [pc, #304]	; (8002be4 <low_level_init+0x144>)
 8002ab4:	2201      	movs	r2, #1
 8002ab6:	605a      	str	r2, [r3, #4]
  heth.Init.Speed = ETH_SPEED_100M;
 8002ab8:	4b4a      	ldr	r3, [pc, #296]	; (8002be4 <low_level_init+0x144>)
 8002aba:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002abe:	609a      	str	r2, [r3, #8]
  heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 8002ac0:	4b48      	ldr	r3, [pc, #288]	; (8002be4 <low_level_init+0x144>)
 8002ac2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002ac6:	60da      	str	r2, [r3, #12]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 8002ac8:	4b46      	ldr	r3, [pc, #280]	; (8002be4 <low_level_init+0x144>)
 8002aca:	2201      	movs	r2, #1
 8002acc:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 8002ace:	2300      	movs	r3, #0
 8002ad0:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 8002ad2:	2380      	movs	r3, #128	; 0x80
 8002ad4:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 8002ad6:	23e1      	movs	r3, #225	; 0xe1
 8002ad8:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 8002ada:	2300      	movs	r3, #0
 8002adc:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 8002ade:	2300      	movs	r3, #0
 8002ae0:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 8002ae6:	4a3f      	ldr	r2, [pc, #252]	; (8002be4 <low_level_init+0x144>)
 8002ae8:	f107 0308 	add.w	r3, r7, #8
 8002aec:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXPOLLING_MODE;
 8002aee:	4b3d      	ldr	r3, [pc, #244]	; (8002be4 <low_level_init+0x144>)
 8002af0:	2200      	movs	r2, #0
 8002af2:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 8002af4:	4b3b      	ldr	r3, [pc, #236]	; (8002be4 <low_level_init+0x144>)
 8002af6:	2200      	movs	r2, #0
 8002af8:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 8002afa:	4b3a      	ldr	r3, [pc, #232]	; (8002be4 <low_level_init+0x144>)
 8002afc:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8002b00:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8002b02:	4838      	ldr	r0, [pc, #224]	; (8002be4 <low_level_init+0x144>)
 8002b04:	f7fe f82e 	bl	8000b64 <HAL_ETH_Init>
 8002b08:	4603      	mov	r3, r0
 8002b0a:	75fb      	strb	r3, [r7, #23]

  if (hal_eth_init_status == HAL_OK)
 8002b0c:	7dfb      	ldrb	r3, [r7, #23]
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d108      	bne.n	8002b24 <low_level_init+0x84>
  {
    /* Set netif link flag */
    netif->flags |= NETIF_FLAG_LINK_UP;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8002b18:	f043 0304 	orr.w	r3, r3, #4
 8002b1c:	b2da      	uxtb	r2, r3
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
  }
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 8002b24:	2304      	movs	r3, #4
 8002b26:	4a31      	ldr	r2, [pc, #196]	; (8002bec <low_level_init+0x14c>)
 8002b28:	4931      	ldr	r1, [pc, #196]	; (8002bf0 <low_level_init+0x150>)
 8002b2a:	482e      	ldr	r0, [pc, #184]	; (8002be4 <low_level_init+0x144>)
 8002b2c:	f7fe f9a6 	bl	8000e7c <HAL_ETH_DMATxDescListInit>

  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 8002b30:	2304      	movs	r3, #4
 8002b32:	4a30      	ldr	r2, [pc, #192]	; (8002bf4 <low_level_init+0x154>)
 8002b34:	4930      	ldr	r1, [pc, #192]	; (8002bf8 <low_level_init+0x158>)
 8002b36:	482b      	ldr	r0, [pc, #172]	; (8002be4 <low_level_init+0x144>)
 8002b38:	f7fe fa08 	bl	8000f4c <HAL_ETH_DMARxDescListInit>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2206      	movs	r2, #6
 8002b40:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8002b44:	4b27      	ldr	r3, [pc, #156]	; (8002be4 <low_level_init+0x144>)
 8002b46:	695b      	ldr	r3, [r3, #20]
 8002b48:	781a      	ldrb	r2, [r3, #0]
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8002b50:	4b24      	ldr	r3, [pc, #144]	; (8002be4 <low_level_init+0x144>)
 8002b52:	695b      	ldr	r3, [r3, #20]
 8002b54:	785a      	ldrb	r2, [r3, #1]
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8002b5c:	4b21      	ldr	r3, [pc, #132]	; (8002be4 <low_level_init+0x144>)
 8002b5e:	695b      	ldr	r3, [r3, #20]
 8002b60:	789a      	ldrb	r2, [r3, #2]
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8002b68:	4b1e      	ldr	r3, [pc, #120]	; (8002be4 <low_level_init+0x144>)
 8002b6a:	695b      	ldr	r3, [r3, #20]
 8002b6c:	78da      	ldrb	r2, [r3, #3]
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8002b74:	4b1b      	ldr	r3, [pc, #108]	; (8002be4 <low_level_init+0x144>)
 8002b76:	695b      	ldr	r3, [r3, #20]
 8002b78:	791a      	ldrb	r2, [r3, #4]
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8002b80:	4b18      	ldr	r3, [pc, #96]	; (8002be4 <low_level_init+0x144>)
 8002b82:	695b      	ldr	r3, [r3, #20]
 8002b84:	795a      	ldrb	r2, [r3, #5]
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32

  /* maximum transfer unit */
  netif->mtu = 1500;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8002b92:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8002b9a:	f043 030a 	orr.w	r3, r3, #10
 8002b9e:	b2da      	uxtb	r2, r3
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
 8002ba6:	480f      	ldr	r0, [pc, #60]	; (8002be4 <low_level_init+0x144>)
 8002ba8:	f7fe fc77 	bl	800149a <HAL_ETH_Start>
/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 8002bac:	f107 0310 	add.w	r3, r7, #16
 8002bb0:	461a      	mov	r2, r3
 8002bb2:	211d      	movs	r1, #29
 8002bb4:	480b      	ldr	r0, [pc, #44]	; (8002be4 <low_level_init+0x144>)
 8002bb6:	f7fe fba2 	bl	80012fe <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_ISFR_INT4);
 8002bba:	693b      	ldr	r3, [r7, #16]
 8002bbc:	f043 030b 	orr.w	r3, r3, #11
 8002bc0:	613b      	str	r3, [r7, #16]

  /* Enable Interrupt on change of link status */
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 8002bc2:	693b      	ldr	r3, [r7, #16]
 8002bc4:	461a      	mov	r2, r3
 8002bc6:	211d      	movs	r1, #29
 8002bc8:	4806      	ldr	r0, [pc, #24]	; (8002be4 <low_level_init+0x144>)
 8002bca:	f7fe fc00 	bl	80013ce <HAL_ETH_WritePHYRegister>

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 8002bce:	f107 0310 	add.w	r3, r7, #16
 8002bd2:	461a      	mov	r2, r3
 8002bd4:	211d      	movs	r1, #29
 8002bd6:	4803      	ldr	r0, [pc, #12]	; (8002be4 <low_level_init+0x144>)
 8002bd8:	f7fe fb91 	bl	80012fe <HAL_ETH_ReadPHYRegister>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 8002bdc:	bf00      	nop
 8002bde:	3718      	adds	r7, #24
 8002be0:	46bd      	mov	sp, r7
 8002be2:	bd80      	pop	{r7, pc}
 8002be4:	20001b38 	.word	0x20001b38
 8002be8:	40028000 	.word	0x40028000
 8002bec:	20001b80 	.word	0x20001b80
 8002bf0:	20000268 	.word	0x20000268
 8002bf4:	200002e8 	.word	0x200002e8
 8002bf8:	20001ab8 	.word	0x20001ab8

08002bfc <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	b08a      	sub	sp, #40	; 0x28
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
 8002c04:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 8002c06:	4b4b      	ldr	r3, [pc, #300]	; (8002d34 <low_level_output+0x138>)
 8002c08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c0a:	689b      	ldr	r3, [r3, #8]
 8002c0c:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 8002c0e:	2300      	movs	r3, #0
 8002c10:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
 8002c12:	2300      	movs	r3, #0
 8002c14:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
 8002c16:	2300      	movs	r3, #0
 8002c18:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	60bb      	str	r3, [r7, #8]
  DmaTxDesc = heth.TxDesc;
 8002c1e:	4b45      	ldr	r3, [pc, #276]	; (8002d34 <low_level_output+0x138>)
 8002c20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c22:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
 8002c24:	2300      	movs	r3, #0
 8002c26:	613b      	str	r3, [r7, #16]

  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 8002c28:	683b      	ldr	r3, [r7, #0]
 8002c2a:	623b      	str	r3, [r7, #32]
 8002c2c:	e05a      	b.n	8002ce4 <low_level_output+0xe8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8002c2e:	69bb      	ldr	r3, [r7, #24]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	da03      	bge.n	8002c3e <low_level_output+0x42>
      {
        errval = ERR_USE;
 8002c36:	23f8      	movs	r3, #248	; 0xf8
 8002c38:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        goto error;
 8002c3c:	e05c      	b.n	8002cf8 <low_level_output+0xfc>
      }

      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
 8002c3e:	6a3b      	ldr	r3, [r7, #32]
 8002c40:	895b      	ldrh	r3, [r3, #10]
 8002c42:	60fb      	str	r3, [r7, #12]
      payloadoffset = 0;
 8002c44:	2300      	movs	r3, #0
 8002c46:	60bb      	str	r3, [r7, #8]

      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8002c48:	e02f      	b.n	8002caa <low_level_output+0xae>
      {
        /* Copy data to Tx buffer*/
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 8002c4a:	69fa      	ldr	r2, [r7, #28]
 8002c4c:	693b      	ldr	r3, [r7, #16]
 8002c4e:	18d0      	adds	r0, r2, r3
 8002c50:	6a3b      	ldr	r3, [r7, #32]
 8002c52:	685a      	ldr	r2, [r3, #4]
 8002c54:	68bb      	ldr	r3, [r7, #8]
 8002c56:	18d1      	adds	r1, r2, r3
 8002c58:	693b      	ldr	r3, [r7, #16]
 8002c5a:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 8002c5e:	3304      	adds	r3, #4
 8002c60:	461a      	mov	r2, r3
 8002c62:	f00a fee7 	bl	800da34 <memcpy>

        /* Point to next descriptor */
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 8002c66:	69bb      	ldr	r3, [r7, #24]
 8002c68:	68db      	ldr	r3, [r3, #12]
 8002c6a:	61bb      	str	r3, [r7, #24]

        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8002c6c:	69bb      	ldr	r3, [r7, #24]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	da03      	bge.n	8002c7c <low_level_output+0x80>
        {
          errval = ERR_USE;
 8002c74:	23f8      	movs	r3, #248	; 0xf8
 8002c76:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 8002c7a:	e03d      	b.n	8002cf8 <low_level_output+0xfc>
        }

        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 8002c7c:	69bb      	ldr	r3, [r7, #24]
 8002c7e:	689b      	ldr	r3, [r3, #8]
 8002c80:	61fb      	str	r3, [r7, #28]

        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 8002c82:	693a      	ldr	r2, [r7, #16]
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	4413      	add	r3, r2
 8002c88:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8002c8c:	60fb      	str	r3, [r7, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 8002c8e:	68ba      	ldr	r2, [r7, #8]
 8002c90:	693b      	ldr	r3, [r7, #16]
 8002c92:	1ad3      	subs	r3, r2, r3
 8002c94:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8002c98:	60bb      	str	r3, [r7, #8]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 8002c9a:	697a      	ldr	r2, [r7, #20]
 8002c9c:	693b      	ldr	r3, [r7, #16]
 8002c9e:	1ad3      	subs	r3, r2, r3
 8002ca0:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8002ca4:	617b      	str	r3, [r7, #20]
        bufferoffset = 0;
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	613b      	str	r3, [r7, #16]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8002caa:	68fa      	ldr	r2, [r7, #12]
 8002cac:	693b      	ldr	r3, [r7, #16]
 8002cae:	4413      	add	r3, r2
 8002cb0:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8002cb4:	4293      	cmp	r3, r2
 8002cb6:	d8c8      	bhi.n	8002c4a <low_level_output+0x4e>
      }

      /* Copy the remaining bytes */
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 8002cb8:	69fa      	ldr	r2, [r7, #28]
 8002cba:	693b      	ldr	r3, [r7, #16]
 8002cbc:	18d0      	adds	r0, r2, r3
 8002cbe:	6a3b      	ldr	r3, [r7, #32]
 8002cc0:	685a      	ldr	r2, [r3, #4]
 8002cc2:	68bb      	ldr	r3, [r7, #8]
 8002cc4:	4413      	add	r3, r2
 8002cc6:	68fa      	ldr	r2, [r7, #12]
 8002cc8:	4619      	mov	r1, r3
 8002cca:	f00a feb3 	bl	800da34 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8002cce:	693a      	ldr	r2, [r7, #16]
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	4413      	add	r3, r2
 8002cd4:	613b      	str	r3, [r7, #16]
      framelength = framelength + byteslefttocopy;
 8002cd6:	697a      	ldr	r2, [r7, #20]
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	4413      	add	r3, r2
 8002cdc:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
 8002cde:	6a3b      	ldr	r3, [r7, #32]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	623b      	str	r3, [r7, #32]
 8002ce4:	6a3b      	ldr	r3, [r7, #32]
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d1a1      	bne.n	8002c2e <low_level_output+0x32>
    }

  /* Prepare transmit descriptors to give to DMA */
  HAL_ETH_TransmitFrame(&heth, framelength);
 8002cea:	6979      	ldr	r1, [r7, #20]
 8002cec:	4811      	ldr	r0, [pc, #68]	; (8002d34 <low_level_output+0x138>)
 8002cee:	f7fe f999 	bl	8001024 <HAL_ETH_TransmitFrame>

  errval = ERR_OK;
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

error:

  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 8002cf8:	4b0e      	ldr	r3, [pc, #56]	; (8002d34 <low_level_output+0x138>)
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002d00:	3314      	adds	r3, #20
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f003 0320 	and.w	r3, r3, #32
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d00d      	beq.n	8002d28 <low_level_output+0x12c>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 8002d0c:	4b09      	ldr	r3, [pc, #36]	; (8002d34 <low_level_output+0x138>)
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002d14:	3314      	adds	r3, #20
 8002d16:	2220      	movs	r2, #32
 8002d18:	601a      	str	r2, [r3, #0]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 8002d1a:	4b06      	ldr	r3, [pc, #24]	; (8002d34 <low_level_output+0x138>)
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002d22:	3304      	adds	r3, #4
 8002d24:	2200      	movs	r2, #0
 8002d26:	601a      	str	r2, [r3, #0]
  }
  return errval;
 8002d28:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	3728      	adds	r7, #40	; 0x28
 8002d30:	46bd      	mov	sp, r7
 8002d32:	bd80      	pop	{r7, pc}
 8002d34:	20001b38 	.word	0x20001b38

08002d38 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b08c      	sub	sp, #48	; 0x30
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8002d40:	2300      	movs	r3, #0
 8002d42:	62fb      	str	r3, [r7, #44]	; 0x2c
  struct pbuf *q = NULL;
 8002d44:	2300      	movs	r3, #0
 8002d46:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t len = 0;
 8002d48:	2300      	movs	r3, #0
 8002d4a:	81fb      	strh	r3, [r7, #14]
  uint8_t *buffer;
  __IO ETH_DMADescTypeDef *dmarxdesc;
  uint32_t bufferoffset = 0;
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	61fb      	str	r3, [r7, #28]
  uint32_t payloadoffset = 0;
 8002d50:	2300      	movs	r3, #0
 8002d52:	61bb      	str	r3, [r7, #24]
  uint32_t byteslefttocopy = 0;
 8002d54:	2300      	movs	r3, #0
 8002d56:	617b      	str	r3, [r7, #20]
  uint32_t i=0;
 8002d58:	2300      	movs	r3, #0
 8002d5a:	613b      	str	r3, [r7, #16]

  /* get received frame */
  if (HAL_ETH_GetReceivedFrame(&heth) != HAL_OK)
 8002d5c:	484e      	ldr	r0, [pc, #312]	; (8002e98 <low_level_input+0x160>)
 8002d5e:	f7fe fa4b 	bl	80011f8 <HAL_ETH_GetReceivedFrame>
 8002d62:	4603      	mov	r3, r0
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d001      	beq.n	8002d6c <low_level_input+0x34>

    return NULL;
 8002d68:	2300      	movs	r3, #0
 8002d6a:	e091      	b.n	8002e90 <low_level_input+0x158>

  /* Obtain the size of the packet and put it into the "len" variable. */
  len = heth.RxFrameInfos.length;
 8002d6c:	4b4a      	ldr	r3, [pc, #296]	; (8002e98 <low_level_input+0x160>)
 8002d6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d70:	81fb      	strh	r3, [r7, #14]
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 8002d72:	4b49      	ldr	r3, [pc, #292]	; (8002e98 <low_level_input+0x160>)
 8002d74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d76:	627b      	str	r3, [r7, #36]	; 0x24

  if (len > 0)
 8002d78:	89fb      	ldrh	r3, [r7, #14]
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d006      	beq.n	8002d8c <low_level_input+0x54>
  {
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 8002d7e:	89fb      	ldrh	r3, [r7, #14]
 8002d80:	2203      	movs	r2, #3
 8002d82:	4619      	mov	r1, r3
 8002d84:	2004      	movs	r0, #4
 8002d86:	f000 ff25 	bl	8003bd4 <pbuf_alloc>
 8002d8a:	62f8      	str	r0, [r7, #44]	; 0x2c
  }

  if (p != NULL)
 8002d8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d04b      	beq.n	8002e2a <low_level_input+0xf2>
  {
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8002d92:	4b41      	ldr	r3, [pc, #260]	; (8002e98 <low_level_input+0x160>)
 8002d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d96:	623b      	str	r3, [r7, #32]
    bufferoffset = 0;
 8002d98:	2300      	movs	r3, #0
 8002d9a:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 8002d9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d9e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002da0:	e040      	b.n	8002e24 <low_level_input+0xec>
    {
      byteslefttocopy = q->len;
 8002da2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002da4:	895b      	ldrh	r3, [r3, #10]
 8002da6:	617b      	str	r3, [r7, #20]
      payloadoffset = 0;
 8002da8:	2300      	movs	r3, #0
 8002daa:	61bb      	str	r3, [r7, #24]

      /* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8002dac:	e021      	b.n	8002df2 <low_level_input+0xba>
      {
        /* Copy data to pbuf */
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 8002dae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002db0:	685a      	ldr	r2, [r3, #4]
 8002db2:	69bb      	ldr	r3, [r7, #24]
 8002db4:	18d0      	adds	r0, r2, r3
 8002db6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002db8:	69fb      	ldr	r3, [r7, #28]
 8002dba:	18d1      	adds	r1, r2, r3
 8002dbc:	69fb      	ldr	r3, [r7, #28]
 8002dbe:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 8002dc2:	3304      	adds	r3, #4
 8002dc4:	461a      	mov	r2, r3
 8002dc6:	f00a fe35 	bl	800da34 <memcpy>

        /* Point to next descriptor */
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8002dca:	6a3b      	ldr	r3, [r7, #32]
 8002dcc:	68db      	ldr	r3, [r3, #12]
 8002dce:	623b      	str	r3, [r7, #32]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 8002dd0:	6a3b      	ldr	r3, [r7, #32]
 8002dd2:	689b      	ldr	r3, [r3, #8]
 8002dd4:	627b      	str	r3, [r7, #36]	; 0x24

        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 8002dd6:	69fa      	ldr	r2, [r7, #28]
 8002dd8:	697b      	ldr	r3, [r7, #20]
 8002dda:	4413      	add	r3, r2
 8002ddc:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8002de0:	617b      	str	r3, [r7, #20]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 8002de2:	69ba      	ldr	r2, [r7, #24]
 8002de4:	69fb      	ldr	r3, [r7, #28]
 8002de6:	1ad3      	subs	r3, r2, r3
 8002de8:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8002dec:	61bb      	str	r3, [r7, #24]
        bufferoffset = 0;
 8002dee:	2300      	movs	r3, #0
 8002df0:	61fb      	str	r3, [r7, #28]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8002df2:	697a      	ldr	r2, [r7, #20]
 8002df4:	69fb      	ldr	r3, [r7, #28]
 8002df6:	4413      	add	r3, r2
 8002df8:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8002dfc:	4293      	cmp	r3, r2
 8002dfe:	d8d6      	bhi.n	8002dae <low_level_input+0x76>
      }
      /* Copy remaining data in pbuf */
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 8002e00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e02:	685a      	ldr	r2, [r3, #4]
 8002e04:	69bb      	ldr	r3, [r7, #24]
 8002e06:	18d0      	adds	r0, r2, r3
 8002e08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e0a:	69fb      	ldr	r3, [r7, #28]
 8002e0c:	4413      	add	r3, r2
 8002e0e:	697a      	ldr	r2, [r7, #20]
 8002e10:	4619      	mov	r1, r3
 8002e12:	f00a fe0f 	bl	800da34 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8002e16:	69fa      	ldr	r2, [r7, #28]
 8002e18:	697b      	ldr	r3, [r7, #20]
 8002e1a:	4413      	add	r3, r2
 8002e1c:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 8002e1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	62bb      	str	r3, [r7, #40]	; 0x28
 8002e24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d1bb      	bne.n	8002da2 <low_level_input+0x6a>
    }
  }

    /* Release descriptors to DMA */
    /* Point to first descriptor */
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8002e2a:	4b1b      	ldr	r3, [pc, #108]	; (8002e98 <low_level_input+0x160>)
 8002e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e2e:	623b      	str	r3, [r7, #32]
    /* Set Own bit in Rx descriptors: gives the buffers back to DMA */
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8002e30:	2300      	movs	r3, #0
 8002e32:	613b      	str	r3, [r7, #16]
 8002e34:	e00b      	b.n	8002e4e <low_level_input+0x116>
    {
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 8002e36:	6a3b      	ldr	r3, [r7, #32]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002e3e:	6a3b      	ldr	r3, [r7, #32]
 8002e40:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8002e42:	6a3b      	ldr	r3, [r7, #32]
 8002e44:	68db      	ldr	r3, [r3, #12]
 8002e46:	623b      	str	r3, [r7, #32]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8002e48:	693b      	ldr	r3, [r7, #16]
 8002e4a:	3301      	adds	r3, #1
 8002e4c:	613b      	str	r3, [r7, #16]
 8002e4e:	4b12      	ldr	r3, [pc, #72]	; (8002e98 <low_level_input+0x160>)
 8002e50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e52:	693a      	ldr	r2, [r7, #16]
 8002e54:	429a      	cmp	r2, r3
 8002e56:	d3ee      	bcc.n	8002e36 <low_level_input+0xfe>
    }

    /* Clear Segment_Count */
    heth.RxFrameInfos.SegCount =0;
 8002e58:	4b0f      	ldr	r3, [pc, #60]	; (8002e98 <low_level_input+0x160>)
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	639a      	str	r2, [r3, #56]	; 0x38

  /* When Rx Buffer unavailable flag is set: clear it and resume reception */
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)
 8002e5e:	4b0e      	ldr	r3, [pc, #56]	; (8002e98 <low_level_input+0x160>)
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002e66:	3314      	adds	r3, #20
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d00d      	beq.n	8002e8e <low_level_input+0x156>
  {
    /* Clear RBUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 8002e72:	4b09      	ldr	r3, [pc, #36]	; (8002e98 <low_level_input+0x160>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002e7a:	3314      	adds	r3, #20
 8002e7c:	2280      	movs	r2, #128	; 0x80
 8002e7e:	601a      	str	r2, [r3, #0]
    /* Resume DMA reception */
    heth.Instance->DMARPDR = 0;
 8002e80:	4b05      	ldr	r3, [pc, #20]	; (8002e98 <low_level_input+0x160>)
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002e88:	3308      	adds	r3, #8
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	601a      	str	r2, [r3, #0]
  }
  return p;
 8002e8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8002e90:	4618      	mov	r0, r3
 8002e92:	3730      	adds	r7, #48	; 0x30
 8002e94:	46bd      	mov	sp, r7
 8002e96:	bd80      	pop	{r7, pc}
 8002e98:	20001b38 	.word	0x20001b38

08002e9c <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	b084      	sub	sp, #16
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;

  /* move received packet into a new pbuf */
  p = low_level_input(netif);
 8002ea4:	6878      	ldr	r0, [r7, #4]
 8002ea6:	f7ff ff47 	bl	8002d38 <low_level_input>
 8002eaa:	60f8      	str	r0, [r7, #12]

  /* no packet could be read, silently ignore this */
  if (p == NULL) return;
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d010      	beq.n	8002ed4 <ethernetif_input+0x38>

  /* entry point to the LwIP stack */
  err = netif->input(p, netif);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	691b      	ldr	r3, [r3, #16]
 8002eb6:	6879      	ldr	r1, [r7, #4]
 8002eb8:	68f8      	ldr	r0, [r7, #12]
 8002eba:	4798      	blx	r3
 8002ebc:	4603      	mov	r3, r0
 8002ebe:	72fb      	strb	r3, [r7, #11]

  if (err != ERR_OK)
 8002ec0:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d006      	beq.n	8002ed6 <ethernetif_input+0x3a>
  {
    LWIP_DEBUGF(NETIF_DEBUG, ("ethernetif_input: IP input error\n"));
    pbuf_free(p);
 8002ec8:	68f8      	ldr	r0, [r7, #12]
 8002eca:	f001 f9f5 	bl	80042b8 <pbuf_free>
    p = NULL;
 8002ece:	2300      	movs	r3, #0
 8002ed0:	60fb      	str	r3, [r7, #12]
 8002ed2:	e000      	b.n	8002ed6 <ethernetif_input+0x3a>
  if (p == NULL) return;
 8002ed4:	bf00      	nop
  }
}
 8002ed6:	3710      	adds	r7, #16
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	bd80      	pop	{r7, pc}

08002edc <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8002edc:	b580      	push	{r7, lr}
 8002ede:	b082      	sub	sp, #8
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d106      	bne.n	8002ef8 <ethernetif_init+0x1c>
 8002eea:	4b0e      	ldr	r3, [pc, #56]	; (8002f24 <ethernetif_init+0x48>)
 8002eec:	f240 2207 	movw	r2, #519	; 0x207
 8002ef0:	490d      	ldr	r1, [pc, #52]	; (8002f28 <ethernetif_init+0x4c>)
 8002ef2:	480e      	ldr	r0, [pc, #56]	; (8002f2c <ethernetif_init+0x50>)
 8002ef4:	f00a fdb4 	bl	800da60 <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2273      	movs	r2, #115	; 0x73
 8002efc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  netif->name[1] = IFNAME1;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2274      	movs	r2, #116	; 0x74
 8002f04:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	4a09      	ldr	r2, [pc, #36]	; (8002f30 <ethernetif_init+0x54>)
 8002f0c:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	4a08      	ldr	r2, [pc, #32]	; (8002f34 <ethernetif_init+0x58>)
 8002f12:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8002f14:	6878      	ldr	r0, [r7, #4]
 8002f16:	f7ff fdc3 	bl	8002aa0 <low_level_init>

  return ERR_OK;
 8002f1a:	2300      	movs	r3, #0
}
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	3708      	adds	r7, #8
 8002f20:	46bd      	mov	sp, r7
 8002f22:	bd80      	pop	{r7, pc}
 8002f24:	0800eac0 	.word	0x0800eac0
 8002f28:	0800eadc 	.word	0x0800eadc
 8002f2c:	0800eaec 	.word	0x0800eaec
 8002f30:	0800bdb9 	.word	0x0800bdb9
 8002f34:	08002bfd 	.word	0x08002bfd

08002f38 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8002f3c:	f7fd fd00 	bl	8000940 <HAL_GetTick>
 8002f40:	4603      	mov	r3, r0
}
 8002f42:	4618      	mov	r0, r3
 8002f44:	bd80      	pop	{r7, pc}
	...

08002f48 <ethernetif_update_config>:
  *         to update low level driver configuration.
* @param  netif: The network interface
  * @retval None
  */
void ethernetif_update_config(struct netif *netif)
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b084      	sub	sp, #16
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tickstart = 0;
 8002f50:	2300      	movs	r3, #0
 8002f52:	60fb      	str	r3, [r7, #12]
  uint32_t regvalue = 0;
 8002f54:	2300      	movs	r3, #0
 8002f56:	60bb      	str	r3, [r7, #8]

  if(netif_is_link_up(netif))
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8002f5e:	089b      	lsrs	r3, r3, #2
 8002f60:	f003 0301 	and.w	r3, r3, #1
 8002f64:	b2db      	uxtb	r3, r3
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d05d      	beq.n	8003026 <ethernetif_update_config+0xde>
  {
    /* Restart the auto-negotiation */
    if(heth.Init.AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8002f6a:	4b34      	ldr	r3, [pc, #208]	; (800303c <ethernetif_update_config+0xf4>)
 8002f6c:	685b      	ldr	r3, [r3, #4]
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d03f      	beq.n	8002ff2 <ethernetif_update_config+0xaa>
    {
      /* Enable Auto-Negotiation */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, PHY_AUTONEGOTIATION);
 8002f72:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002f76:	2100      	movs	r1, #0
 8002f78:	4830      	ldr	r0, [pc, #192]	; (800303c <ethernetif_update_config+0xf4>)
 8002f7a:	f7fe fa28 	bl	80013ce <HAL_ETH_WritePHYRegister>

      /* Get tick */
      tickstart = HAL_GetTick();
 8002f7e:	f7fd fcdf 	bl	8000940 <HAL_GetTick>
 8002f82:	4603      	mov	r3, r0
 8002f84:	60fb      	str	r3, [r7, #12]

      /* Wait until the auto-negotiation will be completed */
      do
      {
        HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 8002f86:	f107 0308 	add.w	r3, r7, #8
 8002f8a:	461a      	mov	r2, r3
 8002f8c:	2101      	movs	r1, #1
 8002f8e:	482b      	ldr	r0, [pc, #172]	; (800303c <ethernetif_update_config+0xf4>)
 8002f90:	f7fe f9b5 	bl	80012fe <HAL_ETH_ReadPHYRegister>

        /* Check for the Timeout ( 1s ) */
        if((HAL_GetTick() - tickstart ) > 1000)
 8002f94:	f7fd fcd4 	bl	8000940 <HAL_GetTick>
 8002f98:	4602      	mov	r2, r0
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	1ad3      	subs	r3, r2, r3
 8002f9e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002fa2:	d828      	bhi.n	8002ff6 <ethernetif_update_config+0xae>
        {
          /* In case of timeout */
          goto error;
        }
      } while (((regvalue & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8002fa4:	68bb      	ldr	r3, [r7, #8]
 8002fa6:	f003 0320 	and.w	r3, r3, #32
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d0eb      	beq.n	8002f86 <ethernetif_update_config+0x3e>

      /* Read the result of the auto-negotiation */
      HAL_ETH_ReadPHYRegister(&heth, PHY_SR, &regvalue);
 8002fae:	f107 0308 	add.w	r3, r7, #8
 8002fb2:	461a      	mov	r2, r3
 8002fb4:	2110      	movs	r1, #16
 8002fb6:	4821      	ldr	r0, [pc, #132]	; (800303c <ethernetif_update_config+0xf4>)
 8002fb8:	f7fe f9a1 	bl	80012fe <HAL_ETH_ReadPHYRegister>

      /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
      if((regvalue & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8002fbc:	68bb      	ldr	r3, [r7, #8]
 8002fbe:	f003 0304 	and.w	r3, r3, #4
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d004      	beq.n	8002fd0 <ethernetif_update_config+0x88>
      {
        /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 8002fc6:	4b1d      	ldr	r3, [pc, #116]	; (800303c <ethernetif_update_config+0xf4>)
 8002fc8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002fcc:	60da      	str	r2, [r3, #12]
 8002fce:	e002      	b.n	8002fd6 <ethernetif_update_config+0x8e>
      }
      else
      {
        /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_HALFDUPLEX;
 8002fd0:	4b1a      	ldr	r3, [pc, #104]	; (800303c <ethernetif_update_config+0xf4>)
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	60da      	str	r2, [r3, #12]
      }
      /* Configure the MAC with the speed fixed by the auto-negotiation process */
      if(regvalue & PHY_SPEED_STATUS)
 8002fd6:	68bb      	ldr	r3, [r7, #8]
 8002fd8:	f003 0302 	and.w	r3, r3, #2
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d003      	beq.n	8002fe8 <ethernetif_update_config+0xa0>
      {
        /* Set Ethernet speed to 10M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_10M;
 8002fe0:	4b16      	ldr	r3, [pc, #88]	; (800303c <ethernetif_update_config+0xf4>)
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	609a      	str	r2, [r3, #8]
 8002fe6:	e016      	b.n	8003016 <ethernetif_update_config+0xce>
      }
      else
      {
        /* Set Ethernet speed to 100M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_100M;
 8002fe8:	4b14      	ldr	r3, [pc, #80]	; (800303c <ethernetif_update_config+0xf4>)
 8002fea:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002fee:	609a      	str	r2, [r3, #8]
 8002ff0:	e011      	b.n	8003016 <ethernetif_update_config+0xce>
      }
    }
    else /* AutoNegotiation Disable */
    {
    error :
 8002ff2:	bf00      	nop
 8002ff4:	e000      	b.n	8002ff8 <ethernetif_update_config+0xb0>
          goto error;
 8002ff6:	bf00      	nop
      /* Check parameters */
      assert_param(IS_ETH_SPEED(heth.Init.Speed));
      assert_param(IS_ETH_DUPLEX_MODE(heth.Init.DuplexMode));

      /* Set MAC Speed and Duplex Mode to PHY */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 8002ff8:	4b10      	ldr	r3, [pc, #64]	; (800303c <ethernetif_update_config+0xf4>)
 8002ffa:	68db      	ldr	r3, [r3, #12]
 8002ffc:	08db      	lsrs	r3, r3, #3
 8002ffe:	b29a      	uxth	r2, r3
                                                     (uint16_t)(heth.Init.Speed >> 1)));
 8003000:	4b0e      	ldr	r3, [pc, #56]	; (800303c <ethernetif_update_config+0xf4>)
 8003002:	689b      	ldr	r3, [r3, #8]
 8003004:	085b      	lsrs	r3, r3, #1
 8003006:	b29b      	uxth	r3, r3
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 8003008:	4313      	orrs	r3, r2
 800300a:	b29b      	uxth	r3, r3
 800300c:	461a      	mov	r2, r3
 800300e:	2100      	movs	r1, #0
 8003010:	480a      	ldr	r0, [pc, #40]	; (800303c <ethernetif_update_config+0xf4>)
 8003012:	f7fe f9dc 	bl	80013ce <HAL_ETH_WritePHYRegister>
    }

    /* ETHERNET MAC Re-Configuration */
    HAL_ETH_ConfigMAC(&heth, (ETH_MACInitTypeDef *) NULL);
 8003016:	2100      	movs	r1, #0
 8003018:	4808      	ldr	r0, [pc, #32]	; (800303c <ethernetif_update_config+0xf4>)
 800301a:	f7fe fa9d 	bl	8001558 <HAL_ETH_ConfigMAC>

    /* Restart MAC interface */
    HAL_ETH_Start(&heth);
 800301e:	4807      	ldr	r0, [pc, #28]	; (800303c <ethernetif_update_config+0xf4>)
 8003020:	f7fe fa3b 	bl	800149a <HAL_ETH_Start>
 8003024:	e002      	b.n	800302c <ethernetif_update_config+0xe4>
  }
  else
  {
    /* Stop MAC interface */
    HAL_ETH_Stop(&heth);
 8003026:	4805      	ldr	r0, [pc, #20]	; (800303c <ethernetif_update_config+0xf4>)
 8003028:	f7fe fa66 	bl	80014f8 <HAL_ETH_Stop>
  }

  ethernetif_notify_conn_changed(netif);
 800302c:	6878      	ldr	r0, [r7, #4]
 800302e:	f000 f807 	bl	8003040 <ethernetif_notify_conn_changed>
}
 8003032:	bf00      	nop
 8003034:	3710      	adds	r7, #16
 8003036:	46bd      	mov	sp, r7
 8003038:	bd80      	pop	{r7, pc}
 800303a:	bf00      	nop
 800303c:	20001b38 	.word	0x20001b38

08003040 <ethernetif_notify_conn_changed>:
  * @brief  This function notify user about link status changement.
  * @param  netif: the network interface
  * @retval None
  */
__weak void ethernetif_notify_conn_changed(struct netif *netif)
{
 8003040:	b480      	push	{r7}
 8003042:	b083      	sub	sp, #12
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
  /* NOTE : This is function could be implemented in user file
            when the callback is needed,
  */

}
 8003048:	bf00      	nop
 800304a:	370c      	adds	r7, #12
 800304c:	46bd      	mov	sp, r7
 800304e:	bc80      	pop	{r7}
 8003050:	4770      	bx	lr

08003052 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 8003052:	b480      	push	{r7}
 8003054:	b083      	sub	sp, #12
 8003056:	af00      	add	r7, sp, #0
 8003058:	4603      	mov	r3, r0
 800305a:	80fb      	strh	r3, [r7, #6]
  return (u16_t)PP_HTONS(n);
 800305c:	88fb      	ldrh	r3, [r7, #6]
 800305e:	ba5b      	rev16	r3, r3
 8003060:	b29b      	uxth	r3, r3
}
 8003062:	4618      	mov	r0, r3
 8003064:	370c      	adds	r7, #12
 8003066:	46bd      	mov	sp, r7
 8003068:	bc80      	pop	{r7}
 800306a:	4770      	bx	lr

0800306c <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800306c:	b480      	push	{r7}
 800306e:	b083      	sub	sp, #12
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
  return (u32_t)PP_HTONL(n);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	061a      	lsls	r2, r3, #24
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	021b      	lsls	r3, r3, #8
 800307c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003080:	431a      	orrs	r2, r3
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	0a1b      	lsrs	r3, r3, #8
 8003086:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800308a:	431a      	orrs	r2, r3
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	0e1b      	lsrs	r3, r3, #24
 8003090:	4313      	orrs	r3, r2
}
 8003092:	4618      	mov	r0, r3
 8003094:	370c      	adds	r7, #12
 8003096:	46bd      	mov	sp, r7
 8003098:	bc80      	pop	{r7}
 800309a:	4770      	bx	lr

0800309c <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800309c:	b580      	push	{r7, lr}
 800309e:	b082      	sub	sp, #8
 80030a0:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 80030a2:	2300      	movs	r3, #0
 80030a4:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 80030a6:	f000 f8a7 	bl	80031f8 <mem_init>
  memp_init();
 80030aa:	f000 fb37 	bl	800371c <memp_init>
  pbuf_init();
  netif_init();
 80030ae:	f000 fbef 	bl	8003890 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 80030b2:	f006 f81f 	bl	80090f4 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 80030b6:	f001 fb77 	bl	80047a8 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif
 
#if LWIP_TIMERS
  sys_timeouts_init();
 80030ba:	f005 fefd 	bl	8008eb8 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 80030be:	bf00      	nop
 80030c0:	3708      	adds	r7, #8
 80030c2:	46bd      	mov	sp, r7
 80030c4:	bd80      	pop	{r7, pc}
	...

080030c8 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b084      	sub	sp, #16
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 80030d0:	4b40      	ldr	r3, [pc, #256]	; (80031d4 <plug_holes+0x10c>)
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	687a      	ldr	r2, [r7, #4]
 80030d6:	429a      	cmp	r2, r3
 80030d8:	d206      	bcs.n	80030e8 <plug_holes+0x20>
 80030da:	4b3f      	ldr	r3, [pc, #252]	; (80031d8 <plug_holes+0x110>)
 80030dc:	f240 125d 	movw	r2, #349	; 0x15d
 80030e0:	493e      	ldr	r1, [pc, #248]	; (80031dc <plug_holes+0x114>)
 80030e2:	483f      	ldr	r0, [pc, #252]	; (80031e0 <plug_holes+0x118>)
 80030e4:	f00a fcbc 	bl	800da60 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 80030e8:	4b3e      	ldr	r3, [pc, #248]	; (80031e4 <plug_holes+0x11c>)
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	687a      	ldr	r2, [r7, #4]
 80030ee:	429a      	cmp	r2, r3
 80030f0:	d306      	bcc.n	8003100 <plug_holes+0x38>
 80030f2:	4b39      	ldr	r3, [pc, #228]	; (80031d8 <plug_holes+0x110>)
 80030f4:	f44f 72af 	mov.w	r2, #350	; 0x15e
 80030f8:	493b      	ldr	r1, [pc, #236]	; (80031e8 <plug_holes+0x120>)
 80030fa:	4839      	ldr	r0, [pc, #228]	; (80031e0 <plug_holes+0x118>)
 80030fc:	f00a fcb0 	bl	800da60 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	791b      	ldrb	r3, [r3, #4]
 8003104:	2b00      	cmp	r3, #0
 8003106:	d006      	beq.n	8003116 <plug_holes+0x4e>
 8003108:	4b33      	ldr	r3, [pc, #204]	; (80031d8 <plug_holes+0x110>)
 800310a:	f240 125f 	movw	r2, #351	; 0x15f
 800310e:	4937      	ldr	r1, [pc, #220]	; (80031ec <plug_holes+0x124>)
 8003110:	4833      	ldr	r0, [pc, #204]	; (80031e0 <plug_holes+0x118>)
 8003112:	f00a fca5 	bl	800da60 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	881b      	ldrh	r3, [r3, #0]
 800311a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800311e:	d906      	bls.n	800312e <plug_holes+0x66>
 8003120:	4b2d      	ldr	r3, [pc, #180]	; (80031d8 <plug_holes+0x110>)
 8003122:	f44f 72b1 	mov.w	r2, #354	; 0x162
 8003126:	4932      	ldr	r1, [pc, #200]	; (80031f0 <plug_holes+0x128>)
 8003128:	482d      	ldr	r0, [pc, #180]	; (80031e0 <plug_holes+0x118>)
 800312a:	f00a fc99 	bl	800da60 <iprintf>

  nmem = (struct mem *)(void *)&ram[mem->next];
 800312e:	4b29      	ldr	r3, [pc, #164]	; (80031d4 <plug_holes+0x10c>)
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	687a      	ldr	r2, [r7, #4]
 8003134:	8812      	ldrh	r2, [r2, #0]
 8003136:	4413      	add	r3, r2
 8003138:	60fb      	str	r3, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800313a:	687a      	ldr	r2, [r7, #4]
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	429a      	cmp	r2, r3
 8003140:	d01f      	beq.n	8003182 <plug_holes+0xba>
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	791b      	ldrb	r3, [r3, #4]
 8003146:	2b00      	cmp	r3, #0
 8003148:	d11b      	bne.n	8003182 <plug_holes+0xba>
 800314a:	4b26      	ldr	r3, [pc, #152]	; (80031e4 <plug_holes+0x11c>)
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	68fa      	ldr	r2, [r7, #12]
 8003150:	429a      	cmp	r2, r3
 8003152:	d016      	beq.n	8003182 <plug_holes+0xba>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8003154:	4b27      	ldr	r3, [pc, #156]	; (80031f4 <plug_holes+0x12c>)
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	68fa      	ldr	r2, [r7, #12]
 800315a:	429a      	cmp	r2, r3
 800315c:	d102      	bne.n	8003164 <plug_holes+0x9c>
      lfree = mem;
 800315e:	4a25      	ldr	r2, [pc, #148]	; (80031f4 <plug_holes+0x12c>)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	881a      	ldrh	r2, [r3, #0]
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	801a      	strh	r2, [r3, #0]
    ((struct mem *)(void *)&ram[nmem->next])->prev = (mem_size_t)((u8_t *)mem - ram);
 800316c:	4b19      	ldr	r3, [pc, #100]	; (80031d4 <plug_holes+0x10c>)
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	687a      	ldr	r2, [r7, #4]
 8003172:	1ad1      	subs	r1, r2, r3
 8003174:	4b17      	ldr	r3, [pc, #92]	; (80031d4 <plug_holes+0x10c>)
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	68fa      	ldr	r2, [r7, #12]
 800317a:	8812      	ldrh	r2, [r2, #0]
 800317c:	4413      	add	r3, r2
 800317e:	b28a      	uxth	r2, r1
 8003180:	805a      	strh	r2, [r3, #2]
  }

  /* plug hole backward */
  pmem = (struct mem *)(void *)&ram[mem->prev];
 8003182:	4b14      	ldr	r3, [pc, #80]	; (80031d4 <plug_holes+0x10c>)
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	687a      	ldr	r2, [r7, #4]
 8003188:	8852      	ldrh	r2, [r2, #2]
 800318a:	4413      	add	r3, r2
 800318c:	60bb      	str	r3, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800318e:	68ba      	ldr	r2, [r7, #8]
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	429a      	cmp	r2, r3
 8003194:	d01a      	beq.n	80031cc <plug_holes+0x104>
 8003196:	68bb      	ldr	r3, [r7, #8]
 8003198:	791b      	ldrb	r3, [r3, #4]
 800319a:	2b00      	cmp	r3, #0
 800319c:	d116      	bne.n	80031cc <plug_holes+0x104>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800319e:	4b15      	ldr	r3, [pc, #84]	; (80031f4 <plug_holes+0x12c>)
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	687a      	ldr	r2, [r7, #4]
 80031a4:	429a      	cmp	r2, r3
 80031a6:	d102      	bne.n	80031ae <plug_holes+0xe6>
      lfree = pmem;
 80031a8:	4a12      	ldr	r2, [pc, #72]	; (80031f4 <plug_holes+0x12c>)
 80031aa:	68bb      	ldr	r3, [r7, #8]
 80031ac:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	881a      	ldrh	r2, [r3, #0]
 80031b2:	68bb      	ldr	r3, [r7, #8]
 80031b4:	801a      	strh	r2, [r3, #0]
    ((struct mem *)(void *)&ram[mem->next])->prev = (mem_size_t)((u8_t *)pmem - ram);
 80031b6:	4b07      	ldr	r3, [pc, #28]	; (80031d4 <plug_holes+0x10c>)
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	68ba      	ldr	r2, [r7, #8]
 80031bc:	1ad1      	subs	r1, r2, r3
 80031be:	4b05      	ldr	r3, [pc, #20]	; (80031d4 <plug_holes+0x10c>)
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	687a      	ldr	r2, [r7, #4]
 80031c4:	8812      	ldrh	r2, [r2, #0]
 80031c6:	4413      	add	r3, r2
 80031c8:	b28a      	uxth	r2, r1
 80031ca:	805a      	strh	r2, [r3, #2]
  }
}
 80031cc:	bf00      	nop
 80031ce:	3710      	adds	r7, #16
 80031d0:	46bd      	mov	sp, r7
 80031d2:	bd80      	pop	{r7, pc}
 80031d4:	2000009c 	.word	0x2000009c
 80031d8:	0800eb14 	.word	0x0800eb14
 80031dc:	0800eb44 	.word	0x0800eb44
 80031e0:	0800eb5c 	.word	0x0800eb5c
 80031e4:	200000a0 	.word	0x200000a0
 80031e8:	0800eb84 	.word	0x0800eb84
 80031ec:	0800eba0 	.word	0x0800eba0
 80031f0:	0800ebbc 	.word	0x0800ebbc
 80031f4:	200000a4 	.word	0x200000a4

080031f8 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 80031f8:	b480      	push	{r7}
 80031fa:	b083      	sub	sp, #12
 80031fc:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
    (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT-1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 80031fe:	4b18      	ldr	r3, [pc, #96]	; (8003260 <mem_init+0x68>)
 8003200:	3303      	adds	r3, #3
 8003202:	f023 0303 	bic.w	r3, r3, #3
 8003206:	461a      	mov	r2, r3
 8003208:	4b16      	ldr	r3, [pc, #88]	; (8003264 <mem_init+0x6c>)
 800320a:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800320c:	4b15      	ldr	r3, [pc, #84]	; (8003264 <mem_init+0x6c>)
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8003218:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	2200      	movs	r2, #0
 800321e:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	2200      	movs	r2, #0
 8003224:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = (struct mem *)(void *)&ram[MEM_SIZE_ALIGNED];
 8003226:	4b0f      	ldr	r3, [pc, #60]	; (8003264 <mem_init+0x6c>)
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f503 63c8 	add.w	r3, r3, #1600	; 0x640
 800322e:	4a0e      	ldr	r2, [pc, #56]	; (8003268 <mem_init+0x70>)
 8003230:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 8003232:	4b0d      	ldr	r3, [pc, #52]	; (8003268 <mem_init+0x70>)
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	2201      	movs	r2, #1
 8003238:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800323a:	4b0b      	ldr	r3, [pc, #44]	; (8003268 <mem_init+0x70>)
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8003242:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 8003244:	4b08      	ldr	r3, [pc, #32]	; (8003268 <mem_init+0x70>)
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800324c:	805a      	strh	r2, [r3, #2]

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800324e:	4b05      	ldr	r3, [pc, #20]	; (8003264 <mem_init+0x6c>)
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	4a06      	ldr	r2, [pc, #24]	; (800326c <mem_init+0x74>)
 8003254:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 8003256:	bf00      	nop
 8003258:	370c      	adds	r7, #12
 800325a:	46bd      	mov	sp, r7
 800325c:	bc80      	pop	{r7}
 800325e:	4770      	bx	lr
 8003260:	20003368 	.word	0x20003368
 8003264:	2000009c 	.word	0x2000009c
 8003268:	200000a0 	.word	0x200000a0
 800326c:	200000a4 	.word	0x200000a4

08003270 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8003270:	b580      	push	{r7, lr}
 8003272:	b084      	sub	sp, #16
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	2b00      	cmp	r3, #0
 800327c:	d043      	beq.n	8003306 <mem_free+0x96>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  LWIP_ASSERT("mem_free: sanity check alignment", (((mem_ptr_t)rmem) & (MEM_ALIGNMENT-1)) == 0);
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	f003 0303 	and.w	r3, r3, #3
 8003284:	2b00      	cmp	r3, #0
 8003286:	d006      	beq.n	8003296 <mem_free+0x26>
 8003288:	4b22      	ldr	r3, [pc, #136]	; (8003314 <mem_free+0xa4>)
 800328a:	f44f 72d6 	mov.w	r2, #428	; 0x1ac
 800328e:	4922      	ldr	r1, [pc, #136]	; (8003318 <mem_free+0xa8>)
 8003290:	4822      	ldr	r0, [pc, #136]	; (800331c <mem_free+0xac>)
 8003292:	f00a fbe5 	bl	800da60 <iprintf>

  LWIP_ASSERT("mem_free: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8003296:	4b22      	ldr	r3, [pc, #136]	; (8003320 <mem_free+0xb0>)
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	687a      	ldr	r2, [r7, #4]
 800329c:	429a      	cmp	r2, r3
 800329e:	d304      	bcc.n	80032aa <mem_free+0x3a>
 80032a0:	4b20      	ldr	r3, [pc, #128]	; (8003324 <mem_free+0xb4>)
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	687a      	ldr	r2, [r7, #4]
 80032a6:	429a      	cmp	r2, r3
 80032a8:	d306      	bcc.n	80032b8 <mem_free+0x48>
 80032aa:	4b1a      	ldr	r3, [pc, #104]	; (8003314 <mem_free+0xa4>)
 80032ac:	f44f 72d7 	mov.w	r2, #430	; 0x1ae
 80032b0:	491d      	ldr	r1, [pc, #116]	; (8003328 <mem_free+0xb8>)
 80032b2:	481a      	ldr	r0, [pc, #104]	; (800331c <mem_free+0xac>)
 80032b4:	f00a fbd4 	bl	800da60 <iprintf>
    (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 80032b8:	4b19      	ldr	r3, [pc, #100]	; (8003320 <mem_free+0xb0>)
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	687a      	ldr	r2, [r7, #4]
 80032be:	429a      	cmp	r2, r3
 80032c0:	d323      	bcc.n	800330a <mem_free+0x9a>
 80032c2:	4b18      	ldr	r3, [pc, #96]	; (8003324 <mem_free+0xb4>)
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	687a      	ldr	r2, [r7, #4]
 80032c8:	429a      	cmp	r2, r3
 80032ca:	d21e      	bcs.n	800330a <mem_free+0x9a>
  }
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - SIZEOF_STRUCT_MEM);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	3b08      	subs	r3, #8
 80032d0:	60fb      	str	r3, [r7, #12]
  /* ... which has to be in a used state ... */
  LWIP_ASSERT("mem_free: mem->used", mem->used);
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	791b      	ldrb	r3, [r3, #4]
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d106      	bne.n	80032e8 <mem_free+0x78>
 80032da:	4b0e      	ldr	r3, [pc, #56]	; (8003314 <mem_free+0xa4>)
 80032dc:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
 80032e0:	4912      	ldr	r1, [pc, #72]	; (800332c <mem_free+0xbc>)
 80032e2:	480e      	ldr	r0, [pc, #56]	; (800331c <mem_free+0xac>)
 80032e4:	f00a fbbc 	bl	800da60 <iprintf>
  /* ... and is now unused. */
  mem->used = 0;
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	2200      	movs	r2, #0
 80032ec:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 80032ee:	4b10      	ldr	r3, [pc, #64]	; (8003330 <mem_free+0xc0>)
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	68fa      	ldr	r2, [r7, #12]
 80032f4:	429a      	cmp	r2, r3
 80032f6:	d202      	bcs.n	80032fe <mem_free+0x8e>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 80032f8:	4a0d      	ldr	r2, [pc, #52]	; (8003330 <mem_free+0xc0>)
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 80032fe:	68f8      	ldr	r0, [r7, #12]
 8003300:	f7ff fee2 	bl	80030c8 <plug_holes>
 8003304:	e002      	b.n	800330c <mem_free+0x9c>
    return;
 8003306:	bf00      	nop
 8003308:	e000      	b.n	800330c <mem_free+0x9c>
    return;
 800330a:	bf00      	nop
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 800330c:	3710      	adds	r7, #16
 800330e:	46bd      	mov	sp, r7
 8003310:	bd80      	pop	{r7, pc}
 8003312:	bf00      	nop
 8003314:	0800eb14 	.word	0x0800eb14
 8003318:	0800ebe8 	.word	0x0800ebe8
 800331c:	0800eb5c 	.word	0x0800eb5c
 8003320:	2000009c 	.word	0x2000009c
 8003324:	200000a0 	.word	0x200000a0
 8003328:	0800ec0c 	.word	0x0800ec0c
 800332c:	0800ec24 	.word	0x0800ec24
 8003330:	200000a4 	.word	0x200000a4

08003334 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t newsize)
{
 8003334:	b580      	push	{r7, lr}
 8003336:	b086      	sub	sp, #24
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
 800333c:	460b      	mov	r3, r1
 800333e:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = LWIP_MEM_ALIGN_SIZE(newsize);
 8003340:	887b      	ldrh	r3, [r7, #2]
 8003342:	3303      	adds	r3, #3
 8003344:	b29b      	uxth	r3, r3
 8003346:	f023 0303 	bic.w	r3, r3, #3
 800334a:	807b      	strh	r3, [r7, #2]

  if (newsize < MIN_SIZE_ALIGNED) {
 800334c:	887b      	ldrh	r3, [r7, #2]
 800334e:	2b0b      	cmp	r3, #11
 8003350:	d801      	bhi.n	8003356 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 8003352:	230c      	movs	r3, #12
 8003354:	807b      	strh	r3, [r7, #2]
  }

  if (newsize > MEM_SIZE_ALIGNED) {
 8003356:	887b      	ldrh	r3, [r7, #2]
 8003358:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800335c:	d901      	bls.n	8003362 <mem_trim+0x2e>
    return NULL;
 800335e:	2300      	movs	r3, #0
 8003360:	e0b1      	b.n	80034c6 <mem_trim+0x192>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8003362:	4b5b      	ldr	r3, [pc, #364]	; (80034d0 <mem_trim+0x19c>)
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	687a      	ldr	r2, [r7, #4]
 8003368:	429a      	cmp	r2, r3
 800336a:	d304      	bcc.n	8003376 <mem_trim+0x42>
 800336c:	4b59      	ldr	r3, [pc, #356]	; (80034d4 <mem_trim+0x1a0>)
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	687a      	ldr	r2, [r7, #4]
 8003372:	429a      	cmp	r2, r3
 8003374:	d306      	bcc.n	8003384 <mem_trim+0x50>
 8003376:	4b58      	ldr	r3, [pc, #352]	; (80034d8 <mem_trim+0x1a4>)
 8003378:	f240 12f3 	movw	r2, #499	; 0x1f3
 800337c:	4957      	ldr	r1, [pc, #348]	; (80034dc <mem_trim+0x1a8>)
 800337e:	4858      	ldr	r0, [pc, #352]	; (80034e0 <mem_trim+0x1ac>)
 8003380:	f00a fb6e 	bl	800da60 <iprintf>
   (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8003384:	4b52      	ldr	r3, [pc, #328]	; (80034d0 <mem_trim+0x19c>)
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	687a      	ldr	r2, [r7, #4]
 800338a:	429a      	cmp	r2, r3
 800338c:	d304      	bcc.n	8003398 <mem_trim+0x64>
 800338e:	4b51      	ldr	r3, [pc, #324]	; (80034d4 <mem_trim+0x1a0>)
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	687a      	ldr	r2, [r7, #4]
 8003394:	429a      	cmp	r2, r3
 8003396:	d301      	bcc.n	800339c <mem_trim+0x68>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    SYS_ARCH_PROTECT(lev);
    MEM_STATS_INC(illegal);
    SYS_ARCH_UNPROTECT(lev);
    return rmem;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	e094      	b.n	80034c6 <mem_trim+0x192>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - SIZEOF_STRUCT_MEM);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	3b08      	subs	r3, #8
 80033a0:	617b      	str	r3, [r7, #20]
  /* ... and its offset pointer */
  ptr = (mem_size_t)((u8_t *)mem - ram);
 80033a2:	4b4b      	ldr	r3, [pc, #300]	; (80034d0 <mem_trim+0x19c>)
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	697a      	ldr	r2, [r7, #20]
 80033a8:	1ad3      	subs	r3, r2, r3
 80033aa:	827b      	strh	r3, [r7, #18]

  size = mem->next - ptr - SIZEOF_STRUCT_MEM;
 80033ac:	697b      	ldr	r3, [r7, #20]
 80033ae:	881a      	ldrh	r2, [r3, #0]
 80033b0:	8a7b      	ldrh	r3, [r7, #18]
 80033b2:	1ad3      	subs	r3, r2, r3
 80033b4:	b29b      	uxth	r3, r3
 80033b6:	3b08      	subs	r3, #8
 80033b8:	823b      	strh	r3, [r7, #16]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 80033ba:	887a      	ldrh	r2, [r7, #2]
 80033bc:	8a3b      	ldrh	r3, [r7, #16]
 80033be:	429a      	cmp	r2, r3
 80033c0:	d906      	bls.n	80033d0 <mem_trim+0x9c>
 80033c2:	4b45      	ldr	r3, [pc, #276]	; (80034d8 <mem_trim+0x1a4>)
 80033c4:	f240 2206 	movw	r2, #518	; 0x206
 80033c8:	4946      	ldr	r1, [pc, #280]	; (80034e4 <mem_trim+0x1b0>)
 80033ca:	4845      	ldr	r0, [pc, #276]	; (80034e0 <mem_trim+0x1ac>)
 80033cc:	f00a fb48 	bl	800da60 <iprintf>
  if (newsize > size) {
 80033d0:	887a      	ldrh	r2, [r7, #2]
 80033d2:	8a3b      	ldrh	r3, [r7, #16]
 80033d4:	429a      	cmp	r2, r3
 80033d6:	d901      	bls.n	80033dc <mem_trim+0xa8>
    /* not supported */
    return NULL;
 80033d8:	2300      	movs	r3, #0
 80033da:	e074      	b.n	80034c6 <mem_trim+0x192>
  }
  if (newsize == size) {
 80033dc:	887a      	ldrh	r2, [r7, #2]
 80033de:	8a3b      	ldrh	r3, [r7, #16]
 80033e0:	429a      	cmp	r2, r3
 80033e2:	d101      	bne.n	80033e8 <mem_trim+0xb4>
    /* No change in size, simply return */
    return rmem;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	e06e      	b.n	80034c6 <mem_trim+0x192>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = (struct mem *)(void *)&ram[mem->next];
 80033e8:	4b39      	ldr	r3, [pc, #228]	; (80034d0 <mem_trim+0x19c>)
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	697a      	ldr	r2, [r7, #20]
 80033ee:	8812      	ldrh	r2, [r2, #0]
 80033f0:	4413      	add	r3, r2
 80033f2:	60fb      	str	r3, [r7, #12]
  if (mem2->used == 0) {
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	791b      	ldrb	r3, [r3, #4]
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d131      	bne.n	8003460 <mem_trim+0x12c>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    /* remember the old next pointer */
    next = mem2->next;
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	881b      	ldrh	r3, [r3, #0]
 8003400:	813b      	strh	r3, [r7, #8]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 8003402:	8a7a      	ldrh	r2, [r7, #18]
 8003404:	887b      	ldrh	r3, [r7, #2]
 8003406:	4413      	add	r3, r2
 8003408:	b29b      	uxth	r3, r3
 800340a:	3308      	adds	r3, #8
 800340c:	817b      	strh	r3, [r7, #10]
    if (lfree == mem2) {
 800340e:	4b36      	ldr	r3, [pc, #216]	; (80034e8 <mem_trim+0x1b4>)
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	68fa      	ldr	r2, [r7, #12]
 8003414:	429a      	cmp	r2, r3
 8003416:	d105      	bne.n	8003424 <mem_trim+0xf0>
      lfree = (struct mem *)(void *)&ram[ptr2];
 8003418:	4b2d      	ldr	r3, [pc, #180]	; (80034d0 <mem_trim+0x19c>)
 800341a:	681a      	ldr	r2, [r3, #0]
 800341c:	897b      	ldrh	r3, [r7, #10]
 800341e:	4413      	add	r3, r2
 8003420:	4a31      	ldr	r2, [pc, #196]	; (80034e8 <mem_trim+0x1b4>)
 8003422:	6013      	str	r3, [r2, #0]
    }
    mem2 = (struct mem *)(void *)&ram[ptr2];
 8003424:	4b2a      	ldr	r3, [pc, #168]	; (80034d0 <mem_trim+0x19c>)
 8003426:	681a      	ldr	r2, [r3, #0]
 8003428:	897b      	ldrh	r3, [r7, #10]
 800342a:	4413      	add	r3, r2
 800342c:	60fb      	str	r3, [r7, #12]
    mem2->used = 0;
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	2200      	movs	r2, #0
 8003432:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	893a      	ldrh	r2, [r7, #8]
 8003438:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	8a7a      	ldrh	r2, [r7, #18]
 800343e:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 8003440:	697b      	ldr	r3, [r7, #20]
 8003442:	897a      	ldrh	r2, [r7, #10]
 8003444:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	881b      	ldrh	r3, [r3, #0]
 800344a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800344e:	d039      	beq.n	80034c4 <mem_trim+0x190>
      ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 8003450:	4b1f      	ldr	r3, [pc, #124]	; (80034d0 <mem_trim+0x19c>)
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	68fa      	ldr	r2, [r7, #12]
 8003456:	8812      	ldrh	r2, [r2, #0]
 8003458:	4413      	add	r3, r2
 800345a:	897a      	ldrh	r2, [r7, #10]
 800345c:	805a      	strh	r2, [r3, #2]
 800345e:	e031      	b.n	80034c4 <mem_trim+0x190>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8003460:	887b      	ldrh	r3, [r7, #2]
 8003462:	f103 0214 	add.w	r2, r3, #20
 8003466:	8a3b      	ldrh	r3, [r7, #16]
 8003468:	429a      	cmp	r2, r3
 800346a:	d82b      	bhi.n	80034c4 <mem_trim+0x190>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 800346c:	8a7a      	ldrh	r2, [r7, #18]
 800346e:	887b      	ldrh	r3, [r7, #2]
 8003470:	4413      	add	r3, r2
 8003472:	b29b      	uxth	r3, r3
 8003474:	3308      	adds	r3, #8
 8003476:	817b      	strh	r3, [r7, #10]
    mem2 = (struct mem *)(void *)&ram[ptr2];
 8003478:	4b15      	ldr	r3, [pc, #84]	; (80034d0 <mem_trim+0x19c>)
 800347a:	681a      	ldr	r2, [r3, #0]
 800347c:	897b      	ldrh	r3, [r7, #10]
 800347e:	4413      	add	r3, r2
 8003480:	60fb      	str	r3, [r7, #12]
    if (mem2 < lfree) {
 8003482:	4b19      	ldr	r3, [pc, #100]	; (80034e8 <mem_trim+0x1b4>)
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	68fa      	ldr	r2, [r7, #12]
 8003488:	429a      	cmp	r2, r3
 800348a:	d202      	bcs.n	8003492 <mem_trim+0x15e>
      lfree = mem2;
 800348c:	4a16      	ldr	r2, [pc, #88]	; (80034e8 <mem_trim+0x1b4>)
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	2200      	movs	r2, #0
 8003496:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 8003498:	697b      	ldr	r3, [r7, #20]
 800349a:	881a      	ldrh	r2, [r3, #0]
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	8a7a      	ldrh	r2, [r7, #18]
 80034a4:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 80034a6:	697b      	ldr	r3, [r7, #20]
 80034a8:	897a      	ldrh	r2, [r7, #10]
 80034aa:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	881b      	ldrh	r3, [r3, #0]
 80034b0:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80034b4:	d006      	beq.n	80034c4 <mem_trim+0x190>
      ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 80034b6:	4b06      	ldr	r3, [pc, #24]	; (80034d0 <mem_trim+0x19c>)
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	68fa      	ldr	r2, [r7, #12]
 80034bc:	8812      	ldrh	r2, [r2, #0]
 80034be:	4413      	add	r3, r2
 80034c0:	897a      	ldrh	r2, [r7, #10]
 80034c2:	805a      	strh	r2, [r3, #2]
  } */
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 80034c4:	687b      	ldr	r3, [r7, #4]
}
 80034c6:	4618      	mov	r0, r3
 80034c8:	3718      	adds	r7, #24
 80034ca:	46bd      	mov	sp, r7
 80034cc:	bd80      	pop	{r7, pc}
 80034ce:	bf00      	nop
 80034d0:	2000009c 	.word	0x2000009c
 80034d4:	200000a0 	.word	0x200000a0
 80034d8:	0800eb14 	.word	0x0800eb14
 80034dc:	0800ec38 	.word	0x0800ec38
 80034e0:	0800eb5c 	.word	0x0800eb5c
 80034e4:	0800ec50 	.word	0x0800ec50
 80034e8:	200000a4 	.word	0x200000a4

080034ec <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size)
{
 80034ec:	b580      	push	{r7, lr}
 80034ee:	b088      	sub	sp, #32
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	4603      	mov	r3, r0
 80034f4:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size == 0) {
 80034f6:	88fb      	ldrh	r3, [r7, #6]
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d101      	bne.n	8003500 <mem_malloc+0x14>
    return NULL;
 80034fc:	2300      	movs	r3, #0
 80034fe:	e0c7      	b.n	8003690 <mem_malloc+0x1a4>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = LWIP_MEM_ALIGN_SIZE(size);
 8003500:	88fb      	ldrh	r3, [r7, #6]
 8003502:	3303      	adds	r3, #3
 8003504:	b29b      	uxth	r3, r3
 8003506:	f023 0303 	bic.w	r3, r3, #3
 800350a:	80fb      	strh	r3, [r7, #6]

  if (size < MIN_SIZE_ALIGNED) {
 800350c:	88fb      	ldrh	r3, [r7, #6]
 800350e:	2b0b      	cmp	r3, #11
 8003510:	d801      	bhi.n	8003516 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 8003512:	230c      	movs	r3, #12
 8003514:	80fb      	strh	r3, [r7, #6]
  }

  if (size > MEM_SIZE_ALIGNED) {
 8003516:	88fb      	ldrh	r3, [r7, #6]
 8003518:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800351c:	d901      	bls.n	8003522 <mem_malloc+0x36>
    return NULL;
 800351e:	2300      	movs	r3, #0
 8003520:	e0b6      	b.n	8003690 <mem_malloc+0x1a4>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
 8003522:	4b5d      	ldr	r3, [pc, #372]	; (8003698 <mem_malloc+0x1ac>)
 8003524:	681a      	ldr	r2, [r3, #0]
 8003526:	4b5d      	ldr	r3, [pc, #372]	; (800369c <mem_malloc+0x1b0>)
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	1ad3      	subs	r3, r2, r3
 800352c:	83fb      	strh	r3, [r7, #30]
 800352e:	e0a7      	b.n	8003680 <mem_malloc+0x194>
         ptr = ((struct mem *)(void *)&ram[ptr])->next) {
      mem = (struct mem *)(void *)&ram[ptr];
 8003530:	4b5a      	ldr	r3, [pc, #360]	; (800369c <mem_malloc+0x1b0>)
 8003532:	681a      	ldr	r2, [r3, #0]
 8003534:	8bfb      	ldrh	r3, [r7, #30]
 8003536:	4413      	add	r3, r2
 8003538:	617b      	str	r3, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800353a:	697b      	ldr	r3, [r7, #20]
 800353c:	791b      	ldrb	r3, [r3, #4]
 800353e:	2b00      	cmp	r3, #0
 8003540:	f040 8098 	bne.w	8003674 <mem_malloc+0x188>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8003544:	697b      	ldr	r3, [r7, #20]
 8003546:	881b      	ldrh	r3, [r3, #0]
 8003548:	461a      	mov	r2, r3
 800354a:	8bfb      	ldrh	r3, [r7, #30]
 800354c:	1ad3      	subs	r3, r2, r3
 800354e:	f1a3 0208 	sub.w	r2, r3, #8
 8003552:	88fb      	ldrh	r3, [r7, #6]
      if ((!mem->used) &&
 8003554:	429a      	cmp	r2, r3
 8003556:	f0c0 808d 	bcc.w	8003674 <mem_malloc+0x188>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800355a:	697b      	ldr	r3, [r7, #20]
 800355c:	881b      	ldrh	r3, [r3, #0]
 800355e:	461a      	mov	r2, r3
 8003560:	8bfb      	ldrh	r3, [r7, #30]
 8003562:	1ad3      	subs	r3, r2, r3
 8003564:	f1a3 0208 	sub.w	r2, r3, #8
 8003568:	88fb      	ldrh	r3, [r7, #6]
 800356a:	3314      	adds	r3, #20
 800356c:	429a      	cmp	r2, r3
 800356e:	d327      	bcc.n	80035c0 <mem_malloc+0xd4>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = ptr + SIZEOF_STRUCT_MEM + size;
 8003570:	8bfa      	ldrh	r2, [r7, #30]
 8003572:	88fb      	ldrh	r3, [r7, #6]
 8003574:	4413      	add	r3, r2
 8003576:	b29b      	uxth	r3, r3
 8003578:	3308      	adds	r3, #8
 800357a:	827b      	strh	r3, [r7, #18]
          /* create mem2 struct */
          mem2 = (struct mem *)(void *)&ram[ptr2];
 800357c:	4b47      	ldr	r3, [pc, #284]	; (800369c <mem_malloc+0x1b0>)
 800357e:	681a      	ldr	r2, [r3, #0]
 8003580:	8a7b      	ldrh	r3, [r7, #18]
 8003582:	4413      	add	r3, r2
 8003584:	60fb      	str	r3, [r7, #12]
          mem2->used = 0;
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	2200      	movs	r2, #0
 800358a:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800358c:	697b      	ldr	r3, [r7, #20]
 800358e:	881a      	ldrh	r2, [r3, #0]
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	8bfa      	ldrh	r2, [r7, #30]
 8003598:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800359a:	697b      	ldr	r3, [r7, #20]
 800359c:	8a7a      	ldrh	r2, [r7, #18]
 800359e:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 80035a0:	697b      	ldr	r3, [r7, #20]
 80035a2:	2201      	movs	r2, #1
 80035a4:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	881b      	ldrh	r3, [r3, #0]
 80035aa:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80035ae:	d00a      	beq.n	80035c6 <mem_malloc+0xda>
            ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 80035b0:	4b3a      	ldr	r3, [pc, #232]	; (800369c <mem_malloc+0x1b0>)
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	68fa      	ldr	r2, [r7, #12]
 80035b6:	8812      	ldrh	r2, [r2, #0]
 80035b8:	4413      	add	r3, r2
 80035ba:	8a7a      	ldrh	r2, [r7, #18]
 80035bc:	805a      	strh	r2, [r3, #2]
 80035be:	e002      	b.n	80035c6 <mem_malloc+0xda>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 80035c0:	697b      	ldr	r3, [r7, #20]
 80035c2:	2201      	movs	r2, #1
 80035c4:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - (mem_size_t)((u8_t *)mem - ram));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 80035c6:	4b34      	ldr	r3, [pc, #208]	; (8003698 <mem_malloc+0x1ac>)
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	697a      	ldr	r2, [r7, #20]
 80035cc:	429a      	cmp	r2, r3
 80035ce:	d127      	bne.n	8003620 <mem_malloc+0x134>
          struct mem *cur = lfree;
 80035d0:	4b31      	ldr	r3, [pc, #196]	; (8003698 <mem_malloc+0x1ac>)
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 80035d6:	e005      	b.n	80035e4 <mem_malloc+0xf8>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = (struct mem *)(void *)&ram[cur->next];
 80035d8:	4b30      	ldr	r3, [pc, #192]	; (800369c <mem_malloc+0x1b0>)
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	69ba      	ldr	r2, [r7, #24]
 80035de:	8812      	ldrh	r2, [r2, #0]
 80035e0:	4413      	add	r3, r2
 80035e2:	61bb      	str	r3, [r7, #24]
          while (cur->used && cur != ram_end) {
 80035e4:	69bb      	ldr	r3, [r7, #24]
 80035e6:	791b      	ldrb	r3, [r3, #4]
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d004      	beq.n	80035f6 <mem_malloc+0x10a>
 80035ec:	4b2c      	ldr	r3, [pc, #176]	; (80036a0 <mem_malloc+0x1b4>)
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	69ba      	ldr	r2, [r7, #24]
 80035f2:	429a      	cmp	r2, r3
 80035f4:	d1f0      	bne.n	80035d8 <mem_malloc+0xec>
          }
          lfree = cur;
 80035f6:	4a28      	ldr	r2, [pc, #160]	; (8003698 <mem_malloc+0x1ac>)
 80035f8:	69bb      	ldr	r3, [r7, #24]
 80035fa:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 80035fc:	4b26      	ldr	r3, [pc, #152]	; (8003698 <mem_malloc+0x1ac>)
 80035fe:	681a      	ldr	r2, [r3, #0]
 8003600:	4b27      	ldr	r3, [pc, #156]	; (80036a0 <mem_malloc+0x1b4>)
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	429a      	cmp	r2, r3
 8003606:	d00b      	beq.n	8003620 <mem_malloc+0x134>
 8003608:	4b23      	ldr	r3, [pc, #140]	; (8003698 <mem_malloc+0x1ac>)
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	791b      	ldrb	r3, [r3, #4]
 800360e:	2b00      	cmp	r3, #0
 8003610:	d006      	beq.n	8003620 <mem_malloc+0x134>
 8003612:	4b24      	ldr	r3, [pc, #144]	; (80036a4 <mem_malloc+0x1b8>)
 8003614:	f240 22cf 	movw	r2, #719	; 0x2cf
 8003618:	4923      	ldr	r1, [pc, #140]	; (80036a8 <mem_malloc+0x1bc>)
 800361a:	4824      	ldr	r0, [pc, #144]	; (80036ac <mem_malloc+0x1c0>)
 800361c:	f00a fa20 	bl	800da60 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8003620:	88fa      	ldrh	r2, [r7, #6]
 8003622:	697b      	ldr	r3, [r7, #20]
 8003624:	4413      	add	r3, r2
 8003626:	3308      	adds	r3, #8
 8003628:	4a1d      	ldr	r2, [pc, #116]	; (80036a0 <mem_malloc+0x1b4>)
 800362a:	6812      	ldr	r2, [r2, #0]
 800362c:	4293      	cmp	r3, r2
 800362e:	d906      	bls.n	800363e <mem_malloc+0x152>
 8003630:	4b1c      	ldr	r3, [pc, #112]	; (80036a4 <mem_malloc+0x1b8>)
 8003632:	f240 22d3 	movw	r2, #723	; 0x2d3
 8003636:	491e      	ldr	r1, [pc, #120]	; (80036b0 <mem_malloc+0x1c4>)
 8003638:	481c      	ldr	r0, [pc, #112]	; (80036ac <mem_malloc+0x1c0>)
 800363a:	f00a fa11 	bl	800da60 <iprintf>
         (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800363e:	697b      	ldr	r3, [r7, #20]
 8003640:	f003 0303 	and.w	r3, r3, #3
 8003644:	2b00      	cmp	r3, #0
 8003646:	d006      	beq.n	8003656 <mem_malloc+0x16a>
 8003648:	4b16      	ldr	r3, [pc, #88]	; (80036a4 <mem_malloc+0x1b8>)
 800364a:	f240 22d5 	movw	r2, #725	; 0x2d5
 800364e:	4919      	ldr	r1, [pc, #100]	; (80036b4 <mem_malloc+0x1c8>)
 8003650:	4816      	ldr	r0, [pc, #88]	; (80036ac <mem_malloc+0x1c0>)
 8003652:	f00a fa05 	bl	800da60 <iprintf>
         ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8003656:	697b      	ldr	r3, [r7, #20]
 8003658:	f003 0303 	and.w	r3, r3, #3
 800365c:	2b00      	cmp	r3, #0
 800365e:	d006      	beq.n	800366e <mem_malloc+0x182>
 8003660:	4b10      	ldr	r3, [pc, #64]	; (80036a4 <mem_malloc+0x1b8>)
 8003662:	f240 22d7 	movw	r2, #727	; 0x2d7
 8003666:	4914      	ldr	r1, [pc, #80]	; (80036b8 <mem_malloc+0x1cc>)
 8003668:	4810      	ldr	r0, [pc, #64]	; (80036ac <mem_malloc+0x1c0>)
 800366a:	f00a f9f9 	bl	800da60 <iprintf>
          (((mem_ptr_t)mem) & (MEM_ALIGNMENT-1)) == 0);

        return (u8_t *)mem + SIZEOF_STRUCT_MEM;
 800366e:	697b      	ldr	r3, [r7, #20]
 8003670:	3308      	adds	r3, #8
 8003672:	e00d      	b.n	8003690 <mem_malloc+0x1a4>
         ptr = ((struct mem *)(void *)&ram[ptr])->next) {
 8003674:	4b09      	ldr	r3, [pc, #36]	; (800369c <mem_malloc+0x1b0>)
 8003676:	681a      	ldr	r2, [r3, #0]
 8003678:	8bfb      	ldrh	r3, [r7, #30]
 800367a:	4413      	add	r3, r2
 800367c:	881b      	ldrh	r3, [r3, #0]
 800367e:	83fb      	strh	r3, [r7, #30]
    for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
 8003680:	8bfa      	ldrh	r2, [r7, #30]
 8003682:	88fb      	ldrh	r3, [r7, #6]
 8003684:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 8003688:	429a      	cmp	r2, r3
 800368a:	f4ff af51 	bcc.w	8003530 <mem_malloc+0x44>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  return NULL;
 800368e:	2300      	movs	r3, #0
}
 8003690:	4618      	mov	r0, r3
 8003692:	3720      	adds	r7, #32
 8003694:	46bd      	mov	sp, r7
 8003696:	bd80      	pop	{r7, pc}
 8003698:	200000a4 	.word	0x200000a4
 800369c:	2000009c 	.word	0x2000009c
 80036a0:	200000a0 	.word	0x200000a0
 80036a4:	0800eb14 	.word	0x0800eb14
 80036a8:	0800ec70 	.word	0x0800ec70
 80036ac:	0800eb5c 	.word	0x0800eb5c
 80036b0:	0800ec8c 	.word	0x0800ec8c
 80036b4:	0800ecbc 	.word	0x0800ecbc
 80036b8:	0800ecec 	.word	0x0800ecec

080036bc <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 80036bc:	b480      	push	{r7}
 80036be:	b085      	sub	sp, #20
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	689b      	ldr	r3, [r3, #8]
 80036c8:	2200      	movs	r2, #0
 80036ca:	601a      	str	r2, [r3, #0]
  memp = (struct memp*)LWIP_MEM_ALIGN(desc->base);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	685b      	ldr	r3, [r3, #4]
 80036d0:	3303      	adds	r3, #3
 80036d2:	f023 0303 	bic.w	r3, r3, #3
 80036d6:	60bb      	str	r3, [r7, #8]
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 80036d8:	2300      	movs	r3, #0
 80036da:	60fb      	str	r3, [r7, #12]
 80036dc:	e011      	b.n	8003702 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	689b      	ldr	r3, [r3, #8]
 80036e2:	681a      	ldr	r2, [r3, #0]
 80036e4:	68bb      	ldr	r3, [r7, #8]
 80036e6:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	689b      	ldr	r3, [r3, #8]
 80036ec:	68ba      	ldr	r2, [r7, #8]
 80036ee:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
   /* cast through void* to get rid of alignment warnings */
   memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	881b      	ldrh	r3, [r3, #0]
 80036f4:	461a      	mov	r2, r3
 80036f6:	68bb      	ldr	r3, [r7, #8]
 80036f8:	4413      	add	r3, r2
 80036fa:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	3301      	adds	r3, #1
 8003700:	60fb      	str	r3, [r7, #12]
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	885b      	ldrh	r3, [r3, #2]
 8003706:	461a      	mov	r2, r3
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	4293      	cmp	r3, r2
 800370c:	dbe7      	blt.n	80036de <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800370e:	bf00      	nop
 8003710:	bf00      	nop
 8003712:	3714      	adds	r7, #20
 8003714:	46bd      	mov	sp, r7
 8003716:	bc80      	pop	{r7}
 8003718:	4770      	bx	lr
	...

0800371c <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800371c:	b580      	push	{r7, lr}
 800371e:	b082      	sub	sp, #8
 8003720:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8003722:	2300      	movs	r3, #0
 8003724:	80fb      	strh	r3, [r7, #6]
 8003726:	e009      	b.n	800373c <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 8003728:	88fb      	ldrh	r3, [r7, #6]
 800372a:	4a08      	ldr	r2, [pc, #32]	; (800374c <memp_init+0x30>)
 800372c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003730:	4618      	mov	r0, r3
 8003732:	f7ff ffc3 	bl	80036bc <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8003736:	88fb      	ldrh	r3, [r7, #6]
 8003738:	3301      	adds	r3, #1
 800373a:	80fb      	strh	r3, [r7, #6]
 800373c:	88fb      	ldrh	r3, [r7, #6]
 800373e:	2b08      	cmp	r3, #8
 8003740:	d9f2      	bls.n	8003728 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 8003742:	bf00      	nop
 8003744:	bf00      	nop
 8003746:	3708      	adds	r7, #8
 8003748:	46bd      	mov	sp, r7
 800374a:	bd80      	pop	{r7, pc}
 800374c:	08010cf4 	.word	0x08010cf4

08003750 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char* file, const int line)
#endif
{
 8003750:	b580      	push	{r7, lr}
 8003752:	b084      	sub	sp, #16
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	689b      	ldr	r3, [r3, #8]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	2b00      	cmp	r3, #0
 8003764:	d012      	beq.n	800378c <do_memp_malloc_pool+0x3c>
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element_overflow(memp, desc);
    memp_overflow_check_element_underflow(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	689b      	ldr	r3, [r3, #8]
 800376a:	68fa      	ldr	r2, [r7, #12]
 800376c:	6812      	ldr	r2, [r2, #0]
 800376e:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	f003 0303 	and.w	r3, r3, #3
 8003776:	2b00      	cmp	r3, #0
 8003778:	d006      	beq.n	8003788 <do_memp_malloc_pool+0x38>
 800377a:	4b07      	ldr	r3, [pc, #28]	; (8003798 <do_memp_malloc_pool+0x48>)
 800377c:	f44f 72a4 	mov.w	r2, #328	; 0x148
 8003780:	4906      	ldr	r1, [pc, #24]	; (800379c <do_memp_malloc_pool+0x4c>)
 8003782:	4807      	ldr	r0, [pc, #28]	; (80037a0 <do_memp_malloc_pool+0x50>)
 8003784:	f00a f96c 	bl	800da60 <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t*)memp + MEMP_SIZE);
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	e000      	b.n	800378e <do_memp_malloc_pool+0x3e>
    desc->stats->err++;
#endif
  }

  SYS_ARCH_UNPROTECT(old_level);
  return NULL;
 800378c:	2300      	movs	r3, #0
}
 800378e:	4618      	mov	r0, r3
 8003790:	3710      	adds	r7, #16
 8003792:	46bd      	mov	sp, r7
 8003794:	bd80      	pop	{r7, pc}
 8003796:	bf00      	nop
 8003798:	0800ed10 	.word	0x0800ed10
 800379c:	0800ed40 	.word	0x0800ed40
 80037a0:	0800ed64 	.word	0x0800ed64

080037a4 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char* file, const int line)
#endif
{
 80037a4:	b580      	push	{r7, lr}
 80037a6:	b084      	sub	sp, #16
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	4603      	mov	r3, r0
 80037ac:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 80037ae:	79fb      	ldrb	r3, [r7, #7]
 80037b0:	2b08      	cmp	r3, #8
 80037b2:	d908      	bls.n	80037c6 <memp_malloc+0x22>
 80037b4:	4b0a      	ldr	r3, [pc, #40]	; (80037e0 <memp_malloc+0x3c>)
 80037b6:	f240 1287 	movw	r2, #391	; 0x187
 80037ba:	490a      	ldr	r1, [pc, #40]	; (80037e4 <memp_malloc+0x40>)
 80037bc:	480a      	ldr	r0, [pc, #40]	; (80037e8 <memp_malloc+0x44>)
 80037be:	f00a f94f 	bl	800da60 <iprintf>
 80037c2:	2300      	movs	r3, #0
 80037c4:	e008      	b.n	80037d8 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 80037c6:	79fb      	ldrb	r3, [r7, #7]
 80037c8:	4a08      	ldr	r2, [pc, #32]	; (80037ec <memp_malloc+0x48>)
 80037ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80037ce:	4618      	mov	r0, r3
 80037d0:	f7ff ffbe 	bl	8003750 <do_memp_malloc_pool>
 80037d4:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 80037d6:	68fb      	ldr	r3, [r7, #12]
}
 80037d8:	4618      	mov	r0, r3
 80037da:	3710      	adds	r7, #16
 80037dc:	46bd      	mov	sp, r7
 80037de:	bd80      	pop	{r7, pc}
 80037e0:	0800ed10 	.word	0x0800ed10
 80037e4:	0800eda0 	.word	0x0800eda0
 80037e8:	0800ed64 	.word	0x0800ed64
 80037ec:	08010cf4 	.word	0x08010cf4

080037f0 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc* desc, void *mem)
{
 80037f0:	b580      	push	{r7, lr}
 80037f2:	b084      	sub	sp, #16
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
 80037f8:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 80037fa:	683b      	ldr	r3, [r7, #0]
 80037fc:	f003 0303 	and.w	r3, r3, #3
 8003800:	2b00      	cmp	r3, #0
 8003802:	d006      	beq.n	8003812 <do_memp_free_pool+0x22>
 8003804:	4b0a      	ldr	r3, [pc, #40]	; (8003830 <do_memp_free_pool+0x40>)
 8003806:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 800380a:	490a      	ldr	r1, [pc, #40]	; (8003834 <do_memp_free_pool+0x44>)
 800380c:	480a      	ldr	r0, [pc, #40]	; (8003838 <do_memp_free_pool+0x48>)
 800380e:	f00a f927 	bl	800da60 <iprintf>
                ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t*)mem - MEMP_SIZE);
 8003812:	683b      	ldr	r3, [r7, #0]
 8003814:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	689b      	ldr	r3, [r3, #8]
 800381a:	681a      	ldr	r2, [r3, #0]
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	689b      	ldr	r3, [r3, #8]
 8003824:	68fa      	ldr	r2, [r7, #12]
 8003826:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 8003828:	bf00      	nop
 800382a:	3710      	adds	r7, #16
 800382c:	46bd      	mov	sp, r7
 800382e:	bd80      	pop	{r7, pc}
 8003830:	0800ed10 	.word	0x0800ed10
 8003834:	0800edc0 	.word	0x0800edc0
 8003838:	0800ed64 	.word	0x0800ed64

0800383c <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800383c:	b580      	push	{r7, lr}
 800383e:	b082      	sub	sp, #8
 8003840:	af00      	add	r7, sp, #0
 8003842:	4603      	mov	r3, r0
 8003844:	6039      	str	r1, [r7, #0]
 8003846:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8003848:	79fb      	ldrb	r3, [r7, #7]
 800384a:	2b08      	cmp	r3, #8
 800384c:	d907      	bls.n	800385e <memp_free+0x22>
 800384e:	4b0c      	ldr	r3, [pc, #48]	; (8003880 <memp_free+0x44>)
 8003850:	f240 12db 	movw	r2, #475	; 0x1db
 8003854:	490b      	ldr	r1, [pc, #44]	; (8003884 <memp_free+0x48>)
 8003856:	480c      	ldr	r0, [pc, #48]	; (8003888 <memp_free+0x4c>)
 8003858:	f00a f902 	bl	800da60 <iprintf>
 800385c:	e00c      	b.n	8003878 <memp_free+0x3c>

  if (mem == NULL) {
 800385e:	683b      	ldr	r3, [r7, #0]
 8003860:	2b00      	cmp	r3, #0
 8003862:	d008      	beq.n	8003876 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8003864:	79fb      	ldrb	r3, [r7, #7]
 8003866:	4a09      	ldr	r2, [pc, #36]	; (800388c <memp_free+0x50>)
 8003868:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800386c:	6839      	ldr	r1, [r7, #0]
 800386e:	4618      	mov	r0, r3
 8003870:	f7ff ffbe 	bl	80037f0 <do_memp_free_pool>
 8003874:	e000      	b.n	8003878 <memp_free+0x3c>
    return;
 8003876:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8003878:	3708      	adds	r7, #8
 800387a:	46bd      	mov	sp, r7
 800387c:	bd80      	pop	{r7, pc}
 800387e:	bf00      	nop
 8003880:	0800ed10 	.word	0x0800ed10
 8003884:	0800ede0 	.word	0x0800ede0
 8003888:	0800ed64 	.word	0x0800ed64
 800388c:	08010cf4 	.word	0x08010cf4

08003890 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8003890:	b480      	push	{r7}
 8003892:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8003894:	bf00      	nop
 8003896:	46bd      	mov	sp, r7
 8003898:	bc80      	pop	{r7}
 800389a:	4770      	bx	lr

0800389c <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800389c:	b580      	push	{r7, lr}
 800389e:	b084      	sub	sp, #16
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	60f8      	str	r0, [r7, #12]
 80038a4:	60b9      	str	r1, [r7, #8]
 80038a6:	607a      	str	r2, [r7, #4]
 80038a8:	603b      	str	r3, [r7, #0]
#if LWIP_IPV6
  s8_t i;
#endif

  LWIP_ASSERT("No init function given", init != NULL);
 80038aa:	69fb      	ldr	r3, [r7, #28]
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d105      	bne.n	80038bc <netif_add+0x20>
 80038b0:	4b24      	ldr	r3, [pc, #144]	; (8003944 <netif_add+0xa8>)
 80038b2:	22fb      	movs	r2, #251	; 0xfb
 80038b4:	4924      	ldr	r1, [pc, #144]	; (8003948 <netif_add+0xac>)
 80038b6:	4825      	ldr	r0, [pc, #148]	; (800394c <netif_add+0xb0>)
 80038b8:	f00a f8d2 	bl	800da60 <iprintf>

  /* reset new interface configuration state */
#if LWIP_IPV4
  ip_addr_set_zero_ip4(&netif->ip_addr);
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	2200      	movs	r2, #0
 80038c0:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	2200      	movs	r2, #0
 80038c6:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	2200      	movs	r2, #0
 80038cc:	60da      	str	r2, [r3, #12]
    netif->ip6_addr_state[i] = IP6_ADDR_INVALID;
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->flags = 0;
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	2200      	movs	r2, #0
 80038d2:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
#ifdef netif_get_client_data
  memset(netif->client_data, 0, sizeof(netif->client_data));
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	3324      	adds	r3, #36	; 0x24
 80038da:	2204      	movs	r2, #4
 80038dc:	2100      	movs	r1, #0
 80038de:	4618      	mov	r0, r3
 80038e0:	f00a f8b6 	bl	800da50 <memset>
#if LWIP_IPV6_AUTOCONFIG
  /* IPv6 address autoconfiguration not enabled by default */
  netif->ip6_autoconfig_enabled = 0;
#endif /* LWIP_IPV6_AUTOCONFIG */
#if LWIP_IPV6_SEND_ROUTER_SOLICIT
  netif->rs_count = LWIP_ND6_MAX_MULTICAST_SOLICIT;
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	2203      	movs	r2, #3
 80038e8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
#endif /* LWIP_IPV6_SEND_ROUTER_SOLICIT */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	2200      	movs	r2, #0
 80038f0:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	69ba      	ldr	r2, [r7, #24]
 80038f6:	621a      	str	r2, [r3, #32]
  netif->num = netif_num++;
 80038f8:	4b15      	ldr	r3, [pc, #84]	; (8003950 <netif_add+0xb4>)
 80038fa:	781b      	ldrb	r3, [r3, #0]
 80038fc:	1c5a      	adds	r2, r3, #1
 80038fe:	b2d1      	uxtb	r1, r2
 8003900:	4a13      	ldr	r2, [pc, #76]	; (8003950 <netif_add+0xb4>)
 8003902:	7011      	strb	r1, [r2, #0]
 8003904:	68fa      	ldr	r2, [r7, #12]
 8003906:	f882 3036 	strb.w	r3, [r2, #54]	; 0x36
  netif->input = input;
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	6a3a      	ldr	r2, [r7, #32]
 800390e:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 8003910:	683b      	ldr	r3, [r7, #0]
 8003912:	687a      	ldr	r2, [r7, #4]
 8003914:	68b9      	ldr	r1, [r7, #8]
 8003916:	68f8      	ldr	r0, [r7, #12]
 8003918:	f000 f81e 	bl	8003958 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800391c:	69fb      	ldr	r3, [r7, #28]
 800391e:	68f8      	ldr	r0, [r7, #12]
 8003920:	4798      	blx	r3
 8003922:	4603      	mov	r3, r0
 8003924:	2b00      	cmp	r3, #0
 8003926:	d001      	beq.n	800392c <netif_add+0x90>
    return NULL;
 8003928:	2300      	movs	r3, #0
 800392a:	e007      	b.n	800393c <netif_add+0xa0>
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800392c:	4b09      	ldr	r3, [pc, #36]	; (8003954 <netif_add+0xb8>)
 800392e:	681a      	ldr	r2, [r3, #0]
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 8003934:	4a07      	ldr	r2, [pc, #28]	; (8003954 <netif_add+0xb8>)
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	6013      	str	r3, [r2, #0]
  ip4_addr_debug_print(NETIF_DEBUG, netmask);
  LWIP_DEBUGF(NETIF_DEBUG, (" gw "));
  ip4_addr_debug_print(NETIF_DEBUG, gw);
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));
  return netif;
 800393a:	68fb      	ldr	r3, [r7, #12]
}
 800393c:	4618      	mov	r0, r3
 800393e:	3710      	adds	r7, #16
 8003940:	46bd      	mov	sp, r7
 8003942:	bd80      	pop	{r7, pc}
 8003944:	0800edfc 	.word	0x0800edfc
 8003948:	0800ee30 	.word	0x0800ee30
 800394c:	0800ee48 	.word	0x0800ee48
 8003950:	200000cc 	.word	0x200000cc
 8003954:	20006890 	.word	0x20006890

08003958 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
    const ip4_addr_t *gw)
{
 8003958:	b580      	push	{r7, lr}
 800395a:	b084      	sub	sp, #16
 800395c:	af00      	add	r7, sp, #0
 800395e:	60f8      	str	r0, [r7, #12]
 8003960:	60b9      	str	r1, [r7, #8]
 8003962:	607a      	str	r2, [r7, #4]
 8003964:	603b      	str	r3, [r7, #0]
  if (ip4_addr_isany(ipaddr)) {
 8003966:	68bb      	ldr	r3, [r7, #8]
 8003968:	2b00      	cmp	r3, #0
 800396a:	d003      	beq.n	8003974 <netif_set_addr+0x1c>
 800396c:	68bb      	ldr	r3, [r7, #8]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	2b00      	cmp	r3, #0
 8003972:	d10c      	bne.n	800398e <netif_set_addr+0x36>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    netif_set_ipaddr(netif, ipaddr);
 8003974:	68b9      	ldr	r1, [r7, #8]
 8003976:	68f8      	ldr	r0, [r7, #12]
 8003978:	f000 f81a 	bl	80039b0 <netif_set_ipaddr>
    netif_set_netmask(netif, netmask);
 800397c:	6879      	ldr	r1, [r7, #4]
 800397e:	68f8      	ldr	r0, [r7, #12]
 8003980:	f000 f861 	bl	8003a46 <netif_set_netmask>
    netif_set_gw(netif, gw);
 8003984:	6839      	ldr	r1, [r7, #0]
 8003986:	68f8      	ldr	r0, [r7, #12]
 8003988:	f000 f84a 	bl	8003a20 <netif_set_gw>
 800398c:	e00c      	b.n	80039a8 <netif_set_addr+0x50>
  } else {
    netif_set_netmask(netif, netmask);
 800398e:	6879      	ldr	r1, [r7, #4]
 8003990:	68f8      	ldr	r0, [r7, #12]
 8003992:	f000 f858 	bl	8003a46 <netif_set_netmask>
    netif_set_gw(netif, gw);
 8003996:	6839      	ldr	r1, [r7, #0]
 8003998:	68f8      	ldr	r0, [r7, #12]
 800399a:	f000 f841 	bl	8003a20 <netif_set_gw>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    netif_set_ipaddr(netif, ipaddr);
 800399e:	68b9      	ldr	r1, [r7, #8]
 80039a0:	68f8      	ldr	r0, [r7, #12]
 80039a2:	f000 f805 	bl	80039b0 <netif_set_ipaddr>
  }
}
 80039a6:	bf00      	nop
 80039a8:	bf00      	nop
 80039aa:	3710      	adds	r7, #16
 80039ac:	46bd      	mov	sp, r7
 80039ae:	bd80      	pop	{r7, pc}

080039b0 <netif_set_ipaddr>:
 * @note call netif_set_addr() if you also want to change netmask and
 * default gateway
 */
void
netif_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr)
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b084      	sub	sp, #16
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
 80039b8:	6039      	str	r1, [r7, #0]
  ip_addr_t new_addr;
  *ip_2_ip4(&new_addr) = (ipaddr ? *ipaddr : *IP4_ADDR_ANY4);
 80039ba:	683b      	ldr	r3, [r7, #0]
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d003      	beq.n	80039c8 <netif_set_ipaddr+0x18>
 80039c0:	683b      	ldr	r3, [r7, #0]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	60fb      	str	r3, [r7, #12]
 80039c6:	e002      	b.n	80039ce <netif_set_ipaddr+0x1e>
 80039c8:	4b14      	ldr	r3, [pc, #80]	; (8003a1c <netif_set_ipaddr+0x6c>)
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	60fb      	str	r3, [r7, #12]
  IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

  /* address is actually being changed? */
  if (ip4_addr_cmp(ip_2_ip4(&new_addr), netif_ip4_addr(netif)) == 0) {
 80039ce:	68fa      	ldr	r2, [r7, #12]
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	3304      	adds	r3, #4
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	429a      	cmp	r2, r3
 80039d8:	d01c      	beq.n	8003a14 <netif_set_ipaddr+0x64>
    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
#if LWIP_TCP
    tcp_netif_ip_addr_changed(netif_ip_addr4(netif), &new_addr);
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	3304      	adds	r3, #4
 80039de:	f107 020c 	add.w	r2, r7, #12
 80039e2:	4611      	mov	r1, r2
 80039e4:	4618      	mov	r0, r3
 80039e6:	f002 f873 	bl	8005ad0 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
    udp_netif_ip_addr_changed(netif_ip_addr4(netif), &new_addr);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	3304      	adds	r3, #4
 80039ee:	f107 020c 	add.w	r2, r7, #12
 80039f2:	4611      	mov	r1, r2
 80039f4:	4618      	mov	r0, r3
 80039f6:	f005 fed5 	bl	80097a4 <udp_netif_ip_addr_changed>
#endif /* LWIP_RAW */

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 80039fa:	683b      	ldr	r3, [r7, #0]
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d002      	beq.n	8003a06 <netif_set_ipaddr+0x56>
 8003a00:	683b      	ldr	r3, [r7, #0]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	e000      	b.n	8003a08 <netif_set_ipaddr+0x58>
 8003a06:	2300      	movs	r3, #0
 8003a08:	687a      	ldr	r2, [r7, #4]
 8003a0a:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8003a0c:	2101      	movs	r1, #1
 8003a0e:	6878      	ldr	r0, [r7, #4]
 8003a10:	f000 f85d 	bl	8003ace <netif_issue_reports>
    netif->name[0], netif->name[1],
    ip4_addr1_16(netif_ip4_addr(netif)),
    ip4_addr2_16(netif_ip4_addr(netif)),
    ip4_addr3_16(netif_ip4_addr(netif)),
    ip4_addr4_16(netif_ip4_addr(netif))));
}
 8003a14:	bf00      	nop
 8003a16:	3710      	adds	r7, #16
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	bd80      	pop	{r7, pc}
 8003a1c:	08010d68 	.word	0x08010d68

08003a20 <netif_set_gw>:
 *
 * @note call netif_set_addr() if you also want to change ip address and netmask
 */
void
netif_set_gw(struct netif *netif, const ip4_addr_t *gw)
{
 8003a20:	b480      	push	{r7}
 8003a22:	b083      	sub	sp, #12
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	6078      	str	r0, [r7, #4]
 8003a28:	6039      	str	r1, [r7, #0]
  ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8003a2a:	683b      	ldr	r3, [r7, #0]
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d002      	beq.n	8003a36 <netif_set_gw+0x16>
 8003a30:	683b      	ldr	r3, [r7, #0]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	e000      	b.n	8003a38 <netif_set_gw+0x18>
 8003a36:	2300      	movs	r3, #0
 8003a38:	687a      	ldr	r2, [r7, #4]
 8003a3a:	60d3      	str	r3, [r2, #12]
    netif->name[0], netif->name[1],
    ip4_addr1_16(netif_ip4_gw(netif)),
    ip4_addr2_16(netif_ip4_gw(netif)),
    ip4_addr3_16(netif_ip4_gw(netif)),
    ip4_addr4_16(netif_ip4_gw(netif))));
}
 8003a3c:	bf00      	nop
 8003a3e:	370c      	adds	r7, #12
 8003a40:	46bd      	mov	sp, r7
 8003a42:	bc80      	pop	{r7}
 8003a44:	4770      	bx	lr

08003a46 <netif_set_netmask>:
 * @note call netif_set_addr() if you also want to change ip address and
 * default gateway
 */
void
netif_set_netmask(struct netif *netif, const ip4_addr_t *netmask)
{
 8003a46:	b480      	push	{r7}
 8003a48:	b083      	sub	sp, #12
 8003a4a:	af00      	add	r7, sp, #0
 8003a4c:	6078      	str	r0, [r7, #4]
 8003a4e:	6039      	str	r1, [r7, #0]
  mib2_remove_route_ip4(0, netif);
  /* set new netmask to netif */
  ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8003a50:	683b      	ldr	r3, [r7, #0]
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d002      	beq.n	8003a5c <netif_set_netmask+0x16>
 8003a56:	683b      	ldr	r3, [r7, #0]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	e000      	b.n	8003a5e <netif_set_netmask+0x18>
 8003a5c:	2300      	movs	r3, #0
 8003a5e:	687a      	ldr	r2, [r7, #4]
 8003a60:	6093      	str	r3, [r2, #8]
    netif->name[0], netif->name[1],
    ip4_addr1_16(netif_ip4_netmask(netif)),
    ip4_addr2_16(netif_ip4_netmask(netif)),
    ip4_addr3_16(netif_ip4_netmask(netif)),
    ip4_addr4_16(netif_ip4_netmask(netif))));
}
 8003a62:	bf00      	nop
 8003a64:	370c      	adds	r7, #12
 8003a66:	46bd      	mov	sp, r7
 8003a68:	bc80      	pop	{r7}
 8003a6a:	4770      	bx	lr

08003a6c <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8003a6c:	b480      	push	{r7}
 8003a6e:	b083      	sub	sp, #12
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8003a74:	4a03      	ldr	r2, [pc, #12]	; (8003a84 <netif_set_default+0x18>)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
           netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 8003a7a:	bf00      	nop
 8003a7c:	370c      	adds	r7, #12
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	bc80      	pop	{r7}
 8003a82:	4770      	bx	lr
 8003a84:	20006894 	.word	0x20006894

08003a88 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	b082      	sub	sp, #8
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]
  if (!(netif->flags & NETIF_FLAG_UP)) {
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8003a96:	f003 0301 	and.w	r3, r3, #1
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d113      	bne.n	8003ac6 <netif_set_up+0x3e>
    netif->flags |= NETIF_FLAG_UP;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8003aa4:	f043 0301 	orr.w	r3, r3, #1
 8003aa8:	b2da      	uxtb	r2, r3
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33

    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

    NETIF_STATUS_CALLBACK(netif);

    if (netif->flags & NETIF_FLAG_LINK_UP) {
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8003ab6:	f003 0304 	and.w	r3, r3, #4
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d003      	beq.n	8003ac6 <netif_set_up+0x3e>
      netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4|NETIF_REPORT_TYPE_IPV6);
 8003abe:	2103      	movs	r1, #3
 8003ac0:	6878      	ldr	r0, [r7, #4]
 8003ac2:	f000 f804 	bl	8003ace <netif_issue_reports>
    }
  }
}
 8003ac6:	bf00      	nop
 8003ac8:	3708      	adds	r7, #8
 8003aca:	46bd      	mov	sp, r7
 8003acc:	bd80      	pop	{r7, pc}

08003ace <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif* netif, u8_t report_type)
{
 8003ace:	b580      	push	{r7, lr}
 8003ad0:	b082      	sub	sp, #8
 8003ad2:	af00      	add	r7, sp, #0
 8003ad4:	6078      	str	r0, [r7, #4]
 8003ad6:	460b      	mov	r3, r1
 8003ad8:	70fb      	strb	r3, [r7, #3]
#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8003ada:	78fb      	ldrb	r3, [r7, #3]
 8003adc:	f003 0301 	and.w	r3, r3, #1
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d011      	beq.n	8003b08 <netif_issue_reports+0x3a>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	3304      	adds	r3, #4
 8003ae8:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d00c      	beq.n	8003b08 <netif_issue_reports+0x3a>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8003af4:	f003 0308 	and.w	r3, r3, #8
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d005      	beq.n	8003b08 <netif_issue_reports+0x3a>
      etharp_gratuitous(netif);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	3304      	adds	r3, #4
 8003b00:	4619      	mov	r1, r3
 8003b02:	6878      	ldr	r0, [r7, #4]
 8003b04:	f008 fc3c 	bl	800c380 <etharp_request>
    /* Send Router Solicitation messages. */
    netif->rs_count = LWIP_ND6_MAX_MULTICAST_SOLICIT;
#endif /* LWIP_IPV6_SEND_ROUTER_SOLICIT */
  }
#endif /* LWIP_IPV6 */
}
 8003b08:	bf00      	nop
 8003b0a:	3708      	adds	r7, #8
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	bd80      	pop	{r7, pc}

08003b10 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 8003b10:	b580      	push	{r7, lr}
 8003b12:	b082      	sub	sp, #8
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	6078      	str	r0, [r7, #4]
  if (netif->flags & NETIF_FLAG_UP) {
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8003b1e:	f003 0301 	and.w	r3, r3, #1
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d012      	beq.n	8003b4c <netif_set_down+0x3c>
    netif->flags &= ~NETIF_FLAG_UP;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8003b2c:	f023 0301 	bic.w	r3, r3, #1
 8003b30:	b2da      	uxtb	r2, r3
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8003b3e:	f003 0308 	and.w	r3, r3, #8
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d002      	beq.n	8003b4c <netif_set_down+0x3c>
      etharp_cleanup_netif(netif);
 8003b46:	6878      	ldr	r0, [r7, #4]
 8003b48:	f007 ffdc 	bl	800bb04 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 8003b4c:	bf00      	nop
 8003b4e:	3708      	adds	r7, #8
 8003b50:	46bd      	mov	sp, r7
 8003b52:	bd80      	pop	{r7, pc}

08003b54 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 8003b54:	b480      	push	{r7}
 8003b56:	b083      	sub	sp, #12
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	6078      	str	r0, [r7, #4]
 8003b5c:	6039      	str	r1, [r7, #0]
  if (netif) {
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d002      	beq.n	8003b6a <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	683a      	ldr	r2, [r7, #0]
 8003b68:	61da      	str	r2, [r3, #28]
  }
}
 8003b6a:	bf00      	nop
 8003b6c:	370c      	adds	r7, #12
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	bc80      	pop	{r7}
 8003b72:	4770      	bx	lr

08003b74 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b082      	sub	sp, #8
 8003b78:	af00      	add	r7, sp, #0
  struct tcp_pcb* pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 8003b7a:	4b0e      	ldr	r3, [pc, #56]	; (8003bb4 <pbuf_free_ooseq+0x40>)
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	701a      	strb	r2, [r3, #0]

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8003b80:	4b0d      	ldr	r3, [pc, #52]	; (8003bb8 <pbuf_free_ooseq+0x44>)
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	607b      	str	r3, [r7, #4]
 8003b86:	e00f      	b.n	8003ba8 <pbuf_free_ooseq+0x34>
    if (NULL != pcb->ooseq) {
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d008      	beq.n	8003ba2 <pbuf_free_ooseq+0x2e>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_segs_free(pcb->ooseq);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b94:	4618      	mov	r0, r3
 8003b96:	f001 fcd8 	bl	800554a <tcp_segs_free>
      pcb->ooseq = NULL;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	671a      	str	r2, [r3, #112]	; 0x70
      return;
 8003ba0:	e005      	b.n	8003bae <pbuf_free_ooseq+0x3a>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	68db      	ldr	r3, [r3, #12]
 8003ba6:	607b      	str	r3, [r7, #4]
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d1ec      	bne.n	8003b88 <pbuf_free_ooseq+0x14>
    }
  }
}
 8003bae:	3708      	adds	r7, #8
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	bd80      	pop	{r7, pc}
 8003bb4:	20006898 	.word	0x20006898
 8003bb8:	200068a0 	.word	0x200068a0

08003bbc <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8003bbc:	b480      	push	{r7}
 8003bbe:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 8003bc0:	4b03      	ldr	r3, [pc, #12]	; (8003bd0 <pbuf_pool_is_empty+0x14>)
 8003bc2:	2201      	movs	r2, #1
 8003bc4:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 8003bc6:	bf00      	nop
 8003bc8:	46bd      	mov	sp, r7
 8003bca:	bc80      	pop	{r7}
 8003bcc:	4770      	bx	lr
 8003bce:	bf00      	nop
 8003bd0:	20006898 	.word	0x20006898

08003bd4 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	b088      	sub	sp, #32
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	4603      	mov	r3, r0
 8003bdc:	71fb      	strb	r3, [r7, #7]
 8003bde:	460b      	mov	r3, r1
 8003be0:	80bb      	strh	r3, [r7, #4]
 8003be2:	4613      	mov	r3, r2
 8003be4:	71bb      	strb	r3, [r7, #6]
  u16_t offset;
  s32_t rem_len; /* remaining length */
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  /* determine header offset */
  switch (layer) {
 8003be6:	79fb      	ldrb	r3, [r7, #7]
 8003be8:	2b04      	cmp	r3, #4
 8003bea:	d81c      	bhi.n	8003c26 <pbuf_alloc+0x52>
 8003bec:	a201      	add	r2, pc, #4	; (adr r2, 8003bf4 <pbuf_alloc+0x20>)
 8003bee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bf2:	bf00      	nop
 8003bf4:	08003c09 	.word	0x08003c09
 8003bf8:	08003c0f 	.word	0x08003c0f
 8003bfc:	08003c15 	.word	0x08003c15
 8003c00:	08003c1b 	.word	0x08003c1b
 8003c04:	08003c21 	.word	0x08003c21
  case PBUF_TRANSPORT:
    /* add room for transport (often TCP) layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN + PBUF_TRANSPORT_HLEN;
 8003c08:	2336      	movs	r3, #54	; 0x36
 8003c0a:	82fb      	strh	r3, [r7, #22]
    break;
 8003c0c:	e014      	b.n	8003c38 <pbuf_alloc+0x64>
  case PBUF_IP:
    /* add room for IP layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN;
 8003c0e:	2322      	movs	r3, #34	; 0x22
 8003c10:	82fb      	strh	r3, [r7, #22]
    break;
 8003c12:	e011      	b.n	8003c38 <pbuf_alloc+0x64>
  case PBUF_LINK:
    /* add room for link layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN;
 8003c14:	230e      	movs	r3, #14
 8003c16:	82fb      	strh	r3, [r7, #22]
    break;
 8003c18:	e00e      	b.n	8003c38 <pbuf_alloc+0x64>
  case PBUF_RAW_TX:
    /* add room for encapsulating link layer headers (e.g. 802.11) */
    offset = PBUF_LINK_ENCAPSULATION_HLEN;
 8003c1a:	2300      	movs	r3, #0
 8003c1c:	82fb      	strh	r3, [r7, #22]
    break;
 8003c1e:	e00b      	b.n	8003c38 <pbuf_alloc+0x64>
  case PBUF_RAW:
    /* no offset (e.g. RX buffers or chain successors) */
    offset = 0;
 8003c20:	2300      	movs	r3, #0
 8003c22:	82fb      	strh	r3, [r7, #22]
    break;
 8003c24:	e008      	b.n	8003c38 <pbuf_alloc+0x64>
  default:
    LWIP_ASSERT("pbuf_alloc: bad pbuf layer", 0);
 8003c26:	4ba5      	ldr	r3, [pc, #660]	; (8003ebc <pbuf_alloc+0x2e8>)
 8003c28:	f44f 728b 	mov.w	r2, #278	; 0x116
 8003c2c:	49a4      	ldr	r1, [pc, #656]	; (8003ec0 <pbuf_alloc+0x2ec>)
 8003c2e:	48a5      	ldr	r0, [pc, #660]	; (8003ec4 <pbuf_alloc+0x2f0>)
 8003c30:	f009 ff16 	bl	800da60 <iprintf>
    return NULL;
 8003c34:	2300      	movs	r3, #0
 8003c36:	e15d      	b.n	8003ef4 <pbuf_alloc+0x320>
  }

  switch (type) {
 8003c38:	79bb      	ldrb	r3, [r7, #6]
 8003c3a:	2b03      	cmp	r3, #3
 8003c3c:	d00d      	beq.n	8003c5a <pbuf_alloc+0x86>
 8003c3e:	2b03      	cmp	r3, #3
 8003c40:	f300 8133 	bgt.w	8003eaa <pbuf_alloc+0x2d6>
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	f000 80d0 	beq.w	8003dea <pbuf_alloc+0x216>
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	f2c0 812d 	blt.w	8003eaa <pbuf_alloc+0x2d6>
 8003c50:	3b01      	subs	r3, #1
 8003c52:	2b01      	cmp	r3, #1
 8003c54:	f200 8129 	bhi.w	8003eaa <pbuf_alloc+0x2d6>
 8003c58:	e10d      	b.n	8003e76 <pbuf_alloc+0x2a2>
  case PBUF_POOL:
    /* allocate head of pbuf chain into p */
    p = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8003c5a:	2008      	movs	r0, #8
 8003c5c:	f7ff fda2 	bl	80037a4 <memp_malloc>
 8003c60:	61f8      	str	r0, [r7, #28]
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc: allocated pbuf %p\n", (void *)p));
    if (p == NULL) {
 8003c62:	69fb      	ldr	r3, [r7, #28]
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d103      	bne.n	8003c70 <pbuf_alloc+0x9c>
      PBUF_POOL_IS_EMPTY();
 8003c68:	f7ff ffa8 	bl	8003bbc <pbuf_pool_is_empty>
      return NULL;
 8003c6c:	2300      	movs	r3, #0
 8003c6e:	e141      	b.n	8003ef4 <pbuf_alloc+0x320>
    }
    p->type = type;
 8003c70:	69fb      	ldr	r3, [r7, #28]
 8003c72:	79ba      	ldrb	r2, [r7, #6]
 8003c74:	731a      	strb	r2, [r3, #12]
    p->next = NULL;
 8003c76:	69fb      	ldr	r3, [r7, #28]
 8003c78:	2200      	movs	r2, #0
 8003c7a:	601a      	str	r2, [r3, #0]

    /* make the payload pointer point 'offset' bytes into pbuf data memory */
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + (SIZEOF_STRUCT_PBUF + offset)));
 8003c7c:	8afb      	ldrh	r3, [r7, #22]
 8003c7e:	3310      	adds	r3, #16
 8003c80:	69fa      	ldr	r2, [r7, #28]
 8003c82:	4413      	add	r3, r2
 8003c84:	3303      	adds	r3, #3
 8003c86:	f023 0303 	bic.w	r3, r3, #3
 8003c8a:	461a      	mov	r2, r3
 8003c8c:	69fb      	ldr	r3, [r7, #28]
 8003c8e:	605a      	str	r2, [r3, #4]
    LWIP_ASSERT("pbuf_alloc: pbuf p->payload properly aligned",
 8003c90:	69fb      	ldr	r3, [r7, #28]
 8003c92:	685b      	ldr	r3, [r3, #4]
 8003c94:	f003 0303 	and.w	r3, r3, #3
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d006      	beq.n	8003caa <pbuf_alloc+0xd6>
 8003c9c:	4b87      	ldr	r3, [pc, #540]	; (8003ebc <pbuf_alloc+0x2e8>)
 8003c9e:	f44f 7294 	mov.w	r2, #296	; 0x128
 8003ca2:	4989      	ldr	r1, [pc, #548]	; (8003ec8 <pbuf_alloc+0x2f4>)
 8003ca4:	4887      	ldr	r0, [pc, #540]	; (8003ec4 <pbuf_alloc+0x2f0>)
 8003ca6:	f009 fedb 	bl	800da60 <iprintf>
            ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
    /* the total length of the pbuf chain is the requested size */
    p->tot_len = length;
 8003caa:	69fb      	ldr	r3, [r7, #28]
 8003cac:	88ba      	ldrh	r2, [r7, #4]
 8003cae:	811a      	strh	r2, [r3, #8]
    /* set the length of the first pbuf in the chain */
    p->len = LWIP_MIN(length, PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset));
 8003cb0:	8afb      	ldrh	r3, [r7, #22]
 8003cb2:	3303      	adds	r3, #3
 8003cb4:	f023 0303 	bic.w	r3, r3, #3
 8003cb8:	f5c3 7214 	rsb	r2, r3, #592	; 0x250
 8003cbc:	88bb      	ldrh	r3, [r7, #4]
 8003cbe:	4293      	cmp	r3, r2
 8003cc0:	bf28      	it	cs
 8003cc2:	4613      	movcs	r3, r2
 8003cc4:	b29a      	uxth	r2, r3
 8003cc6:	69fb      	ldr	r3, [r7, #28]
 8003cc8:	815a      	strh	r2, [r3, #10]
    LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
 8003cca:	69fb      	ldr	r3, [r7, #28]
 8003ccc:	685b      	ldr	r3, [r3, #4]
 8003cce:	69fa      	ldr	r2, [r7, #28]
 8003cd0:	8952      	ldrh	r2, [r2, #10]
 8003cd2:	441a      	add	r2, r3
 8003cd4:	69fb      	ldr	r3, [r7, #28]
 8003cd6:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8003cda:	429a      	cmp	r2, r3
 8003cdc:	d906      	bls.n	8003cec <pbuf_alloc+0x118>
 8003cde:	4b77      	ldr	r3, [pc, #476]	; (8003ebc <pbuf_alloc+0x2e8>)
 8003ce0:	f44f 7297 	mov.w	r2, #302	; 0x12e
 8003ce4:	4979      	ldr	r1, [pc, #484]	; (8003ecc <pbuf_alloc+0x2f8>)
 8003ce6:	4877      	ldr	r0, [pc, #476]	; (8003ec4 <pbuf_alloc+0x2f0>)
 8003ce8:	f009 feba 	bl	800da60 <iprintf>
                ((u8_t*)p->payload + p->len <=
                 (u8_t*)p + SIZEOF_STRUCT_PBUF + PBUF_POOL_BUFSIZE_ALIGNED));
    LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 8003cec:	8afb      	ldrh	r3, [r7, #22]
 8003cee:	3303      	adds	r3, #3
 8003cf0:	f023 0303 	bic.w	r3, r3, #3
 8003cf4:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 8003cf8:	d106      	bne.n	8003d08 <pbuf_alloc+0x134>
 8003cfa:	4b70      	ldr	r3, [pc, #448]	; (8003ebc <pbuf_alloc+0x2e8>)
 8003cfc:	f240 1231 	movw	r2, #305	; 0x131
 8003d00:	4973      	ldr	r1, [pc, #460]	; (8003ed0 <pbuf_alloc+0x2fc>)
 8003d02:	4870      	ldr	r0, [pc, #448]	; (8003ec4 <pbuf_alloc+0x2f0>)
 8003d04:	f009 feac 	bl	800da60 <iprintf>
      (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
    /* set reference count (needed here in case we fail) */
    p->ref = 1;
 8003d08:	69fb      	ldr	r3, [r7, #28]
 8003d0a:	2201      	movs	r2, #1
 8003d0c:	81da      	strh	r2, [r3, #14]

    /* now allocate the tail of the pbuf chain */

    /* remember first pbuf for linkage in next iteration */
    r = p;
 8003d0e:	69fb      	ldr	r3, [r7, #28]
 8003d10:	61bb      	str	r3, [r7, #24]
    /* remaining length to be allocated */
    rem_len = length - p->len;
 8003d12:	88bb      	ldrh	r3, [r7, #4]
 8003d14:	69fa      	ldr	r2, [r7, #28]
 8003d16:	8952      	ldrh	r2, [r2, #10]
 8003d18:	1a9b      	subs	r3, r3, r2
 8003d1a:	613b      	str	r3, [r7, #16]
    /* any remaining pbufs to be allocated? */
    while (rem_len > 0) {
 8003d1c:	e061      	b.n	8003de2 <pbuf_alloc+0x20e>
      q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8003d1e:	2008      	movs	r0, #8
 8003d20:	f7ff fd40 	bl	80037a4 <memp_malloc>
 8003d24:	60f8      	str	r0, [r7, #12]
      if (q == NULL) {
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d106      	bne.n	8003d3a <pbuf_alloc+0x166>
        PBUF_POOL_IS_EMPTY();
 8003d2c:	f7ff ff46 	bl	8003bbc <pbuf_pool_is_empty>
        /* free chain so far allocated */
        pbuf_free(p);
 8003d30:	69f8      	ldr	r0, [r7, #28]
 8003d32:	f000 fac1 	bl	80042b8 <pbuf_free>
        /* bail out unsuccessfully */
        return NULL;
 8003d36:	2300      	movs	r3, #0
 8003d38:	e0dc      	b.n	8003ef4 <pbuf_alloc+0x320>
      }
      q->type = type;
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	79ba      	ldrb	r2, [r7, #6]
 8003d3e:	731a      	strb	r2, [r3, #12]
      q->flags = 0;
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	2200      	movs	r2, #0
 8003d44:	735a      	strb	r2, [r3, #13]
      q->next = NULL;
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	2200      	movs	r2, #0
 8003d4a:	601a      	str	r2, [r3, #0]
      /* make previous pbuf point to this pbuf */
      r->next = q;
 8003d4c:	69bb      	ldr	r3, [r7, #24]
 8003d4e:	68fa      	ldr	r2, [r7, #12]
 8003d50:	601a      	str	r2, [r3, #0]
      /* set total length of this pbuf and next in chain */
      LWIP_ASSERT("rem_len < max_u16_t", rem_len < 0xffff);
 8003d52:	693b      	ldr	r3, [r7, #16]
 8003d54:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8003d58:	4293      	cmp	r3, r2
 8003d5a:	dd06      	ble.n	8003d6a <pbuf_alloc+0x196>
 8003d5c:	4b57      	ldr	r3, [pc, #348]	; (8003ebc <pbuf_alloc+0x2e8>)
 8003d5e:	f44f 72a6 	mov.w	r2, #332	; 0x14c
 8003d62:	495c      	ldr	r1, [pc, #368]	; (8003ed4 <pbuf_alloc+0x300>)
 8003d64:	4857      	ldr	r0, [pc, #348]	; (8003ec4 <pbuf_alloc+0x2f0>)
 8003d66:	f009 fe7b 	bl	800da60 <iprintf>
      q->tot_len = (u16_t)rem_len;
 8003d6a:	693b      	ldr	r3, [r7, #16]
 8003d6c:	b29a      	uxth	r2, r3
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	811a      	strh	r2, [r3, #8]
      /* this pbuf length is pool size, unless smaller sized tail */
      q->len = LWIP_MIN((u16_t)rem_len, PBUF_POOL_BUFSIZE_ALIGNED);
 8003d72:	693b      	ldr	r3, [r7, #16]
 8003d74:	b29b      	uxth	r3, r3
 8003d76:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 8003d7a:	bf28      	it	cs
 8003d7c:	f44f 7314 	movcs.w	r3, #592	; 0x250
 8003d80:	b29a      	uxth	r2, r3
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	815a      	strh	r2, [r3, #10]
      q->payload = (void *)((u8_t *)q + SIZEOF_STRUCT_PBUF);
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	f103 0210 	add.w	r2, r3, #16
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	605a      	str	r2, [r3, #4]
      LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	685b      	ldr	r3, [r3, #4]
 8003d94:	f003 0303 	and.w	r3, r3, #3
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d006      	beq.n	8003daa <pbuf_alloc+0x1d6>
 8003d9c:	4b47      	ldr	r3, [pc, #284]	; (8003ebc <pbuf_alloc+0x2e8>)
 8003d9e:	f240 1251 	movw	r2, #337	; 0x151
 8003da2:	494d      	ldr	r1, [pc, #308]	; (8003ed8 <pbuf_alloc+0x304>)
 8003da4:	4847      	ldr	r0, [pc, #284]	; (8003ec4 <pbuf_alloc+0x2f0>)
 8003da6:	f009 fe5b 	bl	800da60 <iprintf>
              ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
      LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
 8003daa:	69fb      	ldr	r3, [r7, #28]
 8003dac:	685b      	ldr	r3, [r3, #4]
 8003dae:	69fa      	ldr	r2, [r7, #28]
 8003db0:	8952      	ldrh	r2, [r2, #10]
 8003db2:	441a      	add	r2, r3
 8003db4:	69fb      	ldr	r3, [r7, #28]
 8003db6:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8003dba:	429a      	cmp	r2, r3
 8003dbc:	d906      	bls.n	8003dcc <pbuf_alloc+0x1f8>
 8003dbe:	4b3f      	ldr	r3, [pc, #252]	; (8003ebc <pbuf_alloc+0x2e8>)
 8003dc0:	f240 1253 	movw	r2, #339	; 0x153
 8003dc4:	4941      	ldr	r1, [pc, #260]	; (8003ecc <pbuf_alloc+0x2f8>)
 8003dc6:	483f      	ldr	r0, [pc, #252]	; (8003ec4 <pbuf_alloc+0x2f0>)
 8003dc8:	f009 fe4a 	bl	800da60 <iprintf>
                  ((u8_t*)p->payload + p->len <=
                   (u8_t*)p + SIZEOF_STRUCT_PBUF + PBUF_POOL_BUFSIZE_ALIGNED));
      q->ref = 1;
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	2201      	movs	r2, #1
 8003dd0:	81da      	strh	r2, [r3, #14]
      /* calculate remaining length to be allocated */
      rem_len -= q->len;
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	895b      	ldrh	r3, [r3, #10]
 8003dd6:	461a      	mov	r2, r3
 8003dd8:	693b      	ldr	r3, [r7, #16]
 8003dda:	1a9b      	subs	r3, r3, r2
 8003ddc:	613b      	str	r3, [r7, #16]
      /* remember this pbuf for linkage in next iteration */
      r = q;
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	61bb      	str	r3, [r7, #24]
    while (rem_len > 0) {
 8003de2:	693b      	ldr	r3, [r7, #16]
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	dc9a      	bgt.n	8003d1e <pbuf_alloc+0x14a>
    }
    /* end of chain */
    /*r->next = NULL;*/

    break;
 8003de8:	e07d      	b.n	8003ee6 <pbuf_alloc+0x312>
  case PBUF_RAM:
    {
      mem_size_t alloc_len = LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF + offset) + LWIP_MEM_ALIGN_SIZE(length);
 8003dea:	8afb      	ldrh	r3, [r7, #22]
 8003dec:	3313      	adds	r3, #19
 8003dee:	b29b      	uxth	r3, r3
 8003df0:	f023 0303 	bic.w	r3, r3, #3
 8003df4:	b29a      	uxth	r2, r3
 8003df6:	88bb      	ldrh	r3, [r7, #4]
 8003df8:	3303      	adds	r3, #3
 8003dfa:	b29b      	uxth	r3, r3
 8003dfc:	f023 0303 	bic.w	r3, r3, #3
 8003e00:	b29b      	uxth	r3, r3
 8003e02:	4413      	add	r3, r2
 8003e04:	817b      	strh	r3, [r7, #10]
      
      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if (alloc_len < LWIP_MEM_ALIGN_SIZE(length)) {
 8003e06:	897a      	ldrh	r2, [r7, #10]
 8003e08:	88bb      	ldrh	r3, [r7, #4]
 8003e0a:	3303      	adds	r3, #3
 8003e0c:	f023 0303 	bic.w	r3, r3, #3
 8003e10:	429a      	cmp	r2, r3
 8003e12:	d201      	bcs.n	8003e18 <pbuf_alloc+0x244>
        return NULL;
 8003e14:	2300      	movs	r3, #0
 8003e16:	e06d      	b.n	8003ef4 <pbuf_alloc+0x320>
      }
    
      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf*)mem_malloc(alloc_len);
 8003e18:	897b      	ldrh	r3, [r7, #10]
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	f7ff fb66 	bl	80034ec <mem_malloc>
 8003e20:	61f8      	str	r0, [r7, #28]
    }

    if (p == NULL) {
 8003e22:	69fb      	ldr	r3, [r7, #28]
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d101      	bne.n	8003e2c <pbuf_alloc+0x258>
      return NULL;
 8003e28:	2300      	movs	r3, #0
 8003e2a:	e063      	b.n	8003ef4 <pbuf_alloc+0x320>
    }
    /* Set up internal structure of the pbuf. */
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset));
 8003e2c:	8afb      	ldrh	r3, [r7, #22]
 8003e2e:	3310      	adds	r3, #16
 8003e30:	69fa      	ldr	r2, [r7, #28]
 8003e32:	4413      	add	r3, r2
 8003e34:	3303      	adds	r3, #3
 8003e36:	f023 0303 	bic.w	r3, r3, #3
 8003e3a:	461a      	mov	r2, r3
 8003e3c:	69fb      	ldr	r3, [r7, #28]
 8003e3e:	605a      	str	r2, [r3, #4]
    p->len = p->tot_len = length;
 8003e40:	69fb      	ldr	r3, [r7, #28]
 8003e42:	88ba      	ldrh	r2, [r7, #4]
 8003e44:	811a      	strh	r2, [r3, #8]
 8003e46:	69fb      	ldr	r3, [r7, #28]
 8003e48:	891a      	ldrh	r2, [r3, #8]
 8003e4a:	69fb      	ldr	r3, [r7, #28]
 8003e4c:	815a      	strh	r2, [r3, #10]
    p->next = NULL;
 8003e4e:	69fb      	ldr	r3, [r7, #28]
 8003e50:	2200      	movs	r2, #0
 8003e52:	601a      	str	r2, [r3, #0]
    p->type = type;
 8003e54:	69fb      	ldr	r3, [r7, #28]
 8003e56:	79ba      	ldrb	r2, [r7, #6]
 8003e58:	731a      	strb	r2, [r3, #12]

    LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 8003e5a:	69fb      	ldr	r3, [r7, #28]
 8003e5c:	685b      	ldr	r3, [r3, #4]
 8003e5e:	f003 0303 	and.w	r3, r3, #3
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d03e      	beq.n	8003ee4 <pbuf_alloc+0x310>
 8003e66:	4b15      	ldr	r3, [pc, #84]	; (8003ebc <pbuf_alloc+0x2e8>)
 8003e68:	f44f 72bb 	mov.w	r2, #374	; 0x176
 8003e6c:	491b      	ldr	r1, [pc, #108]	; (8003edc <pbuf_alloc+0x308>)
 8003e6e:	4815      	ldr	r0, [pc, #84]	; (8003ec4 <pbuf_alloc+0x2f0>)
 8003e70:	f009 fdf6 	bl	800da60 <iprintf>
           ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
    break;
 8003e74:	e036      	b.n	8003ee4 <pbuf_alloc+0x310>
  /* pbuf references existing (non-volatile static constant) ROM payload? */
  case PBUF_ROM:
  /* pbuf references existing (externally allocated) RAM payload? */
  case PBUF_REF:
    /* only allocate memory for the pbuf structure */
    p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8003e76:	2007      	movs	r0, #7
 8003e78:	f7ff fc94 	bl	80037a4 <memp_malloc>
 8003e7c:	61f8      	str	r0, [r7, #28]
    if (p == NULL) {
 8003e7e:	69fb      	ldr	r3, [r7, #28]
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d101      	bne.n	8003e88 <pbuf_alloc+0x2b4>
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("pbuf_alloc: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                  (type == PBUF_ROM) ? "ROM" : "REF"));
      return NULL;
 8003e84:	2300      	movs	r3, #0
 8003e86:	e035      	b.n	8003ef4 <pbuf_alloc+0x320>
    }
    /* caller must set this field properly, afterwards */
    p->payload = NULL;
 8003e88:	69fb      	ldr	r3, [r7, #28]
 8003e8a:	2200      	movs	r2, #0
 8003e8c:	605a      	str	r2, [r3, #4]
    p->len = p->tot_len = length;
 8003e8e:	69fb      	ldr	r3, [r7, #28]
 8003e90:	88ba      	ldrh	r2, [r7, #4]
 8003e92:	811a      	strh	r2, [r3, #8]
 8003e94:	69fb      	ldr	r3, [r7, #28]
 8003e96:	891a      	ldrh	r2, [r3, #8]
 8003e98:	69fb      	ldr	r3, [r7, #28]
 8003e9a:	815a      	strh	r2, [r3, #10]
    p->next = NULL;
 8003e9c:	69fb      	ldr	r3, [r7, #28]
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	601a      	str	r2, [r3, #0]
    p->type = type;
 8003ea2:	69fb      	ldr	r3, [r7, #28]
 8003ea4:	79ba      	ldrb	r2, [r7, #6]
 8003ea6:	731a      	strb	r2, [r3, #12]
    break;
 8003ea8:	e01d      	b.n	8003ee6 <pbuf_alloc+0x312>
  default:
    LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8003eaa:	4b04      	ldr	r3, [pc, #16]	; (8003ebc <pbuf_alloc+0x2e8>)
 8003eac:	f44f 72c6 	mov.w	r2, #396	; 0x18c
 8003eb0:	490b      	ldr	r1, [pc, #44]	; (8003ee0 <pbuf_alloc+0x30c>)
 8003eb2:	4804      	ldr	r0, [pc, #16]	; (8003ec4 <pbuf_alloc+0x2f0>)
 8003eb4:	f009 fdd4 	bl	800da60 <iprintf>
    return NULL;
 8003eb8:	2300      	movs	r3, #0
 8003eba:	e01b      	b.n	8003ef4 <pbuf_alloc+0x320>
 8003ebc:	0800ee70 	.word	0x0800ee70
 8003ec0:	0800eea0 	.word	0x0800eea0
 8003ec4:	0800eebc 	.word	0x0800eebc
 8003ec8:	0800eee4 	.word	0x0800eee4
 8003ecc:	0800ef14 	.word	0x0800ef14
 8003ed0:	0800ef48 	.word	0x0800ef48
 8003ed4:	0800ef7c 	.word	0x0800ef7c
 8003ed8:	0800ef90 	.word	0x0800ef90
 8003edc:	0800efc0 	.word	0x0800efc0
 8003ee0:	0800efec 	.word	0x0800efec
    break;
 8003ee4:	bf00      	nop
  }
  /* set reference count */
  p->ref = 1;
 8003ee6:	69fb      	ldr	r3, [r7, #28]
 8003ee8:	2201      	movs	r2, #1
 8003eea:	81da      	strh	r2, [r3, #14]
  /* set flags */
  p->flags = 0;
 8003eec:	69fb      	ldr	r3, [r7, #28]
 8003eee:	2200      	movs	r2, #0
 8003ef0:	735a      	strb	r2, [r3, #13]
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 8003ef2:	69fb      	ldr	r3, [r7, #28]
}
 8003ef4:	4618      	mov	r0, r3
 8003ef6:	3720      	adds	r7, #32
 8003ef8:	46bd      	mov	sp, r7
 8003efa:	bd80      	pop	{r7, pc}

08003efc <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf*
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8003efc:	b580      	push	{r7, lr}
 8003efe:	b084      	sub	sp, #16
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	603b      	str	r3, [r7, #0]
 8003f04:	4603      	mov	r3, r0
 8003f06:	71fb      	strb	r3, [r7, #7]
 8003f08:	460b      	mov	r3, r1
 8003f0a:	80bb      	strh	r3, [r7, #4]
 8003f0c:	4613      	mov	r3, r2
 8003f0e:	71bb      	strb	r3, [r7, #6]
  u16_t offset;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  /* determine header offset */
  switch (l) {
 8003f10:	79fb      	ldrb	r3, [r7, #7]
 8003f12:	2b04      	cmp	r3, #4
 8003f14:	d81b      	bhi.n	8003f4e <pbuf_alloced_custom+0x52>
 8003f16:	a201      	add	r2, pc, #4	; (adr r2, 8003f1c <pbuf_alloced_custom+0x20>)
 8003f18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f1c:	08003f31 	.word	0x08003f31
 8003f20:	08003f37 	.word	0x08003f37
 8003f24:	08003f3d 	.word	0x08003f3d
 8003f28:	08003f43 	.word	0x08003f43
 8003f2c:	08003f49 	.word	0x08003f49
  case PBUF_TRANSPORT:
    /* add room for transport (often TCP) layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN + PBUF_TRANSPORT_HLEN;
 8003f30:	2336      	movs	r3, #54	; 0x36
 8003f32:	81fb      	strh	r3, [r7, #14]
    break;
 8003f34:	e014      	b.n	8003f60 <pbuf_alloced_custom+0x64>
  case PBUF_IP:
    /* add room for IP layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN;
 8003f36:	2322      	movs	r3, #34	; 0x22
 8003f38:	81fb      	strh	r3, [r7, #14]
    break;
 8003f3a:	e011      	b.n	8003f60 <pbuf_alloced_custom+0x64>
  case PBUF_LINK:
    /* add room for link layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN;
 8003f3c:	230e      	movs	r3, #14
 8003f3e:	81fb      	strh	r3, [r7, #14]
    break;
 8003f40:	e00e      	b.n	8003f60 <pbuf_alloced_custom+0x64>
  case PBUF_RAW_TX:
    /* add room for encapsulating link layer headers (e.g. 802.11) */
    offset = PBUF_LINK_ENCAPSULATION_HLEN;
 8003f42:	2300      	movs	r3, #0
 8003f44:	81fb      	strh	r3, [r7, #14]
    break;
 8003f46:	e00b      	b.n	8003f60 <pbuf_alloced_custom+0x64>
  case PBUF_RAW:
    offset = 0;
 8003f48:	2300      	movs	r3, #0
 8003f4a:	81fb      	strh	r3, [r7, #14]
    break;
 8003f4c:	e008      	b.n	8003f60 <pbuf_alloced_custom+0x64>
  default:
    LWIP_ASSERT("pbuf_alloced_custom: bad pbuf layer", 0);
 8003f4e:	4b1d      	ldr	r3, [pc, #116]	; (8003fc4 <pbuf_alloced_custom+0xc8>)
 8003f50:	f240 12c5 	movw	r2, #453	; 0x1c5
 8003f54:	491c      	ldr	r1, [pc, #112]	; (8003fc8 <pbuf_alloced_custom+0xcc>)
 8003f56:	481d      	ldr	r0, [pc, #116]	; (8003fcc <pbuf_alloced_custom+0xd0>)
 8003f58:	f009 fd82 	bl	800da60 <iprintf>
    return NULL;
 8003f5c:	2300      	movs	r3, #0
 8003f5e:	e02d      	b.n	8003fbc <pbuf_alloced_custom+0xc0>
  }

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8003f60:	89fb      	ldrh	r3, [r7, #14]
 8003f62:	3303      	adds	r3, #3
 8003f64:	f023 0203 	bic.w	r2, r3, #3
 8003f68:	88bb      	ldrh	r3, [r7, #4]
 8003f6a:	441a      	add	r2, r3
 8003f6c:	8bbb      	ldrh	r3, [r7, #28]
 8003f6e:	429a      	cmp	r2, r3
 8003f70:	d901      	bls.n	8003f76 <pbuf_alloced_custom+0x7a>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 8003f72:	2300      	movs	r3, #0
 8003f74:	e022      	b.n	8003fbc <pbuf_alloced_custom+0xc0>
  }

  p->pbuf.next = NULL;
 8003f76:	683b      	ldr	r3, [r7, #0]
 8003f78:	2200      	movs	r2, #0
 8003f7a:	601a      	str	r2, [r3, #0]
  if (payload_mem != NULL) {
 8003f7c:	69bb      	ldr	r3, [r7, #24]
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d008      	beq.n	8003f94 <pbuf_alloced_custom+0x98>
    p->pbuf.payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8003f82:	89fb      	ldrh	r3, [r7, #14]
 8003f84:	3303      	adds	r3, #3
 8003f86:	f023 0303 	bic.w	r3, r3, #3
 8003f8a:	69ba      	ldr	r2, [r7, #24]
 8003f8c:	441a      	add	r2, r3
 8003f8e:	683b      	ldr	r3, [r7, #0]
 8003f90:	605a      	str	r2, [r3, #4]
 8003f92:	e002      	b.n	8003f9a <pbuf_alloced_custom+0x9e>
  } else {
    p->pbuf.payload = NULL;
 8003f94:	683b      	ldr	r3, [r7, #0]
 8003f96:	2200      	movs	r2, #0
 8003f98:	605a      	str	r2, [r3, #4]
  }
  p->pbuf.flags = PBUF_FLAG_IS_CUSTOM;
 8003f9a:	683b      	ldr	r3, [r7, #0]
 8003f9c:	2202      	movs	r2, #2
 8003f9e:	735a      	strb	r2, [r3, #13]
  p->pbuf.len = p->pbuf.tot_len = length;
 8003fa0:	683b      	ldr	r3, [r7, #0]
 8003fa2:	88ba      	ldrh	r2, [r7, #4]
 8003fa4:	811a      	strh	r2, [r3, #8]
 8003fa6:	683b      	ldr	r3, [r7, #0]
 8003fa8:	891a      	ldrh	r2, [r3, #8]
 8003faa:	683b      	ldr	r3, [r7, #0]
 8003fac:	815a      	strh	r2, [r3, #10]
  p->pbuf.type = type;
 8003fae:	683b      	ldr	r3, [r7, #0]
 8003fb0:	79ba      	ldrb	r2, [r7, #6]
 8003fb2:	731a      	strb	r2, [r3, #12]
  p->pbuf.ref = 1;
 8003fb4:	683b      	ldr	r3, [r7, #0]
 8003fb6:	2201      	movs	r2, #1
 8003fb8:	81da      	strh	r2, [r3, #14]
  return &p->pbuf;
 8003fba:	683b      	ldr	r3, [r7, #0]
}
 8003fbc:	4618      	mov	r0, r3
 8003fbe:	3710      	adds	r7, #16
 8003fc0:	46bd      	mov	sp, r7
 8003fc2:	bd80      	pop	{r7, pc}
 8003fc4:	0800ee70 	.word	0x0800ee70
 8003fc8:	0800f008 	.word	0x0800f008
 8003fcc:	0800eebc 	.word	0x0800eebc

08003fd0 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 8003fd0:	b580      	push	{r7, lr}
 8003fd2:	b086      	sub	sp, #24
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	6078      	str	r0, [r7, #4]
 8003fd8:	460b      	mov	r3, r1
 8003fda:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  s32_t grow;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d106      	bne.n	8003ff0 <pbuf_realloc+0x20>
 8003fe2:	4b4b      	ldr	r3, [pc, #300]	; (8004110 <pbuf_realloc+0x140>)
 8003fe4:	f240 12f3 	movw	r2, #499	; 0x1f3
 8003fe8:	494a      	ldr	r1, [pc, #296]	; (8004114 <pbuf_realloc+0x144>)
 8003fea:	484b      	ldr	r0, [pc, #300]	; (8004118 <pbuf_realloc+0x148>)
 8003fec:	f009 fd38 	bl	800da60 <iprintf>
  LWIP_ASSERT("pbuf_realloc: sane p->type", p->type == PBUF_POOL ||
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	7b1b      	ldrb	r3, [r3, #12]
 8003ff4:	2b03      	cmp	r3, #3
 8003ff6:	d012      	beq.n	800401e <pbuf_realloc+0x4e>
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	7b1b      	ldrb	r3, [r3, #12]
 8003ffc:	2b01      	cmp	r3, #1
 8003ffe:	d00e      	beq.n	800401e <pbuf_realloc+0x4e>
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	7b1b      	ldrb	r3, [r3, #12]
 8004004:	2b00      	cmp	r3, #0
 8004006:	d00a      	beq.n	800401e <pbuf_realloc+0x4e>
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	7b1b      	ldrb	r3, [r3, #12]
 800400c:	2b02      	cmp	r3, #2
 800400e:	d006      	beq.n	800401e <pbuf_realloc+0x4e>
 8004010:	4b3f      	ldr	r3, [pc, #252]	; (8004110 <pbuf_realloc+0x140>)
 8004012:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8004016:	4941      	ldr	r1, [pc, #260]	; (800411c <pbuf_realloc+0x14c>)
 8004018:	483f      	ldr	r0, [pc, #252]	; (8004118 <pbuf_realloc+0x148>)
 800401a:	f009 fd21 	bl	800da60 <iprintf>
              p->type == PBUF_ROM ||
              p->type == PBUF_RAM ||
              p->type == PBUF_REF);

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	891b      	ldrh	r3, [r3, #8]
 8004022:	887a      	ldrh	r2, [r7, #2]
 8004024:	429a      	cmp	r2, r3
 8004026:	d26e      	bcs.n	8004106 <pbuf_realloc+0x136>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  grow = new_len - p->tot_len;
 8004028:	887b      	ldrh	r3, [r7, #2]
 800402a:	687a      	ldr	r2, [r7, #4]
 800402c:	8912      	ldrh	r2, [r2, #8]
 800402e:	1a9b      	subs	r3, r3, r2
 8004030:	60fb      	str	r3, [r7, #12]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8004032:	887b      	ldrh	r3, [r7, #2]
 8004034:	827b      	strh	r3, [r7, #18]
  q = p;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	617b      	str	r3, [r7, #20]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800403a:	e025      	b.n	8004088 <pbuf_realloc+0xb8>
    /* decrease remaining length by pbuf length */
    rem_len -= q->len;
 800403c:	697b      	ldr	r3, [r7, #20]
 800403e:	895b      	ldrh	r3, [r3, #10]
 8004040:	8a7a      	ldrh	r2, [r7, #18]
 8004042:	1ad3      	subs	r3, r2, r3
 8004044:	827b      	strh	r3, [r7, #18]
    /* decrease total length indicator */
    LWIP_ASSERT("grow < max_u16_t", grow < 0xffff);
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800404c:	4293      	cmp	r3, r2
 800404e:	dd06      	ble.n	800405e <pbuf_realloc+0x8e>
 8004050:	4b2f      	ldr	r3, [pc, #188]	; (8004110 <pbuf_realloc+0x140>)
 8004052:	f240 220b 	movw	r2, #523	; 0x20b
 8004056:	4932      	ldr	r1, [pc, #200]	; (8004120 <pbuf_realloc+0x150>)
 8004058:	482f      	ldr	r0, [pc, #188]	; (8004118 <pbuf_realloc+0x148>)
 800405a:	f009 fd01 	bl	800da60 <iprintf>
    q->tot_len += (u16_t)grow;
 800405e:	697b      	ldr	r3, [r7, #20]
 8004060:	891a      	ldrh	r2, [r3, #8]
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	b29b      	uxth	r3, r3
 8004066:	4413      	add	r3, r2
 8004068:	b29a      	uxth	r2, r3
 800406a:	697b      	ldr	r3, [r7, #20]
 800406c:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800406e:	697b      	ldr	r3, [r7, #20]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	617b      	str	r3, [r7, #20]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8004074:	697b      	ldr	r3, [r7, #20]
 8004076:	2b00      	cmp	r3, #0
 8004078:	d106      	bne.n	8004088 <pbuf_realloc+0xb8>
 800407a:	4b25      	ldr	r3, [pc, #148]	; (8004110 <pbuf_realloc+0x140>)
 800407c:	f240 220f 	movw	r2, #527	; 0x20f
 8004080:	4928      	ldr	r1, [pc, #160]	; (8004124 <pbuf_realloc+0x154>)
 8004082:	4825      	ldr	r0, [pc, #148]	; (8004118 <pbuf_realloc+0x148>)
 8004084:	f009 fcec 	bl	800da60 <iprintf>
  while (rem_len > q->len) {
 8004088:	697b      	ldr	r3, [r7, #20]
 800408a:	895b      	ldrh	r3, [r3, #10]
 800408c:	8a7a      	ldrh	r2, [r7, #18]
 800408e:	429a      	cmp	r2, r3
 8004090:	d8d4      	bhi.n	800403c <pbuf_realloc+0x6c>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if ((q->type == PBUF_RAM) && (rem_len != q->len)
 8004092:	697b      	ldr	r3, [r7, #20]
 8004094:	7b1b      	ldrb	r3, [r3, #12]
 8004096:	2b00      	cmp	r3, #0
 8004098:	d121      	bne.n	80040de <pbuf_realloc+0x10e>
 800409a:	697b      	ldr	r3, [r7, #20]
 800409c:	895b      	ldrh	r3, [r3, #10]
 800409e:	8a7a      	ldrh	r2, [r7, #18]
 80040a0:	429a      	cmp	r2, r3
 80040a2:	d01c      	beq.n	80040de <pbuf_realloc+0x10e>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 80040a4:	697b      	ldr	r3, [r7, #20]
 80040a6:	7b5b      	ldrb	r3, [r3, #13]
 80040a8:	f003 0302 	and.w	r3, r3, #2
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d116      	bne.n	80040de <pbuf_realloc+0x10e>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (u16_t)((u8_t *)q->payload - (u8_t *)q) + rem_len);
 80040b0:	697b      	ldr	r3, [r7, #20]
 80040b2:	685a      	ldr	r2, [r3, #4]
 80040b4:	697b      	ldr	r3, [r7, #20]
 80040b6:	1ad3      	subs	r3, r2, r3
 80040b8:	b29a      	uxth	r2, r3
 80040ba:	8a7b      	ldrh	r3, [r7, #18]
 80040bc:	4413      	add	r3, r2
 80040be:	b29b      	uxth	r3, r3
 80040c0:	4619      	mov	r1, r3
 80040c2:	6978      	ldr	r0, [r7, #20]
 80040c4:	f7ff f936 	bl	8003334 <mem_trim>
 80040c8:	6178      	str	r0, [r7, #20]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 80040ca:	697b      	ldr	r3, [r7, #20]
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d106      	bne.n	80040de <pbuf_realloc+0x10e>
 80040d0:	4b0f      	ldr	r3, [pc, #60]	; (8004110 <pbuf_realloc+0x140>)
 80040d2:	f240 221d 	movw	r2, #541	; 0x21d
 80040d6:	4914      	ldr	r1, [pc, #80]	; (8004128 <pbuf_realloc+0x158>)
 80040d8:	480f      	ldr	r0, [pc, #60]	; (8004118 <pbuf_realloc+0x148>)
 80040da:	f009 fcc1 	bl	800da60 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 80040de:	697b      	ldr	r3, [r7, #20]
 80040e0:	8a7a      	ldrh	r2, [r7, #18]
 80040e2:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 80040e4:	697b      	ldr	r3, [r7, #20]
 80040e6:	895a      	ldrh	r2, [r3, #10]
 80040e8:	697b      	ldr	r3, [r7, #20]
 80040ea:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 80040ec:	697b      	ldr	r3, [r7, #20]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d004      	beq.n	80040fe <pbuf_realloc+0x12e>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 80040f4:	697b      	ldr	r3, [r7, #20]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	4618      	mov	r0, r3
 80040fa:	f000 f8dd 	bl	80042b8 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 80040fe:	697b      	ldr	r3, [r7, #20]
 8004100:	2200      	movs	r2, #0
 8004102:	601a      	str	r2, [r3, #0]
 8004104:	e000      	b.n	8004108 <pbuf_realloc+0x138>
    return;
 8004106:	bf00      	nop

}
 8004108:	3718      	adds	r7, #24
 800410a:	46bd      	mov	sp, r7
 800410c:	bd80      	pop	{r7, pc}
 800410e:	bf00      	nop
 8004110:	0800ee70 	.word	0x0800ee70
 8004114:	0800f02c 	.word	0x0800f02c
 8004118:	0800eebc 	.word	0x0800eebc
 800411c:	0800f044 	.word	0x0800f044
 8004120:	0800f060 	.word	0x0800f060
 8004124:	0800f074 	.word	0x0800f074
 8004128:	0800f08c 	.word	0x0800f08c

0800412c <pbuf_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800412c:	b580      	push	{r7, lr}
 800412e:	b084      	sub	sp, #16
 8004130:	af00      	add	r7, sp, #0
 8004132:	6078      	str	r0, [r7, #4]
 8004134:	460b      	mov	r3, r1
 8004136:	807b      	strh	r3, [r7, #2]
 8004138:	4613      	mov	r3, r2
 800413a:	707b      	strb	r3, [r7, #1]
  u16_t type;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	2b00      	cmp	r3, #0
 8004140:	d106      	bne.n	8004150 <pbuf_header_impl+0x24>
 8004142:	4b46      	ldr	r3, [pc, #280]	; (800425c <pbuf_header_impl+0x130>)
 8004144:	f240 223f 	movw	r2, #575	; 0x23f
 8004148:	4945      	ldr	r1, [pc, #276]	; (8004260 <pbuf_header_impl+0x134>)
 800414a:	4846      	ldr	r0, [pc, #280]	; (8004264 <pbuf_header_impl+0x138>)
 800414c:	f009 fc88 	bl	800da60 <iprintf>
  if ((header_size_increment == 0) || (p == NULL)) {
 8004150:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004154:	2b00      	cmp	r3, #0
 8004156:	d002      	beq.n	800415e <pbuf_header_impl+0x32>
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	2b00      	cmp	r3, #0
 800415c:	d101      	bne.n	8004162 <pbuf_header_impl+0x36>
    return 0;
 800415e:	2300      	movs	r3, #0
 8004160:	e078      	b.n	8004254 <pbuf_header_impl+0x128>
  }

  if (header_size_increment < 0) {
 8004162:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004166:	2b00      	cmp	r3, #0
 8004168:	da10      	bge.n	800418c <pbuf_header_impl+0x60>
    increment_magnitude = (u16_t)-header_size_increment;
 800416a:	887b      	ldrh	r3, [r7, #2]
 800416c:	425b      	negs	r3, r3
 800416e:	81fb      	strh	r3, [r7, #14]
    /* Check that we aren't going to move off the end of the pbuf */
    LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	895b      	ldrh	r3, [r3, #10]
 8004174:	89fa      	ldrh	r2, [r7, #14]
 8004176:	429a      	cmp	r2, r3
 8004178:	d90a      	bls.n	8004190 <pbuf_header_impl+0x64>
 800417a:	4b38      	ldr	r3, [pc, #224]	; (800425c <pbuf_header_impl+0x130>)
 800417c:	f240 2247 	movw	r2, #583	; 0x247
 8004180:	4939      	ldr	r1, [pc, #228]	; (8004268 <pbuf_header_impl+0x13c>)
 8004182:	4838      	ldr	r0, [pc, #224]	; (8004264 <pbuf_header_impl+0x138>)
 8004184:	f009 fc6c 	bl	800da60 <iprintf>
 8004188:	2301      	movs	r3, #1
 800418a:	e063      	b.n	8004254 <pbuf_header_impl+0x128>
  } else {
    increment_magnitude = (u16_t)header_size_increment;
 800418c:	887b      	ldrh	r3, [r7, #2]
 800418e:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("p->payload - increment_magnitude >= p + SIZEOF_STRUCT_PBUF",
                (u8_t *)p->payload - increment_magnitude >= (u8_t *)p + SIZEOF_STRUCT_PBUF);
#endif
  }

  type = p->type;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	7b1b      	ldrb	r3, [r3, #12]
 8004194:	81bb      	strh	r3, [r7, #12]
  /* remember current payload pointer */
  payload = p->payload;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	685b      	ldr	r3, [r3, #4]
 800419a:	60bb      	str	r3, [r7, #8]

  /* pbuf types containing payloads? */
  if (type == PBUF_RAM || type == PBUF_POOL) {
 800419c:	89bb      	ldrh	r3, [r7, #12]
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d002      	beq.n	80041a8 <pbuf_header_impl+0x7c>
 80041a2:	89bb      	ldrh	r3, [r7, #12]
 80041a4:	2b03      	cmp	r3, #3
 80041a6:	d112      	bne.n	80041ce <pbuf_header_impl+0xa2>
    /* set new payload pointer */
    p->payload = (u8_t *)p->payload - header_size_increment;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	685a      	ldr	r2, [r3, #4]
 80041ac:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80041b0:	425b      	negs	r3, r3
 80041b2:	441a      	add	r2, r3
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	605a      	str	r2, [r3, #4]
    /* boundary check fails? */
    if ((u8_t *)p->payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	685a      	ldr	r2, [r3, #4]
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	3310      	adds	r3, #16
 80041c0:	429a      	cmp	r2, r3
 80041c2:	d238      	bcs.n	8004236 <pbuf_header_impl+0x10a>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
        ("pbuf_header: failed as %p < %p (not enough space for new header size)\n",
        (void *)p->payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* restore old payload pointer */
      p->payload = payload;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	68ba      	ldr	r2, [r7, #8]
 80041c8:	605a      	str	r2, [r3, #4]
      /* bail out unsuccessfully */
      return 1;
 80041ca:	2301      	movs	r3, #1
 80041cc:	e042      	b.n	8004254 <pbuf_header_impl+0x128>
    }
  /* pbuf types referring to external payloads? */
  } else if (type == PBUF_REF || type == PBUF_ROM) {
 80041ce:	89bb      	ldrh	r3, [r7, #12]
 80041d0:	2b02      	cmp	r3, #2
 80041d2:	d002      	beq.n	80041da <pbuf_header_impl+0xae>
 80041d4:	89bb      	ldrh	r3, [r7, #12]
 80041d6:	2b01      	cmp	r3, #1
 80041d8:	d124      	bne.n	8004224 <pbuf_header_impl+0xf8>
    /* hide a header in the payload? */
    if ((header_size_increment < 0) && (increment_magnitude <= p->len)) {
 80041da:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80041de:	2b00      	cmp	r3, #0
 80041e0:	da0d      	bge.n	80041fe <pbuf_header_impl+0xd2>
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	895b      	ldrh	r3, [r3, #10]
 80041e6:	89fa      	ldrh	r2, [r7, #14]
 80041e8:	429a      	cmp	r2, r3
 80041ea:	d808      	bhi.n	80041fe <pbuf_header_impl+0xd2>
      /* increase payload pointer */
      p->payload = (u8_t *)p->payload - header_size_increment;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	685a      	ldr	r2, [r3, #4]
 80041f0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80041f4:	425b      	negs	r3, r3
 80041f6:	441a      	add	r2, r3
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	605a      	str	r2, [r3, #4]
 80041fc:	e011      	b.n	8004222 <pbuf_header_impl+0xf6>
    } else if ((header_size_increment > 0) && force) {
 80041fe:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004202:	2b00      	cmp	r3, #0
 8004204:	dd0b      	ble.n	800421e <pbuf_header_impl+0xf2>
 8004206:	787b      	ldrb	r3, [r7, #1]
 8004208:	2b00      	cmp	r3, #0
 800420a:	d008      	beq.n	800421e <pbuf_header_impl+0xf2>
      p->payload = (u8_t *)p->payload - header_size_increment;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	685a      	ldr	r2, [r3, #4]
 8004210:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004214:	425b      	negs	r3, r3
 8004216:	441a      	add	r2, r3
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	605a      	str	r2, [r3, #4]
 800421c:	e001      	b.n	8004222 <pbuf_header_impl+0xf6>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800421e:	2301      	movs	r3, #1
 8004220:	e018      	b.n	8004254 <pbuf_header_impl+0x128>
    if ((header_size_increment < 0) && (increment_magnitude <= p->len)) {
 8004222:	e008      	b.n	8004236 <pbuf_header_impl+0x10a>
    }
  } else {
    /* Unknown type */
    LWIP_ASSERT("bad pbuf type", 0);
 8004224:	4b0d      	ldr	r3, [pc, #52]	; (800425c <pbuf_header_impl+0x130>)
 8004226:	f240 2277 	movw	r2, #631	; 0x277
 800422a:	4910      	ldr	r1, [pc, #64]	; (800426c <pbuf_header_impl+0x140>)
 800422c:	480d      	ldr	r0, [pc, #52]	; (8004264 <pbuf_header_impl+0x138>)
 800422e:	f009 fc17 	bl	800da60 <iprintf>
    return 1;
 8004232:	2301      	movs	r3, #1
 8004234:	e00e      	b.n	8004254 <pbuf_header_impl+0x128>
  }
  /* modify pbuf length fields */
  p->len += header_size_increment;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	895a      	ldrh	r2, [r3, #10]
 800423a:	887b      	ldrh	r3, [r7, #2]
 800423c:	4413      	add	r3, r2
 800423e:	b29a      	uxth	r2, r3
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	815a      	strh	r2, [r3, #10]
  p->tot_len += header_size_increment;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	891a      	ldrh	r2, [r3, #8]
 8004248:	887b      	ldrh	r3, [r7, #2]
 800424a:	4413      	add	r3, r2
 800424c:	b29a      	uxth	r2, r3
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_header: old %p new %p (%"S16_F")\n",
    (void *)payload, (void *)p->payload, header_size_increment));

  return 0;
 8004252:	2300      	movs	r3, #0
}
 8004254:	4618      	mov	r0, r3
 8004256:	3710      	adds	r7, #16
 8004258:	46bd      	mov	sp, r7
 800425a:	bd80      	pop	{r7, pc}
 800425c:	0800ee70 	.word	0x0800ee70
 8004260:	0800f0a8 	.word	0x0800f0a8
 8004264:	0800eebc 	.word	0x0800eebc
 8004268:	0800f0b4 	.word	0x0800f0b4
 800426c:	0800f0d4 	.word	0x0800f0d4

08004270 <pbuf_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_header(struct pbuf *p, s16_t header_size_increment)
{
 8004270:	b580      	push	{r7, lr}
 8004272:	b082      	sub	sp, #8
 8004274:	af00      	add	r7, sp, #0
 8004276:	6078      	str	r0, [r7, #4]
 8004278:	460b      	mov	r3, r1
 800427a:	807b      	strh	r3, [r7, #2]
   return pbuf_header_impl(p, header_size_increment, 0);
 800427c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004280:	2200      	movs	r2, #0
 8004282:	4619      	mov	r1, r3
 8004284:	6878      	ldr	r0, [r7, #4]
 8004286:	f7ff ff51 	bl	800412c <pbuf_header_impl>
 800428a:	4603      	mov	r3, r0
}
 800428c:	4618      	mov	r0, r3
 800428e:	3708      	adds	r7, #8
 8004290:	46bd      	mov	sp, r7
 8004292:	bd80      	pop	{r7, pc}

08004294 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 8004294:	b580      	push	{r7, lr}
 8004296:	b082      	sub	sp, #8
 8004298:	af00      	add	r7, sp, #0
 800429a:	6078      	str	r0, [r7, #4]
 800429c:	460b      	mov	r3, r1
 800429e:	807b      	strh	r3, [r7, #2]
   return pbuf_header_impl(p, header_size_increment, 1);
 80042a0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80042a4:	2201      	movs	r2, #1
 80042a6:	4619      	mov	r1, r3
 80042a8:	6878      	ldr	r0, [r7, #4]
 80042aa:	f7ff ff3f 	bl	800412c <pbuf_header_impl>
 80042ae:	4603      	mov	r3, r0
}
 80042b0:	4618      	mov	r0, r3
 80042b2:	3708      	adds	r7, #8
 80042b4:	46bd      	mov	sp, r7
 80042b6:	bd80      	pop	{r7, pc}

080042b8 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 80042b8:	b580      	push	{r7, lr}
 80042ba:	b086      	sub	sp, #24
 80042bc:	af00      	add	r7, sp, #0
 80042be:	6078      	str	r0, [r7, #4]
  u16_t type;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d10b      	bne.n	80042de <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d106      	bne.n	80042da <pbuf_free+0x22>
 80042cc:	4b3e      	ldr	r3, [pc, #248]	; (80043c8 <pbuf_free+0x110>)
 80042ce:	f240 22d2 	movw	r2, #722	; 0x2d2
 80042d2:	493e      	ldr	r1, [pc, #248]	; (80043cc <pbuf_free+0x114>)
 80042d4:	483e      	ldr	r0, [pc, #248]	; (80043d0 <pbuf_free+0x118>)
 80042d6:	f009 fbc3 	bl	800da60 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
      ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 80042da:	2300      	movs	r3, #0
 80042dc:	e070      	b.n	80043c0 <pbuf_free+0x108>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  LWIP_ASSERT("pbuf_free: sane type",
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	7b1b      	ldrb	r3, [r3, #12]
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d012      	beq.n	800430c <pbuf_free+0x54>
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	7b1b      	ldrb	r3, [r3, #12]
 80042ea:	2b01      	cmp	r3, #1
 80042ec:	d00e      	beq.n	800430c <pbuf_free+0x54>
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	7b1b      	ldrb	r3, [r3, #12]
 80042f2:	2b02      	cmp	r3, #2
 80042f4:	d00a      	beq.n	800430c <pbuf_free+0x54>
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	7b1b      	ldrb	r3, [r3, #12]
 80042fa:	2b03      	cmp	r3, #3
 80042fc:	d006      	beq.n	800430c <pbuf_free+0x54>
 80042fe:	4b32      	ldr	r3, [pc, #200]	; (80043c8 <pbuf_free+0x110>)
 8004300:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 8004304:	4933      	ldr	r1, [pc, #204]	; (80043d4 <pbuf_free+0x11c>)
 8004306:	4832      	ldr	r0, [pc, #200]	; (80043d0 <pbuf_free+0x118>)
 8004308:	f009 fbaa 	bl	800da60 <iprintf>
    p->type == PBUF_RAM || p->type == PBUF_ROM ||
    p->type == PBUF_REF || p->type == PBUF_POOL);

  count = 0;
 800430c:	2300      	movs	r3, #0
 800430e:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 8004310:	e052      	b.n	80043b8 <pbuf_free+0x100>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	89db      	ldrh	r3, [r3, #14]
 8004316:	2b00      	cmp	r3, #0
 8004318:	d106      	bne.n	8004328 <pbuf_free+0x70>
 800431a:	4b2b      	ldr	r3, [pc, #172]	; (80043c8 <pbuf_free+0x110>)
 800431c:	f240 22eb 	movw	r2, #747	; 0x2eb
 8004320:	492d      	ldr	r1, [pc, #180]	; (80043d8 <pbuf_free+0x120>)
 8004322:	482b      	ldr	r0, [pc, #172]	; (80043d0 <pbuf_free+0x118>)
 8004324:	f009 fb9c 	bl	800da60 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	89db      	ldrh	r3, [r3, #14]
 800432c:	3b01      	subs	r3, #1
 800432e:	b29a      	uxth	r2, r3
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	81da      	strh	r2, [r3, #14]
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	89db      	ldrh	r3, [r3, #14]
 8004338:	82bb      	strh	r3, [r7, #20]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800433a:	8abb      	ldrh	r3, [r7, #20]
 800433c:	2b00      	cmp	r3, #0
 800433e:	d139      	bne.n	80043b4 <pbuf_free+0xfc>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      type = p->type;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	7b1b      	ldrb	r3, [r3, #12]
 800434a:	81fb      	strh	r3, [r7, #14]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	7b5b      	ldrb	r3, [r3, #13]
 8004350:	f003 0302 	and.w	r3, r3, #2
 8004354:	2b00      	cmp	r3, #0
 8004356:	d011      	beq.n	800437c <pbuf_free+0xc4>
        struct pbuf_custom *pc = (struct pbuf_custom*)p;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800435c:	68bb      	ldr	r3, [r7, #8]
 800435e:	691b      	ldr	r3, [r3, #16]
 8004360:	2b00      	cmp	r3, #0
 8004362:	d106      	bne.n	8004372 <pbuf_free+0xba>
 8004364:	4b18      	ldr	r3, [pc, #96]	; (80043c8 <pbuf_free+0x110>)
 8004366:	f240 22f9 	movw	r2, #761	; 0x2f9
 800436a:	491c      	ldr	r1, [pc, #112]	; (80043dc <pbuf_free+0x124>)
 800436c:	4818      	ldr	r0, [pc, #96]	; (80043d0 <pbuf_free+0x118>)
 800436e:	f009 fb77 	bl	800da60 <iprintf>
        pc->custom_free_function(p);
 8004372:	68bb      	ldr	r3, [r7, #8]
 8004374:	691b      	ldr	r3, [r3, #16]
 8004376:	6878      	ldr	r0, [r7, #4]
 8004378:	4798      	blx	r3
 800437a:	e015      	b.n	80043a8 <pbuf_free+0xf0>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (type == PBUF_POOL) {
 800437c:	89fb      	ldrh	r3, [r7, #14]
 800437e:	2b03      	cmp	r3, #3
 8004380:	d104      	bne.n	800438c <pbuf_free+0xd4>
          memp_free(MEMP_PBUF_POOL, p);
 8004382:	6879      	ldr	r1, [r7, #4]
 8004384:	2008      	movs	r0, #8
 8004386:	f7ff fa59 	bl	800383c <memp_free>
 800438a:	e00d      	b.n	80043a8 <pbuf_free+0xf0>
        /* is this a ROM or RAM referencing pbuf? */
        } else if (type == PBUF_ROM || type == PBUF_REF) {
 800438c:	89fb      	ldrh	r3, [r7, #14]
 800438e:	2b01      	cmp	r3, #1
 8004390:	d002      	beq.n	8004398 <pbuf_free+0xe0>
 8004392:	89fb      	ldrh	r3, [r7, #14]
 8004394:	2b02      	cmp	r3, #2
 8004396:	d104      	bne.n	80043a2 <pbuf_free+0xea>
          memp_free(MEMP_PBUF, p);
 8004398:	6879      	ldr	r1, [r7, #4]
 800439a:	2007      	movs	r0, #7
 800439c:	f7ff fa4e 	bl	800383c <memp_free>
 80043a0:	e002      	b.n	80043a8 <pbuf_free+0xf0>
        /* type == PBUF_RAM */
        } else {
          mem_free(p);
 80043a2:	6878      	ldr	r0, [r7, #4]
 80043a4:	f7fe ff64 	bl	8003270 <mem_free>
        }
      }
      count++;
 80043a8:	7dfb      	ldrb	r3, [r7, #23]
 80043aa:	3301      	adds	r3, #1
 80043ac:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 80043ae:	693b      	ldr	r3, [r7, #16]
 80043b0:	607b      	str	r3, [r7, #4]
 80043b2:	e001      	b.n	80043b8 <pbuf_free+0x100>
    /* p->ref > 0, this pbuf is still referenced to */
    /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, ref));
      /* stop walking through the chain */
      p = NULL;
 80043b4:	2300      	movs	r3, #0
 80043b6:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d1a9      	bne.n	8004312 <pbuf_free+0x5a>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 80043be:	7dfb      	ldrb	r3, [r7, #23]
}
 80043c0:	4618      	mov	r0, r3
 80043c2:	3718      	adds	r7, #24
 80043c4:	46bd      	mov	sp, r7
 80043c6:	bd80      	pop	{r7, pc}
 80043c8:	0800ee70 	.word	0x0800ee70
 80043cc:	0800f0a8 	.word	0x0800f0a8
 80043d0:	0800eebc 	.word	0x0800eebc
 80043d4:	0800f0e4 	.word	0x0800f0e4
 80043d8:	0800f0fc 	.word	0x0800f0fc
 80043dc:	0800f114 	.word	0x0800f114

080043e0 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 80043e0:	b480      	push	{r7}
 80043e2:	b085      	sub	sp, #20
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 80043e8:	2300      	movs	r3, #0
 80043ea:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 80043ec:	e005      	b.n	80043fa <pbuf_clen+0x1a>
    ++len;
 80043ee:	89fb      	ldrh	r3, [r7, #14]
 80043f0:	3301      	adds	r3, #1
 80043f2:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d1f6      	bne.n	80043ee <pbuf_clen+0xe>
  }
  return len;
 8004400:	89fb      	ldrh	r3, [r7, #14]
}
 8004402:	4618      	mov	r0, r3
 8004404:	3714      	adds	r7, #20
 8004406:	46bd      	mov	sp, r7
 8004408:	bc80      	pop	{r7}
 800440a:	4770      	bx	lr

0800440c <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800440c:	b580      	push	{r7, lr}
 800440e:	b082      	sub	sp, #8
 8004410:	af00      	add	r7, sp, #0
 8004412:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	2b00      	cmp	r3, #0
 8004418:	d010      	beq.n	800443c <pbuf_ref+0x30>
    SYS_ARCH_INC(p->ref, 1);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	89db      	ldrh	r3, [r3, #14]
 800441e:	3301      	adds	r3, #1
 8004420:	b29a      	uxth	r2, r3
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	81da      	strh	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	89db      	ldrh	r3, [r3, #14]
 800442a:	2b00      	cmp	r3, #0
 800442c:	d106      	bne.n	800443c <pbuf_ref+0x30>
 800442e:	4b05      	ldr	r3, [pc, #20]	; (8004444 <pbuf_ref+0x38>)
 8004430:	f240 3239 	movw	r2, #825	; 0x339
 8004434:	4904      	ldr	r1, [pc, #16]	; (8004448 <pbuf_ref+0x3c>)
 8004436:	4805      	ldr	r0, [pc, #20]	; (800444c <pbuf_ref+0x40>)
 8004438:	f009 fb12 	bl	800da60 <iprintf>
  }
}
 800443c:	bf00      	nop
 800443e:	3708      	adds	r7, #8
 8004440:	46bd      	mov	sp, r7
 8004442:	bd80      	pop	{r7, pc}
 8004444:	0800ee70 	.word	0x0800ee70
 8004448:	0800f138 	.word	0x0800f138
 800444c:	0800eebc 	.word	0x0800eebc

08004450 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8004450:	b580      	push	{r7, lr}
 8004452:	b084      	sub	sp, #16
 8004454:	af00      	add	r7, sp, #0
 8004456:	6078      	str	r0, [r7, #4]
 8004458:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	2b00      	cmp	r3, #0
 800445e:	d002      	beq.n	8004466 <pbuf_cat+0x16>
 8004460:	683b      	ldr	r3, [r7, #0]
 8004462:	2b00      	cmp	r3, #0
 8004464:	d107      	bne.n	8004476 <pbuf_cat+0x26>
 8004466:	4b20      	ldr	r3, [pc, #128]	; (80044e8 <pbuf_cat+0x98>)
 8004468:	f44f 7253 	mov.w	r2, #844	; 0x34c
 800446c:	491f      	ldr	r1, [pc, #124]	; (80044ec <pbuf_cat+0x9c>)
 800446e:	4820      	ldr	r0, [pc, #128]	; (80044f0 <pbuf_cat+0xa0>)
 8004470:	f009 faf6 	bl	800da60 <iprintf>
 8004474:	e034      	b.n	80044e0 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	60fb      	str	r3, [r7, #12]
 800447a:	e00a      	b.n	8004492 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len += t->tot_len;
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	891a      	ldrh	r2, [r3, #8]
 8004480:	683b      	ldr	r3, [r7, #0]
 8004482:	891b      	ldrh	r3, [r3, #8]
 8004484:	4413      	add	r3, r2
 8004486:	b29a      	uxth	r2, r3
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	60fb      	str	r3, [r7, #12]
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	2b00      	cmp	r3, #0
 8004498:	d1f0      	bne.n	800447c <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	891a      	ldrh	r2, [r3, #8]
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	895b      	ldrh	r3, [r3, #10]
 80044a2:	429a      	cmp	r2, r3
 80044a4:	d006      	beq.n	80044b4 <pbuf_cat+0x64>
 80044a6:	4b10      	ldr	r3, [pc, #64]	; (80044e8 <pbuf_cat+0x98>)
 80044a8:	f240 3255 	movw	r2, #853	; 0x355
 80044ac:	4911      	ldr	r1, [pc, #68]	; (80044f4 <pbuf_cat+0xa4>)
 80044ae:	4810      	ldr	r0, [pc, #64]	; (80044f0 <pbuf_cat+0xa0>)
 80044b0:	f009 fad6 	bl	800da60 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d006      	beq.n	80044ca <pbuf_cat+0x7a>
 80044bc:	4b0a      	ldr	r3, [pc, #40]	; (80044e8 <pbuf_cat+0x98>)
 80044be:	f240 3256 	movw	r2, #854	; 0x356
 80044c2:	490d      	ldr	r1, [pc, #52]	; (80044f8 <pbuf_cat+0xa8>)
 80044c4:	480a      	ldr	r0, [pc, #40]	; (80044f0 <pbuf_cat+0xa0>)
 80044c6:	f009 facb 	bl	800da60 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len += t->tot_len;
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	891a      	ldrh	r2, [r3, #8]
 80044ce:	683b      	ldr	r3, [r7, #0]
 80044d0:	891b      	ldrh	r3, [r3, #8]
 80044d2:	4413      	add	r3, r2
 80044d4:	b29a      	uxth	r2, r3
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	683a      	ldr	r2, [r7, #0]
 80044de:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 80044e0:	3710      	adds	r7, #16
 80044e2:	46bd      	mov	sp, r7
 80044e4:	bd80      	pop	{r7, pc}
 80044e6:	bf00      	nop
 80044e8:	0800ee70 	.word	0x0800ee70
 80044ec:	0800f14c 	.word	0x0800f14c
 80044f0:	0800eebc 	.word	0x0800eebc
 80044f4:	0800f184 	.word	0x0800f184
 80044f8:	0800f1b4 	.word	0x0800f1b4

080044fc <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 80044fc:	b580      	push	{r7, lr}
 80044fe:	b082      	sub	sp, #8
 8004500:	af00      	add	r7, sp, #0
 8004502:	6078      	str	r0, [r7, #4]
 8004504:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 8004506:	6839      	ldr	r1, [r7, #0]
 8004508:	6878      	ldr	r0, [r7, #4]
 800450a:	f7ff ffa1 	bl	8004450 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 800450e:	6838      	ldr	r0, [r7, #0]
 8004510:	f7ff ff7c 	bl	800440c <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 8004514:	bf00      	nop
 8004516:	3708      	adds	r7, #8
 8004518:	46bd      	mov	sp, r7
 800451a:	bd80      	pop	{r7, pc}

0800451c <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800451c:	b580      	push	{r7, lr}
 800451e:	b084      	sub	sp, #16
 8004520:	af00      	add	r7, sp, #0
 8004522:	6078      	str	r0, [r7, #4]
 8004524:	6039      	str	r1, [r7, #0]
  u16_t offset_to=0, offset_from=0, len;
 8004526:	2300      	movs	r3, #0
 8004528:	81fb      	strh	r3, [r7, #14]
 800452a:	2300      	movs	r3, #0
 800452c:	81bb      	strh	r3, [r7, #12]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
    (const void*)p_to, (const void*)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	2b00      	cmp	r3, #0
 8004532:	d008      	beq.n	8004546 <pbuf_copy+0x2a>
 8004534:	683b      	ldr	r3, [r7, #0]
 8004536:	2b00      	cmp	r3, #0
 8004538:	d005      	beq.n	8004546 <pbuf_copy+0x2a>
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	891a      	ldrh	r2, [r3, #8]
 800453e:	683b      	ldr	r3, [r7, #0]
 8004540:	891b      	ldrh	r3, [r3, #8]
 8004542:	429a      	cmp	r2, r3
 8004544:	d209      	bcs.n	800455a <pbuf_copy+0x3e>
 8004546:	4b54      	ldr	r3, [pc, #336]	; (8004698 <pbuf_copy+0x17c>)
 8004548:	f44f 726f 	mov.w	r2, #956	; 0x3bc
 800454c:	4953      	ldr	r1, [pc, #332]	; (800469c <pbuf_copy+0x180>)
 800454e:	4854      	ldr	r0, [pc, #336]	; (80046a0 <pbuf_copy+0x184>)
 8004550:	f009 fa86 	bl	800da60 <iprintf>
 8004554:	f06f 030f 	mvn.w	r3, #15
 8004558:	e099      	b.n	800468e <pbuf_copy+0x172>

  /* iterate through pbuf chain */
  do
  {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	895b      	ldrh	r3, [r3, #10]
 800455e:	461a      	mov	r2, r3
 8004560:	89fb      	ldrh	r3, [r7, #14]
 8004562:	1ad2      	subs	r2, r2, r3
 8004564:	683b      	ldr	r3, [r7, #0]
 8004566:	895b      	ldrh	r3, [r3, #10]
 8004568:	4619      	mov	r1, r3
 800456a:	89bb      	ldrh	r3, [r7, #12]
 800456c:	1acb      	subs	r3, r1, r3
 800456e:	429a      	cmp	r2, r3
 8004570:	db05      	blt.n	800457e <pbuf_copy+0x62>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 8004572:	683b      	ldr	r3, [r7, #0]
 8004574:	895a      	ldrh	r2, [r3, #10]
 8004576:	89bb      	ldrh	r3, [r7, #12]
 8004578:	1ad3      	subs	r3, r2, r3
 800457a:	817b      	strh	r3, [r7, #10]
 800457c:	e004      	b.n	8004588 <pbuf_copy+0x6c>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	895a      	ldrh	r2, [r3, #10]
 8004582:	89fb      	ldrh	r3, [r7, #14]
 8004584:	1ad3      	subs	r3, r2, r3
 8004586:	817b      	strh	r3, [r7, #10]
    }
    MEMCPY((u8_t*)p_to->payload + offset_to, (u8_t*)p_from->payload + offset_from, len);
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	685a      	ldr	r2, [r3, #4]
 800458c:	89fb      	ldrh	r3, [r7, #14]
 800458e:	18d0      	adds	r0, r2, r3
 8004590:	683b      	ldr	r3, [r7, #0]
 8004592:	685a      	ldr	r2, [r3, #4]
 8004594:	89bb      	ldrh	r3, [r7, #12]
 8004596:	4413      	add	r3, r2
 8004598:	897a      	ldrh	r2, [r7, #10]
 800459a:	4619      	mov	r1, r3
 800459c:	f009 fa4a 	bl	800da34 <memcpy>
    offset_to += len;
 80045a0:	89fa      	ldrh	r2, [r7, #14]
 80045a2:	897b      	ldrh	r3, [r7, #10]
 80045a4:	4413      	add	r3, r2
 80045a6:	81fb      	strh	r3, [r7, #14]
    offset_from += len;
 80045a8:	89ba      	ldrh	r2, [r7, #12]
 80045aa:	897b      	ldrh	r3, [r7, #10]
 80045ac:	4413      	add	r3, r2
 80045ae:	81bb      	strh	r3, [r7, #12]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	895b      	ldrh	r3, [r3, #10]
 80045b4:	89fa      	ldrh	r2, [r7, #14]
 80045b6:	429a      	cmp	r2, r3
 80045b8:	d906      	bls.n	80045c8 <pbuf_copy+0xac>
 80045ba:	4b37      	ldr	r3, [pc, #220]	; (8004698 <pbuf_copy+0x17c>)
 80045bc:	f240 32cd 	movw	r2, #973	; 0x3cd
 80045c0:	4938      	ldr	r1, [pc, #224]	; (80046a4 <pbuf_copy+0x188>)
 80045c2:	4837      	ldr	r0, [pc, #220]	; (80046a0 <pbuf_copy+0x184>)
 80045c4:	f009 fa4c 	bl	800da60 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 80045c8:	683b      	ldr	r3, [r7, #0]
 80045ca:	895b      	ldrh	r3, [r3, #10]
 80045cc:	89ba      	ldrh	r2, [r7, #12]
 80045ce:	429a      	cmp	r2, r3
 80045d0:	d906      	bls.n	80045e0 <pbuf_copy+0xc4>
 80045d2:	4b31      	ldr	r3, [pc, #196]	; (8004698 <pbuf_copy+0x17c>)
 80045d4:	f240 32ce 	movw	r2, #974	; 0x3ce
 80045d8:	4933      	ldr	r1, [pc, #204]	; (80046a8 <pbuf_copy+0x18c>)
 80045da:	4831      	ldr	r0, [pc, #196]	; (80046a0 <pbuf_copy+0x184>)
 80045dc:	f009 fa40 	bl	800da60 <iprintf>
    if (offset_from >= p_from->len) {
 80045e0:	683b      	ldr	r3, [r7, #0]
 80045e2:	895b      	ldrh	r3, [r3, #10]
 80045e4:	89ba      	ldrh	r2, [r7, #12]
 80045e6:	429a      	cmp	r2, r3
 80045e8:	d304      	bcc.n	80045f4 <pbuf_copy+0xd8>
      /* on to next p_from (if any) */
      offset_from = 0;
 80045ea:	2300      	movs	r3, #0
 80045ec:	81bb      	strh	r3, [r7, #12]
      p_from = p_from->next;
 80045ee:	683b      	ldr	r3, [r7, #0]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	895b      	ldrh	r3, [r3, #10]
 80045f8:	89fa      	ldrh	r2, [r7, #14]
 80045fa:	429a      	cmp	r2, r3
 80045fc:	d114      	bne.n	8004628 <pbuf_copy+0x10c>
      /* on to next p_to (if any) */
      offset_to = 0;
 80045fe:	2300      	movs	r3, #0
 8004600:	81fb      	strh	r3, [r7, #14]
      p_to = p_to->next;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL) , return ERR_ARG;);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	2b00      	cmp	r3, #0
 800460c:	d10c      	bne.n	8004628 <pbuf_copy+0x10c>
 800460e:	683b      	ldr	r3, [r7, #0]
 8004610:	2b00      	cmp	r3, #0
 8004612:	d009      	beq.n	8004628 <pbuf_copy+0x10c>
 8004614:	4b20      	ldr	r3, [pc, #128]	; (8004698 <pbuf_copy+0x17c>)
 8004616:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 800461a:	4924      	ldr	r1, [pc, #144]	; (80046ac <pbuf_copy+0x190>)
 800461c:	4820      	ldr	r0, [pc, #128]	; (80046a0 <pbuf_copy+0x184>)
 800461e:	f009 fa1f 	bl	800da60 <iprintf>
 8004622:	f06f 030f 	mvn.w	r3, #15
 8004626:	e032      	b.n	800468e <pbuf_copy+0x172>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8004628:	683b      	ldr	r3, [r7, #0]
 800462a:	2b00      	cmp	r3, #0
 800462c:	d013      	beq.n	8004656 <pbuf_copy+0x13a>
 800462e:	683b      	ldr	r3, [r7, #0]
 8004630:	895a      	ldrh	r2, [r3, #10]
 8004632:	683b      	ldr	r3, [r7, #0]
 8004634:	891b      	ldrh	r3, [r3, #8]
 8004636:	429a      	cmp	r2, r3
 8004638:	d10d      	bne.n	8004656 <pbuf_copy+0x13a>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800463a:	683b      	ldr	r3, [r7, #0]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	2b00      	cmp	r3, #0
 8004640:	d009      	beq.n	8004656 <pbuf_copy+0x13a>
 8004642:	4b15      	ldr	r3, [pc, #84]	; (8004698 <pbuf_copy+0x17c>)
 8004644:	f240 32dd 	movw	r2, #989	; 0x3dd
 8004648:	4919      	ldr	r1, [pc, #100]	; (80046b0 <pbuf_copy+0x194>)
 800464a:	4815      	ldr	r0, [pc, #84]	; (80046a0 <pbuf_copy+0x184>)
 800464c:	f009 fa08 	bl	800da60 <iprintf>
 8004650:	f06f 0305 	mvn.w	r3, #5
 8004654:	e01b      	b.n	800468e <pbuf_copy+0x172>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	2b00      	cmp	r3, #0
 800465a:	d013      	beq.n	8004684 <pbuf_copy+0x168>
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	895a      	ldrh	r2, [r3, #10]
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	891b      	ldrh	r3, [r3, #8]
 8004664:	429a      	cmp	r2, r3
 8004666:	d10d      	bne.n	8004684 <pbuf_copy+0x168>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	2b00      	cmp	r3, #0
 800466e:	d009      	beq.n	8004684 <pbuf_copy+0x168>
 8004670:	4b09      	ldr	r3, [pc, #36]	; (8004698 <pbuf_copy+0x17c>)
 8004672:	f240 32e2 	movw	r2, #994	; 0x3e2
 8004676:	490e      	ldr	r1, [pc, #56]	; (80046b0 <pbuf_copy+0x194>)
 8004678:	4809      	ldr	r0, [pc, #36]	; (80046a0 <pbuf_copy+0x184>)
 800467a:	f009 f9f1 	bl	800da60 <iprintf>
 800467e:	f06f 0305 	mvn.w	r3, #5
 8004682:	e004      	b.n	800468e <pbuf_copy+0x172>
                  (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8004684:	683b      	ldr	r3, [r7, #0]
 8004686:	2b00      	cmp	r3, #0
 8004688:	f47f af67 	bne.w	800455a <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800468c:	2300      	movs	r3, #0
}
 800468e:	4618      	mov	r0, r3
 8004690:	3710      	adds	r7, #16
 8004692:	46bd      	mov	sp, r7
 8004694:	bd80      	pop	{r7, pc}
 8004696:	bf00      	nop
 8004698:	0800ee70 	.word	0x0800ee70
 800469c:	0800f200 	.word	0x0800f200
 80046a0:	0800eebc 	.word	0x0800eebc
 80046a4:	0800f230 	.word	0x0800f230
 80046a8:	0800f248 	.word	0x0800f248
 80046ac:	0800f264 	.word	0x0800f264
 80046b0:	0800f274 	.word	0x0800f274

080046b4 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 80046b4:	b580      	push	{r7, lr}
 80046b6:	b088      	sub	sp, #32
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	60f8      	str	r0, [r7, #12]
 80046bc:	60b9      	str	r1, [r7, #8]
 80046be:	4611      	mov	r1, r2
 80046c0:	461a      	mov	r2, r3
 80046c2:	460b      	mov	r3, r1
 80046c4:	80fb      	strh	r3, [r7, #6]
 80046c6:	4613      	mov	r3, r2
 80046c8:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left;
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 80046ca:	2300      	movs	r3, #0
 80046cc:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d108      	bne.n	80046e6 <pbuf_copy_partial+0x32>
 80046d4:	4b30      	ldr	r3, [pc, #192]	; (8004798 <pbuf_copy_partial+0xe4>)
 80046d6:	f240 32fe 	movw	r2, #1022	; 0x3fe
 80046da:	4930      	ldr	r1, [pc, #192]	; (800479c <pbuf_copy_partial+0xe8>)
 80046dc:	4830      	ldr	r0, [pc, #192]	; (80047a0 <pbuf_copy_partial+0xec>)
 80046de:	f009 f9bf 	bl	800da60 <iprintf>
 80046e2:	2300      	movs	r3, #0
 80046e4:	e054      	b.n	8004790 <pbuf_copy_partial+0xdc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 80046e6:	68bb      	ldr	r3, [r7, #8]
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d108      	bne.n	80046fe <pbuf_copy_partial+0x4a>
 80046ec:	4b2a      	ldr	r3, [pc, #168]	; (8004798 <pbuf_copy_partial+0xe4>)
 80046ee:	f240 32ff 	movw	r2, #1023	; 0x3ff
 80046f2:	492c      	ldr	r1, [pc, #176]	; (80047a4 <pbuf_copy_partial+0xf0>)
 80046f4:	482a      	ldr	r0, [pc, #168]	; (80047a0 <pbuf_copy_partial+0xec>)
 80046f6:	f009 f9b3 	bl	800da60 <iprintf>
 80046fa:	2300      	movs	r3, #0
 80046fc:	e048      	b.n	8004790 <pbuf_copy_partial+0xdc>

  left = 0;
 80046fe:	2300      	movs	r3, #0
 8004700:	837b      	strh	r3, [r7, #26]

  if ((buf == NULL) || (dataptr == NULL)) {
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	2b00      	cmp	r3, #0
 8004706:	d002      	beq.n	800470e <pbuf_copy_partial+0x5a>
 8004708:	68bb      	ldr	r3, [r7, #8]
 800470a:	2b00      	cmp	r3, #0
 800470c:	d101      	bne.n	8004712 <pbuf_copy_partial+0x5e>
    return 0;
 800470e:	2300      	movs	r3, #0
 8004710:	e03e      	b.n	8004790 <pbuf_copy_partial+0xdc>
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	61fb      	str	r3, [r7, #28]
 8004716:	e034      	b.n	8004782 <pbuf_copy_partial+0xce>
    if ((offset != 0) && (offset >= p->len)) {
 8004718:	88bb      	ldrh	r3, [r7, #4]
 800471a:	2b00      	cmp	r3, #0
 800471c:	d00a      	beq.n	8004734 <pbuf_copy_partial+0x80>
 800471e:	69fb      	ldr	r3, [r7, #28]
 8004720:	895b      	ldrh	r3, [r3, #10]
 8004722:	88ba      	ldrh	r2, [r7, #4]
 8004724:	429a      	cmp	r2, r3
 8004726:	d305      	bcc.n	8004734 <pbuf_copy_partial+0x80>
      /* don't copy from this buffer -> on to the next */
      offset -= p->len;
 8004728:	69fb      	ldr	r3, [r7, #28]
 800472a:	895b      	ldrh	r3, [r3, #10]
 800472c:	88ba      	ldrh	r2, [r7, #4]
 800472e:	1ad3      	subs	r3, r2, r3
 8004730:	80bb      	strh	r3, [r7, #4]
 8004732:	e023      	b.n	800477c <pbuf_copy_partial+0xc8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = p->len - offset;
 8004734:	69fb      	ldr	r3, [r7, #28]
 8004736:	895a      	ldrh	r2, [r3, #10]
 8004738:	88bb      	ldrh	r3, [r7, #4]
 800473a:	1ad3      	subs	r3, r2, r3
 800473c:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800473e:	8b3a      	ldrh	r2, [r7, #24]
 8004740:	88fb      	ldrh	r3, [r7, #6]
 8004742:	429a      	cmp	r2, r3
 8004744:	d901      	bls.n	800474a <pbuf_copy_partial+0x96>
        buf_copy_len = len;
 8004746:	88fb      	ldrh	r3, [r7, #6]
 8004748:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char*)dataptr)[left], &((char*)p->payload)[offset], buf_copy_len);
 800474a:	8b7b      	ldrh	r3, [r7, #26]
 800474c:	68ba      	ldr	r2, [r7, #8]
 800474e:	18d0      	adds	r0, r2, r3
 8004750:	69fb      	ldr	r3, [r7, #28]
 8004752:	685a      	ldr	r2, [r3, #4]
 8004754:	88bb      	ldrh	r3, [r7, #4]
 8004756:	4413      	add	r3, r2
 8004758:	8b3a      	ldrh	r2, [r7, #24]
 800475a:	4619      	mov	r1, r3
 800475c:	f009 f96a 	bl	800da34 <memcpy>
      copied_total += buf_copy_len;
 8004760:	8afa      	ldrh	r2, [r7, #22]
 8004762:	8b3b      	ldrh	r3, [r7, #24]
 8004764:	4413      	add	r3, r2
 8004766:	82fb      	strh	r3, [r7, #22]
      left += buf_copy_len;
 8004768:	8b7a      	ldrh	r2, [r7, #26]
 800476a:	8b3b      	ldrh	r3, [r7, #24]
 800476c:	4413      	add	r3, r2
 800476e:	837b      	strh	r3, [r7, #26]
      len -= buf_copy_len;
 8004770:	88fa      	ldrh	r2, [r7, #6]
 8004772:	8b3b      	ldrh	r3, [r7, #24]
 8004774:	1ad3      	subs	r3, r2, r3
 8004776:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 8004778:	2300      	movs	r3, #0
 800477a:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800477c:	69fb      	ldr	r3, [r7, #28]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	61fb      	str	r3, [r7, #28]
 8004782:	88fb      	ldrh	r3, [r7, #6]
 8004784:	2b00      	cmp	r3, #0
 8004786:	d002      	beq.n	800478e <pbuf_copy_partial+0xda>
 8004788:	69fb      	ldr	r3, [r7, #28]
 800478a:	2b00      	cmp	r3, #0
 800478c:	d1c4      	bne.n	8004718 <pbuf_copy_partial+0x64>
    }
  }
  return copied_total;
 800478e:	8afb      	ldrh	r3, [r7, #22]
}
 8004790:	4618      	mov	r0, r3
 8004792:	3720      	adds	r7, #32
 8004794:	46bd      	mov	sp, r7
 8004796:	bd80      	pop	{r7, pc}
 8004798:	0800ee70 	.word	0x0800ee70
 800479c:	0800f2a0 	.word	0x0800f2a0
 80047a0:	0800eebc 	.word	0x0800eebc
 80047a4:	0800f2c0 	.word	0x0800f2c0

080047a8 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 80047a8:	b480      	push	{r7}
 80047aa:	af00      	add	r7, sp, #0
#if LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND)
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
#endif /* LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND) */
}
 80047ac:	bf00      	nop
 80047ae:	46bd      	mov	sp, r7
 80047b0:	bc80      	pop	{r7}
 80047b2:	4770      	bx	lr

080047b4 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 80047b4:	b580      	push	{r7, lr}
 80047b6:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 80047b8:	f000 fdfa 	bl	80053b0 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 80047bc:	4b07      	ldr	r3, [pc, #28]	; (80047dc <tcp_tmr+0x28>)
 80047be:	781b      	ldrb	r3, [r3, #0]
 80047c0:	3301      	adds	r3, #1
 80047c2:	b2da      	uxtb	r2, r3
 80047c4:	4b05      	ldr	r3, [pc, #20]	; (80047dc <tcp_tmr+0x28>)
 80047c6:	701a      	strb	r2, [r3, #0]
 80047c8:	4b04      	ldr	r3, [pc, #16]	; (80047dc <tcp_tmr+0x28>)
 80047ca:	781b      	ldrb	r3, [r3, #0]
 80047cc:	f003 0301 	and.w	r3, r3, #1
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d001      	beq.n	80047d8 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 80047d4:	f000 fb2a 	bl	8004e2c <tcp_slowtmr>
  }
}
 80047d8:	bf00      	nop
 80047da:	bd80      	pop	{r7, pc}
 80047dc:	200000cd 	.word	0x200000cd

080047e0 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 80047e0:	b480      	push	{r7}
 80047e2:	b085      	sub	sp, #20
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	6078      	str	r0, [r7, #4]
 80047e8:	6039      	str	r1, [r7, #0]
   struct tcp_pcb *pcb;
   for (pcb = list; pcb != NULL; pcb = pcb->next) {
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	60fb      	str	r3, [r7, #12]
 80047ee:	e00a      	b.n	8004806 <tcp_remove_listener+0x26>
      if (pcb->listener == lpcb) {
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80047f4:	683a      	ldr	r2, [r7, #0]
 80047f6:	429a      	cmp	r2, r3
 80047f8:	d102      	bne.n	8004800 <tcp_remove_listener+0x20>
         pcb->listener = NULL;
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	2200      	movs	r2, #0
 80047fe:	679a      	str	r2, [r3, #120]	; 0x78
   for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	68db      	ldr	r3, [r3, #12]
 8004804:	60fb      	str	r3, [r7, #12]
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	2b00      	cmp	r3, #0
 800480a:	d1f1      	bne.n	80047f0 <tcp_remove_listener+0x10>
      }
   }
}
 800480c:	bf00      	nop
 800480e:	bf00      	nop
 8004810:	3714      	adds	r7, #20
 8004812:	46bd      	mov	sp, r7
 8004814:	bc80      	pop	{r7}
 8004816:	4770      	bx	lr

08004818 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 8004818:	b580      	push	{r7, lr}
 800481a:	b084      	sub	sp, #16
 800481c:	af00      	add	r7, sp, #0
 800481e:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	2b00      	cmp	r3, #0
 8004824:	d105      	bne.n	8004832 <tcp_listen_closed+0x1a>
 8004826:	4b13      	ldr	r3, [pc, #76]	; (8004874 <tcp_listen_closed+0x5c>)
 8004828:	22c0      	movs	r2, #192	; 0xc0
 800482a:	4913      	ldr	r1, [pc, #76]	; (8004878 <tcp_listen_closed+0x60>)
 800482c:	4813      	ldr	r0, [pc, #76]	; (800487c <tcp_listen_closed+0x64>)
 800482e:	f009 f917 	bl	800da60 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	7d1b      	ldrb	r3, [r3, #20]
 8004836:	2b01      	cmp	r3, #1
 8004838:	d005      	beq.n	8004846 <tcp_listen_closed+0x2e>
 800483a:	4b0e      	ldr	r3, [pc, #56]	; (8004874 <tcp_listen_closed+0x5c>)
 800483c:	22c1      	movs	r2, #193	; 0xc1
 800483e:	4910      	ldr	r1, [pc, #64]	; (8004880 <tcp_listen_closed+0x68>)
 8004840:	480e      	ldr	r0, [pc, #56]	; (800487c <tcp_listen_closed+0x64>)
 8004842:	f009 f90d 	bl	800da60 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8004846:	2301      	movs	r3, #1
 8004848:	60fb      	str	r3, [r7, #12]
 800484a:	e00b      	b.n	8004864 <tcp_listen_closed+0x4c>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen*)pcb);
 800484c:	4a0d      	ldr	r2, [pc, #52]	; (8004884 <tcp_listen_closed+0x6c>)
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	6879      	ldr	r1, [r7, #4]
 8004858:	4618      	mov	r0, r3
 800485a:	f7ff ffc1 	bl	80047e0 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	3301      	adds	r3, #1
 8004862:	60fb      	str	r3, [r7, #12]
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	2b03      	cmp	r3, #3
 8004868:	d9f0      	bls.n	800484c <tcp_listen_closed+0x34>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800486a:	bf00      	nop
 800486c:	bf00      	nop
 800486e:	3710      	adds	r7, #16
 8004870:	46bd      	mov	sp, r7
 8004872:	bd80      	pop	{r7, pc}
 8004874:	0800f3f4 	.word	0x0800f3f4
 8004878:	0800f424 	.word	0x0800f424
 800487c:	0800f430 	.word	0x0800f430
 8004880:	0800f458 	.word	0x0800f458
 8004884:	08010d30 	.word	0x08010d30

08004888 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 8004888:	b5b0      	push	{r4, r5, r7, lr}
 800488a:	b086      	sub	sp, #24
 800488c:	af02      	add	r7, sp, #8
 800488e:	6078      	str	r0, [r7, #4]
 8004890:	460b      	mov	r3, r1
 8004892:	70fb      	strb	r3, [r7, #3]
  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8004894:	78fb      	ldrb	r3, [r7, #3]
 8004896:	2b00      	cmp	r3, #0
 8004898:	d075      	beq.n	8004986 <tcp_close_shutdown+0xfe>
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	7d1b      	ldrb	r3, [r3, #20]
 800489e:	2b04      	cmp	r3, #4
 80048a0:	d003      	beq.n	80048aa <tcp_close_shutdown+0x22>
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	7d1b      	ldrb	r3, [r3, #20]
 80048a6:	2b07      	cmp	r3, #7
 80048a8:	d16d      	bne.n	8004986 <tcp_close_shutdown+0xfe>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d104      	bne.n	80048bc <tcp_close_shutdown+0x34>
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048b6:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 80048ba:	d064      	beq.n	8004986 <tcp_close_shutdown+0xfe>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	7e9b      	ldrb	r3, [r3, #26]
 80048c0:	f003 0310 	and.w	r3, r3, #16
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d106      	bne.n	80048d6 <tcp_close_shutdown+0x4e>
 80048c8:	4b5b      	ldr	r3, [pc, #364]	; (8004a38 <tcp_close_shutdown+0x1b0>)
 80048ca:	f240 120f 	movw	r2, #271	; 0x10f
 80048ce:	495b      	ldr	r1, [pc, #364]	; (8004a3c <tcp_close_shutdown+0x1b4>)
 80048d0:	485b      	ldr	r0, [pc, #364]	; (8004a40 <tcp_close_shutdown+0x1b8>)
 80048d2:	f009 f8c5 	bl	800da60 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80048de:	687c      	ldr	r4, [r7, #4]
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	1d1d      	adds	r5, r3, #4
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	8adb      	ldrh	r3, [r3, #22]
 80048e8:	687a      	ldr	r2, [r7, #4]
 80048ea:	8b12      	ldrh	r2, [r2, #24]
 80048ec:	9201      	str	r2, [sp, #4]
 80048ee:	9300      	str	r3, [sp, #0]
 80048f0:	462b      	mov	r3, r5
 80048f2:	4622      	mov	r2, r4
 80048f4:	f004 f862 	bl	80089bc <tcp_rst>
               pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 80048f8:	6878      	ldr	r0, [r7, #4]
 80048fa:	f000 ffcf 	bl	800589c <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 80048fe:	4b51      	ldr	r3, [pc, #324]	; (8004a44 <tcp_close_shutdown+0x1bc>)
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	687a      	ldr	r2, [r7, #4]
 8004904:	429a      	cmp	r2, r3
 8004906:	d105      	bne.n	8004914 <tcp_close_shutdown+0x8c>
 8004908:	4b4e      	ldr	r3, [pc, #312]	; (8004a44 <tcp_close_shutdown+0x1bc>)
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	68db      	ldr	r3, [r3, #12]
 800490e:	4a4d      	ldr	r2, [pc, #308]	; (8004a44 <tcp_close_shutdown+0x1bc>)
 8004910:	6013      	str	r3, [r2, #0]
 8004912:	e013      	b.n	800493c <tcp_close_shutdown+0xb4>
 8004914:	4b4b      	ldr	r3, [pc, #300]	; (8004a44 <tcp_close_shutdown+0x1bc>)
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	60fb      	str	r3, [r7, #12]
 800491a:	e00c      	b.n	8004936 <tcp_close_shutdown+0xae>
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	68db      	ldr	r3, [r3, #12]
 8004920:	687a      	ldr	r2, [r7, #4]
 8004922:	429a      	cmp	r2, r3
 8004924:	d104      	bne.n	8004930 <tcp_close_shutdown+0xa8>
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	68da      	ldr	r2, [r3, #12]
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	60da      	str	r2, [r3, #12]
 800492e:	e005      	b.n	800493c <tcp_close_shutdown+0xb4>
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	68db      	ldr	r3, [r3, #12]
 8004934:	60fb      	str	r3, [r7, #12]
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	2b00      	cmp	r3, #0
 800493a:	d1ef      	bne.n	800491c <tcp_close_shutdown+0x94>
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	2200      	movs	r2, #0
 8004940:	60da      	str	r2, [r3, #12]
 8004942:	4b41      	ldr	r3, [pc, #260]	; (8004a48 <tcp_close_shutdown+0x1c0>)
 8004944:	2201      	movs	r2, #1
 8004946:	701a      	strb	r2, [r3, #0]
      if (pcb->state == ESTABLISHED) {
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	7d1b      	ldrb	r3, [r3, #20]
 800494c:	2b04      	cmp	r3, #4
 800494e:	d10c      	bne.n	800496a <tcp_close_shutdown+0xe2>
        /* move to TIME_WAIT since we close actively */
        pcb->state = TIME_WAIT;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	220a      	movs	r2, #10
 8004954:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8004956:	4b3d      	ldr	r3, [pc, #244]	; (8004a4c <tcp_close_shutdown+0x1c4>)
 8004958:	681a      	ldr	r2, [r3, #0]
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	60da      	str	r2, [r3, #12]
 800495e:	4a3b      	ldr	r2, [pc, #236]	; (8004a4c <tcp_close_shutdown+0x1c4>)
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	6013      	str	r3, [r2, #0]
 8004964:	f004 fa72 	bl	8008e4c <tcp_timer_needed>
 8004968:	e00b      	b.n	8004982 <tcp_close_shutdown+0xfa>
      } else {
        /* CLOSE_WAIT: deallocate the pcb since we already sent a RST for it */
        if (tcp_input_pcb == pcb) {
 800496a:	4b39      	ldr	r3, [pc, #228]	; (8004a50 <tcp_close_shutdown+0x1c8>)
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	687a      	ldr	r2, [r7, #4]
 8004970:	429a      	cmp	r2, r3
 8004972:	d102      	bne.n	800497a <tcp_close_shutdown+0xf2>
          /* prevent using a deallocated pcb: free it from tcp_input later */
          tcp_trigger_input_pcb_close();
 8004974:	f003 faf4 	bl	8007f60 <tcp_trigger_input_pcb_close>
 8004978:	e003      	b.n	8004982 <tcp_close_shutdown+0xfa>
        } else {
          memp_free(MEMP_TCP_PCB, pcb);
 800497a:	6879      	ldr	r1, [r7, #4]
 800497c:	2001      	movs	r0, #1
 800497e:	f7fe ff5d 	bl	800383c <memp_free>
        }
      }
      return ERR_OK;
 8004982:	2300      	movs	r3, #0
 8004984:	e053      	b.n	8004a2e <tcp_close_shutdown+0x1a6>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	7d1b      	ldrb	r3, [r3, #20]
 800498a:	2b02      	cmp	r3, #2
 800498c:	d03d      	beq.n	8004a0a <tcp_close_shutdown+0x182>
 800498e:	2b02      	cmp	r3, #2
 8004990:	dc47      	bgt.n	8004a22 <tcp_close_shutdown+0x19a>
 8004992:	2b00      	cmp	r3, #0
 8004994:	d002      	beq.n	800499c <tcp_close_shutdown+0x114>
 8004996:	2b01      	cmp	r3, #1
 8004998:	d02b      	beq.n	80049f2 <tcp_close_shutdown+0x16a>
 800499a:	e042      	b.n	8004a22 <tcp_close_shutdown+0x19a>
     * and the user needs some way to free it should the need arise.
     * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
     * or for a pcb that has been used and then entered the CLOSED state
     * is erroneous, but this should never happen as the pcb has in those cases
     * been freed, and so any remaining handles are bogus. */
    if (pcb->local_port != 0) {
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	8adb      	ldrh	r3, [r3, #22]
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d021      	beq.n	80049e8 <tcp_close_shutdown+0x160>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 80049a4:	4b2b      	ldr	r3, [pc, #172]	; (8004a54 <tcp_close_shutdown+0x1cc>)
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	687a      	ldr	r2, [r7, #4]
 80049aa:	429a      	cmp	r2, r3
 80049ac:	d105      	bne.n	80049ba <tcp_close_shutdown+0x132>
 80049ae:	4b29      	ldr	r3, [pc, #164]	; (8004a54 <tcp_close_shutdown+0x1cc>)
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	68db      	ldr	r3, [r3, #12]
 80049b4:	4a27      	ldr	r2, [pc, #156]	; (8004a54 <tcp_close_shutdown+0x1cc>)
 80049b6:	6013      	str	r3, [r2, #0]
 80049b8:	e013      	b.n	80049e2 <tcp_close_shutdown+0x15a>
 80049ba:	4b26      	ldr	r3, [pc, #152]	; (8004a54 <tcp_close_shutdown+0x1cc>)
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	60bb      	str	r3, [r7, #8]
 80049c0:	e00c      	b.n	80049dc <tcp_close_shutdown+0x154>
 80049c2:	68bb      	ldr	r3, [r7, #8]
 80049c4:	68db      	ldr	r3, [r3, #12]
 80049c6:	687a      	ldr	r2, [r7, #4]
 80049c8:	429a      	cmp	r2, r3
 80049ca:	d104      	bne.n	80049d6 <tcp_close_shutdown+0x14e>
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	68da      	ldr	r2, [r3, #12]
 80049d0:	68bb      	ldr	r3, [r7, #8]
 80049d2:	60da      	str	r2, [r3, #12]
 80049d4:	e005      	b.n	80049e2 <tcp_close_shutdown+0x15a>
 80049d6:	68bb      	ldr	r3, [r7, #8]
 80049d8:	68db      	ldr	r3, [r3, #12]
 80049da:	60bb      	str	r3, [r7, #8]
 80049dc:	68bb      	ldr	r3, [r7, #8]
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d1ef      	bne.n	80049c2 <tcp_close_shutdown+0x13a>
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	2200      	movs	r2, #0
 80049e6:	60da      	str	r2, [r3, #12]
    }
    memp_free(MEMP_TCP_PCB, pcb);
 80049e8:	6879      	ldr	r1, [r7, #4]
 80049ea:	2001      	movs	r0, #1
 80049ec:	f7fe ff26 	bl	800383c <memp_free>
    break;
 80049f0:	e01c      	b.n	8004a2c <tcp_close_shutdown+0x1a4>
  case LISTEN:
    tcp_listen_closed(pcb);
 80049f2:	6878      	ldr	r0, [r7, #4]
 80049f4:	f7ff ff10 	bl	8004818 <tcp_listen_closed>
    tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 80049f8:	6879      	ldr	r1, [r7, #4]
 80049fa:	4817      	ldr	r0, [pc, #92]	; (8004a58 <tcp_close_shutdown+0x1d0>)
 80049fc:	f000 ff90 	bl	8005920 <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8004a00:	6879      	ldr	r1, [r7, #4]
 8004a02:	2002      	movs	r0, #2
 8004a04:	f7fe ff1a 	bl	800383c <memp_free>
    break;
 8004a08:	e010      	b.n	8004a2c <tcp_close_shutdown+0x1a4>
  case SYN_SENT:
    TCP_PCB_REMOVE_ACTIVE(pcb);
 8004a0a:	6879      	ldr	r1, [r7, #4]
 8004a0c:	480d      	ldr	r0, [pc, #52]	; (8004a44 <tcp_close_shutdown+0x1bc>)
 8004a0e:	f000 ff87 	bl	8005920 <tcp_pcb_remove>
 8004a12:	4b0d      	ldr	r3, [pc, #52]	; (8004a48 <tcp_close_shutdown+0x1c0>)
 8004a14:	2201      	movs	r2, #1
 8004a16:	701a      	strb	r2, [r3, #0]
    memp_free(MEMP_TCP_PCB, pcb);
 8004a18:	6879      	ldr	r1, [r7, #4]
 8004a1a:	2001      	movs	r0, #1
 8004a1c:	f7fe ff0e 	bl	800383c <memp_free>
    MIB2_STATS_INC(mib2.tcpattemptfails);
    break;
 8004a20:	e004      	b.n	8004a2c <tcp_close_shutdown+0x1a4>
  default:
    return tcp_close_shutdown_fin(pcb);
 8004a22:	6878      	ldr	r0, [r7, #4]
 8004a24:	f000 f81a 	bl	8004a5c <tcp_close_shutdown_fin>
 8004a28:	4603      	mov	r3, r0
 8004a2a:	e000      	b.n	8004a2e <tcp_close_shutdown+0x1a6>
  }
  return ERR_OK;
 8004a2c:	2300      	movs	r3, #0
}
 8004a2e:	4618      	mov	r0, r3
 8004a30:	3710      	adds	r7, #16
 8004a32:	46bd      	mov	sp, r7
 8004a34:	bdb0      	pop	{r4, r5, r7, pc}
 8004a36:	bf00      	nop
 8004a38:	0800f3f4 	.word	0x0800f3f4
 8004a3c:	0800f470 	.word	0x0800f470
 8004a40:	0800f430 	.word	0x0800f430
 8004a44:	200068a0 	.word	0x200068a0
 8004a48:	2000689c 	.word	0x2000689c
 8004a4c:	200068b0 	.word	0x200068b0
 8004a50:	200068b4 	.word	0x200068b4
 8004a54:	200068ac 	.word	0x200068ac
 8004a58:	200068a8 	.word	0x200068a8

08004a5c <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 8004a5c:	b580      	push	{r7, lr}
 8004a5e:	b084      	sub	sp, #16
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d106      	bne.n	8004a78 <tcp_close_shutdown_fin+0x1c>
 8004a6a:	4b2e      	ldr	r3, [pc, #184]	; (8004b24 <tcp_close_shutdown_fin+0xc8>)
 8004a6c:	f240 124d 	movw	r2, #333	; 0x14d
 8004a70:	492d      	ldr	r1, [pc, #180]	; (8004b28 <tcp_close_shutdown_fin+0xcc>)
 8004a72:	482e      	ldr	r0, [pc, #184]	; (8004b2c <tcp_close_shutdown_fin+0xd0>)
 8004a74:	f008 fff4 	bl	800da60 <iprintf>

  switch (pcb->state) {
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	7d1b      	ldrb	r3, [r3, #20]
 8004a7c:	2b07      	cmp	r3, #7
 8004a7e:	d020      	beq.n	8004ac2 <tcp_close_shutdown_fin+0x66>
 8004a80:	2b07      	cmp	r3, #7
 8004a82:	dc2b      	bgt.n	8004adc <tcp_close_shutdown_fin+0x80>
 8004a84:	2b03      	cmp	r3, #3
 8004a86:	d002      	beq.n	8004a8e <tcp_close_shutdown_fin+0x32>
 8004a88:	2b04      	cmp	r3, #4
 8004a8a:	d00d      	beq.n	8004aa8 <tcp_close_shutdown_fin+0x4c>
 8004a8c:	e026      	b.n	8004adc <tcp_close_shutdown_fin+0x80>
  case SYN_RCVD:
    err = tcp_send_fin(pcb);
 8004a8e:	6878      	ldr	r0, [r7, #4]
 8004a90:	f003 faf0 	bl	8008074 <tcp_send_fin>
 8004a94:	4603      	mov	r3, r0
 8004a96:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8004a98:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d11f      	bne.n	8004ae0 <tcp_close_shutdown_fin+0x84>
      tcp_backlog_accepted(pcb);
      MIB2_STATS_INC(mib2.tcpattemptfails);
      pcb->state = FIN_WAIT_1;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	2205      	movs	r2, #5
 8004aa4:	751a      	strb	r2, [r3, #20]
    }
    break;
 8004aa6:	e01b      	b.n	8004ae0 <tcp_close_shutdown_fin+0x84>
  case ESTABLISHED:
    err = tcp_send_fin(pcb);
 8004aa8:	6878      	ldr	r0, [r7, #4]
 8004aaa:	f003 fae3 	bl	8008074 <tcp_send_fin>
 8004aae:	4603      	mov	r3, r0
 8004ab0:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8004ab2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d114      	bne.n	8004ae4 <tcp_close_shutdown_fin+0x88>
      MIB2_STATS_INC(mib2.tcpestabresets);
      pcb->state = FIN_WAIT_1;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	2205      	movs	r2, #5
 8004abe:	751a      	strb	r2, [r3, #20]
    }
    break;
 8004ac0:	e010      	b.n	8004ae4 <tcp_close_shutdown_fin+0x88>
  case CLOSE_WAIT:
    err = tcp_send_fin(pcb);
 8004ac2:	6878      	ldr	r0, [r7, #4]
 8004ac4:	f003 fad6 	bl	8008074 <tcp_send_fin>
 8004ac8:	4603      	mov	r3, r0
 8004aca:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8004acc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d109      	bne.n	8004ae8 <tcp_close_shutdown_fin+0x8c>
      MIB2_STATS_INC(mib2.tcpestabresets);
      pcb->state = LAST_ACK;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	2209      	movs	r2, #9
 8004ad8:	751a      	strb	r2, [r3, #20]
    }
    break;
 8004ada:	e005      	b.n	8004ae8 <tcp_close_shutdown_fin+0x8c>
  default:
    /* Has already been closed, do nothing. */
    return ERR_OK;
 8004adc:	2300      	movs	r3, #0
 8004ade:	e01c      	b.n	8004b1a <tcp_close_shutdown_fin+0xbe>
    break;
 8004ae0:	bf00      	nop
 8004ae2:	e002      	b.n	8004aea <tcp_close_shutdown_fin+0x8e>
    break;
 8004ae4:	bf00      	nop
 8004ae6:	e000      	b.n	8004aea <tcp_close_shutdown_fin+0x8e>
    break;
 8004ae8:	bf00      	nop
  }

  if (err == ERR_OK) {
 8004aea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d103      	bne.n	8004afa <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 8004af2:	6878      	ldr	r0, [r7, #4]
 8004af4:	f003 fcde 	bl	80084b4 <tcp_output>
 8004af8:	e00d      	b.n	8004b16 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 8004afa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004afe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b02:	d108      	bne.n	8004b16 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    pcb->flags |= TF_CLOSEPEND;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	7e9b      	ldrb	r3, [r3, #26]
 8004b08:	f043 0308 	orr.w	r3, r3, #8
 8004b0c:	b2da      	uxtb	r2, r3
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	769a      	strb	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 8004b12:	2300      	movs	r3, #0
 8004b14:	e001      	b.n	8004b1a <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 8004b16:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004b1a:	4618      	mov	r0, r3
 8004b1c:	3710      	adds	r7, #16
 8004b1e:	46bd      	mov	sp, r7
 8004b20:	bd80      	pop	{r7, pc}
 8004b22:	bf00      	nop
 8004b24:	0800f3f4 	.word	0x0800f3f4
 8004b28:	0800f424 	.word	0x0800f424
 8004b2c:	0800f430 	.word	0x0800f430

08004b30 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 8004b30:	b580      	push	{r7, lr}
 8004b32:	b082      	sub	sp, #8
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	6078      	str	r0, [r7, #4]
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));
  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	7d1b      	ldrb	r3, [r3, #20]
 8004b3c:	2b01      	cmp	r3, #1
 8004b3e:	d006      	beq.n	8004b4e <tcp_close+0x1e>
    /* Set a flag not to receive any more data... */
    pcb->flags |= TF_RXCLOSED;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	7e9b      	ldrb	r3, [r3, #26]
 8004b44:	f043 0310 	orr.w	r3, r3, #16
 8004b48:	b2da      	uxtb	r2, r3
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	769a      	strb	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 8004b4e:	2101      	movs	r1, #1
 8004b50:	6878      	ldr	r0, [r7, #4]
 8004b52:	f7ff fe99 	bl	8004888 <tcp_close_shutdown>
 8004b56:	4603      	mov	r3, r0
}
 8004b58:	4618      	mov	r0, r3
 8004b5a:	3708      	adds	r7, #8
 8004b5c:	46bd      	mov	sp, r7
 8004b5e:	bd80      	pop	{r7, pc}

08004b60 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 8004b60:	b580      	push	{r7, lr}
 8004b62:	b08c      	sub	sp, #48	; 0x30
 8004b64:	af02      	add	r7, sp, #8
 8004b66:	6078      	str	r0, [r7, #4]
 8004b68:	6039      	str	r1, [r7, #0]
  tcp_err_fn errf;
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	7d1b      	ldrb	r3, [r3, #20]
 8004b6e:	2b01      	cmp	r3, #1
 8004b70:	d106      	bne.n	8004b80 <tcp_abandon+0x20>
 8004b72:	4b4d      	ldr	r3, [pc, #308]	; (8004ca8 <tcp_abandon+0x148>)
 8004b74:	f240 12df 	movw	r2, #479	; 0x1df
 8004b78:	494c      	ldr	r1, [pc, #304]	; (8004cac <tcp_abandon+0x14c>)
 8004b7a:	484d      	ldr	r0, [pc, #308]	; (8004cb0 <tcp_abandon+0x150>)
 8004b7c:	f008 ff70 	bl	800da60 <iprintf>
    pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	7d1b      	ldrb	r3, [r3, #20]
 8004b84:	2b0a      	cmp	r3, #10
 8004b86:	d108      	bne.n	8004b9a <tcp_abandon+0x3a>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 8004b88:	6879      	ldr	r1, [r7, #4]
 8004b8a:	484a      	ldr	r0, [pc, #296]	; (8004cb4 <tcp_abandon+0x154>)
 8004b8c:	f000 fec8 	bl	8005920 <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB, pcb);
 8004b90:	6879      	ldr	r1, [r7, #4]
 8004b92:	2001      	movs	r0, #1
 8004b94:	f7fe fe52 	bl	800383c <memp_free>
    }
    last_state = pcb->state;
    memp_free(MEMP_TCP_PCB, pcb);
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
  }
}
 8004b98:	e081      	b.n	8004c9e <tcp_abandon+0x13e>
    int send_rst = 0;
 8004b9a:	2300      	movs	r3, #0
 8004b9c:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 8004b9e:	2300      	movs	r3, #0
 8004ba0:	847b      	strh	r3, [r7, #34]	; 0x22
    seqno = pcb->snd_nxt;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ba6:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bac:	617b      	str	r3, [r7, #20]
    errf = pcb->errf;
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004bb4:	613b      	str	r3, [r7, #16]
    errf_arg = pcb->callback_arg;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	691b      	ldr	r3, [r3, #16]
 8004bba:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	7d1b      	ldrb	r3, [r3, #20]
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d126      	bne.n	8004c12 <tcp_abandon+0xb2>
      if (pcb->local_port != 0) {
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	8adb      	ldrh	r3, [r3, #22]
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d02e      	beq.n	8004c2a <tcp_abandon+0xca>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8004bcc:	4b3a      	ldr	r3, [pc, #232]	; (8004cb8 <tcp_abandon+0x158>)
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	687a      	ldr	r2, [r7, #4]
 8004bd2:	429a      	cmp	r2, r3
 8004bd4:	d105      	bne.n	8004be2 <tcp_abandon+0x82>
 8004bd6:	4b38      	ldr	r3, [pc, #224]	; (8004cb8 <tcp_abandon+0x158>)
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	68db      	ldr	r3, [r3, #12]
 8004bdc:	4a36      	ldr	r2, [pc, #216]	; (8004cb8 <tcp_abandon+0x158>)
 8004bde:	6013      	str	r3, [r2, #0]
 8004be0:	e013      	b.n	8004c0a <tcp_abandon+0xaa>
 8004be2:	4b35      	ldr	r3, [pc, #212]	; (8004cb8 <tcp_abandon+0x158>)
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	61fb      	str	r3, [r7, #28]
 8004be8:	e00c      	b.n	8004c04 <tcp_abandon+0xa4>
 8004bea:	69fb      	ldr	r3, [r7, #28]
 8004bec:	68db      	ldr	r3, [r3, #12]
 8004bee:	687a      	ldr	r2, [r7, #4]
 8004bf0:	429a      	cmp	r2, r3
 8004bf2:	d104      	bne.n	8004bfe <tcp_abandon+0x9e>
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	68da      	ldr	r2, [r3, #12]
 8004bf8:	69fb      	ldr	r3, [r7, #28]
 8004bfa:	60da      	str	r2, [r3, #12]
 8004bfc:	e005      	b.n	8004c0a <tcp_abandon+0xaa>
 8004bfe:	69fb      	ldr	r3, [r7, #28]
 8004c00:	68db      	ldr	r3, [r3, #12]
 8004c02:	61fb      	str	r3, [r7, #28]
 8004c04:	69fb      	ldr	r3, [r7, #28]
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d1ef      	bne.n	8004bea <tcp_abandon+0x8a>
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	2200      	movs	r2, #0
 8004c0e:	60da      	str	r2, [r3, #12]
 8004c10:	e00b      	b.n	8004c2a <tcp_abandon+0xca>
      send_rst = reset;
 8004c12:	683b      	ldr	r3, [r7, #0]
 8004c14:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	8adb      	ldrh	r3, [r3, #22]
 8004c1a:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8004c1c:	6879      	ldr	r1, [r7, #4]
 8004c1e:	4827      	ldr	r0, [pc, #156]	; (8004cbc <tcp_abandon+0x15c>)
 8004c20:	f000 fe7e 	bl	8005920 <tcp_pcb_remove>
 8004c24:	4b26      	ldr	r3, [pc, #152]	; (8004cc0 <tcp_abandon+0x160>)
 8004c26:	2201      	movs	r2, #1
 8004c28:	701a      	strb	r2, [r3, #0]
    if (pcb->unacked != NULL) {
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d004      	beq.n	8004c3c <tcp_abandon+0xdc>
      tcp_segs_free(pcb->unacked);
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004c36:	4618      	mov	r0, r3
 8004c38:	f000 fc87 	bl	800554a <tcp_segs_free>
    if (pcb->unsent != NULL) {
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d004      	beq.n	8004c4e <tcp_abandon+0xee>
      tcp_segs_free(pcb->unsent);
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004c48:	4618      	mov	r0, r3
 8004c4a:	f000 fc7e 	bl	800554a <tcp_segs_free>
    if (pcb->ooseq != NULL) {
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d004      	beq.n	8004c60 <tcp_abandon+0x100>
      tcp_segs_free(pcb->ooseq);
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c5a:	4618      	mov	r0, r3
 8004c5c:	f000 fc75 	bl	800554a <tcp_segs_free>
    if (send_rst) {
 8004c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d00c      	beq.n	8004c80 <tcp_abandon+0x120>
      tcp_rst(seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 8004c66:	687a      	ldr	r2, [r7, #4]
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	1d19      	adds	r1, r3, #4
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	8b1b      	ldrh	r3, [r3, #24]
 8004c70:	9301      	str	r3, [sp, #4]
 8004c72:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004c74:	9300      	str	r3, [sp, #0]
 8004c76:	460b      	mov	r3, r1
 8004c78:	6979      	ldr	r1, [r7, #20]
 8004c7a:	69b8      	ldr	r0, [r7, #24]
 8004c7c:	f003 fe9e 	bl	80089bc <tcp_rst>
    last_state = pcb->state;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	7d1b      	ldrb	r3, [r3, #20]
 8004c84:	72fb      	strb	r3, [r7, #11]
    memp_free(MEMP_TCP_PCB, pcb);
 8004c86:	6879      	ldr	r1, [r7, #4]
 8004c88:	2001      	movs	r0, #1
 8004c8a:	f7fe fdd7 	bl	800383c <memp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8004c8e:	693b      	ldr	r3, [r7, #16]
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d004      	beq.n	8004c9e <tcp_abandon+0x13e>
 8004c94:	693b      	ldr	r3, [r7, #16]
 8004c96:	f06f 010c 	mvn.w	r1, #12
 8004c9a:	68f8      	ldr	r0, [r7, #12]
 8004c9c:	4798      	blx	r3
}
 8004c9e:	bf00      	nop
 8004ca0:	3728      	adds	r7, #40	; 0x28
 8004ca2:	46bd      	mov	sp, r7
 8004ca4:	bd80      	pop	{r7, pc}
 8004ca6:	bf00      	nop
 8004ca8:	0800f3f4 	.word	0x0800f3f4
 8004cac:	0800f48c 	.word	0x0800f48c
 8004cb0:	0800f430 	.word	0x0800f430
 8004cb4:	200068b0 	.word	0x200068b0
 8004cb8:	200068ac 	.word	0x200068ac
 8004cbc:	200068a0 	.word	0x200068a0
 8004cc0:	2000689c 	.word	0x2000689c

08004cc4 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 8004cc4:	b580      	push	{r7, lr}
 8004cc6:	b082      	sub	sp, #8
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 8004ccc:	2101      	movs	r1, #1
 8004cce:	6878      	ldr	r0, [r7, #4]
 8004cd0:	f7ff ff46 	bl	8004b60 <tcp_abandon>
}
 8004cd4:	bf00      	nop
 8004cd6:	3708      	adds	r7, #8
 8004cd8:	46bd      	mov	sp, r7
 8004cda:	bd80      	pop	{r7, pc}

08004cdc <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 8004cdc:	b580      	push	{r7, lr}
 8004cde:	b084      	sub	sp, #16
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ce8:	687a      	ldr	r2, [r7, #4]
 8004cea:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8004cec:	4413      	add	r3, r2
 8004cee:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cf4:	687a      	ldr	r2, [r7, #4]
 8004cf6:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 8004cf8:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 8004cfc:	bf28      	it	cs
 8004cfe:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 8004d02:	b292      	uxth	r2, r2
 8004d04:	4413      	add	r3, r2
 8004d06:	68fa      	ldr	r2, [r7, #12]
 8004d08:	1ad3      	subs	r3, r2, r3
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	db08      	blt.n	8004d20 <tcp_update_rcv_ann_wnd+0x44>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d1a:	68fa      	ldr	r2, [r7, #12]
 8004d1c:	1ad3      	subs	r3, r2, r3
 8004d1e:	e020      	b.n	8004d62 <tcp_update_rcv_ann_wnd+0x86>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d28:	1ad3      	subs	r3, r2, r3
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	dd03      	ble.n	8004d36 <tcp_update_rcv_ann_wnd+0x5a>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	2200      	movs	r2, #0
 8004d32:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004d34:	e014      	b.n	8004d60 <tcp_update_rcv_ann_wnd+0x84>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d3e:	1ad3      	subs	r3, r2, r3
 8004d40:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8004d42:	68bb      	ldr	r3, [r7, #8]
 8004d44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d48:	d306      	bcc.n	8004d58 <tcp_update_rcv_ann_wnd+0x7c>
 8004d4a:	4b08      	ldr	r3, [pc, #32]	; (8004d6c <tcp_update_rcv_ann_wnd+0x90>)
 8004d4c:	f44f 7242 	mov.w	r2, #776	; 0x308
 8004d50:	4907      	ldr	r1, [pc, #28]	; (8004d70 <tcp_update_rcv_ann_wnd+0x94>)
 8004d52:	4808      	ldr	r0, [pc, #32]	; (8004d74 <tcp_update_rcv_ann_wnd+0x98>)
 8004d54:	f008 fe84 	bl	800da60 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8004d58:	68bb      	ldr	r3, [r7, #8]
 8004d5a:	b29a      	uxth	r2, r3
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 8004d60:	2300      	movs	r3, #0
  }
}
 8004d62:	4618      	mov	r0, r3
 8004d64:	3710      	adds	r7, #16
 8004d66:	46bd      	mov	sp, r7
 8004d68:	bd80      	pop	{r7, pc}
 8004d6a:	bf00      	nop
 8004d6c:	0800f3f4 	.word	0x0800f3f4
 8004d70:	0800f50c 	.word	0x0800f50c
 8004d74:	0800f430 	.word	0x0800f430

08004d78 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 8004d78:	b580      	push	{r7, lr}
 8004d7a:	b084      	sub	sp, #16
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	6078      	str	r0, [r7, #4]
 8004d80:	460b      	mov	r3, r1
 8004d82:	807b      	strh	r3, [r7, #2]
  int wnd_inflation;

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	7d1b      	ldrb	r3, [r3, #20]
 8004d88:	2b01      	cmp	r3, #1
 8004d8a:	d106      	bne.n	8004d9a <tcp_recved+0x22>
 8004d8c:	4b23      	ldr	r3, [pc, #140]	; (8004e1c <tcp_recved+0xa4>)
 8004d8e:	f240 321f 	movw	r2, #799	; 0x31f
 8004d92:	4923      	ldr	r1, [pc, #140]	; (8004e20 <tcp_recved+0xa8>)
 8004d94:	4823      	ldr	r0, [pc, #140]	; (8004e24 <tcp_recved+0xac>)
 8004d96:	f008 fe63 	bl	800da60 <iprintf>
    pcb->state != LISTEN);

  pcb->rcv_wnd += len;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8004d9e:	887b      	ldrh	r3, [r7, #2]
 8004da0:	4413      	add	r3, r2
 8004da2:	b29a      	uxth	r2, r3
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	851a      	strh	r2, [r3, #40]	; 0x28
  if (pcb->rcv_wnd > TCP_WND_MAX(pcb)) {
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004dac:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8004db0:	d904      	bls.n	8004dbc <tcp_recved+0x44>
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8004db8:	851a      	strh	r2, [r3, #40]	; 0x28
 8004dba:	e017      	b.n	8004dec <tcp_recved+0x74>
  } else if (pcb->rcv_wnd == 0) {
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d113      	bne.n	8004dec <tcp_recved+0x74>
    /* rcv_wnd overflowed */
    if ((pcb->state == CLOSE_WAIT) || (pcb->state == LAST_ACK)) {
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	7d1b      	ldrb	r3, [r3, #20]
 8004dc8:	2b07      	cmp	r3, #7
 8004dca:	d003      	beq.n	8004dd4 <tcp_recved+0x5c>
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	7d1b      	ldrb	r3, [r3, #20]
 8004dd0:	2b09      	cmp	r3, #9
 8004dd2:	d104      	bne.n	8004dde <tcp_recved+0x66>
      /* In passive close, we allow this, since the FIN bit is added to rcv_wnd
         by the stack itself, since it is not mandatory for an application
         to call tcp_recved() for the FIN bit, but e.g. the netconn API does so. */
      pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8004dda:	851a      	strh	r2, [r3, #40]	; 0x28
 8004ddc:	e006      	b.n	8004dec <tcp_recved+0x74>
    } else {
      LWIP_ASSERT("tcp_recved: len wrapped rcv_wnd\n", 0);
 8004dde:	4b0f      	ldr	r3, [pc, #60]	; (8004e1c <tcp_recved+0xa4>)
 8004de0:	f240 322d 	movw	r2, #813	; 0x32d
 8004de4:	4910      	ldr	r1, [pc, #64]	; (8004e28 <tcp_recved+0xb0>)
 8004de6:	480f      	ldr	r0, [pc, #60]	; (8004e24 <tcp_recved+0xac>)
 8004de8:	f008 fe3a 	bl	800da60 <iprintf>
    }
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8004dec:	6878      	ldr	r0, [r7, #4]
 8004dee:	f7ff ff75 	bl	8004cdc <tcp_update_rcv_ann_wnd>
 8004df2:	4603      	mov	r3, r0
 8004df4:	60fb      	str	r3, [r7, #12]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8004dfc:	db09      	blt.n	8004e12 <tcp_recved+0x9a>
    tcp_ack_now(pcb);
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	7e9b      	ldrb	r3, [r3, #26]
 8004e02:	f043 0302 	orr.w	r3, r3, #2
 8004e06:	b2da      	uxtb	r2, r3
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	769a      	strb	r2, [r3, #26]
    tcp_output(pcb);
 8004e0c:	6878      	ldr	r0, [r7, #4]
 8004e0e:	f003 fb51 	bl	80084b4 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
         len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 8004e12:	bf00      	nop
 8004e14:	3710      	adds	r7, #16
 8004e16:	46bd      	mov	sp, r7
 8004e18:	bd80      	pop	{r7, pc}
 8004e1a:	bf00      	nop
 8004e1c:	0800f3f4 	.word	0x0800f3f4
 8004e20:	0800f528 	.word	0x0800f528
 8004e24:	0800f430 	.word	0x0800f430
 8004e28:	0800f550 	.word	0x0800f550

08004e2c <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 8004e2c:	b5b0      	push	{r4, r5, r7, lr}
 8004e2e:	b08c      	sub	sp, #48	; 0x30
 8004e30:	af02      	add	r7, sp, #8
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 8004e32:	2300      	movs	r3, #0
 8004e34:	777b      	strb	r3, [r7, #29]

  ++tcp_ticks;
 8004e36:	4b97      	ldr	r3, [pc, #604]	; (8005094 <tcp_slowtmr+0x268>)
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	3301      	adds	r3, #1
 8004e3c:	4a95      	ldr	r2, [pc, #596]	; (8005094 <tcp_slowtmr+0x268>)
 8004e3e:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 8004e40:	4b95      	ldr	r3, [pc, #596]	; (8005098 <tcp_slowtmr+0x26c>)
 8004e42:	781b      	ldrb	r3, [r3, #0]
 8004e44:	3301      	adds	r3, #1
 8004e46:	b2da      	uxtb	r2, r3
 8004e48:	4b93      	ldr	r3, [pc, #588]	; (8005098 <tcp_slowtmr+0x26c>)
 8004e4a:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 8004e4c:	2300      	movs	r3, #0
 8004e4e:	623b      	str	r3, [r7, #32]
  pcb = tcp_active_pcbs;
 8004e50:	4b92      	ldr	r3, [pc, #584]	; (800509c <tcp_slowtmr+0x270>)
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	627b      	str	r3, [r7, #36]	; 0x24
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 8004e56:	e227      	b.n	80052a8 <tcp_slowtmr+0x47c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8004e58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e5a:	7d1b      	ldrb	r3, [r3, #20]
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d106      	bne.n	8004e6e <tcp_slowtmr+0x42>
 8004e60:	4b8f      	ldr	r3, [pc, #572]	; (80050a0 <tcp_slowtmr+0x274>)
 8004e62:	f44f 727c 	mov.w	r2, #1008	; 0x3f0
 8004e66:	498f      	ldr	r1, [pc, #572]	; (80050a4 <tcp_slowtmr+0x278>)
 8004e68:	488f      	ldr	r0, [pc, #572]	; (80050a8 <tcp_slowtmr+0x27c>)
 8004e6a:	f008 fdf9 	bl	800da60 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8004e6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e70:	7d1b      	ldrb	r3, [r3, #20]
 8004e72:	2b01      	cmp	r3, #1
 8004e74:	d106      	bne.n	8004e84 <tcp_slowtmr+0x58>
 8004e76:	4b8a      	ldr	r3, [pc, #552]	; (80050a0 <tcp_slowtmr+0x274>)
 8004e78:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8004e7c:	498b      	ldr	r1, [pc, #556]	; (80050ac <tcp_slowtmr+0x280>)
 8004e7e:	488a      	ldr	r0, [pc, #552]	; (80050a8 <tcp_slowtmr+0x27c>)
 8004e80:	f008 fdee 	bl	800da60 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 8004e84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e86:	7d1b      	ldrb	r3, [r3, #20]
 8004e88:	2b0a      	cmp	r3, #10
 8004e8a:	d106      	bne.n	8004e9a <tcp_slowtmr+0x6e>
 8004e8c:	4b84      	ldr	r3, [pc, #528]	; (80050a0 <tcp_slowtmr+0x274>)
 8004e8e:	f240 32f2 	movw	r2, #1010	; 0x3f2
 8004e92:	4987      	ldr	r1, [pc, #540]	; (80050b0 <tcp_slowtmr+0x284>)
 8004e94:	4884      	ldr	r0, [pc, #528]	; (80050a8 <tcp_slowtmr+0x27c>)
 8004e96:	f008 fde3 	bl	800da60 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 8004e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e9c:	7f5a      	ldrb	r2, [r3, #29]
 8004e9e:	4b7e      	ldr	r3, [pc, #504]	; (8005098 <tcp_slowtmr+0x26c>)
 8004ea0:	781b      	ldrb	r3, [r3, #0]
 8004ea2:	429a      	cmp	r2, r3
 8004ea4:	d103      	bne.n	8004eae <tcp_slowtmr+0x82>
      /* skip this pcb, we have already processed it */
      pcb = pcb->next;
 8004ea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ea8:	68db      	ldr	r3, [r3, #12]
 8004eaa:	627b      	str	r3, [r7, #36]	; 0x24
      continue;
 8004eac:	e1fc      	b.n	80052a8 <tcp_slowtmr+0x47c>
    }
    pcb->last_timer = tcp_timer_ctr;
 8004eae:	4b7a      	ldr	r3, [pc, #488]	; (8005098 <tcp_slowtmr+0x26c>)
 8004eb0:	781a      	ldrb	r2, [r3, #0]
 8004eb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eb4:	775a      	strb	r2, [r3, #29]

    pcb_remove = 0;
 8004eb6:	2300      	movs	r3, #0
 8004eb8:	77fb      	strb	r3, [r7, #31]
    pcb_reset = 0;
 8004eba:	2300      	movs	r3, #0
 8004ebc:	77bb      	strb	r3, [r7, #30]

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8004ebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ec0:	7d1b      	ldrb	r3, [r3, #20]
 8004ec2:	2b02      	cmp	r3, #2
 8004ec4:	d108      	bne.n	8004ed8 <tcp_slowtmr+0xac>
 8004ec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ec8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004ecc:	2b05      	cmp	r3, #5
 8004ece:	d903      	bls.n	8004ed8 <tcp_slowtmr+0xac>
      ++pcb_remove;
 8004ed0:	7ffb      	ldrb	r3, [r7, #31]
 8004ed2:	3301      	adds	r3, #1
 8004ed4:	77fb      	strb	r3, [r7, #31]
 8004ed6:	e0a2      	b.n	800501e <tcp_slowtmr+0x1f2>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    }
    else if (pcb->nrtx >= TCP_MAXRTX) {
 8004ed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eda:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004ede:	2b0b      	cmp	r3, #11
 8004ee0:	d903      	bls.n	8004eea <tcp_slowtmr+0xbe>
      ++pcb_remove;
 8004ee2:	7ffb      	ldrb	r3, [r7, #31]
 8004ee4:	3301      	adds	r3, #1
 8004ee6:	77fb      	strb	r3, [r7, #31]
 8004ee8:	e099      	b.n	800501e <tcp_slowtmr+0x1f2>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 8004eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eec:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d032      	beq.n	8004f5a <tcp_slowtmr+0x12e>
        /* If snd_wnd is zero, use persist timer to send 1 byte probes
         * instead of using the standard retransmission mechanism. */
        u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff-1];
 8004ef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ef6:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 8004efa:	3b01      	subs	r3, #1
 8004efc:	4a6d      	ldr	r2, [pc, #436]	; (80050b4 <tcp_slowtmr+0x288>)
 8004efe:	5cd3      	ldrb	r3, [r2, r3]
 8004f00:	74fb      	strb	r3, [r7, #19]
        if (pcb->persist_cnt < backoff_cnt) {
 8004f02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f04:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 8004f08:	7cfa      	ldrb	r2, [r7, #19]
 8004f0a:	429a      	cmp	r2, r3
 8004f0c:	d907      	bls.n	8004f1e <tcp_slowtmr+0xf2>
          pcb->persist_cnt++;
 8004f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f10:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 8004f14:	3301      	adds	r3, #1
 8004f16:	b2da      	uxtb	r2, r3
 8004f18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f1a:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
        }
        if (pcb->persist_cnt >= backoff_cnt) {
 8004f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f20:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 8004f24:	7cfa      	ldrb	r2, [r7, #19]
 8004f26:	429a      	cmp	r2, r3
 8004f28:	d879      	bhi.n	800501e <tcp_slowtmr+0x1f2>
          if (tcp_zero_window_probe(pcb) == ERR_OK) {
 8004f2a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004f2c:	f003 fecd 	bl	8008cca <tcp_zero_window_probe>
 8004f30:	4603      	mov	r3, r0
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d173      	bne.n	800501e <tcp_slowtmr+0x1f2>
            pcb->persist_cnt = 0;
 8004f36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f38:	2200      	movs	r2, #0
 8004f3a:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
            if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8004f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f40:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 8004f44:	2b06      	cmp	r3, #6
 8004f46:	d86a      	bhi.n	800501e <tcp_slowtmr+0x1f2>
              pcb->persist_backoff++;
 8004f48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f4a:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 8004f4e:	3301      	adds	r3, #1
 8004f50:	b2da      	uxtb	r2, r3
 8004f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f54:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
 8004f58:	e061      	b.n	800501e <tcp_slowtmr+0x1f2>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if (pcb->rtime >= 0) {
 8004f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f5c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	db08      	blt.n	8004f76 <tcp_slowtmr+0x14a>
          ++pcb->rtime;
 8004f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f66:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8004f6a:	b29b      	uxth	r3, r3
 8004f6c:	3301      	adds	r3, #1
 8004f6e:	b29b      	uxth	r3, r3
 8004f70:	b21a      	sxth	r2, r3
 8004f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f74:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->unacked != NULL && pcb->rtime >= pcb->rto) {
 8004f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f78:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d04f      	beq.n	800501e <tcp_slowtmr+0x1f2>
 8004f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f80:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 8004f84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f86:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8004f8a:	429a      	cmp	r2, r3
 8004f8c:	db47      	blt.n	800501e <tcp_slowtmr+0x1f2>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));

          /* Double retransmission time-out unless we are trying to
           * connect to somebody (i.e., we are in SYN_SENT). */
          if (pcb->state != SYN_SENT) {
 8004f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f90:	7d1b      	ldrb	r3, [r3, #20]
 8004f92:	2b02      	cmp	r3, #2
 8004f94:	d018      	beq.n	8004fc8 <tcp_slowtmr+0x19c>
            u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff)-1);
 8004f96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f98:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004f9c:	2b0c      	cmp	r3, #12
 8004f9e:	bf28      	it	cs
 8004fa0:	230c      	movcs	r3, #12
 8004fa2:	75fb      	strb	r3, [r7, #23]
            pcb->rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8004fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fa6:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8004faa:	10db      	asrs	r3, r3, #3
 8004fac:	b21b      	sxth	r3, r3
 8004fae:	461a      	mov	r2, r3
 8004fb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fb2:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8004fb6:	4413      	add	r3, r2
 8004fb8:	7dfa      	ldrb	r2, [r7, #23]
 8004fba:	493f      	ldr	r1, [pc, #252]	; (80050b8 <tcp_slowtmr+0x28c>)
 8004fbc:	5c8a      	ldrb	r2, [r1, r2]
 8004fbe:	4093      	lsls	r3, r2
 8004fc0:	b21a      	sxth	r2, r3
 8004fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fc4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
          }

          /* Reset the retransmission timer. */
          pcb->rtime = 0;
 8004fc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fca:	2200      	movs	r2, #0
 8004fcc:	861a      	strh	r2, [r3, #48]	; 0x30

          /* Reduce congestion window and ssthresh. */
          eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8004fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fd0:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8004fd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fd6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8004fda:	4293      	cmp	r3, r2
 8004fdc:	bf28      	it	cs
 8004fde:	4613      	movcs	r3, r2
 8004fe0:	82bb      	strh	r3, [r7, #20]
          pcb->ssthresh = eff_wnd >> 1;
 8004fe2:	8abb      	ldrh	r3, [r7, #20]
 8004fe4:	085b      	lsrs	r3, r3, #1
 8004fe6:	b29a      	uxth	r2, r3
 8004fe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fea:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
          if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8004fee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ff0:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8004ff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ff6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004ff8:	005b      	lsls	r3, r3, #1
 8004ffa:	b29b      	uxth	r3, r3
 8004ffc:	429a      	cmp	r2, r3
 8004ffe:	d206      	bcs.n	800500e <tcp_slowtmr+0x1e2>
            pcb->ssthresh = (pcb->mss << 1);
 8005000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005002:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005004:	005b      	lsls	r3, r3, #1
 8005006:	b29a      	uxth	r2, r3
 8005008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800500a:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
          }
          pcb->cwnd = pcb->mss;
 800500e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005010:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 8005012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005014:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          /* The following needs to be called AFTER cwnd is set to one
             mss - STJ */
          tcp_rexmit_rto(pcb);
 8005018:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800501a:	f003 fd45 	bl	8008aa8 <tcp_rexmit_rto>
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 800501e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005020:	7d1b      	ldrb	r3, [r3, #20]
 8005022:	2b06      	cmp	r3, #6
 8005024:	d10f      	bne.n	8005046 <tcp_slowtmr+0x21a>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 8005026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005028:	7e9b      	ldrb	r3, [r3, #26]
 800502a:	f003 0310 	and.w	r3, r3, #16
 800502e:	2b00      	cmp	r3, #0
 8005030:	d009      	beq.n	8005046 <tcp_slowtmr+0x21a>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8005032:	4b18      	ldr	r3, [pc, #96]	; (8005094 <tcp_slowtmr+0x268>)
 8005034:	681a      	ldr	r2, [r3, #0]
 8005036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005038:	6a1b      	ldr	r3, [r3, #32]
 800503a:	1ad3      	subs	r3, r2, r3
 800503c:	2b28      	cmp	r3, #40	; 0x28
 800503e:	d902      	bls.n	8005046 <tcp_slowtmr+0x21a>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 8005040:	7ffb      	ldrb	r3, [r7, #31]
 8005042:	3301      	adds	r3, #1
 8005044:	77fb      	strb	r3, [r7, #31]
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8005046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005048:	7a1b      	ldrb	r3, [r3, #8]
 800504a:	f003 0308 	and.w	r3, r3, #8
 800504e:	2b00      	cmp	r3, #0
 8005050:	d05d      	beq.n	800510e <tcp_slowtmr+0x2e2>
       ((pcb->state == ESTABLISHED) ||
 8005052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005054:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8005056:	2b04      	cmp	r3, #4
 8005058:	d003      	beq.n	8005062 <tcp_slowtmr+0x236>
        (pcb->state == CLOSE_WAIT))) {
 800505a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800505c:	7d1b      	ldrb	r3, [r3, #20]
       ((pcb->state == ESTABLISHED) ||
 800505e:	2b07      	cmp	r3, #7
 8005060:	d155      	bne.n	800510e <tcp_slowtmr+0x2e2>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8005062:	4b0c      	ldr	r3, [pc, #48]	; (8005094 <tcp_slowtmr+0x268>)
 8005064:	681a      	ldr	r2, [r3, #0]
 8005066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005068:	6a1b      	ldr	r3, [r3, #32]
 800506a:	1ad2      	subs	r2, r2, r3
         (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL)
 800506c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800506e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005072:	f503 2324 	add.w	r3, r3, #671744	; 0xa4000
 8005076:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 800507a:	4910      	ldr	r1, [pc, #64]	; (80050bc <tcp_slowtmr+0x290>)
 800507c:	fba1 1303 	umull	r1, r3, r1, r3
 8005080:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8005082:	429a      	cmp	r2, r3
 8005084:	d91c      	bls.n	80050c0 <tcp_slowtmr+0x294>
      {
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print(TCP_DEBUG, &pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 8005086:	7ffb      	ldrb	r3, [r7, #31]
 8005088:	3301      	adds	r3, #1
 800508a:	77fb      	strb	r3, [r7, #31]
        ++pcb_reset;
 800508c:	7fbb      	ldrb	r3, [r7, #30]
 800508e:	3301      	adds	r3, #1
 8005090:	77bb      	strb	r3, [r7, #30]
 8005092:	e03c      	b.n	800510e <tcp_slowtmr+0x2e2>
 8005094:	200068a4 	.word	0x200068a4
 8005098:	200000ce 	.word	0x200000ce
 800509c:	200068a0 	.word	0x200068a0
 80050a0:	0800f3f4 	.word	0x0800f3f4
 80050a4:	0800f5a4 	.word	0x0800f5a4
 80050a8:	0800f430 	.word	0x0800f430
 80050ac:	0800f5d0 	.word	0x0800f5d0
 80050b0:	0800f5fc 	.word	0x0800f5fc
 80050b4:	08010d28 	.word	0x08010d28
 80050b8:	08010d18 	.word	0x08010d18
 80050bc:	10624dd3 	.word	0x10624dd3
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 80050c0:	4b97      	ldr	r3, [pc, #604]	; (8005320 <tcp_slowtmr+0x4f4>)
 80050c2:	681a      	ldr	r2, [r3, #0]
 80050c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050c6:	6a1b      	ldr	r3, [r3, #32]
 80050c8:	1ad2      	subs	r2, r2, r3
                (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 80050ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050cc:	f8d3 1090 	ldr.w	r1, [r3, #144]	; 0x90
 80050d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050d2:	f893 3096 	ldrb.w	r3, [r3, #150]	; 0x96
 80050d6:	4618      	mov	r0, r3
 80050d8:	4b92      	ldr	r3, [pc, #584]	; (8005324 <tcp_slowtmr+0x4f8>)
 80050da:	fb03 f300 	mul.w	r3, r3, r0
 80050de:	440b      	add	r3, r1
                / TCP_SLOW_INTERVAL)
 80050e0:	4991      	ldr	r1, [pc, #580]	; (8005328 <tcp_slowtmr+0x4fc>)
 80050e2:	fba1 1303 	umull	r1, r3, r1, r3
 80050e6:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 80050e8:	429a      	cmp	r2, r3
 80050ea:	d910      	bls.n	800510e <tcp_slowtmr+0x2e2>
      {
        err = tcp_keepalive(pcb);
 80050ec:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80050ee:	f003 fdaf 	bl	8008c50 <tcp_keepalive>
 80050f2:	4603      	mov	r3, r0
 80050f4:	777b      	strb	r3, [r7, #29]
        if (err == ERR_OK) {
 80050f6:	f997 301d 	ldrsb.w	r3, [r7, #29]
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d107      	bne.n	800510e <tcp_slowtmr+0x2e2>
          pcb->keep_cnt_sent++;
 80050fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005100:	f893 3096 	ldrb.w	r3, [r3, #150]	; 0x96
 8005104:	3301      	adds	r3, #1
 8005106:	b2da      	uxtb	r2, r3
 8005108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800510a:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 800510e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005110:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005112:	2b00      	cmp	r3, #0
 8005114:	d016      	beq.n	8005144 <tcp_slowtmr+0x318>
        (u32_t)tcp_ticks - pcb->tmr >= pcb->rto * TCP_OOSEQ_TIMEOUT) {
 8005116:	4b82      	ldr	r3, [pc, #520]	; (8005320 <tcp_slowtmr+0x4f4>)
 8005118:	681a      	ldr	r2, [r3, #0]
 800511a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800511c:	6a1b      	ldr	r3, [r3, #32]
 800511e:	1ad2      	subs	r2, r2, r3
 8005120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005122:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8005126:	4619      	mov	r1, r3
 8005128:	460b      	mov	r3, r1
 800512a:	005b      	lsls	r3, r3, #1
 800512c:	440b      	add	r3, r1
 800512e:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 8005130:	429a      	cmp	r2, r3
 8005132:	d307      	bcc.n	8005144 <tcp_slowtmr+0x318>
      tcp_segs_free(pcb->ooseq);
 8005134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005136:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005138:	4618      	mov	r0, r3
 800513a:	f000 fa06 	bl	800554a <tcp_segs_free>
      pcb->ooseq = NULL;
 800513e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005140:	2200      	movs	r2, #0
 8005142:	671a      	str	r2, [r3, #112]	; 0x70
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 8005144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005146:	7d1b      	ldrb	r3, [r3, #20]
 8005148:	2b03      	cmp	r3, #3
 800514a:	d109      	bne.n	8005160 <tcp_slowtmr+0x334>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800514c:	4b74      	ldr	r3, [pc, #464]	; (8005320 <tcp_slowtmr+0x4f4>)
 800514e:	681a      	ldr	r2, [r3, #0]
 8005150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005152:	6a1b      	ldr	r3, [r3, #32]
 8005154:	1ad3      	subs	r3, r2, r3
 8005156:	2b28      	cmp	r3, #40	; 0x28
 8005158:	d902      	bls.n	8005160 <tcp_slowtmr+0x334>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 800515a:	7ffb      	ldrb	r3, [r7, #31]
 800515c:	3301      	adds	r3, #1
 800515e:	77fb      	strb	r3, [r7, #31]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 8005160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005162:	7d1b      	ldrb	r3, [r3, #20]
 8005164:	2b09      	cmp	r3, #9
 8005166:	d109      	bne.n	800517c <tcp_slowtmr+0x350>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8005168:	4b6d      	ldr	r3, [pc, #436]	; (8005320 <tcp_slowtmr+0x4f4>)
 800516a:	681a      	ldr	r2, [r3, #0]
 800516c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800516e:	6a1b      	ldr	r3, [r3, #32]
 8005170:	1ad3      	subs	r3, r2, r3
 8005172:	2bf0      	cmp	r3, #240	; 0xf0
 8005174:	d902      	bls.n	800517c <tcp_slowtmr+0x350>
        ++pcb_remove;
 8005176:	7ffb      	ldrb	r3, [r7, #31]
 8005178:	3301      	adds	r3, #1
 800517a:	77fb      	strb	r3, [r7, #31]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800517c:	7ffb      	ldrb	r3, [r7, #31]
 800517e:	2b00      	cmp	r3, #0
 8005180:	d05d      	beq.n	800523e <tcp_slowtmr+0x412>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 8005182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005184:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005188:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 800518a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800518c:	f000 fb86 	bl	800589c <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 8005190:	6a3b      	ldr	r3, [r7, #32]
 8005192:	2b00      	cmp	r3, #0
 8005194:	d010      	beq.n	80051b8 <tcp_slowtmr+0x38c>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8005196:	4b65      	ldr	r3, [pc, #404]	; (800532c <tcp_slowtmr+0x500>)
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800519c:	429a      	cmp	r2, r3
 800519e:	d106      	bne.n	80051ae <tcp_slowtmr+0x382>
 80051a0:	4b63      	ldr	r3, [pc, #396]	; (8005330 <tcp_slowtmr+0x504>)
 80051a2:	f240 4289 	movw	r2, #1161	; 0x489
 80051a6:	4963      	ldr	r1, [pc, #396]	; (8005334 <tcp_slowtmr+0x508>)
 80051a8:	4863      	ldr	r0, [pc, #396]	; (8005338 <tcp_slowtmr+0x50c>)
 80051aa:	f008 fc59 	bl	800da60 <iprintf>
        prev->next = pcb->next;
 80051ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051b0:	68da      	ldr	r2, [r3, #12]
 80051b2:	6a3b      	ldr	r3, [r7, #32]
 80051b4:	60da      	str	r2, [r3, #12]
 80051b6:	e00f      	b.n	80051d8 <tcp_slowtmr+0x3ac>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 80051b8:	4b5c      	ldr	r3, [pc, #368]	; (800532c <tcp_slowtmr+0x500>)
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051be:	429a      	cmp	r2, r3
 80051c0:	d006      	beq.n	80051d0 <tcp_slowtmr+0x3a4>
 80051c2:	4b5b      	ldr	r3, [pc, #364]	; (8005330 <tcp_slowtmr+0x504>)
 80051c4:	f240 428d 	movw	r2, #1165	; 0x48d
 80051c8:	495c      	ldr	r1, [pc, #368]	; (800533c <tcp_slowtmr+0x510>)
 80051ca:	485b      	ldr	r0, [pc, #364]	; (8005338 <tcp_slowtmr+0x50c>)
 80051cc:	f008 fc48 	bl	800da60 <iprintf>
        tcp_active_pcbs = pcb->next;
 80051d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051d2:	68db      	ldr	r3, [r3, #12]
 80051d4:	4a55      	ldr	r2, [pc, #340]	; (800532c <tcp_slowtmr+0x500>)
 80051d6:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 80051d8:	7fbb      	ldrb	r3, [r7, #30]
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d010      	beq.n	8005200 <tcp_slowtmr+0x3d4>
        tcp_rst(pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 80051de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051e0:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80051e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051e4:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80051e6:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 80051e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051ea:	1d1d      	adds	r5, r3, #4
 80051ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051ee:	8adb      	ldrh	r3, [r3, #22]
 80051f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051f2:	8b12      	ldrh	r2, [r2, #24]
 80051f4:	9201      	str	r2, [sp, #4]
 80051f6:	9300      	str	r3, [sp, #0]
 80051f8:	462b      	mov	r3, r5
 80051fa:	4622      	mov	r2, r4
 80051fc:	f003 fbde 	bl	80089bc <tcp_rst>
                 pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 8005200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005202:	691b      	ldr	r3, [r3, #16]
 8005204:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 8005206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005208:	7d1b      	ldrb	r3, [r3, #20]
 800520a:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800520c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800520e:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 8005210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005212:	68db      	ldr	r3, [r3, #12]
 8005214:	627b      	str	r3, [r7, #36]	; 0x24
      memp_free(MEMP_TCP_PCB, pcb2);
 8005216:	6839      	ldr	r1, [r7, #0]
 8005218:	2001      	movs	r0, #1
 800521a:	f7fe fb0f 	bl	800383c <memp_free>

      tcp_active_pcbs_changed = 0;
 800521e:	4b48      	ldr	r3, [pc, #288]	; (8005340 <tcp_slowtmr+0x514>)
 8005220:	2200      	movs	r2, #0
 8005222:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	2b00      	cmp	r3, #0
 8005228:	d004      	beq.n	8005234 <tcp_slowtmr+0x408>
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	f06f 010c 	mvn.w	r1, #12
 8005230:	68b8      	ldr	r0, [r7, #8]
 8005232:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 8005234:	4b42      	ldr	r3, [pc, #264]	; (8005340 <tcp_slowtmr+0x514>)
 8005236:	781b      	ldrb	r3, [r3, #0]
 8005238:	2b00      	cmp	r3, #0
 800523a:	d035      	beq.n	80052a8 <tcp_slowtmr+0x47c>
        goto tcp_slowtmr_start;
 800523c:	e606      	b.n	8004e4c <tcp_slowtmr+0x20>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 800523e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005240:	623b      	str	r3, [r7, #32]
      pcb = pcb->next;
 8005242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005244:	68db      	ldr	r3, [r3, #12]
 8005246:	627b      	str	r3, [r7, #36]	; 0x24

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 8005248:	6a3b      	ldr	r3, [r7, #32]
 800524a:	7edb      	ldrb	r3, [r3, #27]
 800524c:	3301      	adds	r3, #1
 800524e:	b2da      	uxtb	r2, r3
 8005250:	6a3b      	ldr	r3, [r7, #32]
 8005252:	76da      	strb	r2, [r3, #27]
      if (prev->polltmr >= prev->pollinterval) {
 8005254:	6a3b      	ldr	r3, [r7, #32]
 8005256:	7eda      	ldrb	r2, [r3, #27]
 8005258:	6a3b      	ldr	r3, [r7, #32]
 800525a:	7f1b      	ldrb	r3, [r3, #28]
 800525c:	429a      	cmp	r2, r3
 800525e:	d323      	bcc.n	80052a8 <tcp_slowtmr+0x47c>
        prev->polltmr = 0;
 8005260:	6a3b      	ldr	r3, [r7, #32]
 8005262:	2200      	movs	r2, #0
 8005264:	76da      	strb	r2, [r3, #27]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 8005266:	4b36      	ldr	r3, [pc, #216]	; (8005340 <tcp_slowtmr+0x514>)
 8005268:	2200      	movs	r2, #0
 800526a:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800526c:	6a3b      	ldr	r3, [r7, #32]
 800526e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005272:	2b00      	cmp	r3, #0
 8005274:	d00a      	beq.n	800528c <tcp_slowtmr+0x460>
 8005276:	6a3b      	ldr	r3, [r7, #32]
 8005278:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800527c:	6a3a      	ldr	r2, [r7, #32]
 800527e:	6912      	ldr	r2, [r2, #16]
 8005280:	6a39      	ldr	r1, [r7, #32]
 8005282:	4610      	mov	r0, r2
 8005284:	4798      	blx	r3
 8005286:	4603      	mov	r3, r0
 8005288:	777b      	strb	r3, [r7, #29]
 800528a:	e001      	b.n	8005290 <tcp_slowtmr+0x464>
 800528c:	2300      	movs	r3, #0
 800528e:	777b      	strb	r3, [r7, #29]
        if (tcp_active_pcbs_changed) {
 8005290:	4b2b      	ldr	r3, [pc, #172]	; (8005340 <tcp_slowtmr+0x514>)
 8005292:	781b      	ldrb	r3, [r3, #0]
 8005294:	2b00      	cmp	r3, #0
 8005296:	d000      	beq.n	800529a <tcp_slowtmr+0x46e>
          goto tcp_slowtmr_start;
 8005298:	e5d8      	b.n	8004e4c <tcp_slowtmr+0x20>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800529a:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d102      	bne.n	80052a8 <tcp_slowtmr+0x47c>
          tcp_output(prev);
 80052a2:	6a38      	ldr	r0, [r7, #32]
 80052a4:	f003 f906 	bl	80084b4 <tcp_output>
  while (pcb != NULL) {
 80052a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	f47f add4 	bne.w	8004e58 <tcp_slowtmr+0x2c>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 80052b0:	2300      	movs	r3, #0
 80052b2:	623b      	str	r3, [r7, #32]
  pcb = tcp_tw_pcbs;
 80052b4:	4b23      	ldr	r3, [pc, #140]	; (8005344 <tcp_slowtmr+0x518>)
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	627b      	str	r3, [r7, #36]	; 0x24
  while (pcb != NULL) {
 80052ba:	e068      	b.n	800538e <tcp_slowtmr+0x562>
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 80052bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052be:	7d1b      	ldrb	r3, [r3, #20]
 80052c0:	2b0a      	cmp	r3, #10
 80052c2:	d006      	beq.n	80052d2 <tcp_slowtmr+0x4a6>
 80052c4:	4b1a      	ldr	r3, [pc, #104]	; (8005330 <tcp_slowtmr+0x504>)
 80052c6:	f240 42bd 	movw	r2, #1213	; 0x4bd
 80052ca:	491f      	ldr	r1, [pc, #124]	; (8005348 <tcp_slowtmr+0x51c>)
 80052cc:	481a      	ldr	r0, [pc, #104]	; (8005338 <tcp_slowtmr+0x50c>)
 80052ce:	f008 fbc7 	bl	800da60 <iprintf>
    pcb_remove = 0;
 80052d2:	2300      	movs	r3, #0
 80052d4:	77fb      	strb	r3, [r7, #31]

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 80052d6:	4b12      	ldr	r3, [pc, #72]	; (8005320 <tcp_slowtmr+0x4f4>)
 80052d8:	681a      	ldr	r2, [r3, #0]
 80052da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052dc:	6a1b      	ldr	r3, [r3, #32]
 80052de:	1ad3      	subs	r3, r2, r3
 80052e0:	2bf0      	cmp	r3, #240	; 0xf0
 80052e2:	d902      	bls.n	80052ea <tcp_slowtmr+0x4be>
      ++pcb_remove;
 80052e4:	7ffb      	ldrb	r3, [r7, #31]
 80052e6:	3301      	adds	r3, #1
 80052e8:	77fb      	strb	r3, [r7, #31]
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 80052ea:	7ffb      	ldrb	r3, [r7, #31]
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d049      	beq.n	8005384 <tcp_slowtmr+0x558>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 80052f0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80052f2:	f000 fad3 	bl	800589c <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 80052f6:	6a3b      	ldr	r3, [r7, #32]
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d029      	beq.n	8005350 <tcp_slowtmr+0x524>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 80052fc:	4b11      	ldr	r3, [pc, #68]	; (8005344 <tcp_slowtmr+0x518>)
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005302:	429a      	cmp	r2, r3
 8005304:	d106      	bne.n	8005314 <tcp_slowtmr+0x4e8>
 8005306:	4b0a      	ldr	r3, [pc, #40]	; (8005330 <tcp_slowtmr+0x504>)
 8005308:	f240 42cb 	movw	r2, #1227	; 0x4cb
 800530c:	490f      	ldr	r1, [pc, #60]	; (800534c <tcp_slowtmr+0x520>)
 800530e:	480a      	ldr	r0, [pc, #40]	; (8005338 <tcp_slowtmr+0x50c>)
 8005310:	f008 fba6 	bl	800da60 <iprintf>
        prev->next = pcb->next;
 8005314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005316:	68da      	ldr	r2, [r3, #12]
 8005318:	6a3b      	ldr	r3, [r7, #32]
 800531a:	60da      	str	r2, [r3, #12]
 800531c:	e028      	b.n	8005370 <tcp_slowtmr+0x544>
 800531e:	bf00      	nop
 8005320:	200068a4 	.word	0x200068a4
 8005324:	000124f8 	.word	0x000124f8
 8005328:	10624dd3 	.word	0x10624dd3
 800532c:	200068a0 	.word	0x200068a0
 8005330:	0800f3f4 	.word	0x0800f3f4
 8005334:	0800f62c 	.word	0x0800f62c
 8005338:	0800f430 	.word	0x0800f430
 800533c:	0800f658 	.word	0x0800f658
 8005340:	2000689c 	.word	0x2000689c
 8005344:	200068b0 	.word	0x200068b0
 8005348:	0800f684 	.word	0x0800f684
 800534c:	0800f6b4 	.word	0x0800f6b4
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 8005350:	4b13      	ldr	r3, [pc, #76]	; (80053a0 <tcp_slowtmr+0x574>)
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005356:	429a      	cmp	r2, r3
 8005358:	d006      	beq.n	8005368 <tcp_slowtmr+0x53c>
 800535a:	4b12      	ldr	r3, [pc, #72]	; (80053a4 <tcp_slowtmr+0x578>)
 800535c:	f240 42cf 	movw	r2, #1231	; 0x4cf
 8005360:	4911      	ldr	r1, [pc, #68]	; (80053a8 <tcp_slowtmr+0x57c>)
 8005362:	4812      	ldr	r0, [pc, #72]	; (80053ac <tcp_slowtmr+0x580>)
 8005364:	f008 fb7c 	bl	800da60 <iprintf>
        tcp_tw_pcbs = pcb->next;
 8005368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800536a:	68db      	ldr	r3, [r3, #12]
 800536c:	4a0c      	ldr	r2, [pc, #48]	; (80053a0 <tcp_slowtmr+0x574>)
 800536e:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 8005370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005372:	61bb      	str	r3, [r7, #24]
      pcb = pcb->next;
 8005374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005376:	68db      	ldr	r3, [r3, #12]
 8005378:	627b      	str	r3, [r7, #36]	; 0x24
      memp_free(MEMP_TCP_PCB, pcb2);
 800537a:	69b9      	ldr	r1, [r7, #24]
 800537c:	2001      	movs	r0, #1
 800537e:	f7fe fa5d 	bl	800383c <memp_free>
 8005382:	e004      	b.n	800538e <tcp_slowtmr+0x562>
    } else {
      prev = pcb;
 8005384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005386:	623b      	str	r3, [r7, #32]
      pcb = pcb->next;
 8005388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800538a:	68db      	ldr	r3, [r3, #12]
 800538c:	627b      	str	r3, [r7, #36]	; 0x24
  while (pcb != NULL) {
 800538e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005390:	2b00      	cmp	r3, #0
 8005392:	d193      	bne.n	80052bc <tcp_slowtmr+0x490>
    }
  }
}
 8005394:	bf00      	nop
 8005396:	bf00      	nop
 8005398:	3728      	adds	r7, #40	; 0x28
 800539a:	46bd      	mov	sp, r7
 800539c:	bdb0      	pop	{r4, r5, r7, pc}
 800539e:	bf00      	nop
 80053a0:	200068b0 	.word	0x200068b0
 80053a4:	0800f3f4 	.word	0x0800f3f4
 80053a8:	0800f6dc 	.word	0x0800f6dc
 80053ac:	0800f430 	.word	0x0800f430

080053b0 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 80053b0:	b580      	push	{r7, lr}
 80053b2:	b082      	sub	sp, #8
 80053b4:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 80053b6:	4b2d      	ldr	r3, [pc, #180]	; (800546c <tcp_fasttmr+0xbc>)
 80053b8:	781b      	ldrb	r3, [r3, #0]
 80053ba:	3301      	adds	r3, #1
 80053bc:	b2da      	uxtb	r2, r3
 80053be:	4b2b      	ldr	r3, [pc, #172]	; (800546c <tcp_fasttmr+0xbc>)
 80053c0:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 80053c2:	4b2b      	ldr	r3, [pc, #172]	; (8005470 <tcp_fasttmr+0xc0>)
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 80053c8:	e048      	b.n	800545c <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	7f5a      	ldrb	r2, [r3, #29]
 80053ce:	4b27      	ldr	r3, [pc, #156]	; (800546c <tcp_fasttmr+0xbc>)
 80053d0:	781b      	ldrb	r3, [r3, #0]
 80053d2:	429a      	cmp	r2, r3
 80053d4:	d03f      	beq.n	8005456 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 80053d6:	4b25      	ldr	r3, [pc, #148]	; (800546c <tcp_fasttmr+0xbc>)
 80053d8:	781a      	ldrb	r2, [r3, #0]
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	775a      	strb	r2, [r3, #29]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	7e9b      	ldrb	r3, [r3, #26]
 80053e2:	f003 0301 	and.w	r3, r3, #1
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d010      	beq.n	800540c <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	7e9b      	ldrb	r3, [r3, #26]
 80053ee:	f043 0302 	orr.w	r3, r3, #2
 80053f2:	b2da      	uxtb	r2, r3
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	769a      	strb	r2, [r3, #26]
        tcp_output(pcb);
 80053f8:	6878      	ldr	r0, [r7, #4]
 80053fa:	f003 f85b 	bl	80084b4 <tcp_output>
        pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	7e9b      	ldrb	r3, [r3, #26]
 8005402:	f023 0303 	bic.w	r3, r3, #3
 8005406:	b2da      	uxtb	r2, r3
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	769a      	strb	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	7e9b      	ldrb	r3, [r3, #26]
 8005410:	f003 0308 	and.w	r3, r3, #8
 8005414:	2b00      	cmp	r3, #0
 8005416:	d009      	beq.n	800542c <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        pcb->flags &= ~(TF_CLOSEPEND);
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	7e9b      	ldrb	r3, [r3, #26]
 800541c:	f023 0308 	bic.w	r3, r3, #8
 8005420:	b2da      	uxtb	r2, r3
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	769a      	strb	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 8005426:	6878      	ldr	r0, [r7, #4]
 8005428:	f7ff fb18 	bl	8004a5c <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	68db      	ldr	r3, [r3, #12]
 8005430:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005436:	2b00      	cmp	r3, #0
 8005438:	d00a      	beq.n	8005450 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800543a:	4b0e      	ldr	r3, [pc, #56]	; (8005474 <tcp_fasttmr+0xc4>)
 800543c:	2200      	movs	r2, #0
 800543e:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 8005440:	6878      	ldr	r0, [r7, #4]
 8005442:	f000 f819 	bl	8005478 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 8005446:	4b0b      	ldr	r3, [pc, #44]	; (8005474 <tcp_fasttmr+0xc4>)
 8005448:	781b      	ldrb	r3, [r3, #0]
 800544a:	2b00      	cmp	r3, #0
 800544c:	d000      	beq.n	8005450 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800544e:	e7b8      	b.n	80053c2 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 8005450:	683b      	ldr	r3, [r7, #0]
 8005452:	607b      	str	r3, [r7, #4]
 8005454:	e002      	b.n	800545c <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	68db      	ldr	r3, [r3, #12]
 800545a:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	2b00      	cmp	r3, #0
 8005460:	d1b3      	bne.n	80053ca <tcp_fasttmr+0x1a>
    }
  }
}
 8005462:	bf00      	nop
 8005464:	bf00      	nop
 8005466:	3708      	adds	r7, #8
 8005468:	46bd      	mov	sp, r7
 800546a:	bd80      	pop	{r7, pc}
 800546c:	200000ce 	.word	0x200000ce
 8005470:	200068a0 	.word	0x200068a0
 8005474:	2000689c 	.word	0x2000689c

08005478 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 8005478:	b590      	push	{r4, r7, lr}
 800547a:	b085      	sub	sp, #20
 800547c:	af00      	add	r7, sp, #0
 800547e:	6078      	str	r0, [r7, #4]
  struct pbuf *rest;
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005484:	7b5b      	ldrb	r3, [r3, #13]
 8005486:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800548c:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	2200      	movs	r2, #0
 8005492:	675a      	str	r2, [r3, #116]	; 0x74
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800549a:	2b00      	cmp	r3, #0
 800549c:	d00b      	beq.n	80054b6 <tcp_process_refused_data+0x3e>
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	6918      	ldr	r0, [r3, #16]
 80054a8:	2300      	movs	r3, #0
 80054aa:	68ba      	ldr	r2, [r7, #8]
 80054ac:	6879      	ldr	r1, [r7, #4]
 80054ae:	47a0      	blx	r4
 80054b0:	4603      	mov	r3, r0
 80054b2:	73fb      	strb	r3, [r7, #15]
 80054b4:	e007      	b.n	80054c6 <tcp_process_refused_data+0x4e>
 80054b6:	2300      	movs	r3, #0
 80054b8:	68ba      	ldr	r2, [r7, #8]
 80054ba:	6879      	ldr	r1, [r7, #4]
 80054bc:	2000      	movs	r0, #0
 80054be:	f000 f88d 	bl	80055dc <tcp_recv_null>
 80054c2:	4603      	mov	r3, r0
 80054c4:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 80054c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d12a      	bne.n	8005524 <tcp_process_refused_data+0xac>
      /* did refused_data include a FIN? */
      if (refused_flags & PBUF_FLAG_TCP_FIN
 80054ce:	7bbb      	ldrb	r3, [r7, #14]
 80054d0:	f003 0320 	and.w	r3, r3, #32
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d033      	beq.n	8005540 <tcp_process_refused_data+0xc8>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80054dc:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 80054e0:	d005      	beq.n	80054ee <tcp_process_refused_data+0x76>
          pcb->rcv_wnd++;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80054e6:	3301      	adds	r3, #1
 80054e8:	b29a      	uxth	r2, r3
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d00b      	beq.n	8005510 <tcp_process_refused_data+0x98>
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	6918      	ldr	r0, [r3, #16]
 8005502:	2300      	movs	r3, #0
 8005504:	2200      	movs	r2, #0
 8005506:	6879      	ldr	r1, [r7, #4]
 8005508:	47a0      	blx	r4
 800550a:	4603      	mov	r3, r0
 800550c:	73fb      	strb	r3, [r7, #15]
 800550e:	e001      	b.n	8005514 <tcp_process_refused_data+0x9c>
 8005510:	2300      	movs	r3, #0
 8005512:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 8005514:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005518:	f113 0f0d 	cmn.w	r3, #13
 800551c:	d110      	bne.n	8005540 <tcp_process_refused_data+0xc8>
          return ERR_ABRT;
 800551e:	f06f 030c 	mvn.w	r3, #12
 8005522:	e00e      	b.n	8005542 <tcp_process_refused_data+0xca>
        }
      }
    } else if (err == ERR_ABRT) {
 8005524:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005528:	f113 0f0d 	cmn.w	r3, #13
 800552c:	d102      	bne.n	8005534 <tcp_process_refused_data+0xbc>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800552e:	f06f 030c 	mvn.w	r3, #12
 8005532:	e006      	b.n	8005542 <tcp_process_refused_data+0xca>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	68ba      	ldr	r2, [r7, #8]
 8005538:	675a      	str	r2, [r3, #116]	; 0x74
      return ERR_INPROGRESS;
 800553a:	f06f 0304 	mvn.w	r3, #4
 800553e:	e000      	b.n	8005542 <tcp_process_refused_data+0xca>
    }
  }
  return ERR_OK;
 8005540:	2300      	movs	r3, #0
}
 8005542:	4618      	mov	r0, r3
 8005544:	3714      	adds	r7, #20
 8005546:	46bd      	mov	sp, r7
 8005548:	bd90      	pop	{r4, r7, pc}

0800554a <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800554a:	b580      	push	{r7, lr}
 800554c:	b084      	sub	sp, #16
 800554e:	af00      	add	r7, sp, #0
 8005550:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 8005552:	e007      	b.n	8005564 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800555a:	6878      	ldr	r0, [r7, #4]
 800555c:	f000 f80a 	bl	8005574 <tcp_seg_free>
    seg = next;
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	2b00      	cmp	r3, #0
 8005568:	d1f4      	bne.n	8005554 <tcp_segs_free+0xa>
  }
}
 800556a:	bf00      	nop
 800556c:	bf00      	nop
 800556e:	3710      	adds	r7, #16
 8005570:	46bd      	mov	sp, r7
 8005572:	bd80      	pop	{r7, pc}

08005574 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 8005574:	b580      	push	{r7, lr}
 8005576:	b082      	sub	sp, #8
 8005578:	af00      	add	r7, sp, #0
 800557a:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	2b00      	cmp	r3, #0
 8005580:	d00c      	beq.n	800559c <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	685b      	ldr	r3, [r3, #4]
 8005586:	2b00      	cmp	r3, #0
 8005588:	d004      	beq.n	8005594 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	685b      	ldr	r3, [r3, #4]
 800558e:	4618      	mov	r0, r3
 8005590:	f7fe fe92 	bl	80042b8 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 8005594:	6879      	ldr	r1, [r7, #4]
 8005596:	2003      	movs	r0, #3
 8005598:	f7fe f950 	bl	800383c <memp_free>
  }
}
 800559c:	bf00      	nop
 800559e:	3708      	adds	r7, #8
 80055a0:	46bd      	mov	sp, r7
 80055a2:	bd80      	pop	{r7, pc}

080055a4 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 80055a4:	b580      	push	{r7, lr}
 80055a6:	b084      	sub	sp, #16
 80055a8:	af00      	add	r7, sp, #0
 80055aa:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 80055ac:	2003      	movs	r0, #3
 80055ae:	f7fe f8f9 	bl	80037a4 <memp_malloc>
 80055b2:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d101      	bne.n	80055be <tcp_seg_copy+0x1a>
    return NULL;
 80055ba:	2300      	movs	r3, #0
 80055bc:	e00a      	b.n	80055d4 <tcp_seg_copy+0x30>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 80055be:	2210      	movs	r2, #16
 80055c0:	6879      	ldr	r1, [r7, #4]
 80055c2:	68f8      	ldr	r0, [r7, #12]
 80055c4:	f008 fa36 	bl	800da34 <memcpy>
  pbuf_ref(cseg->p);
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	685b      	ldr	r3, [r3, #4]
 80055cc:	4618      	mov	r0, r3
 80055ce:	f7fe ff1d 	bl	800440c <pbuf_ref>
  return cseg;
 80055d2:	68fb      	ldr	r3, [r7, #12]
}
 80055d4:	4618      	mov	r0, r3
 80055d6:	3710      	adds	r7, #16
 80055d8:	46bd      	mov	sp, r7
 80055da:	bd80      	pop	{r7, pc}

080055dc <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 80055dc:	b580      	push	{r7, lr}
 80055de:	b084      	sub	sp, #16
 80055e0:	af00      	add	r7, sp, #0
 80055e2:	60f8      	str	r0, [r7, #12]
 80055e4:	60b9      	str	r1, [r7, #8]
 80055e6:	607a      	str	r2, [r7, #4]
 80055e8:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);
  if (p != NULL) {
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d009      	beq.n	8005604 <tcp_recv_null+0x28>
    tcp_recved(pcb, p->tot_len);
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	891b      	ldrh	r3, [r3, #8]
 80055f4:	4619      	mov	r1, r3
 80055f6:	68b8      	ldr	r0, [r7, #8]
 80055f8:	f7ff fbbe 	bl	8004d78 <tcp_recved>
    pbuf_free(p);
 80055fc:	6878      	ldr	r0, [r7, #4]
 80055fe:	f7fe fe5b 	bl	80042b8 <pbuf_free>
 8005602:	e008      	b.n	8005616 <tcp_recv_null+0x3a>
  } else if (err == ERR_OK) {
 8005604:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005608:	2b00      	cmp	r3, #0
 800560a:	d104      	bne.n	8005616 <tcp_recv_null+0x3a>
    return tcp_close(pcb);
 800560c:	68b8      	ldr	r0, [r7, #8]
 800560e:	f7ff fa8f 	bl	8004b30 <tcp_close>
 8005612:	4603      	mov	r3, r0
 8005614:	e000      	b.n	8005618 <tcp_recv_null+0x3c>
  }
  return ERR_OK;
 8005616:	2300      	movs	r3, #0
}
 8005618:	4618      	mov	r0, r3
 800561a:	3710      	adds	r7, #16
 800561c:	46bd      	mov	sp, r7
 800561e:	bd80      	pop	{r7, pc}

08005620 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8005620:	b580      	push	{r7, lr}
 8005622:	b086      	sub	sp, #24
 8005624:	af00      	add	r7, sp, #0
 8005626:	4603      	mov	r3, r0
 8005628:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800562a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800562e:	2b00      	cmp	r3, #0
 8005630:	db01      	blt.n	8005636 <tcp_kill_prio+0x16>
 8005632:	79fb      	ldrb	r3, [r7, #7]
 8005634:	e000      	b.n	8005638 <tcp_kill_prio+0x18>
 8005636:	237f      	movs	r3, #127	; 0x7f
 8005638:	72fb      	strb	r3, [r7, #11]

  /* We kill the oldest active connection that has lower priority than prio. */
  inactivity = 0;
 800563a:	2300      	movs	r3, #0
 800563c:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800563e:	2300      	movs	r3, #0
 8005640:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8005642:	4b16      	ldr	r3, [pc, #88]	; (800569c <tcp_kill_prio+0x7c>)
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	617b      	str	r3, [r7, #20]
 8005648:	e01a      	b.n	8005680 <tcp_kill_prio+0x60>
    if (pcb->prio <= mprio &&
 800564a:	697b      	ldr	r3, [r7, #20]
 800564c:	7d5b      	ldrb	r3, [r3, #21]
 800564e:	7afa      	ldrb	r2, [r7, #11]
 8005650:	429a      	cmp	r2, r3
 8005652:	d312      	bcc.n	800567a <tcp_kill_prio+0x5a>
       (u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8005654:	4b12      	ldr	r3, [pc, #72]	; (80056a0 <tcp_kill_prio+0x80>)
 8005656:	681a      	ldr	r2, [r3, #0]
 8005658:	697b      	ldr	r3, [r7, #20]
 800565a:	6a1b      	ldr	r3, [r3, #32]
 800565c:	1ad3      	subs	r3, r2, r3
    if (pcb->prio <= mprio &&
 800565e:	68fa      	ldr	r2, [r7, #12]
 8005660:	429a      	cmp	r2, r3
 8005662:	d80a      	bhi.n	800567a <tcp_kill_prio+0x5a>
      inactivity = tcp_ticks - pcb->tmr;
 8005664:	4b0e      	ldr	r3, [pc, #56]	; (80056a0 <tcp_kill_prio+0x80>)
 8005666:	681a      	ldr	r2, [r3, #0]
 8005668:	697b      	ldr	r3, [r7, #20]
 800566a:	6a1b      	ldr	r3, [r3, #32]
 800566c:	1ad3      	subs	r3, r2, r3
 800566e:	60fb      	str	r3, [r7, #12]
      inactive = pcb;
 8005670:	697b      	ldr	r3, [r7, #20]
 8005672:	613b      	str	r3, [r7, #16]
      mprio = pcb->prio;
 8005674:	697b      	ldr	r3, [r7, #20]
 8005676:	7d5b      	ldrb	r3, [r3, #21]
 8005678:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800567a:	697b      	ldr	r3, [r7, #20]
 800567c:	68db      	ldr	r3, [r3, #12]
 800567e:	617b      	str	r3, [r7, #20]
 8005680:	697b      	ldr	r3, [r7, #20]
 8005682:	2b00      	cmp	r3, #0
 8005684:	d1e1      	bne.n	800564a <tcp_kill_prio+0x2a>
    }
  }
  if (inactive != NULL) {
 8005686:	693b      	ldr	r3, [r7, #16]
 8005688:	2b00      	cmp	r3, #0
 800568a:	d002      	beq.n	8005692 <tcp_kill_prio+0x72>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
           (void *)inactive, inactivity));
    tcp_abort(inactive);
 800568c:	6938      	ldr	r0, [r7, #16]
 800568e:	f7ff fb19 	bl	8004cc4 <tcp_abort>
  }
}
 8005692:	bf00      	nop
 8005694:	3718      	adds	r7, #24
 8005696:	46bd      	mov	sp, r7
 8005698:	bd80      	pop	{r7, pc}
 800569a:	bf00      	nop
 800569c:	200068a0 	.word	0x200068a0
 80056a0:	200068a4 	.word	0x200068a4

080056a4 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 80056a4:	b580      	push	{r7, lr}
 80056a6:	b086      	sub	sp, #24
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	4603      	mov	r3, r0
 80056ac:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 80056ae:	79fb      	ldrb	r3, [r7, #7]
 80056b0:	2b08      	cmp	r3, #8
 80056b2:	d009      	beq.n	80056c8 <tcp_kill_state+0x24>
 80056b4:	79fb      	ldrb	r3, [r7, #7]
 80056b6:	2b09      	cmp	r3, #9
 80056b8:	d006      	beq.n	80056c8 <tcp_kill_state+0x24>
 80056ba:	4b1a      	ldr	r3, [pc, #104]	; (8005724 <tcp_kill_state+0x80>)
 80056bc:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80056c0:	4919      	ldr	r1, [pc, #100]	; (8005728 <tcp_kill_state+0x84>)
 80056c2:	481a      	ldr	r0, [pc, #104]	; (800572c <tcp_kill_state+0x88>)
 80056c4:	f008 f9cc 	bl	800da60 <iprintf>

  inactivity = 0;
 80056c8:	2300      	movs	r3, #0
 80056ca:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 80056cc:	2300      	movs	r3, #0
 80056ce:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80056d0:	4b17      	ldr	r3, [pc, #92]	; (8005730 <tcp_kill_state+0x8c>)
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	617b      	str	r3, [r7, #20]
 80056d6:	e017      	b.n	8005708 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 80056d8:	697b      	ldr	r3, [r7, #20]
 80056da:	7d1b      	ldrb	r3, [r3, #20]
 80056dc:	79fa      	ldrb	r2, [r7, #7]
 80056de:	429a      	cmp	r2, r3
 80056e0:	d10f      	bne.n	8005702 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 80056e2:	4b14      	ldr	r3, [pc, #80]	; (8005734 <tcp_kill_state+0x90>)
 80056e4:	681a      	ldr	r2, [r3, #0]
 80056e6:	697b      	ldr	r3, [r7, #20]
 80056e8:	6a1b      	ldr	r3, [r3, #32]
 80056ea:	1ad3      	subs	r3, r2, r3
 80056ec:	68fa      	ldr	r2, [r7, #12]
 80056ee:	429a      	cmp	r2, r3
 80056f0:	d807      	bhi.n	8005702 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 80056f2:	4b10      	ldr	r3, [pc, #64]	; (8005734 <tcp_kill_state+0x90>)
 80056f4:	681a      	ldr	r2, [r3, #0]
 80056f6:	697b      	ldr	r3, [r7, #20]
 80056f8:	6a1b      	ldr	r3, [r3, #32]
 80056fa:	1ad3      	subs	r3, r2, r3
 80056fc:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 80056fe:	697b      	ldr	r3, [r7, #20]
 8005700:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8005702:	697b      	ldr	r3, [r7, #20]
 8005704:	68db      	ldr	r3, [r3, #12]
 8005706:	617b      	str	r3, [r7, #20]
 8005708:	697b      	ldr	r3, [r7, #20]
 800570a:	2b00      	cmp	r3, #0
 800570c:	d1e4      	bne.n	80056d8 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800570e:	693b      	ldr	r3, [r7, #16]
 8005710:	2b00      	cmp	r3, #0
 8005712:	d003      	beq.n	800571c <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
           tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 8005714:	2100      	movs	r1, #0
 8005716:	6938      	ldr	r0, [r7, #16]
 8005718:	f7ff fa22 	bl	8004b60 <tcp_abandon>
  }
}
 800571c:	bf00      	nop
 800571e:	3718      	adds	r7, #24
 8005720:	46bd      	mov	sp, r7
 8005722:	bd80      	pop	{r7, pc}
 8005724:	0800f3f4 	.word	0x0800f3f4
 8005728:	0800f704 	.word	0x0800f704
 800572c:	0800f430 	.word	0x0800f430
 8005730:	200068a0 	.word	0x200068a0
 8005734:	200068a4 	.word	0x200068a4

08005738 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8005738:	b580      	push	{r7, lr}
 800573a:	b084      	sub	sp, #16
 800573c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800573e:	2300      	movs	r3, #0
 8005740:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 8005742:	2300      	movs	r3, #0
 8005744:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8005746:	4b12      	ldr	r3, [pc, #72]	; (8005790 <tcp_kill_timewait+0x58>)
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	60fb      	str	r3, [r7, #12]
 800574c:	e012      	b.n	8005774 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800574e:	4b11      	ldr	r3, [pc, #68]	; (8005794 <tcp_kill_timewait+0x5c>)
 8005750:	681a      	ldr	r2, [r3, #0]
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	6a1b      	ldr	r3, [r3, #32]
 8005756:	1ad3      	subs	r3, r2, r3
 8005758:	687a      	ldr	r2, [r7, #4]
 800575a:	429a      	cmp	r2, r3
 800575c:	d807      	bhi.n	800576e <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800575e:	4b0d      	ldr	r3, [pc, #52]	; (8005794 <tcp_kill_timewait+0x5c>)
 8005760:	681a      	ldr	r2, [r3, #0]
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	6a1b      	ldr	r3, [r3, #32]
 8005766:	1ad3      	subs	r3, r2, r3
 8005768:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	68db      	ldr	r3, [r3, #12]
 8005772:	60fb      	str	r3, [r7, #12]
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	2b00      	cmp	r3, #0
 8005778:	d1e9      	bne.n	800574e <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800577a:	68bb      	ldr	r3, [r7, #8]
 800577c:	2b00      	cmp	r3, #0
 800577e:	d002      	beq.n	8005786 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
           (void *)inactive, inactivity));
    tcp_abort(inactive);
 8005780:	68b8      	ldr	r0, [r7, #8]
 8005782:	f7ff fa9f 	bl	8004cc4 <tcp_abort>
  }
}
 8005786:	bf00      	nop
 8005788:	3710      	adds	r7, #16
 800578a:	46bd      	mov	sp, r7
 800578c:	bd80      	pop	{r7, pc}
 800578e:	bf00      	nop
 8005790:	200068b0 	.word	0x200068b0
 8005794:	200068a4 	.word	0x200068a4

08005798 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 8005798:	b580      	push	{r7, lr}
 800579a:	b084      	sub	sp, #16
 800579c:	af00      	add	r7, sp, #0
 800579e:	4603      	mov	r3, r0
 80057a0:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80057a2:	2001      	movs	r0, #1
 80057a4:	f7fd fffe 	bl	80037a4 <memp_malloc>
 80057a8:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d124      	bne.n	80057fa <tcp_alloc+0x62>
    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 80057b0:	f7ff ffc2 	bl	8005738 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80057b4:	2001      	movs	r0, #1
 80057b6:	f7fd fff5 	bl	80037a4 <memp_malloc>
 80057ba:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d11b      	bne.n	80057fa <tcp_alloc+0x62>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 80057c2:	2009      	movs	r0, #9
 80057c4:	f7ff ff6e 	bl	80056a4 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80057c8:	2001      	movs	r0, #1
 80057ca:	f7fd ffeb 	bl	80037a4 <memp_malloc>
 80057ce:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d111      	bne.n	80057fa <tcp_alloc+0x62>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 80057d6:	2008      	movs	r0, #8
 80057d8:	f7ff ff64 	bl	80056a4 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80057dc:	2001      	movs	r0, #1
 80057de:	f7fd ffe1 	bl	80037a4 <memp_malloc>
 80057e2:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d107      	bne.n	80057fa <tcp_alloc+0x62>
          /* Try killing active connections with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 80057ea:	79fb      	ldrb	r3, [r7, #7]
 80057ec:	4618      	mov	r0, r3
 80057ee:	f7ff ff17 	bl	8005620 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80057f2:	2001      	movs	r0, #1
 80057f4:	f7fd ffd6 	bl	80037a4 <memp_malloc>
 80057f8:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d03f      	beq.n	8005880 <tcp_alloc+0xe8>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8005800:	2298      	movs	r2, #152	; 0x98
 8005802:	2100      	movs	r1, #0
 8005804:	68f8      	ldr	r0, [r7, #12]
 8005806:	f008 f923 	bl	800da50 <memset>
    pcb->prio = prio;
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	79fa      	ldrb	r2, [r7, #7]
 800580e:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8005816:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8005820:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	22ff      	movs	r2, #255	; 0xff
 800582e:	729a      	strb	r2, [r3, #10]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	f44f 7206 	mov.w	r2, #536	; 0x218
 8005836:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	2206      	movs	r2, #6
 800583c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	2206      	movs	r2, #6
 8005844:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800584c:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	2201      	movs	r2, #1
 8005852:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 8005856:	4b0d      	ldr	r3, [pc, #52]	; (800588c <tcp_alloc+0xf4>)
 8005858:	681a      	ldr	r2, [r3, #0]
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800585e:	4b0c      	ldr	r3, [pc, #48]	; (8005890 <tcp_alloc+0xf8>)
 8005860:	781a      	ldrb	r2, [r3, #0]
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	775a      	strb	r2, [r3, #29]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800586c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	4a08      	ldr	r2, [pc, #32]	; (8005894 <tcp_alloc+0xfc>)
 8005874:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	4a07      	ldr	r2, [pc, #28]	; (8005898 <tcp_alloc+0x100>)
 800587c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 8005880:	68fb      	ldr	r3, [r7, #12]
}
 8005882:	4618      	mov	r0, r3
 8005884:	3710      	adds	r7, #16
 8005886:	46bd      	mov	sp, r7
 8005888:	bd80      	pop	{r7, pc}
 800588a:	bf00      	nop
 800588c:	200068a4 	.word	0x200068a4
 8005890:	200000ce 	.word	0x200000ce
 8005894:	080055dd 	.word	0x080055dd
 8005898:	006ddd00 	.word	0x006ddd00

0800589c <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800589c:	b580      	push	{r7, lr}
 800589e:	b082      	sub	sp, #8
 80058a0:	af00      	add	r7, sp, #0
 80058a2:	6078      	str	r0, [r7, #4]
  if (pcb->state != CLOSED &&
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	7d1b      	ldrb	r3, [r3, #20]
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d034      	beq.n	8005916 <tcp_pcb_purge+0x7a>
     pcb->state != TIME_WAIT &&
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 80058b0:	2b0a      	cmp	r3, #10
 80058b2:	d030      	beq.n	8005916 <tcp_pcb_purge+0x7a>
     pcb->state != LISTEN) {
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	7d1b      	ldrb	r3, [r3, #20]
     pcb->state != TIME_WAIT &&
 80058b8:	2b01      	cmp	r3, #1
 80058ba:	d02c      	beq.n	8005916 <tcp_pcb_purge+0x7a>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d007      	beq.n	80058d4 <tcp_pcb_purge+0x38>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80058c8:	4618      	mov	r0, r3
 80058ca:	f7fe fcf5 	bl	80042b8 <pbuf_free>
      pcb->refused_data = NULL;
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	2200      	movs	r2, #0
 80058d2:	675a      	str	r2, [r3, #116]	; 0x74
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
    }
    tcp_segs_free(pcb->ooseq);
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058d8:	4618      	mov	r0, r3
 80058da:	f7ff fe36 	bl	800554a <tcp_segs_free>
    pcb->ooseq = NULL;
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	2200      	movs	r2, #0
 80058e2:	671a      	str	r2, [r3, #112]	; 0x70
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80058ea:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80058f0:	4618      	mov	r0, r3
 80058f2:	f7ff fe2a 	bl	800554a <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80058fa:	4618      	mov	r0, r3
 80058fc:	f7ff fe25 	bl	800554a <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	2200      	movs	r2, #0
 8005904:	669a      	str	r2, [r3, #104]	; 0x68
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	66da      	str	r2, [r3, #108]	; 0x6c
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	2200      	movs	r2, #0
 8005912:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
#endif /* TCP_OVERSIZE */
  }
}
 8005916:	bf00      	nop
 8005918:	3708      	adds	r7, #8
 800591a:	46bd      	mov	sp, r7
 800591c:	bd80      	pop	{r7, pc}
	...

08005920 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 8005920:	b580      	push	{r7, lr}
 8005922:	b084      	sub	sp, #16
 8005924:	af00      	add	r7, sp, #0
 8005926:	6078      	str	r0, [r7, #4]
 8005928:	6039      	str	r1, [r7, #0]
  TCP_RMV(pcblist, pcb);
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	683a      	ldr	r2, [r7, #0]
 8005930:	429a      	cmp	r2, r3
 8005932:	d105      	bne.n	8005940 <tcp_pcb_remove+0x20>
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	68da      	ldr	r2, [r3, #12]
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	601a      	str	r2, [r3, #0]
 800593e:	e013      	b.n	8005968 <tcp_pcb_remove+0x48>
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	60fb      	str	r3, [r7, #12]
 8005946:	e00c      	b.n	8005962 <tcp_pcb_remove+0x42>
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	68db      	ldr	r3, [r3, #12]
 800594c:	683a      	ldr	r2, [r7, #0]
 800594e:	429a      	cmp	r2, r3
 8005950:	d104      	bne.n	800595c <tcp_pcb_remove+0x3c>
 8005952:	683b      	ldr	r3, [r7, #0]
 8005954:	68da      	ldr	r2, [r3, #12]
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	60da      	str	r2, [r3, #12]
 800595a:	e005      	b.n	8005968 <tcp_pcb_remove+0x48>
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	68db      	ldr	r3, [r3, #12]
 8005960:	60fb      	str	r3, [r7, #12]
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	2b00      	cmp	r3, #0
 8005966:	d1ef      	bne.n	8005948 <tcp_pcb_remove+0x28>
 8005968:	683b      	ldr	r3, [r7, #0]
 800596a:	2200      	movs	r2, #0
 800596c:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800596e:	6838      	ldr	r0, [r7, #0]
 8005970:	f7ff ff94 	bl	800589c <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if (pcb->state != TIME_WAIT &&
 8005974:	683b      	ldr	r3, [r7, #0]
 8005976:	7d1b      	ldrb	r3, [r3, #20]
 8005978:	2b0a      	cmp	r3, #10
 800597a:	d013      	beq.n	80059a4 <tcp_pcb_remove+0x84>
     pcb->state != LISTEN &&
 800597c:	683b      	ldr	r3, [r7, #0]
 800597e:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != TIME_WAIT &&
 8005980:	2b01      	cmp	r3, #1
 8005982:	d00f      	beq.n	80059a4 <tcp_pcb_remove+0x84>
     pcb->flags & TF_ACK_DELAY) {
 8005984:	683b      	ldr	r3, [r7, #0]
 8005986:	7e9b      	ldrb	r3, [r3, #26]
 8005988:	f003 0301 	and.w	r3, r3, #1
     pcb->state != LISTEN &&
 800598c:	2b00      	cmp	r3, #0
 800598e:	d009      	beq.n	80059a4 <tcp_pcb_remove+0x84>
    pcb->flags |= TF_ACK_NOW;
 8005990:	683b      	ldr	r3, [r7, #0]
 8005992:	7e9b      	ldrb	r3, [r3, #26]
 8005994:	f043 0302 	orr.w	r3, r3, #2
 8005998:	b2da      	uxtb	r2, r3
 800599a:	683b      	ldr	r3, [r7, #0]
 800599c:	769a      	strb	r2, [r3, #26]
    tcp_output(pcb);
 800599e:	6838      	ldr	r0, [r7, #0]
 80059a0:	f002 fd88 	bl	80084b4 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 80059a4:	683b      	ldr	r3, [r7, #0]
 80059a6:	7d1b      	ldrb	r3, [r3, #20]
 80059a8:	2b01      	cmp	r3, #1
 80059aa:	d020      	beq.n	80059ee <tcp_pcb_remove+0xce>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 80059ac:	683b      	ldr	r3, [r7, #0]
 80059ae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d006      	beq.n	80059c2 <tcp_pcb_remove+0xa2>
 80059b4:	4b13      	ldr	r3, [pc, #76]	; (8005a04 <tcp_pcb_remove+0xe4>)
 80059b6:	f240 7253 	movw	r2, #1875	; 0x753
 80059ba:	4913      	ldr	r1, [pc, #76]	; (8005a08 <tcp_pcb_remove+0xe8>)
 80059bc:	4813      	ldr	r0, [pc, #76]	; (8005a0c <tcp_pcb_remove+0xec>)
 80059be:	f008 f84f 	bl	800da60 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 80059c2:	683b      	ldr	r3, [r7, #0]
 80059c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d006      	beq.n	80059d8 <tcp_pcb_remove+0xb8>
 80059ca:	4b0e      	ldr	r3, [pc, #56]	; (8005a04 <tcp_pcb_remove+0xe4>)
 80059cc:	f240 7254 	movw	r2, #1876	; 0x754
 80059d0:	490f      	ldr	r1, [pc, #60]	; (8005a10 <tcp_pcb_remove+0xf0>)
 80059d2:	480e      	ldr	r0, [pc, #56]	; (8005a0c <tcp_pcb_remove+0xec>)
 80059d4:	f008 f844 	bl	800da60 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 80059d8:	683b      	ldr	r3, [r7, #0]
 80059da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d006      	beq.n	80059ee <tcp_pcb_remove+0xce>
 80059e0:	4b08      	ldr	r3, [pc, #32]	; (8005a04 <tcp_pcb_remove+0xe4>)
 80059e2:	f240 7256 	movw	r2, #1878	; 0x756
 80059e6:	490b      	ldr	r1, [pc, #44]	; (8005a14 <tcp_pcb_remove+0xf4>)
 80059e8:	4808      	ldr	r0, [pc, #32]	; (8005a0c <tcp_pcb_remove+0xec>)
 80059ea:	f008 f839 	bl	800da60 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 80059ee:	683b      	ldr	r3, [r7, #0]
 80059f0:	2200      	movs	r2, #0
 80059f2:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 80059f4:	683b      	ldr	r3, [r7, #0]
 80059f6:	2200      	movs	r2, #0
 80059f8:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 80059fa:	bf00      	nop
 80059fc:	3710      	adds	r7, #16
 80059fe:	46bd      	mov	sp, r7
 8005a00:	bd80      	pop	{r7, pc}
 8005a02:	bf00      	nop
 8005a04:	0800f3f4 	.word	0x0800f3f4
 8005a08:	0800f7ac 	.word	0x0800f7ac
 8005a0c:	0800f430 	.word	0x0800f430
 8005a10:	0800f7c4 	.word	0x0800f7c4
 8005a14:	0800f7e0 	.word	0x0800f7e0

08005a18 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 8005a18:	b480      	push	{r7}
 8005a1a:	b083      	sub	sp, #12
 8005a1c:	af00      	add	r7, sp, #0
 8005a1e:	6078      	str	r0, [r7, #4]
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 8005a20:	4b06      	ldr	r3, [pc, #24]	; (8005a3c <tcp_next_iss+0x24>)
 8005a22:	681a      	ldr	r2, [r3, #0]
 8005a24:	4b06      	ldr	r3, [pc, #24]	; (8005a40 <tcp_next_iss+0x28>)
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	4413      	add	r3, r2
 8005a2a:	4a04      	ldr	r2, [pc, #16]	; (8005a3c <tcp_next_iss+0x24>)
 8005a2c:	6013      	str	r3, [r2, #0]
  return iss;
 8005a2e:	4b03      	ldr	r3, [pc, #12]	; (8005a3c <tcp_next_iss+0x24>)
 8005a30:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 8005a32:	4618      	mov	r0, r3
 8005a34:	370c      	adds	r7, #12
 8005a36:	46bd      	mov	sp, r7
 8005a38:	bc80      	pop	{r7}
 8005a3a:	4770      	bx	lr
 8005a3c:	2000000c 	.word	0x2000000c
 8005a40:	200068a4 	.word	0x200068a4

08005a44 <tcp_eff_send_mss_impl>:
tcp_eff_send_mss_impl(u16_t sendmss, const ip_addr_t *dest
#if LWIP_IPV6 || LWIP_IPV4_SRC_ROUTING
                     , const ip_addr_t *src
#endif /* LWIP_IPV6 || LWIP_IPV4_SRC_ROUTING */
                     )
{
 8005a44:	b580      	push	{r7, lr}
 8005a46:	b084      	sub	sp, #16
 8005a48:	af00      	add	r7, sp, #0
 8005a4a:	4603      	mov	r3, r0
 8005a4c:	6039      	str	r1, [r7, #0]
 8005a4e:	80fb      	strh	r3, [r7, #6]
  u16_t mss_s;
  struct netif *outif;
  s16_t mtu;

  outif = ip_route(src, dest);
 8005a50:	6838      	ldr	r0, [r7, #0]
 8005a52:	f006 fe35 	bl	800c6c0 <ip4_route>
 8005a56:	60f8      	str	r0, [r7, #12]
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d101      	bne.n	8005a62 <tcp_eff_send_mss_impl+0x1e>
      return sendmss;
 8005a5e:	88fb      	ldrh	r3, [r7, #6]
 8005a60:	e010      	b.n	8005a84 <tcp_eff_send_mss_impl+0x40>
    }
    mtu = outif->mtu;
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a66:	817b      	strh	r3, [r7, #10]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 8005a68:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d008      	beq.n	8005a82 <tcp_eff_send_mss_impl+0x3e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      mss_s = mtu - IP_HLEN - TCP_HLEN;
 8005a70:	897b      	ldrh	r3, [r7, #10]
 8005a72:	3b28      	subs	r3, #40	; 0x28
 8005a74:	813b      	strh	r3, [r7, #8]
#endif /* LWIP_IPV4 */
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 8005a76:	893a      	ldrh	r2, [r7, #8]
 8005a78:	88fb      	ldrh	r3, [r7, #6]
 8005a7a:	4293      	cmp	r3, r2
 8005a7c:	bf28      	it	cs
 8005a7e:	4613      	movcs	r3, r2
 8005a80:	80fb      	strh	r3, [r7, #6]
  }
  return sendmss;
 8005a82:	88fb      	ldrh	r3, [r7, #6]
}
 8005a84:	4618      	mov	r0, r3
 8005a86:	3710      	adds	r7, #16
 8005a88:	46bd      	mov	sp, r7
 8005a8a:	bd80      	pop	{r7, pc}

08005a8c <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t* old_addr, struct tcp_pcb* pcb_list)
{
 8005a8c:	b580      	push	{r7, lr}
 8005a8e:	b084      	sub	sp, #16
 8005a90:	af00      	add	r7, sp, #0
 8005a92:	6078      	str	r0, [r7, #4]
 8005a94:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 8005a96:	683b      	ldr	r3, [r7, #0]
 8005a98:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8005a9a:	e011      	b.n	8005ac0 <tcp_netif_ip_addr_changed_pcblist+0x34>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	681a      	ldr	r2, [r3, #0]
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	429a      	cmp	r2, r3
 8005aa6:	d108      	bne.n	8005aba <tcp_netif_ip_addr_changed_pcblist+0x2e>
      /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
      && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
      ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	68db      	ldr	r3, [r3, #12]
 8005aac:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 8005aae:	68f8      	ldr	r0, [r7, #12]
 8005ab0:	f7ff f908 	bl	8004cc4 <tcp_abort>
      pcb = next;
 8005ab4:	68bb      	ldr	r3, [r7, #8]
 8005ab6:	60fb      	str	r3, [r7, #12]
 8005ab8:	e002      	b.n	8005ac0 <tcp_netif_ip_addr_changed_pcblist+0x34>
    } else {
      pcb = pcb->next;
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	68db      	ldr	r3, [r3, #12]
 8005abe:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d1ea      	bne.n	8005a9c <tcp_netif_ip_addr_changed_pcblist+0x10>
    }
  }
}
 8005ac6:	bf00      	nop
 8005ac8:	bf00      	nop
 8005aca:	3710      	adds	r7, #16
 8005acc:	46bd      	mov	sp, r7
 8005ace:	bd80      	pop	{r7, pc}

08005ad0 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t* old_addr, const ip_addr_t* new_addr)
{
 8005ad0:	b580      	push	{r7, lr}
 8005ad2:	b084      	sub	sp, #16
 8005ad4:	af00      	add	r7, sp, #0
 8005ad6:	6078      	str	r0, [r7, #4]
 8005ad8:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb, *next;

  if (!ip_addr_isany(old_addr)) {
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d02c      	beq.n	8005b3a <tcp_netif_ip_addr_changed+0x6a>
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d028      	beq.n	8005b3a <tcp_netif_ip_addr_changed+0x6a>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8005ae8:	4b16      	ldr	r3, [pc, #88]	; (8005b44 <tcp_netif_ip_addr_changed+0x74>)
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	4619      	mov	r1, r3
 8005aee:	6878      	ldr	r0, [r7, #4]
 8005af0:	f7ff ffcc 	bl	8005a8c <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8005af4:	4b14      	ldr	r3, [pc, #80]	; (8005b48 <tcp_netif_ip_addr_changed+0x78>)
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	4619      	mov	r1, r3
 8005afa:	6878      	ldr	r0, [r7, #4]
 8005afc:	f7ff ffc6 	bl	8005a8c <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8005b00:	683b      	ldr	r3, [r7, #0]
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d019      	beq.n	8005b3a <tcp_netif_ip_addr_changed+0x6a>
 8005b06:	683b      	ldr	r3, [r7, #0]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d015      	beq.n	8005b3a <tcp_netif_ip_addr_changed+0x6a>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = next) {
 8005b0e:	4b0f      	ldr	r3, [pc, #60]	; (8005b4c <tcp_netif_ip_addr_changed+0x7c>)
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	60fb      	str	r3, [r7, #12]
 8005b14:	e00e      	b.n	8005b34 <tcp_netif_ip_addr_changed+0x64>
        next = lpcb->next;
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	68db      	ldr	r3, [r3, #12]
 8005b1a:	60bb      	str	r3, [r7, #8]
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	681a      	ldr	r2, [r3, #0]
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	429a      	cmp	r2, r3
 8005b26:	d103      	bne.n	8005b30 <tcp_netif_ip_addr_changed+0x60>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 8005b28:	683b      	ldr	r3, [r7, #0]
 8005b2a:	681a      	ldr	r2, [r3, #0]
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = next) {
 8005b30:	68bb      	ldr	r3, [r7, #8]
 8005b32:	60fb      	str	r3, [r7, #12]
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d1ed      	bne.n	8005b16 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 8005b3a:	bf00      	nop
 8005b3c:	3710      	adds	r7, #16
 8005b3e:	46bd      	mov	sp, r7
 8005b40:	bd80      	pop	{r7, pc}
 8005b42:	bf00      	nop
 8005b44:	200068a0 	.word	0x200068a0
 8005b48:	200068ac 	.word	0x200068ac
 8005b4c:	200068a8 	.word	0x200068a8

08005b50 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 8005b50:	b590      	push	{r4, r7, lr}
 8005b52:	b08b      	sub	sp, #44	; 0x2c
 8005b54:	af02      	add	r7, sp, #8
 8005b56:	6078      	str	r0, [r7, #4]
 8005b58:	6039      	str	r1, [r7, #0]
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	685b      	ldr	r3, [r3, #4]
 8005b5e:	4a82      	ldr	r2, [pc, #520]	; (8005d68 <tcp_input+0x218>)
 8005b60:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	895b      	ldrh	r3, [r3, #10]
 8005b66:	2b13      	cmp	r3, #19
 8005b68:	f240 838a 	bls.w	8006280 <tcp_input+0x730>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8005b6c:	4b7f      	ldr	r3, [pc, #508]	; (8005d6c <tcp_input+0x21c>)
 8005b6e:	695b      	ldr	r3, [r3, #20]
 8005b70:	4a7e      	ldr	r2, [pc, #504]	; (8005d6c <tcp_input+0x21c>)
 8005b72:	6812      	ldr	r2, [r2, #0]
 8005b74:	4611      	mov	r1, r2
 8005b76:	4618      	mov	r0, r3
 8005b78:	f007 f83c 	bl	800cbf4 <ip4_addr_isbroadcast_u32>
 8005b7c:	4603      	mov	r3, r0
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	f040 8380 	bne.w	8006284 <tcp_input+0x734>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 8005b84:	4b79      	ldr	r3, [pc, #484]	; (8005d6c <tcp_input+0x21c>)
 8005b86:	695b      	ldr	r3, [r3, #20]
 8005b88:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8005b8c:	2be0      	cmp	r3, #224	; 0xe0
 8005b8e:	f000 8379 	beq.w	8006284 <tcp_input+0x734>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN(tcphdr) * 4;
 8005b92:	4b75      	ldr	r3, [pc, #468]	; (8005d68 <tcp_input+0x218>)
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	899b      	ldrh	r3, [r3, #12]
 8005b98:	b29b      	uxth	r3, r3
 8005b9a:	4618      	mov	r0, r3
 8005b9c:	f7fd fa59 	bl	8003052 <lwip_htons>
 8005ba0:	4603      	mov	r3, r0
 8005ba2:	0b1b      	lsrs	r3, r3, #12
 8005ba4:	b29b      	uxth	r3, r3
 8005ba6:	b2db      	uxtb	r3, r3
 8005ba8:	009b      	lsls	r3, r3, #2
 8005baa:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 8005bac:	7cbb      	ldrb	r3, [r7, #18]
 8005bae:	2b13      	cmp	r3, #19
 8005bb0:	f240 836a 	bls.w	8006288 <tcp_input+0x738>
 8005bb4:	7cbb      	ldrb	r3, [r7, #18]
 8005bb6:	b29a      	uxth	r2, r3
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	891b      	ldrh	r3, [r3, #8]
 8005bbc:	429a      	cmp	r2, r3
 8005bbe:	f200 8363 	bhi.w	8006288 <tcp_input+0x738>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = hdrlen_bytes - TCP_HLEN;
 8005bc2:	7cbb      	ldrb	r3, [r7, #18]
 8005bc4:	b29b      	uxth	r3, r3
 8005bc6:	3b14      	subs	r3, #20
 8005bc8:	b29a      	uxth	r2, r3
 8005bca:	4b69      	ldr	r3, [pc, #420]	; (8005d70 <tcp_input+0x220>)
 8005bcc:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 8005bce:	4b69      	ldr	r3, [pc, #420]	; (8005d74 <tcp_input+0x224>)
 8005bd0:	2200      	movs	r2, #0
 8005bd2:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	895a      	ldrh	r2, [r3, #10]
 8005bd8:	7cbb      	ldrb	r3, [r7, #18]
 8005bda:	b29b      	uxth	r3, r3
 8005bdc:	429a      	cmp	r2, r3
 8005bde:	d30d      	bcc.n	8005bfc <tcp_input+0xac>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 8005be0:	4b63      	ldr	r3, [pc, #396]	; (8005d70 <tcp_input+0x220>)
 8005be2:	881a      	ldrh	r2, [r3, #0]
 8005be4:	4b64      	ldr	r3, [pc, #400]	; (8005d78 <tcp_input+0x228>)
 8005be6:	801a      	strh	r2, [r3, #0]
    pbuf_header(p, -(s16_t)hdrlen_bytes); /* cannot fail */
 8005be8:	7cbb      	ldrb	r3, [r7, #18]
 8005bea:	b29b      	uxth	r3, r3
 8005bec:	425b      	negs	r3, r3
 8005bee:	b29b      	uxth	r3, r3
 8005bf0:	b21b      	sxth	r3, r3
 8005bf2:	4619      	mov	r1, r3
 8005bf4:	6878      	ldr	r0, [r7, #4]
 8005bf6:	f7fe fb3b 	bl	8004270 <pbuf_header>
 8005bfa:	e055      	b.n	8005ca8 <tcp_input+0x158>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d105      	bne.n	8005c10 <tcp_input+0xc0>
 8005c04:	4b5d      	ldr	r3, [pc, #372]	; (8005d7c <tcp_input+0x22c>)
 8005c06:	22b2      	movs	r2, #178	; 0xb2
 8005c08:	495d      	ldr	r1, [pc, #372]	; (8005d80 <tcp_input+0x230>)
 8005c0a:	485e      	ldr	r0, [pc, #376]	; (8005d84 <tcp_input+0x234>)
 8005c0c:	f007 ff28 	bl	800da60 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_header(p, -TCP_HLEN);
 8005c10:	f06f 0113 	mvn.w	r1, #19
 8005c14:	6878      	ldr	r0, [r7, #4]
 8005c16:	f7fe fb2b 	bl	8004270 <pbuf_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	895a      	ldrh	r2, [r3, #10]
 8005c1e:	4b56      	ldr	r3, [pc, #344]	; (8005d78 <tcp_input+0x228>)
 8005c20:	801a      	strh	r2, [r3, #0]
    opt2len = tcphdr_optlen - tcphdr_opt1len;
 8005c22:	4b53      	ldr	r3, [pc, #332]	; (8005d70 <tcp_input+0x220>)
 8005c24:	881a      	ldrh	r2, [r3, #0]
 8005c26:	4b54      	ldr	r3, [pc, #336]	; (8005d78 <tcp_input+0x228>)
 8005c28:	881b      	ldrh	r3, [r3, #0]
 8005c2a:	1ad3      	subs	r3, r2, r3
 8005c2c:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_header(p, -(s16_t)tcphdr_opt1len);
 8005c2e:	4b52      	ldr	r3, [pc, #328]	; (8005d78 <tcp_input+0x228>)
 8005c30:	881b      	ldrh	r3, [r3, #0]
 8005c32:	425b      	negs	r3, r3
 8005c34:	b29b      	uxth	r3, r3
 8005c36:	b21b      	sxth	r3, r3
 8005c38:	4619      	mov	r1, r3
 8005c3a:	6878      	ldr	r0, [r7, #4]
 8005c3c:	f7fe fb18 	bl	8004270 <pbuf_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	895b      	ldrh	r3, [r3, #10]
 8005c46:	8a3a      	ldrh	r2, [r7, #16]
 8005c48:	429a      	cmp	r2, r3
 8005c4a:	f200 831f 	bhi.w	800628c <tcp_input+0x73c>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t*)p->next->payload;
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	685b      	ldr	r3, [r3, #4]
 8005c54:	4a47      	ldr	r2, [pc, #284]	; (8005d74 <tcp_input+0x224>)
 8005c56:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_header(p->next, -(s16_t)opt2len);
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681a      	ldr	r2, [r3, #0]
 8005c5c:	8a3b      	ldrh	r3, [r7, #16]
 8005c5e:	425b      	negs	r3, r3
 8005c60:	b29b      	uxth	r3, r3
 8005c62:	b21b      	sxth	r3, r3
 8005c64:	4619      	mov	r1, r3
 8005c66:	4610      	mov	r0, r2
 8005c68:	f7fe fb02 	bl	8004270 <pbuf_header>
    p->tot_len -= opt2len;
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	891a      	ldrh	r2, [r3, #8]
 8005c70:	8a3b      	ldrh	r3, [r7, #16]
 8005c72:	1ad3      	subs	r3, r2, r3
 8005c74:	b29a      	uxth	r2, r3
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	895b      	ldrh	r3, [r3, #10]
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d005      	beq.n	8005c8e <tcp_input+0x13e>
 8005c82:	4b3e      	ldr	r3, [pc, #248]	; (8005d7c <tcp_input+0x22c>)
 8005c84:	22cf      	movs	r2, #207	; 0xcf
 8005c86:	4940      	ldr	r1, [pc, #256]	; (8005d88 <tcp_input+0x238>)
 8005c88:	483e      	ldr	r0, [pc, #248]	; (8005d84 <tcp_input+0x234>)
 8005c8a:	f007 fee9 	bl	800da60 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	891a      	ldrh	r2, [r3, #8]
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	891b      	ldrh	r3, [r3, #8]
 8005c98:	429a      	cmp	r2, r3
 8005c9a:	d005      	beq.n	8005ca8 <tcp_input+0x158>
 8005c9c:	4b37      	ldr	r3, [pc, #220]	; (8005d7c <tcp_input+0x22c>)
 8005c9e:	22d0      	movs	r2, #208	; 0xd0
 8005ca0:	493a      	ldr	r1, [pc, #232]	; (8005d8c <tcp_input+0x23c>)
 8005ca2:	4838      	ldr	r0, [pc, #224]	; (8005d84 <tcp_input+0x234>)
 8005ca4:	f007 fedc 	bl	800da60 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8005ca8:	4b2f      	ldr	r3, [pc, #188]	; (8005d68 <tcp_input+0x218>)
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	881b      	ldrh	r3, [r3, #0]
 8005cae:	b29b      	uxth	r3, r3
 8005cb0:	4a2d      	ldr	r2, [pc, #180]	; (8005d68 <tcp_input+0x218>)
 8005cb2:	6814      	ldr	r4, [r2, #0]
 8005cb4:	4618      	mov	r0, r3
 8005cb6:	f7fd f9cc 	bl	8003052 <lwip_htons>
 8005cba:	4603      	mov	r3, r0
 8005cbc:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 8005cbe:	4b2a      	ldr	r3, [pc, #168]	; (8005d68 <tcp_input+0x218>)
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	885b      	ldrh	r3, [r3, #2]
 8005cc4:	b29b      	uxth	r3, r3
 8005cc6:	4a28      	ldr	r2, [pc, #160]	; (8005d68 <tcp_input+0x218>)
 8005cc8:	6814      	ldr	r4, [r2, #0]
 8005cca:	4618      	mov	r0, r3
 8005ccc:	f7fd f9c1 	bl	8003052 <lwip_htons>
 8005cd0:	4603      	mov	r3, r0
 8005cd2:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8005cd4:	4b24      	ldr	r3, [pc, #144]	; (8005d68 <tcp_input+0x218>)
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	685b      	ldr	r3, [r3, #4]
 8005cda:	4a23      	ldr	r2, [pc, #140]	; (8005d68 <tcp_input+0x218>)
 8005cdc:	6814      	ldr	r4, [r2, #0]
 8005cde:	4618      	mov	r0, r3
 8005ce0:	f7fd f9c4 	bl	800306c <lwip_htonl>
 8005ce4:	4603      	mov	r3, r0
 8005ce6:	6063      	str	r3, [r4, #4]
 8005ce8:	6863      	ldr	r3, [r4, #4]
 8005cea:	4a29      	ldr	r2, [pc, #164]	; (8005d90 <tcp_input+0x240>)
 8005cec:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8005cee:	4b1e      	ldr	r3, [pc, #120]	; (8005d68 <tcp_input+0x218>)
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	689b      	ldr	r3, [r3, #8]
 8005cf4:	4a1c      	ldr	r2, [pc, #112]	; (8005d68 <tcp_input+0x218>)
 8005cf6:	6814      	ldr	r4, [r2, #0]
 8005cf8:	4618      	mov	r0, r3
 8005cfa:	f7fd f9b7 	bl	800306c <lwip_htonl>
 8005cfe:	4603      	mov	r3, r0
 8005d00:	60a3      	str	r3, [r4, #8]
 8005d02:	68a3      	ldr	r3, [r4, #8]
 8005d04:	4a23      	ldr	r2, [pc, #140]	; (8005d94 <tcp_input+0x244>)
 8005d06:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8005d08:	4b17      	ldr	r3, [pc, #92]	; (8005d68 <tcp_input+0x218>)
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	89db      	ldrh	r3, [r3, #14]
 8005d0e:	b29b      	uxth	r3, r3
 8005d10:	4a15      	ldr	r2, [pc, #84]	; (8005d68 <tcp_input+0x218>)
 8005d12:	6814      	ldr	r4, [r2, #0]
 8005d14:	4618      	mov	r0, r3
 8005d16:	f7fd f99c 	bl	8003052 <lwip_htons>
 8005d1a:	4603      	mov	r3, r0
 8005d1c:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 8005d1e:	4b12      	ldr	r3, [pc, #72]	; (8005d68 <tcp_input+0x218>)
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	899b      	ldrh	r3, [r3, #12]
 8005d24:	b29b      	uxth	r3, r3
 8005d26:	4618      	mov	r0, r3
 8005d28:	f7fd f993 	bl	8003052 <lwip_htons>
 8005d2c:	4603      	mov	r3, r0
 8005d2e:	b2db      	uxtb	r3, r3
 8005d30:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005d34:	b2da      	uxtb	r2, r3
 8005d36:	4b18      	ldr	r3, [pc, #96]	; (8005d98 <tcp_input+0x248>)
 8005d38:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len + ((flags & (TCP_FIN | TCP_SYN)) ? 1 : 0);
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	891a      	ldrh	r2, [r3, #8]
 8005d3e:	4b16      	ldr	r3, [pc, #88]	; (8005d98 <tcp_input+0x248>)
 8005d40:	781b      	ldrb	r3, [r3, #0]
 8005d42:	f003 0303 	and.w	r3, r3, #3
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	bf14      	ite	ne
 8005d4a:	2301      	movne	r3, #1
 8005d4c:	2300      	moveq	r3, #0
 8005d4e:	b2db      	uxtb	r3, r3
 8005d50:	b29b      	uxth	r3, r3
 8005d52:	4413      	add	r3, r2
 8005d54:	b29a      	uxth	r2, r3
 8005d56:	4b11      	ldr	r3, [pc, #68]	; (8005d9c <tcp_input+0x24c>)
 8005d58:	801a      	strh	r2, [r3, #0]

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 8005d5a:	2300      	movs	r3, #0
 8005d5c:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8005d5e:	4b10      	ldr	r3, [pc, #64]	; (8005da0 <tcp_input+0x250>)
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	61fb      	str	r3, [r7, #28]
 8005d64:	e082      	b.n	8005e6c <tcp_input+0x31c>
 8005d66:	bf00      	nop
 8005d68:	200000e0 	.word	0x200000e0
 8005d6c:	20003350 	.word	0x20003350
 8005d70:	200000e4 	.word	0x200000e4
 8005d74:	200000e8 	.word	0x200000e8
 8005d78:	200000e6 	.word	0x200000e6
 8005d7c:	0800f7f8 	.word	0x0800f7f8
 8005d80:	0800f82c 	.word	0x0800f82c
 8005d84:	0800f83c 	.word	0x0800f83c
 8005d88:	0800f864 	.word	0x0800f864
 8005d8c:	0800f870 	.word	0x0800f870
 8005d90:	200000f0 	.word	0x200000f0
 8005d94:	200000f4 	.word	0x200000f4
 8005d98:	200000fc 	.word	0x200000fc
 8005d9c:	200000fa 	.word	0x200000fa
 8005da0:	200068a0 	.word	0x200068a0
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8005da4:	69fb      	ldr	r3, [r7, #28]
 8005da6:	7d1b      	ldrb	r3, [r3, #20]
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d105      	bne.n	8005db8 <tcp_input+0x268>
 8005dac:	4b8f      	ldr	r3, [pc, #572]	; (8005fec <tcp_input+0x49c>)
 8005dae:	22e2      	movs	r2, #226	; 0xe2
 8005db0:	498f      	ldr	r1, [pc, #572]	; (8005ff0 <tcp_input+0x4a0>)
 8005db2:	4890      	ldr	r0, [pc, #576]	; (8005ff4 <tcp_input+0x4a4>)
 8005db4:	f007 fe54 	bl	800da60 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8005db8:	69fb      	ldr	r3, [r7, #28]
 8005dba:	7d1b      	ldrb	r3, [r3, #20]
 8005dbc:	2b0a      	cmp	r3, #10
 8005dbe:	d105      	bne.n	8005dcc <tcp_input+0x27c>
 8005dc0:	4b8a      	ldr	r3, [pc, #552]	; (8005fec <tcp_input+0x49c>)
 8005dc2:	22e3      	movs	r2, #227	; 0xe3
 8005dc4:	498c      	ldr	r1, [pc, #560]	; (8005ff8 <tcp_input+0x4a8>)
 8005dc6:	488b      	ldr	r0, [pc, #556]	; (8005ff4 <tcp_input+0x4a4>)
 8005dc8:	f007 fe4a 	bl	800da60 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8005dcc:	69fb      	ldr	r3, [r7, #28]
 8005dce:	7d1b      	ldrb	r3, [r3, #20]
 8005dd0:	2b01      	cmp	r3, #1
 8005dd2:	d105      	bne.n	8005de0 <tcp_input+0x290>
 8005dd4:	4b85      	ldr	r3, [pc, #532]	; (8005fec <tcp_input+0x49c>)
 8005dd6:	22e4      	movs	r2, #228	; 0xe4
 8005dd8:	4988      	ldr	r1, [pc, #544]	; (8005ffc <tcp_input+0x4ac>)
 8005dda:	4886      	ldr	r0, [pc, #536]	; (8005ff4 <tcp_input+0x4a4>)
 8005ddc:	f007 fe40 	bl	800da60 <iprintf>
    if (pcb->remote_port == tcphdr->src &&
 8005de0:	69fb      	ldr	r3, [r7, #28]
 8005de2:	8b1a      	ldrh	r2, [r3, #24]
 8005de4:	4b86      	ldr	r3, [pc, #536]	; (8006000 <tcp_input+0x4b0>)
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	881b      	ldrh	r3, [r3, #0]
 8005dea:	b29b      	uxth	r3, r3
 8005dec:	429a      	cmp	r2, r3
 8005dee:	d138      	bne.n	8005e62 <tcp_input+0x312>
        pcb->local_port == tcphdr->dest &&
 8005df0:	69fb      	ldr	r3, [r7, #28]
 8005df2:	8ada      	ldrh	r2, [r3, #22]
 8005df4:	4b82      	ldr	r3, [pc, #520]	; (8006000 <tcp_input+0x4b0>)
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	885b      	ldrh	r3, [r3, #2]
 8005dfa:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 8005dfc:	429a      	cmp	r2, r3
 8005dfe:	d130      	bne.n	8005e62 <tcp_input+0x312>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8005e00:	69fb      	ldr	r3, [r7, #28]
 8005e02:	685a      	ldr	r2, [r3, #4]
 8005e04:	4b7f      	ldr	r3, [pc, #508]	; (8006004 <tcp_input+0x4b4>)
 8005e06:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8005e08:	429a      	cmp	r2, r3
 8005e0a:	d12a      	bne.n	8005e62 <tcp_input+0x312>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8005e0c:	69fb      	ldr	r3, [r7, #28]
 8005e0e:	681a      	ldr	r2, [r3, #0]
 8005e10:	4b7c      	ldr	r3, [pc, #496]	; (8006004 <tcp_input+0x4b4>)
 8005e12:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8005e14:	429a      	cmp	r2, r3
 8005e16:	d124      	bne.n	8005e62 <tcp_input+0x312>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8005e18:	69fb      	ldr	r3, [r7, #28]
 8005e1a:	68db      	ldr	r3, [r3, #12]
 8005e1c:	69fa      	ldr	r2, [r7, #28]
 8005e1e:	429a      	cmp	r2, r3
 8005e20:	d105      	bne.n	8005e2e <tcp_input+0x2de>
 8005e22:	4b72      	ldr	r3, [pc, #456]	; (8005fec <tcp_input+0x49c>)
 8005e24:	22ec      	movs	r2, #236	; 0xec
 8005e26:	4978      	ldr	r1, [pc, #480]	; (8006008 <tcp_input+0x4b8>)
 8005e28:	4872      	ldr	r0, [pc, #456]	; (8005ff4 <tcp_input+0x4a4>)
 8005e2a:	f007 fe19 	bl	800da60 <iprintf>
      if (prev != NULL) {
 8005e2e:	69bb      	ldr	r3, [r7, #24]
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d00a      	beq.n	8005e4a <tcp_input+0x2fa>
        prev->next = pcb->next;
 8005e34:	69fb      	ldr	r3, [r7, #28]
 8005e36:	68da      	ldr	r2, [r3, #12]
 8005e38:	69bb      	ldr	r3, [r7, #24]
 8005e3a:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 8005e3c:	4b73      	ldr	r3, [pc, #460]	; (800600c <tcp_input+0x4bc>)
 8005e3e:	681a      	ldr	r2, [r3, #0]
 8005e40:	69fb      	ldr	r3, [r7, #28]
 8005e42:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 8005e44:	4a71      	ldr	r2, [pc, #452]	; (800600c <tcp_input+0x4bc>)
 8005e46:	69fb      	ldr	r3, [r7, #28]
 8005e48:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8005e4a:	69fb      	ldr	r3, [r7, #28]
 8005e4c:	68db      	ldr	r3, [r3, #12]
 8005e4e:	69fa      	ldr	r2, [r7, #28]
 8005e50:	429a      	cmp	r2, r3
 8005e52:	d10f      	bne.n	8005e74 <tcp_input+0x324>
 8005e54:	4b65      	ldr	r3, [pc, #404]	; (8005fec <tcp_input+0x49c>)
 8005e56:	22f4      	movs	r2, #244	; 0xf4
 8005e58:	496d      	ldr	r1, [pc, #436]	; (8006010 <tcp_input+0x4c0>)
 8005e5a:	4866      	ldr	r0, [pc, #408]	; (8005ff4 <tcp_input+0x4a4>)
 8005e5c:	f007 fe00 	bl	800da60 <iprintf>
      break;
 8005e60:	e008      	b.n	8005e74 <tcp_input+0x324>
    }
    prev = pcb;
 8005e62:	69fb      	ldr	r3, [r7, #28]
 8005e64:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8005e66:	69fb      	ldr	r3, [r7, #28]
 8005e68:	68db      	ldr	r3, [r3, #12]
 8005e6a:	61fb      	str	r3, [r7, #28]
 8005e6c:	69fb      	ldr	r3, [r7, #28]
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d198      	bne.n	8005da4 <tcp_input+0x254>
 8005e72:	e000      	b.n	8005e76 <tcp_input+0x326>
      break;
 8005e74:	bf00      	nop
  }

  if (pcb == NULL) {
 8005e76:	69fb      	ldr	r3, [r7, #28]
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d173      	bne.n	8005f64 <tcp_input+0x414>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8005e7c:	4b65      	ldr	r3, [pc, #404]	; (8006014 <tcp_input+0x4c4>)
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	61fb      	str	r3, [r7, #28]
 8005e82:	e02f      	b.n	8005ee4 <tcp_input+0x394>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8005e84:	69fb      	ldr	r3, [r7, #28]
 8005e86:	7d1b      	ldrb	r3, [r3, #20]
 8005e88:	2b0a      	cmp	r3, #10
 8005e8a:	d005      	beq.n	8005e98 <tcp_input+0x348>
 8005e8c:	4b57      	ldr	r3, [pc, #348]	; (8005fec <tcp_input+0x49c>)
 8005e8e:	22fe      	movs	r2, #254	; 0xfe
 8005e90:	4961      	ldr	r1, [pc, #388]	; (8006018 <tcp_input+0x4c8>)
 8005e92:	4858      	ldr	r0, [pc, #352]	; (8005ff4 <tcp_input+0x4a4>)
 8005e94:	f007 fde4 	bl	800da60 <iprintf>
      if (pcb->remote_port == tcphdr->src &&
 8005e98:	69fb      	ldr	r3, [r7, #28]
 8005e9a:	8b1a      	ldrh	r2, [r3, #24]
 8005e9c:	4b58      	ldr	r3, [pc, #352]	; (8006000 <tcp_input+0x4b0>)
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	881b      	ldrh	r3, [r3, #0]
 8005ea2:	b29b      	uxth	r3, r3
 8005ea4:	429a      	cmp	r2, r3
 8005ea6:	d11a      	bne.n	8005ede <tcp_input+0x38e>
          pcb->local_port == tcphdr->dest &&
 8005ea8:	69fb      	ldr	r3, [r7, #28]
 8005eaa:	8ada      	ldrh	r2, [r3, #22]
 8005eac:	4b54      	ldr	r3, [pc, #336]	; (8006000 <tcp_input+0x4b0>)
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	885b      	ldrh	r3, [r3, #2]
 8005eb2:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 8005eb4:	429a      	cmp	r2, r3
 8005eb6:	d112      	bne.n	8005ede <tcp_input+0x38e>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8005eb8:	69fb      	ldr	r3, [r7, #28]
 8005eba:	685a      	ldr	r2, [r3, #4]
 8005ebc:	4b51      	ldr	r3, [pc, #324]	; (8006004 <tcp_input+0x4b4>)
 8005ebe:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 8005ec0:	429a      	cmp	r2, r3
 8005ec2:	d10c      	bne.n	8005ede <tcp_input+0x38e>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8005ec4:	69fb      	ldr	r3, [r7, #28]
 8005ec6:	681a      	ldr	r2, [r3, #0]
 8005ec8:	4b4e      	ldr	r3, [pc, #312]	; (8006004 <tcp_input+0x4b4>)
 8005eca:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8005ecc:	429a      	cmp	r2, r3
 8005ece:	d106      	bne.n	8005ede <tcp_input+0x38e>
        /* We don't really care enough to move this PCB to the front
           of the list since we are not very likely to receive that
           many segments for connections in TIME-WAIT. */
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: packed for TIME_WAITing connection.\n"));
        tcp_timewait_input(pcb);
 8005ed0:	69f8      	ldr	r0, [r7, #28]
 8005ed2:	f000 fb15 	bl	8006500 <tcp_timewait_input>
        pbuf_free(p);
 8005ed6:	6878      	ldr	r0, [r7, #4]
 8005ed8:	f7fe f9ee 	bl	80042b8 <pbuf_free>
        return;
 8005edc:	e1dc      	b.n	8006298 <tcp_input+0x748>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8005ede:	69fb      	ldr	r3, [r7, #28]
 8005ee0:	68db      	ldr	r3, [r3, #12]
 8005ee2:	61fb      	str	r3, [r7, #28]
 8005ee4:	69fb      	ldr	r3, [r7, #28]
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d1cc      	bne.n	8005e84 <tcp_input+0x334>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 8005eea:	2300      	movs	r3, #0
 8005eec:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8005eee:	4b4b      	ldr	r3, [pc, #300]	; (800601c <tcp_input+0x4cc>)
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	617b      	str	r3, [r7, #20]
 8005ef4:	e019      	b.n	8005f2a <tcp_input+0x3da>
      if (lpcb->local_port == tcphdr->dest) {
 8005ef6:	697b      	ldr	r3, [r7, #20]
 8005ef8:	8ada      	ldrh	r2, [r3, #22]
 8005efa:	4b41      	ldr	r3, [pc, #260]	; (8006000 <tcp_input+0x4b0>)
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	885b      	ldrh	r3, [r3, #2]
 8005f00:	b29b      	uxth	r3, r3
 8005f02:	429a      	cmp	r2, r3
 8005f04:	d10c      	bne.n	8005f20 <tcp_input+0x3d0>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8005f06:	697b      	ldr	r3, [r7, #20]
 8005f08:	681a      	ldr	r2, [r3, #0]
 8005f0a:	4b3e      	ldr	r3, [pc, #248]	; (8006004 <tcp_input+0x4b4>)
 8005f0c:	695b      	ldr	r3, [r3, #20]
 8005f0e:	429a      	cmp	r2, r3
 8005f10:	d00f      	beq.n	8005f32 <tcp_input+0x3e2>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8005f12:	697b      	ldr	r3, [r7, #20]
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d00d      	beq.n	8005f34 <tcp_input+0x3e4>
 8005f18:	697b      	ldr	r3, [r7, #20]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d009      	beq.n	8005f34 <tcp_input+0x3e4>
            break;
 #endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 8005f20:	697b      	ldr	r3, [r7, #20]
 8005f22:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8005f24:	697b      	ldr	r3, [r7, #20]
 8005f26:	68db      	ldr	r3, [r3, #12]
 8005f28:	617b      	str	r3, [r7, #20]
 8005f2a:	697b      	ldr	r3, [r7, #20]
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d1e2      	bne.n	8005ef6 <tcp_input+0x3a6>
 8005f30:	e000      	b.n	8005f34 <tcp_input+0x3e4>
            break;
 8005f32:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 8005f34:	697b      	ldr	r3, [r7, #20]
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d014      	beq.n	8005f64 <tcp_input+0x414>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 8005f3a:	69bb      	ldr	r3, [r7, #24]
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d00a      	beq.n	8005f56 <tcp_input+0x406>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 8005f40:	697b      	ldr	r3, [r7, #20]
 8005f42:	68da      	ldr	r2, [r3, #12]
 8005f44:	69bb      	ldr	r3, [r7, #24]
 8005f46:	60da      	str	r2, [r3, #12]
              /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 8005f48:	4b34      	ldr	r3, [pc, #208]	; (800601c <tcp_input+0x4cc>)
 8005f4a:	681a      	ldr	r2, [r3, #0]
 8005f4c:	697b      	ldr	r3, [r7, #20]
 8005f4e:	60da      	str	r2, [r3, #12]
              /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 8005f50:	4a32      	ldr	r2, [pc, #200]	; (800601c <tcp_input+0x4cc>)
 8005f52:	697b      	ldr	r3, [r7, #20]
 8005f54:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }

      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: packed for LISTENing connection.\n"));
      tcp_listen_input(lpcb);
 8005f56:	6978      	ldr	r0, [r7, #20]
 8005f58:	f000 f9f2 	bl	8006340 <tcp_listen_input>
      pbuf_free(p);
 8005f5c:	6878      	ldr	r0, [r7, #4]
 8005f5e:	f7fe f9ab 	bl	80042b8 <pbuf_free>
      return;
 8005f62:	e199      	b.n	8006298 <tcp_input+0x748>
  tcp_debug_print_flags(TCPH_FLAGS(tcphdr));
  LWIP_DEBUGF(TCP_INPUT_DEBUG, ("-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n"));
#endif /* TCP_INPUT_DEBUG */


  if (pcb != NULL) {
 8005f64:	69fb      	ldr	r3, [r7, #28]
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	f000 8164 	beq.w	8006234 <tcp_input+0x6e4>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 8005f6c:	4b2c      	ldr	r3, [pc, #176]	; (8006020 <tcp_input+0x4d0>)
 8005f6e:	2200      	movs	r2, #0
 8005f70:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	891a      	ldrh	r2, [r3, #8]
 8005f76:	4b2a      	ldr	r3, [pc, #168]	; (8006020 <tcp_input+0x4d0>)
 8005f78:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 8005f7a:	4a29      	ldr	r2, [pc, #164]	; (8006020 <tcp_input+0x4d0>)
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 8005f80:	4b1f      	ldr	r3, [pc, #124]	; (8006000 <tcp_input+0x4b0>)
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	4a26      	ldr	r2, [pc, #152]	; (8006020 <tcp_input+0x4d0>)
 8005f86:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 8005f88:	4b26      	ldr	r3, [pc, #152]	; (8006024 <tcp_input+0x4d4>)
 8005f8a:	2200      	movs	r2, #0
 8005f8c:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 8005f8e:	4b26      	ldr	r3, [pc, #152]	; (8006028 <tcp_input+0x4d8>)
 8005f90:	2200      	movs	r2, #0
 8005f92:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 8005f94:	4b25      	ldr	r3, [pc, #148]	; (800602c <tcp_input+0x4dc>)
 8005f96:	2200      	movs	r2, #0
 8005f98:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 8005f9a:	4b25      	ldr	r3, [pc, #148]	; (8006030 <tcp_input+0x4e0>)
 8005f9c:	781b      	ldrb	r3, [r3, #0]
 8005f9e:	f003 0308 	and.w	r3, r3, #8
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d006      	beq.n	8005fb4 <tcp_input+0x464>
      p->flags |= PBUF_FLAG_PUSH;
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	7b5b      	ldrb	r3, [r3, #13]
 8005faa:	f043 0301 	orr.w	r3, r3, #1
 8005fae:	b2da      	uxtb	r2, r3
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 8005fb4:	69fb      	ldr	r3, [r7, #28]
 8005fb6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d03d      	beq.n	8006038 <tcp_input+0x4e8>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8005fbc:	69f8      	ldr	r0, [r7, #28]
 8005fbe:	f7ff fa5b 	bl	8005478 <tcp_process_refused_data>
 8005fc2:	4603      	mov	r3, r0
 8005fc4:	f113 0f0d 	cmn.w	r3, #13
 8005fc8:	d007      	beq.n	8005fda <tcp_input+0x48a>
        ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8005fca:	69fb      	ldr	r3, [r7, #28]
 8005fcc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d032      	beq.n	8006038 <tcp_input+0x4e8>
        ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8005fd2:	4b18      	ldr	r3, [pc, #96]	; (8006034 <tcp_input+0x4e4>)
 8005fd4:	881b      	ldrh	r3, [r3, #0]
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d02e      	beq.n	8006038 <tcp_input+0x4e8>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 8005fda:	69fb      	ldr	r3, [r7, #28]
 8005fdc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	f040 8108 	bne.w	80061f4 <tcp_input+0x6a4>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 8005fe4:	69f8      	ldr	r0, [r7, #28]
 8005fe6:	f002 fa09 	bl	80083fc <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 8005fea:	e103      	b.n	80061f4 <tcp_input+0x6a4>
 8005fec:	0800f7f8 	.word	0x0800f7f8
 8005ff0:	0800f890 	.word	0x0800f890
 8005ff4:	0800f83c 	.word	0x0800f83c
 8005ff8:	0800f8b8 	.word	0x0800f8b8
 8005ffc:	0800f8e4 	.word	0x0800f8e4
 8006000:	200000e0 	.word	0x200000e0
 8006004:	20003350 	.word	0x20003350
 8006008:	0800f90c 	.word	0x0800f90c
 800600c:	200068a0 	.word	0x200068a0
 8006010:	0800f938 	.word	0x0800f938
 8006014:	200068b0 	.word	0x200068b0
 8006018:	0800f964 	.word	0x0800f964
 800601c:	200068a8 	.word	0x200068a8
 8006020:	200000d0 	.word	0x200000d0
 8006024:	20000100 	.word	0x20000100
 8006028:	200000fd 	.word	0x200000fd
 800602c:	200000f8 	.word	0x200000f8
 8006030:	200000fc 	.word	0x200000fc
 8006034:	200000fa 	.word	0x200000fa
      }
    }
    tcp_input_pcb = pcb;
 8006038:	4a99      	ldr	r2, [pc, #612]	; (80062a0 <tcp_input+0x750>)
 800603a:	69fb      	ldr	r3, [r7, #28]
 800603c:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800603e:	69f8      	ldr	r0, [r7, #28]
 8006040:	f000 fac6 	bl	80065d0 <tcp_process>
 8006044:	4603      	mov	r3, r0
 8006046:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 8006048:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800604c:	f113 0f0d 	cmn.w	r3, #13
 8006050:	f000 80d2 	beq.w	80061f8 <tcp_input+0x6a8>
      if (recv_flags & TF_RESET) {
 8006054:	4b93      	ldr	r3, [pc, #588]	; (80062a4 <tcp_input+0x754>)
 8006056:	781b      	ldrb	r3, [r3, #0]
 8006058:	f003 0308 	and.w	r3, r3, #8
 800605c:	2b00      	cmp	r3, #0
 800605e:	d016      	beq.n	800608e <tcp_input+0x53e>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 8006060:	69fb      	ldr	r3, [r7, #28]
 8006062:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006066:	2b00      	cmp	r3, #0
 8006068:	d008      	beq.n	800607c <tcp_input+0x52c>
 800606a:	69fb      	ldr	r3, [r7, #28]
 800606c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006070:	69fa      	ldr	r2, [r7, #28]
 8006072:	6912      	ldr	r2, [r2, #16]
 8006074:	f06f 010d 	mvn.w	r1, #13
 8006078:	4610      	mov	r0, r2
 800607a:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800607c:	69f9      	ldr	r1, [r7, #28]
 800607e:	488a      	ldr	r0, [pc, #552]	; (80062a8 <tcp_input+0x758>)
 8006080:	f7ff fc4e 	bl	8005920 <tcp_pcb_remove>
        memp_free(MEMP_TCP_PCB, pcb);
 8006084:	69f9      	ldr	r1, [r7, #28]
 8006086:	2001      	movs	r0, #1
 8006088:	f7fd fbd8 	bl	800383c <memp_free>
 800608c:	e0bf      	b.n	800620e <tcp_input+0x6be>
      } else {
        err = ERR_OK;
 800608e:	2300      	movs	r3, #0
 8006090:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 8006092:	4b86      	ldr	r3, [pc, #536]	; (80062ac <tcp_input+0x75c>)
 8006094:	881b      	ldrh	r3, [r3, #0]
 8006096:	2b00      	cmp	r3, #0
 8006098:	d01b      	beq.n	80060d2 <tcp_input+0x582>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800609a:	4b84      	ldr	r3, [pc, #528]	; (80062ac <tcp_input+0x75c>)
 800609c:	881b      	ldrh	r3, [r3, #0]
 800609e:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 80060a0:	69fb      	ldr	r3, [r7, #28]
 80060a2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d009      	beq.n	80060bc <tcp_input+0x56c>
 80060a8:	69fb      	ldr	r3, [r7, #28]
 80060aa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80060ac:	69fa      	ldr	r2, [r7, #28]
 80060ae:	6910      	ldr	r0, [r2, #16]
 80060b0:	89fa      	ldrh	r2, [r7, #14]
 80060b2:	69f9      	ldr	r1, [r7, #28]
 80060b4:	4798      	blx	r3
 80060b6:	4603      	mov	r3, r0
 80060b8:	74fb      	strb	r3, [r7, #19]
 80060ba:	e001      	b.n	80060c0 <tcp_input+0x570>
 80060bc:	2300      	movs	r3, #0
 80060be:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 80060c0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80060c4:	f113 0f0d 	cmn.w	r3, #13
 80060c8:	f000 8098 	beq.w	80061fc <tcp_input+0x6ac>
              goto aborted;
            }
          }
          recv_acked = 0;
 80060cc:	4b77      	ldr	r3, [pc, #476]	; (80062ac <tcp_input+0x75c>)
 80060ce:	2200      	movs	r2, #0
 80060d0:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 80060d2:	69f8      	ldr	r0, [r7, #28]
 80060d4:	f000 f902 	bl	80062dc <tcp_input_delayed_close>
 80060d8:	4603      	mov	r3, r0
 80060da:	2b00      	cmp	r3, #0
 80060dc:	f040 8090 	bne.w	8006200 <tcp_input+0x6b0>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 80060e0:	4b73      	ldr	r3, [pc, #460]	; (80062b0 <tcp_input+0x760>)
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d041      	beq.n	800616c <tcp_input+0x61c>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 80060e8:	69fb      	ldr	r3, [r7, #28]
 80060ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d006      	beq.n	80060fe <tcp_input+0x5ae>
 80060f0:	4b70      	ldr	r3, [pc, #448]	; (80062b4 <tcp_input+0x764>)
 80060f2:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
 80060f6:	4970      	ldr	r1, [pc, #448]	; (80062b8 <tcp_input+0x768>)
 80060f8:	4870      	ldr	r0, [pc, #448]	; (80062bc <tcp_input+0x76c>)
 80060fa:	f007 fcb1 	bl	800da60 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 80060fe:	69fb      	ldr	r3, [r7, #28]
 8006100:	7e9b      	ldrb	r3, [r3, #26]
 8006102:	f003 0310 	and.w	r3, r3, #16
 8006106:	2b00      	cmp	r3, #0
 8006108:	d008      	beq.n	800611c <tcp_input+0x5cc>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800610a:	4b69      	ldr	r3, [pc, #420]	; (80062b0 <tcp_input+0x760>)
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	4618      	mov	r0, r3
 8006110:	f7fe f8d2 	bl	80042b8 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 8006114:	69f8      	ldr	r0, [r7, #28]
 8006116:	f7fe fdd5 	bl	8004cc4 <tcp_abort>
            goto aborted;
 800611a:	e078      	b.n	800620e <tcp_input+0x6be>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800611c:	69fb      	ldr	r3, [r7, #28]
 800611e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006122:	2b00      	cmp	r3, #0
 8006124:	d00c      	beq.n	8006140 <tcp_input+0x5f0>
 8006126:	69fb      	ldr	r3, [r7, #28]
 8006128:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 800612c:	69fb      	ldr	r3, [r7, #28]
 800612e:	6918      	ldr	r0, [r3, #16]
 8006130:	4b5f      	ldr	r3, [pc, #380]	; (80062b0 <tcp_input+0x760>)
 8006132:	681a      	ldr	r2, [r3, #0]
 8006134:	2300      	movs	r3, #0
 8006136:	69f9      	ldr	r1, [r7, #28]
 8006138:	47a0      	blx	r4
 800613a:	4603      	mov	r3, r0
 800613c:	74fb      	strb	r3, [r7, #19]
 800613e:	e008      	b.n	8006152 <tcp_input+0x602>
 8006140:	4b5b      	ldr	r3, [pc, #364]	; (80062b0 <tcp_input+0x760>)
 8006142:	681a      	ldr	r2, [r3, #0]
 8006144:	2300      	movs	r3, #0
 8006146:	69f9      	ldr	r1, [r7, #28]
 8006148:	2000      	movs	r0, #0
 800614a:	f7ff fa47 	bl	80055dc <tcp_recv_null>
 800614e:	4603      	mov	r3, r0
 8006150:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 8006152:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8006156:	f113 0f0d 	cmn.w	r3, #13
 800615a:	d053      	beq.n	8006204 <tcp_input+0x6b4>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800615c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8006160:	2b00      	cmp	r3, #0
 8006162:	d003      	beq.n	800616c <tcp_input+0x61c>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 8006164:	4b52      	ldr	r3, [pc, #328]	; (80062b0 <tcp_input+0x760>)
 8006166:	681a      	ldr	r2, [r3, #0]
 8006168:	69fb      	ldr	r3, [r7, #28]
 800616a:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800616c:	4b4d      	ldr	r3, [pc, #308]	; (80062a4 <tcp_input+0x754>)
 800616e:	781b      	ldrb	r3, [r3, #0]
 8006170:	f003 0320 	and.w	r3, r3, #32
 8006174:	2b00      	cmp	r3, #0
 8006176:	d030      	beq.n	80061da <tcp_input+0x68a>
          if (pcb->refused_data != NULL) {
 8006178:	69fb      	ldr	r3, [r7, #28]
 800617a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800617c:	2b00      	cmp	r3, #0
 800617e:	d009      	beq.n	8006194 <tcp_input+0x644>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 8006180:	69fb      	ldr	r3, [r7, #28]
 8006182:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006184:	7b5a      	ldrb	r2, [r3, #13]
 8006186:	69fb      	ldr	r3, [r7, #28]
 8006188:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800618a:	f042 0220 	orr.w	r2, r2, #32
 800618e:	b2d2      	uxtb	r2, r2
 8006190:	735a      	strb	r2, [r3, #13]
 8006192:	e022      	b.n	80061da <tcp_input+0x68a>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8006194:	69fb      	ldr	r3, [r7, #28]
 8006196:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006198:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800619c:	d005      	beq.n	80061aa <tcp_input+0x65a>
              pcb->rcv_wnd++;
 800619e:	69fb      	ldr	r3, [r7, #28]
 80061a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80061a2:	3301      	adds	r3, #1
 80061a4:	b29a      	uxth	r2, r3
 80061a6:	69fb      	ldr	r3, [r7, #28]
 80061a8:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 80061aa:	69fb      	ldr	r3, [r7, #28]
 80061ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d00b      	beq.n	80061cc <tcp_input+0x67c>
 80061b4:	69fb      	ldr	r3, [r7, #28]
 80061b6:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 80061ba:	69fb      	ldr	r3, [r7, #28]
 80061bc:	6918      	ldr	r0, [r3, #16]
 80061be:	2300      	movs	r3, #0
 80061c0:	2200      	movs	r2, #0
 80061c2:	69f9      	ldr	r1, [r7, #28]
 80061c4:	47a0      	blx	r4
 80061c6:	4603      	mov	r3, r0
 80061c8:	74fb      	strb	r3, [r7, #19]
 80061ca:	e001      	b.n	80061d0 <tcp_input+0x680>
 80061cc:	2300      	movs	r3, #0
 80061ce:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 80061d0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80061d4:	f113 0f0d 	cmn.w	r3, #13
 80061d8:	d016      	beq.n	8006208 <tcp_input+0x6b8>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 80061da:	4b31      	ldr	r3, [pc, #196]	; (80062a0 <tcp_input+0x750>)
 80061dc:	2200      	movs	r2, #0
 80061de:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 80061e0:	69f8      	ldr	r0, [r7, #28]
 80061e2:	f000 f87b 	bl	80062dc <tcp_input_delayed_close>
 80061e6:	4603      	mov	r3, r0
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d10f      	bne.n	800620c <tcp_input+0x6bc>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 80061ec:	69f8      	ldr	r0, [r7, #28]
 80061ee:	f002 f961 	bl	80084b4 <tcp_output>
 80061f2:	e00c      	b.n	800620e <tcp_input+0x6be>
        goto aborted;
 80061f4:	bf00      	nop
 80061f6:	e00a      	b.n	800620e <tcp_input+0x6be>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 80061f8:	bf00      	nop
 80061fa:	e008      	b.n	800620e <tcp_input+0x6be>
              goto aborted;
 80061fc:	bf00      	nop
 80061fe:	e006      	b.n	800620e <tcp_input+0x6be>
          goto aborted;
 8006200:	bf00      	nop
 8006202:	e004      	b.n	800620e <tcp_input+0x6be>
            goto aborted;
 8006204:	bf00      	nop
 8006206:	e002      	b.n	800620e <tcp_input+0x6be>
              goto aborted;
 8006208:	bf00      	nop
 800620a:	e000      	b.n	800620e <tcp_input+0x6be>
          goto aborted;
 800620c:	bf00      	nop
    tcp_input_pcb = NULL;
 800620e:	4b24      	ldr	r3, [pc, #144]	; (80062a0 <tcp_input+0x750>)
 8006210:	2200      	movs	r2, #0
 8006212:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 8006214:	4b26      	ldr	r3, [pc, #152]	; (80062b0 <tcp_input+0x760>)
 8006216:	2200      	movs	r2, #0
 8006218:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL)
 800621a:	4b29      	ldr	r3, [pc, #164]	; (80062c0 <tcp_input+0x770>)
 800621c:	685b      	ldr	r3, [r3, #4]
 800621e:	2b00      	cmp	r3, #0
 8006220:	d039      	beq.n	8006296 <tcp_input+0x746>
    {
      pbuf_free(inseg.p);
 8006222:	4b27      	ldr	r3, [pc, #156]	; (80062c0 <tcp_input+0x770>)
 8006224:	685b      	ldr	r3, [r3, #4]
 8006226:	4618      	mov	r0, r3
 8006228:	f7fe f846 	bl	80042b8 <pbuf_free>
      inseg.p = NULL;
 800622c:	4b24      	ldr	r3, [pc, #144]	; (80062c0 <tcp_input+0x770>)
 800622e:	2200      	movs	r2, #0
 8006230:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 8006232:	e030      	b.n	8006296 <tcp_input+0x746>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8006234:	4b23      	ldr	r3, [pc, #140]	; (80062c4 <tcp_input+0x774>)
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	899b      	ldrh	r3, [r3, #12]
 800623a:	b29b      	uxth	r3, r3
 800623c:	4618      	mov	r0, r3
 800623e:	f7fc ff08 	bl	8003052 <lwip_htons>
 8006242:	4603      	mov	r3, r0
 8006244:	f003 0304 	and.w	r3, r3, #4
 8006248:	2b00      	cmp	r3, #0
 800624a:	d115      	bne.n	8006278 <tcp_input+0x728>
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800624c:	4b1e      	ldr	r3, [pc, #120]	; (80062c8 <tcp_input+0x778>)
 800624e:	6818      	ldr	r0, [r3, #0]
 8006250:	4b1e      	ldr	r3, [pc, #120]	; (80062cc <tcp_input+0x77c>)
 8006252:	881b      	ldrh	r3, [r3, #0]
 8006254:	461a      	mov	r2, r3
 8006256:	4b1e      	ldr	r3, [pc, #120]	; (80062d0 <tcp_input+0x780>)
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	18d1      	adds	r1, r2, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800625c:	4b19      	ldr	r3, [pc, #100]	; (80062c4 <tcp_input+0x774>)
 800625e:	681b      	ldr	r3, [r3, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8006260:	885b      	ldrh	r3, [r3, #2]
 8006262:	b29b      	uxth	r3, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8006264:	4a17      	ldr	r2, [pc, #92]	; (80062c4 <tcp_input+0x774>)
 8006266:	6812      	ldr	r2, [r2, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8006268:	8812      	ldrh	r2, [r2, #0]
 800626a:	b292      	uxth	r2, r2
 800626c:	9201      	str	r2, [sp, #4]
 800626e:	9300      	str	r3, [sp, #0]
 8006270:	4b18      	ldr	r3, [pc, #96]	; (80062d4 <tcp_input+0x784>)
 8006272:	4a19      	ldr	r2, [pc, #100]	; (80062d8 <tcp_input+0x788>)
 8006274:	f002 fba2 	bl	80089bc <tcp_rst>
    pbuf_free(p);
 8006278:	6878      	ldr	r0, [r7, #4]
 800627a:	f7fe f81d 	bl	80042b8 <pbuf_free>
  return;
 800627e:	e00a      	b.n	8006296 <tcp_input+0x746>
    goto dropped;
 8006280:	bf00      	nop
 8006282:	e004      	b.n	800628e <tcp_input+0x73e>
    goto dropped;
 8006284:	bf00      	nop
 8006286:	e002      	b.n	800628e <tcp_input+0x73e>
    goto dropped;
 8006288:	bf00      	nop
 800628a:	e000      	b.n	800628e <tcp_input+0x73e>
      goto dropped;
 800628c:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800628e:	6878      	ldr	r0, [r7, #4]
 8006290:	f7fe f812 	bl	80042b8 <pbuf_free>
 8006294:	e000      	b.n	8006298 <tcp_input+0x748>
  return;
 8006296:	bf00      	nop
}
 8006298:	3724      	adds	r7, #36	; 0x24
 800629a:	46bd      	mov	sp, r7
 800629c:	bd90      	pop	{r4, r7, pc}
 800629e:	bf00      	nop
 80062a0:	200068b4 	.word	0x200068b4
 80062a4:	200000fd 	.word	0x200000fd
 80062a8:	200068a0 	.word	0x200068a0
 80062ac:	200000f8 	.word	0x200000f8
 80062b0:	20000100 	.word	0x20000100
 80062b4:	0800f7f8 	.word	0x0800f7f8
 80062b8:	0800f994 	.word	0x0800f994
 80062bc:	0800f83c 	.word	0x0800f83c
 80062c0:	200000d0 	.word	0x200000d0
 80062c4:	200000e0 	.word	0x200000e0
 80062c8:	200000f4 	.word	0x200000f4
 80062cc:	200000fa 	.word	0x200000fa
 80062d0:	200000f0 	.word	0x200000f0
 80062d4:	20003360 	.word	0x20003360
 80062d8:	20003364 	.word	0x20003364

080062dc <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 80062dc:	b580      	push	{r7, lr}
 80062de:	b082      	sub	sp, #8
 80062e0:	af00      	add	r7, sp, #0
 80062e2:	6078      	str	r0, [r7, #4]
  if (recv_flags & TF_CLOSED) {
 80062e4:	4b14      	ldr	r3, [pc, #80]	; (8006338 <tcp_input_delayed_close+0x5c>)
 80062e6:	781b      	ldrb	r3, [r3, #0]
 80062e8:	f003 0310 	and.w	r3, r3, #16
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d01d      	beq.n	800632c <tcp_input_delayed_close+0x50>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	7e9b      	ldrb	r3, [r3, #26]
 80062f4:	f003 0310 	and.w	r3, r3, #16
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d10d      	bne.n	8006318 <tcp_input_delayed_close+0x3c>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006302:	2b00      	cmp	r3, #0
 8006304:	d008      	beq.n	8006318 <tcp_input_delayed_close+0x3c>
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800630c:	687a      	ldr	r2, [r7, #4]
 800630e:	6912      	ldr	r2, [r2, #16]
 8006310:	f06f 010e 	mvn.w	r1, #14
 8006314:	4610      	mov	r0, r2
 8006316:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8006318:	6879      	ldr	r1, [r7, #4]
 800631a:	4808      	ldr	r0, [pc, #32]	; (800633c <tcp_input_delayed_close+0x60>)
 800631c:	f7ff fb00 	bl	8005920 <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB, pcb);
 8006320:	6879      	ldr	r1, [r7, #4]
 8006322:	2001      	movs	r0, #1
 8006324:	f7fd fa8a 	bl	800383c <memp_free>
    return 1;
 8006328:	2301      	movs	r3, #1
 800632a:	e000      	b.n	800632e <tcp_input_delayed_close+0x52>
  }
  return 0;
 800632c:	2300      	movs	r3, #0
}
 800632e:	4618      	mov	r0, r3
 8006330:	3708      	adds	r7, #8
 8006332:	46bd      	mov	sp, r7
 8006334:	bd80      	pop	{r7, pc}
 8006336:	bf00      	nop
 8006338:	200000fd 	.word	0x200000fd
 800633c:	200068a0 	.word	0x200068a0

08006340 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 8006340:	b580      	push	{r7, lr}
 8006342:	b088      	sub	sp, #32
 8006344:	af02      	add	r7, sp, #8
 8006346:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 8006348:	4b63      	ldr	r3, [pc, #396]	; (80064d8 <tcp_listen_input+0x198>)
 800634a:	781b      	ldrb	r3, [r3, #0]
 800634c:	f003 0304 	and.w	r3, r3, #4
 8006350:	2b00      	cmp	r3, #0
 8006352:	f040 80bb 	bne.w	80064cc <tcp_listen_input+0x18c>
    return;
  }

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 8006356:	4b60      	ldr	r3, [pc, #384]	; (80064d8 <tcp_listen_input+0x198>)
 8006358:	781b      	ldrb	r3, [r3, #0]
 800635a:	f003 0310 	and.w	r3, r3, #16
 800635e:	2b00      	cmp	r3, #0
 8006360:	d016      	beq.n	8006390 <tcp_listen_input+0x50>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8006362:	4b5e      	ldr	r3, [pc, #376]	; (80064dc <tcp_listen_input+0x19c>)
 8006364:	6818      	ldr	r0, [r3, #0]
 8006366:	4b5e      	ldr	r3, [pc, #376]	; (80064e0 <tcp_listen_input+0x1a0>)
 8006368:	881b      	ldrh	r3, [r3, #0]
 800636a:	461a      	mov	r2, r3
 800636c:	4b5d      	ldr	r3, [pc, #372]	; (80064e4 <tcp_listen_input+0x1a4>)
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	18d1      	adds	r1, r2, r3
      ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8006372:	4b5d      	ldr	r3, [pc, #372]	; (80064e8 <tcp_listen_input+0x1a8>)
 8006374:	681b      	ldr	r3, [r3, #0]
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8006376:	885b      	ldrh	r3, [r3, #2]
 8006378:	b29b      	uxth	r3, r3
      ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800637a:	4a5b      	ldr	r2, [pc, #364]	; (80064e8 <tcp_listen_input+0x1a8>)
 800637c:	6812      	ldr	r2, [r2, #0]
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800637e:	8812      	ldrh	r2, [r2, #0]
 8006380:	b292      	uxth	r2, r2
 8006382:	9201      	str	r2, [sp, #4]
 8006384:	9300      	str	r3, [sp, #0]
 8006386:	4b59      	ldr	r3, [pc, #356]	; (80064ec <tcp_listen_input+0x1ac>)
 8006388:	4a59      	ldr	r2, [pc, #356]	; (80064f0 <tcp_listen_input+0x1b0>)
 800638a:	f002 fb17 	bl	80089bc <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800638e:	e09f      	b.n	80064d0 <tcp_listen_input+0x190>
  } else if (flags & TCP_SYN) {
 8006390:	4b51      	ldr	r3, [pc, #324]	; (80064d8 <tcp_listen_input+0x198>)
 8006392:	781b      	ldrb	r3, [r3, #0]
 8006394:	f003 0302 	and.w	r3, r3, #2
 8006398:	2b00      	cmp	r3, #0
 800639a:	f000 8099 	beq.w	80064d0 <tcp_listen_input+0x190>
    npcb = tcp_alloc(pcb->prio);
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	7d5b      	ldrb	r3, [r3, #21]
 80063a2:	4618      	mov	r0, r3
 80063a4:	f7ff f9f8 	bl	8005798 <tcp_alloc>
 80063a8:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 80063aa:	697b      	ldr	r3, [r7, #20]
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d111      	bne.n	80063d4 <tcp_listen_input+0x94>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	699b      	ldr	r3, [r3, #24]
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d00a      	beq.n	80063ce <tcp_listen_input+0x8e>
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	699b      	ldr	r3, [r3, #24]
 80063bc:	687a      	ldr	r2, [r7, #4]
 80063be:	6910      	ldr	r0, [r2, #16]
 80063c0:	f04f 32ff 	mov.w	r2, #4294967295
 80063c4:	2100      	movs	r1, #0
 80063c6:	4798      	blx	r3
 80063c8:	4603      	mov	r3, r0
 80063ca:	73bb      	strb	r3, [r7, #14]
      return;
 80063cc:	e081      	b.n	80064d2 <tcp_listen_input+0x192>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 80063ce:	23f0      	movs	r3, #240	; 0xf0
 80063d0:	73bb      	strb	r3, [r7, #14]
      return;
 80063d2:	e07e      	b.n	80064d2 <tcp_listen_input+0x192>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 80063d4:	4b47      	ldr	r3, [pc, #284]	; (80064f4 <tcp_listen_input+0x1b4>)
 80063d6:	695a      	ldr	r2, [r3, #20]
 80063d8:	697b      	ldr	r3, [r7, #20]
 80063da:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 80063dc:	4b45      	ldr	r3, [pc, #276]	; (80064f4 <tcp_listen_input+0x1b4>)
 80063de:	691a      	ldr	r2, [r3, #16]
 80063e0:	697b      	ldr	r3, [r7, #20]
 80063e2:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	8ada      	ldrh	r2, [r3, #22]
 80063e8:	697b      	ldr	r3, [r7, #20]
 80063ea:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 80063ec:	4b3e      	ldr	r3, [pc, #248]	; (80064e8 <tcp_listen_input+0x1a8>)
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	881b      	ldrh	r3, [r3, #0]
 80063f2:	b29a      	uxth	r2, r3
 80063f4:	697b      	ldr	r3, [r7, #20]
 80063f6:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 80063f8:	697b      	ldr	r3, [r7, #20]
 80063fa:	2203      	movs	r2, #3
 80063fc:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 80063fe:	4b39      	ldr	r3, [pc, #228]	; (80064e4 <tcp_listen_input+0x1a4>)
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	1c5a      	adds	r2, r3, #1
 8006404:	697b      	ldr	r3, [r7, #20]
 8006406:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 8006408:	697b      	ldr	r3, [r7, #20]
 800640a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800640c:	697b      	ldr	r3, [r7, #20]
 800640e:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 8006410:	6978      	ldr	r0, [r7, #20]
 8006412:	f7ff fb01 	bl	8005a18 <tcp_next_iss>
 8006416:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 8006418:	697b      	ldr	r3, [r7, #20]
 800641a:	693a      	ldr	r2, [r7, #16]
 800641c:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->snd_nxt = iss;
 800641e:	697b      	ldr	r3, [r7, #20]
 8006420:	693a      	ldr	r2, [r7, #16]
 8006422:	64da      	str	r2, [r3, #76]	; 0x4c
    npcb->lastack = iss;
 8006424:	697b      	ldr	r3, [r7, #20]
 8006426:	693a      	ldr	r2, [r7, #16]
 8006428:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 800642a:	697b      	ldr	r3, [r7, #20]
 800642c:	693a      	ldr	r2, [r7, #16]
 800642e:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8006430:	4b2c      	ldr	r3, [pc, #176]	; (80064e4 <tcp_listen_input+0x1a4>)
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	1e5a      	subs	r2, r3, #1
 8006436:	697b      	ldr	r3, [r7, #20]
 8006438:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->callback_arg = pcb->callback_arg;
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	691a      	ldr	r2, [r3, #16]
 800643e:	697b      	ldr	r3, [r7, #20]
 8006440:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 8006442:	697b      	ldr	r3, [r7, #20]
 8006444:	687a      	ldr	r2, [r7, #4]
 8006446:	679a      	str	r2, [r3, #120]	; 0x78
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	7a1b      	ldrb	r3, [r3, #8]
 800644c:	f003 030c 	and.w	r3, r3, #12
 8006450:	b2da      	uxtb	r2, r3
 8006452:	697b      	ldr	r3, [r7, #20]
 8006454:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 8006456:	4b28      	ldr	r3, [pc, #160]	; (80064f8 <tcp_listen_input+0x1b8>)
 8006458:	681a      	ldr	r2, [r3, #0]
 800645a:	697b      	ldr	r3, [r7, #20]
 800645c:	60da      	str	r2, [r3, #12]
 800645e:	4a26      	ldr	r2, [pc, #152]	; (80064f8 <tcp_listen_input+0x1b8>)
 8006460:	697b      	ldr	r3, [r7, #20]
 8006462:	6013      	str	r3, [r2, #0]
 8006464:	f002 fcf2 	bl	8008e4c <tcp_timer_needed>
 8006468:	4b24      	ldr	r3, [pc, #144]	; (80064fc <tcp_listen_input+0x1bc>)
 800646a:	2201      	movs	r2, #1
 800646c:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800646e:	6978      	ldr	r0, [r7, #20]
 8006470:	f001 fd10 	bl	8007e94 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 8006474:	4b1c      	ldr	r3, [pc, #112]	; (80064e8 <tcp_listen_input+0x1a8>)
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	89db      	ldrh	r3, [r3, #14]
 800647a:	b29a      	uxth	r2, r3
 800647c:	697b      	ldr	r3, [r7, #20]
 800647e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    npcb->snd_wnd_max = npcb->snd_wnd;
 8006482:	697b      	ldr	r3, [r7, #20]
 8006484:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8006488:	697b      	ldr	r3, [r7, #20]
 800648a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800648e:	697b      	ldr	r3, [r7, #20]
 8006490:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 8006492:	697b      	ldr	r3, [r7, #20]
 8006494:	3304      	adds	r3, #4
 8006496:	4619      	mov	r1, r3
 8006498:	4610      	mov	r0, r2
 800649a:	f7ff fad3 	bl	8005a44 <tcp_eff_send_mss_impl>
 800649e:	4603      	mov	r3, r0
 80064a0:	461a      	mov	r2, r3
 80064a2:	697b      	ldr	r3, [r7, #20]
 80064a4:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 80064a6:	2112      	movs	r1, #18
 80064a8:	6978      	ldr	r0, [r7, #20]
 80064aa:	f001 feab 	bl	8008204 <tcp_enqueue_flags>
 80064ae:	4603      	mov	r3, r0
 80064b0:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 80064b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d004      	beq.n	80064c4 <tcp_listen_input+0x184>
      tcp_abandon(npcb, 0);
 80064ba:	2100      	movs	r1, #0
 80064bc:	6978      	ldr	r0, [r7, #20]
 80064be:	f7fe fb4f 	bl	8004b60 <tcp_abandon>
      return;
 80064c2:	e006      	b.n	80064d2 <tcp_listen_input+0x192>
    tcp_output(npcb);
 80064c4:	6978      	ldr	r0, [r7, #20]
 80064c6:	f001 fff5 	bl	80084b4 <tcp_output>
  return;
 80064ca:	e001      	b.n	80064d0 <tcp_listen_input+0x190>
    return;
 80064cc:	bf00      	nop
 80064ce:	e000      	b.n	80064d2 <tcp_listen_input+0x192>
  return;
 80064d0:	bf00      	nop
}
 80064d2:	3718      	adds	r7, #24
 80064d4:	46bd      	mov	sp, r7
 80064d6:	bd80      	pop	{r7, pc}
 80064d8:	200000fc 	.word	0x200000fc
 80064dc:	200000f4 	.word	0x200000f4
 80064e0:	200000fa 	.word	0x200000fa
 80064e4:	200000f0 	.word	0x200000f0
 80064e8:	200000e0 	.word	0x200000e0
 80064ec:	20003360 	.word	0x20003360
 80064f0:	20003364 	.word	0x20003364
 80064f4:	20003350 	.word	0x20003350
 80064f8:	200068a0 	.word	0x200068a0
 80064fc:	2000689c 	.word	0x2000689c

08006500 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 8006500:	b580      	push	{r7, lr}
 8006502:	b084      	sub	sp, #16
 8006504:	af02      	add	r7, sp, #8
 8006506:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 8006508:	4b29      	ldr	r3, [pc, #164]	; (80065b0 <tcp_timewait_input+0xb0>)
 800650a:	781b      	ldrb	r3, [r3, #0]
 800650c:	f003 0304 	and.w	r3, r3, #4
 8006510:	2b00      	cmp	r3, #0
 8006512:	d146      	bne.n	80065a2 <tcp_timewait_input+0xa2>
    return;
  }
  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 8006514:	4b26      	ldr	r3, [pc, #152]	; (80065b0 <tcp_timewait_input+0xb0>)
 8006516:	781b      	ldrb	r3, [r3, #0]
 8006518:	f003 0302 	and.w	r3, r3, #2
 800651c:	2b00      	cmp	r3, #0
 800651e:	d027      	beq.n	8006570 <tcp_timewait_input+0x70>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8006520:	4b24      	ldr	r3, [pc, #144]	; (80065b4 <tcp_timewait_input+0xb4>)
 8006522:	681a      	ldr	r2, [r3, #0]
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006528:	1ad3      	subs	r3, r2, r3
 800652a:	2b00      	cmp	r3, #0
 800652c:	db2a      	blt.n	8006584 <tcp_timewait_input+0x84>
 800652e:	4b21      	ldr	r3, [pc, #132]	; (80065b4 <tcp_timewait_input+0xb4>)
 8006530:	681a      	ldr	r2, [r3, #0]
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006536:	6879      	ldr	r1, [r7, #4]
 8006538:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800653a:	440b      	add	r3, r1
 800653c:	1ad3      	subs	r3, r2, r3
 800653e:	2b00      	cmp	r3, #0
 8006540:	dc20      	bgt.n	8006584 <tcp_timewait_input+0x84>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8006542:	4b1d      	ldr	r3, [pc, #116]	; (80065b8 <tcp_timewait_input+0xb8>)
 8006544:	6818      	ldr	r0, [r3, #0]
 8006546:	4b1d      	ldr	r3, [pc, #116]	; (80065bc <tcp_timewait_input+0xbc>)
 8006548:	881b      	ldrh	r3, [r3, #0]
 800654a:	461a      	mov	r2, r3
 800654c:	4b19      	ldr	r3, [pc, #100]	; (80065b4 <tcp_timewait_input+0xb4>)
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	18d1      	adds	r1, r2, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8006552:	4b1b      	ldr	r3, [pc, #108]	; (80065c0 <tcp_timewait_input+0xc0>)
 8006554:	681b      	ldr	r3, [r3, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8006556:	885b      	ldrh	r3, [r3, #2]
 8006558:	b29b      	uxth	r3, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800655a:	4a19      	ldr	r2, [pc, #100]	; (80065c0 <tcp_timewait_input+0xc0>)
 800655c:	6812      	ldr	r2, [r2, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800655e:	8812      	ldrh	r2, [r2, #0]
 8006560:	b292      	uxth	r2, r2
 8006562:	9201      	str	r2, [sp, #4]
 8006564:	9300      	str	r3, [sp, #0]
 8006566:	4b17      	ldr	r3, [pc, #92]	; (80065c4 <tcp_timewait_input+0xc4>)
 8006568:	4a17      	ldr	r2, [pc, #92]	; (80065c8 <tcp_timewait_input+0xc8>)
 800656a:	f002 fa27 	bl	80089bc <tcp_rst>
      return;
 800656e:	e01b      	b.n	80065a8 <tcp_timewait_input+0xa8>
    }
  } else if (flags & TCP_FIN) {
 8006570:	4b0f      	ldr	r3, [pc, #60]	; (80065b0 <tcp_timewait_input+0xb0>)
 8006572:	781b      	ldrb	r3, [r3, #0]
 8006574:	f003 0301 	and.w	r3, r3, #1
 8006578:	2b00      	cmp	r3, #0
 800657a:	d003      	beq.n	8006584 <tcp_timewait_input+0x84>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800657c:	4b13      	ldr	r3, [pc, #76]	; (80065cc <tcp_timewait_input+0xcc>)
 800657e:	681a      	ldr	r2, [r3, #0]
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 8006584:	4b0d      	ldr	r3, [pc, #52]	; (80065bc <tcp_timewait_input+0xbc>)
 8006586:	881b      	ldrh	r3, [r3, #0]
 8006588:	2b00      	cmp	r3, #0
 800658a:	d00c      	beq.n	80065a6 <tcp_timewait_input+0xa6>
    /* Acknowledge data, FIN or out-of-window SYN */
    pcb->flags |= TF_ACK_NOW;
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	7e9b      	ldrb	r3, [r3, #26]
 8006590:	f043 0302 	orr.w	r3, r3, #2
 8006594:	b2da      	uxtb	r2, r3
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	769a      	strb	r2, [r3, #26]
    tcp_output(pcb);
 800659a:	6878      	ldr	r0, [r7, #4]
 800659c:	f001 ff8a 	bl	80084b4 <tcp_output>
  }
  return;
 80065a0:	e001      	b.n	80065a6 <tcp_timewait_input+0xa6>
    return;
 80065a2:	bf00      	nop
 80065a4:	e000      	b.n	80065a8 <tcp_timewait_input+0xa8>
  return;
 80065a6:	bf00      	nop
}
 80065a8:	3708      	adds	r7, #8
 80065aa:	46bd      	mov	sp, r7
 80065ac:	bd80      	pop	{r7, pc}
 80065ae:	bf00      	nop
 80065b0:	200000fc 	.word	0x200000fc
 80065b4:	200000f0 	.word	0x200000f0
 80065b8:	200000f4 	.word	0x200000f4
 80065bc:	200000fa 	.word	0x200000fa
 80065c0:	200000e0 	.word	0x200000e0
 80065c4:	20003360 	.word	0x20003360
 80065c8:	20003364 	.word	0x20003364
 80065cc:	200068a4 	.word	0x200068a4

080065d0 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 80065d0:	b580      	push	{r7, lr}
 80065d2:	b08a      	sub	sp, #40	; 0x28
 80065d4:	af02      	add	r7, sp, #8
 80065d6:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 80065d8:	2300      	movs	r3, #0
 80065da:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 80065dc:	2300      	movs	r3, #0
 80065de:	76bb      	strb	r3, [r7, #26]

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 80065e0:	4ba4      	ldr	r3, [pc, #656]	; (8006874 <tcp_process+0x2a4>)
 80065e2:	781b      	ldrb	r3, [r3, #0]
 80065e4:	f003 0304 	and.w	r3, r3, #4
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d04e      	beq.n	800668a <tcp_process+0xba>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	7d1b      	ldrb	r3, [r3, #20]
 80065f0:	2b02      	cmp	r3, #2
 80065f2:	d108      	bne.n	8006606 <tcp_process+0x36>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80065f8:	4b9f      	ldr	r3, [pc, #636]	; (8006878 <tcp_process+0x2a8>)
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	429a      	cmp	r2, r3
 80065fe:	d123      	bne.n	8006648 <tcp_process+0x78>
        acceptable = 1;
 8006600:	2301      	movs	r3, #1
 8006602:	76fb      	strb	r3, [r7, #27]
 8006604:	e020      	b.n	8006648 <tcp_process+0x78>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800660a:	4b9c      	ldr	r3, [pc, #624]	; (800687c <tcp_process+0x2ac>)
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	429a      	cmp	r2, r3
 8006610:	d102      	bne.n	8006618 <tcp_process+0x48>
        acceptable = 1;
 8006612:	2301      	movs	r3, #1
 8006614:	76fb      	strb	r3, [r7, #27]
 8006616:	e017      	b.n	8006648 <tcp_process+0x78>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8006618:	4b98      	ldr	r3, [pc, #608]	; (800687c <tcp_process+0x2ac>)
 800661a:	681a      	ldr	r2, [r3, #0]
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006620:	1ad3      	subs	r3, r2, r3
 8006622:	2b00      	cmp	r3, #0
 8006624:	db10      	blt.n	8006648 <tcp_process+0x78>
 8006626:	4b95      	ldr	r3, [pc, #596]	; (800687c <tcp_process+0x2ac>)
 8006628:	681a      	ldr	r2, [r3, #0]
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800662e:	6879      	ldr	r1, [r7, #4]
 8006630:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8006632:	440b      	add	r3, r1
 8006634:	1ad3      	subs	r3, r2, r3
 8006636:	2b00      	cmp	r3, #0
 8006638:	dc06      	bgt.n	8006648 <tcp_process+0x78>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we only send an ACK
           and wait for a re-send with matching sequence number.
           This violates RFC 793, but is required to protection against
           CVE-2004-0230 (RST spoofing attack). */
        tcp_ack_now(pcb);
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	7e9b      	ldrb	r3, [r3, #26]
 800663e:	f043 0302 	orr.w	r3, r3, #2
 8006642:	b2da      	uxtb	r2, r3
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	769a      	strb	r2, [r3, #26]
      }
    }

    if (acceptable) {
 8006648:	7efb      	ldrb	r3, [r7, #27]
 800664a:	2b00      	cmp	r3, #0
 800664c:	d01b      	beq.n	8006686 <tcp_process+0xb6>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	7d1b      	ldrb	r3, [r3, #20]
 8006652:	2b00      	cmp	r3, #0
 8006654:	d106      	bne.n	8006664 <tcp_process+0x94>
 8006656:	4b8a      	ldr	r3, [pc, #552]	; (8006880 <tcp_process+0x2b0>)
 8006658:	f240 22e7 	movw	r2, #743	; 0x2e7
 800665c:	4989      	ldr	r1, [pc, #548]	; (8006884 <tcp_process+0x2b4>)
 800665e:	488a      	ldr	r0, [pc, #552]	; (8006888 <tcp_process+0x2b8>)
 8006660:	f007 f9fe 	bl	800da60 <iprintf>
      recv_flags |= TF_RESET;
 8006664:	4b89      	ldr	r3, [pc, #548]	; (800688c <tcp_process+0x2bc>)
 8006666:	781b      	ldrb	r3, [r3, #0]
 8006668:	f043 0308 	orr.w	r3, r3, #8
 800666c:	b2da      	uxtb	r2, r3
 800666e:	4b87      	ldr	r3, [pc, #540]	; (800688c <tcp_process+0x2bc>)
 8006670:	701a      	strb	r2, [r3, #0]
      pcb->flags &= ~TF_ACK_DELAY;
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	7e9b      	ldrb	r3, [r3, #26]
 8006676:	f023 0301 	bic.w	r3, r3, #1
 800667a:	b2da      	uxtb	r2, r3
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	769a      	strb	r2, [r3, #26]
      return ERR_RST;
 8006680:	f06f 030d 	mvn.w	r3, #13
 8006684:	e34d      	b.n	8006d22 <tcp_process+0x752>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
       seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
       seqno, pcb->rcv_nxt));
      return ERR_OK;
 8006686:	2300      	movs	r3, #0
 8006688:	e34b      	b.n	8006d22 <tcp_process+0x752>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800668a:	4b7a      	ldr	r3, [pc, #488]	; (8006874 <tcp_process+0x2a4>)
 800668c:	781b      	ldrb	r3, [r3, #0]
 800668e:	f003 0302 	and.w	r3, r3, #2
 8006692:	2b00      	cmp	r3, #0
 8006694:	d010      	beq.n	80066b8 <tcp_process+0xe8>
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	7d1b      	ldrb	r3, [r3, #20]
 800669a:	2b02      	cmp	r3, #2
 800669c:	d00c      	beq.n	80066b8 <tcp_process+0xe8>
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	7d1b      	ldrb	r3, [r3, #20]
 80066a2:	2b03      	cmp	r3, #3
 80066a4:	d008      	beq.n	80066b8 <tcp_process+0xe8>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	7e9b      	ldrb	r3, [r3, #26]
 80066aa:	f043 0302 	orr.w	r3, r3, #2
 80066ae:	b2da      	uxtb	r2, r3
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	769a      	strb	r2, [r3, #26]
    return ERR_OK;
 80066b4:	2300      	movs	r3, #0
 80066b6:	e334      	b.n	8006d22 <tcp_process+0x752>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	7e9b      	ldrb	r3, [r3, #26]
 80066bc:	f003 0310 	and.w	r3, r3, #16
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d103      	bne.n	80066cc <tcp_process+0xfc>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 80066c4:	4b72      	ldr	r3, [pc, #456]	; (8006890 <tcp_process+0x2c0>)
 80066c6:	681a      	ldr	r2, [r3, #0]
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	2200      	movs	r2, #0
 80066d0:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96

  tcp_parseopt(pcb);
 80066d4:	6878      	ldr	r0, [r7, #4]
 80066d6:	f001 fbdd 	bl	8007e94 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	7d1b      	ldrb	r3, [r3, #20]
 80066de:	3b02      	subs	r3, #2
 80066e0:	2b07      	cmp	r3, #7
 80066e2:	f200 830e 	bhi.w	8006d02 <tcp_process+0x732>
 80066e6:	a201      	add	r2, pc, #4	; (adr r2, 80066ec <tcp_process+0x11c>)
 80066e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066ec:	0800670d 	.word	0x0800670d
 80066f0:	08006905 	.word	0x08006905
 80066f4:	08006a5d 	.word	0x08006a5d
 80066f8:	08006a87 	.word	0x08006a87
 80066fc:	08006bb1 	.word	0x08006bb1
 8006700:	08006a5d 	.word	0x08006a5d
 8006704:	08006c3d 	.word	0x08006c3d
 8006708:	08006ccd 	.word	0x08006ccd
  case SYN_SENT:
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
     pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    /* received SYN ACK with expected sequence number? */
    if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800670c:	4b59      	ldr	r3, [pc, #356]	; (8006874 <tcp_process+0x2a4>)
 800670e:	781b      	ldrb	r3, [r3, #0]
 8006710:	f003 0310 	and.w	r3, r3, #16
 8006714:	2b00      	cmp	r3, #0
 8006716:	f000 80cb 	beq.w	80068b0 <tcp_process+0x2e0>
 800671a:	4b56      	ldr	r3, [pc, #344]	; (8006874 <tcp_process+0x2a4>)
 800671c:	781b      	ldrb	r3, [r3, #0]
 800671e:	f003 0302 	and.w	r3, r3, #2
 8006722:	2b00      	cmp	r3, #0
 8006724:	f000 80c4 	beq.w	80068b0 <tcp_process+0x2e0>
        && (ackno == pcb->lastack + 1)) {
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800672c:	1c5a      	adds	r2, r3, #1
 800672e:	4b52      	ldr	r3, [pc, #328]	; (8006878 <tcp_process+0x2a8>)
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	429a      	cmp	r2, r3
 8006734:	f040 80bc 	bne.w	80068b0 <tcp_process+0x2e0>
      pcb->rcv_nxt = seqno + 1;
 8006738:	4b50      	ldr	r3, [pc, #320]	; (800687c <tcp_process+0x2ac>)
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	1c5a      	adds	r2, r3, #1
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	625a      	str	r2, [r3, #36]	; 0x24
      pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	62da      	str	r2, [r3, #44]	; 0x2c
      pcb->lastack = ackno;
 800674a:	4b4b      	ldr	r3, [pc, #300]	; (8006878 <tcp_process+0x2a8>)
 800674c:	681a      	ldr	r2, [r3, #0]
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	645a      	str	r2, [r3, #68]	; 0x44
      pcb->snd_wnd = tcphdr->wnd;
 8006752:	4b50      	ldr	r3, [pc, #320]	; (8006894 <tcp_process+0x2c4>)
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	89db      	ldrh	r3, [r3, #14]
 8006758:	b29a      	uxth	r2, r3
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
      pcb->snd_wnd_max = pcb->snd_wnd;
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800676c:	4b43      	ldr	r3, [pc, #268]	; (800687c <tcp_process+0x2ac>)
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	1e5a      	subs	r2, r3, #1
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	651a      	str	r2, [r3, #80]	; 0x50
      pcb->state = ESTABLISHED;
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	2204      	movs	r2, #4
 800677a:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
      pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	3304      	adds	r3, #4
 8006784:	4619      	mov	r1, r3
 8006786:	4610      	mov	r0, r2
 8006788:	f7ff f95c 	bl	8005a44 <tcp_eff_send_mss_impl>
 800678c:	4603      	mov	r3, r0
 800678e:	461a      	mov	r2, r3
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

      pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006798:	005b      	lsls	r3, r3, #1
 800679a:	f241 121c 	movw	r2, #4380	; 0x111c
 800679e:	429a      	cmp	r2, r3
 80067a0:	bf38      	it	cc
 80067a2:	461a      	movcc	r2, r3
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80067a8:	009b      	lsls	r3, r3, #2
 80067aa:	4293      	cmp	r3, r2
 80067ac:	bf28      	it	cs
 80067ae:	4613      	movcs	r3, r2
 80067b0:	b29a      	uxth	r2, r3
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                   " ssthresh %"TCPWNDSIZE_F"\n",
                                   pcb->cwnd, pcb->ssthresh));
      LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d106      	bne.n	80067d0 <tcp_process+0x200>
 80067c2:	4b2f      	ldr	r3, [pc, #188]	; (8006880 <tcp_process+0x2b0>)
 80067c4:	f240 321a 	movw	r2, #794	; 0x31a
 80067c8:	4933      	ldr	r1, [pc, #204]	; (8006898 <tcp_process+0x2c8>)
 80067ca:	482f      	ldr	r0, [pc, #188]	; (8006888 <tcp_process+0x2b8>)
 80067cc:	f007 f948 	bl	800da60 <iprintf>
      --pcb->snd_queuelen;
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80067d6:	3b01      	subs	r3, #1
 80067d8:	b29a      	uxth	r2, r3
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
      rseg = pcb->unacked;
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80067e4:	61fb      	str	r3, [r7, #28]
      if (rseg == NULL) {
 80067e6:	69fb      	ldr	r3, [r7, #28]
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d111      	bne.n	8006810 <tcp_process+0x240>
        /* might happen if tcp_output fails in tcp_rexmit_rto()
           in which case the segment is on the unsent list */
        rseg = pcb->unsent;
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80067f0:	61fb      	str	r3, [r7, #28]
        LWIP_ASSERT("no segment to free", rseg != NULL);
 80067f2:	69fb      	ldr	r3, [r7, #28]
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d106      	bne.n	8006806 <tcp_process+0x236>
 80067f8:	4b21      	ldr	r3, [pc, #132]	; (8006880 <tcp_process+0x2b0>)
 80067fa:	f240 3222 	movw	r2, #802	; 0x322
 80067fe:	4927      	ldr	r1, [pc, #156]	; (800689c <tcp_process+0x2cc>)
 8006800:	4821      	ldr	r0, [pc, #132]	; (8006888 <tcp_process+0x2b8>)
 8006802:	f007 f92d 	bl	800da60 <iprintf>
        pcb->unsent = rseg->next;
 8006806:	69fb      	ldr	r3, [r7, #28]
 8006808:	681a      	ldr	r2, [r3, #0]
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	669a      	str	r2, [r3, #104]	; 0x68
 800680e:	e003      	b.n	8006818 <tcp_process+0x248>
      } else {
        pcb->unacked = rseg->next;
 8006810:	69fb      	ldr	r3, [r7, #28]
 8006812:	681a      	ldr	r2, [r3, #0]
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      tcp_seg_free(rseg);
 8006818:	69f8      	ldr	r0, [r7, #28]
 800681a:	f7fe feab 	bl	8005574 <tcp_seg_free>

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006822:	2b00      	cmp	r3, #0
 8006824:	d104      	bne.n	8006830 <tcp_process+0x260>
        pcb->rtime = -1;
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800682c:	861a      	strh	r2, [r3, #48]	; 0x30
 800682e:	e006      	b.n	800683e <tcp_process+0x26e>
      } else {
        pcb->rtime = 0;
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	2200      	movs	r2, #0
 8006834:	861a      	strh	r2, [r3, #48]	; 0x30
        pcb->nrtx = 0;
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	2200      	movs	r2, #0
 800683a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      }

      /* Call the user specified function to call when successfully
       * connected. */
      TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006844:	2b00      	cmp	r3, #0
 8006846:	d00a      	beq.n	800685e <tcp_process+0x28e>
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800684e:	687a      	ldr	r2, [r7, #4]
 8006850:	6910      	ldr	r0, [r2, #16]
 8006852:	2200      	movs	r2, #0
 8006854:	6879      	ldr	r1, [r7, #4]
 8006856:	4798      	blx	r3
 8006858:	4603      	mov	r3, r0
 800685a:	76bb      	strb	r3, [r7, #26]
 800685c:	e001      	b.n	8006862 <tcp_process+0x292>
 800685e:	2300      	movs	r3, #0
 8006860:	76bb      	strb	r3, [r7, #26]
      if (err == ERR_ABRT) {
 8006862:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8006866:	f113 0f0d 	cmn.w	r3, #13
 800686a:	d119      	bne.n	80068a0 <tcp_process+0x2d0>
        return ERR_ABRT;
 800686c:	f06f 030c 	mvn.w	r3, #12
 8006870:	e257      	b.n	8006d22 <tcp_process+0x752>
 8006872:	bf00      	nop
 8006874:	200000fc 	.word	0x200000fc
 8006878:	200000f4 	.word	0x200000f4
 800687c:	200000f0 	.word	0x200000f0
 8006880:	0800f7f8 	.word	0x0800f7f8
 8006884:	0800f9b0 	.word	0x0800f9b0
 8006888:	0800f83c 	.word	0x0800f83c
 800688c:	200000fd 	.word	0x200000fd
 8006890:	200068a4 	.word	0x200068a4
 8006894:	200000e0 	.word	0x200000e0
 8006898:	0800f9d0 	.word	0x0800f9d0
 800689c:	0800f9e8 	.word	0x0800f9e8
      }
      tcp_ack_now(pcb);
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	7e9b      	ldrb	r3, [r3, #26]
 80068a4:	f043 0302 	orr.w	r3, r3, #2
 80068a8:	b2da      	uxtb	r2, r3
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	769a      	strb	r2, [r3, #26]
      if (pcb->nrtx < TCP_SYNMAXRTX) {
        pcb->rtime = 0;
        tcp_rexmit_rto(pcb);
      }
    }
    break;
 80068ae:	e22a      	b.n	8006d06 <tcp_process+0x736>
    else if (flags & TCP_ACK) {
 80068b0:	4b9f      	ldr	r3, [pc, #636]	; (8006b30 <tcp_process+0x560>)
 80068b2:	781b      	ldrb	r3, [r3, #0]
 80068b4:	f003 0310 	and.w	r3, r3, #16
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	f000 8224 	beq.w	8006d06 <tcp_process+0x736>
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 80068be:	4b9d      	ldr	r3, [pc, #628]	; (8006b34 <tcp_process+0x564>)
 80068c0:	6818      	ldr	r0, [r3, #0]
 80068c2:	4b9d      	ldr	r3, [pc, #628]	; (8006b38 <tcp_process+0x568>)
 80068c4:	881b      	ldrh	r3, [r3, #0]
 80068c6:	461a      	mov	r2, r3
 80068c8:	4b9c      	ldr	r3, [pc, #624]	; (8006b3c <tcp_process+0x56c>)
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	18d1      	adds	r1, r2, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80068ce:	4b9c      	ldr	r3, [pc, #624]	; (8006b40 <tcp_process+0x570>)
 80068d0:	681b      	ldr	r3, [r3, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 80068d2:	885b      	ldrh	r3, [r3, #2]
 80068d4:	b29b      	uxth	r3, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80068d6:	4a9a      	ldr	r2, [pc, #616]	; (8006b40 <tcp_process+0x570>)
 80068d8:	6812      	ldr	r2, [r2, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 80068da:	8812      	ldrh	r2, [r2, #0]
 80068dc:	b292      	uxth	r2, r2
 80068de:	9201      	str	r2, [sp, #4]
 80068e0:	9300      	str	r3, [sp, #0]
 80068e2:	4b98      	ldr	r3, [pc, #608]	; (8006b44 <tcp_process+0x574>)
 80068e4:	4a98      	ldr	r2, [pc, #608]	; (8006b48 <tcp_process+0x578>)
 80068e6:	f002 f869 	bl	80089bc <tcp_rst>
      if (pcb->nrtx < TCP_SYNMAXRTX) {
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80068f0:	2b05      	cmp	r3, #5
 80068f2:	f200 8208 	bhi.w	8006d06 <tcp_process+0x736>
        pcb->rtime = 0;
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	2200      	movs	r2, #0
 80068fa:	861a      	strh	r2, [r3, #48]	; 0x30
        tcp_rexmit_rto(pcb);
 80068fc:	6878      	ldr	r0, [r7, #4]
 80068fe:	f002 f8d3 	bl	8008aa8 <tcp_rexmit_rto>
    break;
 8006902:	e200      	b.n	8006d06 <tcp_process+0x736>
  case SYN_RCVD:
    if (flags & TCP_ACK) {
 8006904:	4b8a      	ldr	r3, [pc, #552]	; (8006b30 <tcp_process+0x560>)
 8006906:	781b      	ldrb	r3, [r3, #0]
 8006908:	f003 0310 	and.w	r3, r3, #16
 800690c:	2b00      	cmp	r3, #0
 800690e:	f000 8091 	beq.w	8006a34 <tcp_process+0x464>
      /* expected ACK number? */
      if (TCP_SEQ_BETWEEN(ackno, pcb->lastack+1, pcb->snd_nxt)) {
 8006912:	4b88      	ldr	r3, [pc, #544]	; (8006b34 <tcp_process+0x564>)
 8006914:	681a      	ldr	r2, [r3, #0]
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800691a:	1ad3      	subs	r3, r2, r3
 800691c:	3b01      	subs	r3, #1
 800691e:	2b00      	cmp	r3, #0
 8006920:	db71      	blt.n	8006a06 <tcp_process+0x436>
 8006922:	4b84      	ldr	r3, [pc, #528]	; (8006b34 <tcp_process+0x564>)
 8006924:	681a      	ldr	r2, [r3, #0]
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800692a:	1ad3      	subs	r3, r2, r3
 800692c:	2b00      	cmp	r3, #0
 800692e:	dc6a      	bgt.n	8006a06 <tcp_process+0x436>
        pcb->state = ESTABLISHED;
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	2204      	movs	r2, #4
 8006934:	751a      	strb	r2, [r3, #20]
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
#if LWIP_CALLBACK_API
        LWIP_ASSERT("pcb->listener->accept != NULL",
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800693a:	2b00      	cmp	r3, #0
 800693c:	d00b      	beq.n	8006956 <tcp_process+0x386>
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006942:	699b      	ldr	r3, [r3, #24]
 8006944:	2b00      	cmp	r3, #0
 8006946:	d106      	bne.n	8006956 <tcp_process+0x386>
 8006948:	4b80      	ldr	r3, [pc, #512]	; (8006b4c <tcp_process+0x57c>)
 800694a:	f44f 7254 	mov.w	r2, #848	; 0x350
 800694e:	4980      	ldr	r1, [pc, #512]	; (8006b50 <tcp_process+0x580>)
 8006950:	4880      	ldr	r0, [pc, #512]	; (8006b54 <tcp_process+0x584>)
 8006952:	f007 f885 	bl	800da60 <iprintf>
          (pcb->listener == NULL) || (pcb->listener->accept != NULL));
#endif
        if (pcb->listener == NULL) {
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800695a:	2b00      	cmp	r3, #0
 800695c:	d102      	bne.n	8006964 <tcp_process+0x394>
          /* listen pcb might be closed by now */
          err = ERR_VAL;
 800695e:	23fa      	movs	r3, #250	; 0xfa
 8006960:	76bb      	strb	r3, [r7, #26]
 8006962:	e011      	b.n	8006988 <tcp_process+0x3b8>
        } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
        {
          tcp_backlog_accepted(pcb);
          /* Call the accept function. */
          TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006968:	699b      	ldr	r3, [r3, #24]
 800696a:	2b00      	cmp	r3, #0
 800696c:	d00a      	beq.n	8006984 <tcp_process+0x3b4>
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006972:	699b      	ldr	r3, [r3, #24]
 8006974:	687a      	ldr	r2, [r7, #4]
 8006976:	6910      	ldr	r0, [r2, #16]
 8006978:	2200      	movs	r2, #0
 800697a:	6879      	ldr	r1, [r7, #4]
 800697c:	4798      	blx	r3
 800697e:	4603      	mov	r3, r0
 8006980:	76bb      	strb	r3, [r7, #26]
 8006982:	e001      	b.n	8006988 <tcp_process+0x3b8>
 8006984:	23f0      	movs	r3, #240	; 0xf0
 8006986:	76bb      	strb	r3, [r7, #26]
        }
        if (err != ERR_OK) {
 8006988:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800698c:	2b00      	cmp	r3, #0
 800698e:	d00a      	beq.n	80069a6 <tcp_process+0x3d6>
          /* If the accept function returns with an error, we abort
           * the connection. */
          /* Already aborted? */
          if (err != ERR_ABRT) {
 8006990:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8006994:	f113 0f0d 	cmn.w	r3, #13
 8006998:	d002      	beq.n	80069a0 <tcp_process+0x3d0>
            tcp_abort(pcb);
 800699a:	6878      	ldr	r0, [r7, #4]
 800699c:	f7fe f992 	bl	8004cc4 <tcp_abort>
          }
          return ERR_ABRT;
 80069a0:	f06f 030c 	mvn.w	r3, #12
 80069a4:	e1bd      	b.n	8006d22 <tcp_process+0x752>
        }
        /* If there was any data contained within this ACK,
         * we'd better pass it on to the application as well. */
        tcp_receive(pcb);
 80069a6:	6878      	ldr	r0, [r7, #4]
 80069a8:	f000 fa42 	bl	8006e30 <tcp_receive>

        /* Prevent ACK for SYN to generate a sent event */
        if (recv_acked != 0) {
 80069ac:	4b6a      	ldr	r3, [pc, #424]	; (8006b58 <tcp_process+0x588>)
 80069ae:	881b      	ldrh	r3, [r3, #0]
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d005      	beq.n	80069c0 <tcp_process+0x3f0>
          recv_acked--;
 80069b4:	4b68      	ldr	r3, [pc, #416]	; (8006b58 <tcp_process+0x588>)
 80069b6:	881b      	ldrh	r3, [r3, #0]
 80069b8:	3b01      	subs	r3, #1
 80069ba:	b29a      	uxth	r2, r3
 80069bc:	4b66      	ldr	r3, [pc, #408]	; (8006b58 <tcp_process+0x588>)
 80069be:	801a      	strh	r2, [r3, #0]
        }

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80069c4:	005b      	lsls	r3, r3, #1
 80069c6:	f241 121c 	movw	r2, #4380	; 0x111c
 80069ca:	429a      	cmp	r2, r3
 80069cc:	bf38      	it	cc
 80069ce:	461a      	movcc	r2, r3
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80069d4:	009b      	lsls	r3, r3, #2
 80069d6:	4293      	cmp	r3, r2
 80069d8:	bf28      	it	cs
 80069da:	4613      	movcs	r3, r2
 80069dc:	b29a      	uxth	r2, r3
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));

        if (recv_flags & TF_GOT_FIN) {
 80069e4:	4b5d      	ldr	r3, [pc, #372]	; (8006b5c <tcp_process+0x58c>)
 80069e6:	781b      	ldrb	r3, [r3, #0]
 80069e8:	f003 0320 	and.w	r3, r3, #32
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d034      	beq.n	8006a5a <tcp_process+0x48a>
          tcp_ack_now(pcb);
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	7e9b      	ldrb	r3, [r3, #26]
 80069f4:	f043 0302 	orr.w	r3, r3, #2
 80069f8:	b2da      	uxtb	r2, r3
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	769a      	strb	r2, [r3, #26]
          pcb->state = CLOSE_WAIT;
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	2207      	movs	r2, #7
 8006a02:	751a      	strb	r2, [r3, #20]
        if (recv_flags & TF_GOT_FIN) {
 8006a04:	e029      	b.n	8006a5a <tcp_process+0x48a>
        }
      } else {
        /* incorrect ACK number, send RST */
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8006a06:	4b4b      	ldr	r3, [pc, #300]	; (8006b34 <tcp_process+0x564>)
 8006a08:	6818      	ldr	r0, [r3, #0]
 8006a0a:	4b4b      	ldr	r3, [pc, #300]	; (8006b38 <tcp_process+0x568>)
 8006a0c:	881b      	ldrh	r3, [r3, #0]
 8006a0e:	461a      	mov	r2, r3
 8006a10:	4b4a      	ldr	r3, [pc, #296]	; (8006b3c <tcp_process+0x56c>)
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	18d1      	adds	r1, r2, r3
          ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8006a16:	4b4a      	ldr	r3, [pc, #296]	; (8006b40 <tcp_process+0x570>)
 8006a18:	681b      	ldr	r3, [r3, #0]
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8006a1a:	885b      	ldrh	r3, [r3, #2]
 8006a1c:	b29b      	uxth	r3, r3
          ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8006a1e:	4a48      	ldr	r2, [pc, #288]	; (8006b40 <tcp_process+0x570>)
 8006a20:	6812      	ldr	r2, [r2, #0]
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8006a22:	8812      	ldrh	r2, [r2, #0]
 8006a24:	b292      	uxth	r2, r2
 8006a26:	9201      	str	r2, [sp, #4]
 8006a28:	9300      	str	r3, [sp, #0]
 8006a2a:	4b46      	ldr	r3, [pc, #280]	; (8006b44 <tcp_process+0x574>)
 8006a2c:	4a46      	ldr	r2, [pc, #280]	; (8006b48 <tcp_process+0x578>)
 8006a2e:	f001 ffc5 	bl	80089bc <tcp_rst>
      }
    } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
      /* Looks like another copy of the SYN - retransmit our SYN-ACK */
      tcp_rexmit(pcb);
    }
    break;
 8006a32:	e16a      	b.n	8006d0a <tcp_process+0x73a>
    } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8006a34:	4b3e      	ldr	r3, [pc, #248]	; (8006b30 <tcp_process+0x560>)
 8006a36:	781b      	ldrb	r3, [r3, #0]
 8006a38:	f003 0302 	and.w	r3, r3, #2
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	f000 8164 	beq.w	8006d0a <tcp_process+0x73a>
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a46:	1e5a      	subs	r2, r3, #1
 8006a48:	4b3c      	ldr	r3, [pc, #240]	; (8006b3c <tcp_process+0x56c>)
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	429a      	cmp	r2, r3
 8006a4e:	f040 815c 	bne.w	8006d0a <tcp_process+0x73a>
      tcp_rexmit(pcb);
 8006a52:	6878      	ldr	r0, [r7, #4]
 8006a54:	f002 f85e 	bl	8008b14 <tcp_rexmit>
    break;
 8006a58:	e157      	b.n	8006d0a <tcp_process+0x73a>
 8006a5a:	e156      	b.n	8006d0a <tcp_process+0x73a>
  case CLOSE_WAIT:
    /* FALLTHROUGH */
  case ESTABLISHED:
    tcp_receive(pcb);
 8006a5c:	6878      	ldr	r0, [r7, #4]
 8006a5e:	f000 f9e7 	bl	8006e30 <tcp_receive>
    if (recv_flags & TF_GOT_FIN) { /* passive close */
 8006a62:	4b3e      	ldr	r3, [pc, #248]	; (8006b5c <tcp_process+0x58c>)
 8006a64:	781b      	ldrb	r3, [r3, #0]
 8006a66:	f003 0320 	and.w	r3, r3, #32
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	f000 814f 	beq.w	8006d0e <tcp_process+0x73e>
      tcp_ack_now(pcb);
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	7e9b      	ldrb	r3, [r3, #26]
 8006a74:	f043 0302 	orr.w	r3, r3, #2
 8006a78:	b2da      	uxtb	r2, r3
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	769a      	strb	r2, [r3, #26]
      pcb->state = CLOSE_WAIT;
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	2207      	movs	r2, #7
 8006a82:	751a      	strb	r2, [r3, #20]
    }
    break;
 8006a84:	e143      	b.n	8006d0e <tcp_process+0x73e>
  case FIN_WAIT_1:
    tcp_receive(pcb);
 8006a86:	6878      	ldr	r0, [r7, #4]
 8006a88:	f000 f9d2 	bl	8006e30 <tcp_receive>
    if (recv_flags & TF_GOT_FIN) {
 8006a8c:	4b33      	ldr	r3, [pc, #204]	; (8006b5c <tcp_process+0x58c>)
 8006a8e:	781b      	ldrb	r3, [r3, #0]
 8006a90:	f003 0320 	and.w	r3, r3, #32
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d074      	beq.n	8006b82 <tcp_process+0x5b2>
      if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8006a98:	4b25      	ldr	r3, [pc, #148]	; (8006b30 <tcp_process+0x560>)
 8006a9a:	781b      	ldrb	r3, [r3, #0]
 8006a9c:	f003 0310 	and.w	r3, r3, #16
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d063      	beq.n	8006b6c <tcp_process+0x59c>
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006aa8:	4b22      	ldr	r3, [pc, #136]	; (8006b34 <tcp_process+0x564>)
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	429a      	cmp	r2, r3
 8006aae:	d15d      	bne.n	8006b6c <tcp_process+0x59c>
          pcb->unsent == NULL) {
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
      if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d159      	bne.n	8006b6c <tcp_process+0x59c>
        LWIP_DEBUGF(TCP_DEBUG,
          ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	7e9b      	ldrb	r3, [r3, #26]
 8006abc:	f043 0302 	orr.w	r3, r3, #2
 8006ac0:	b2da      	uxtb	r2, r3
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	769a      	strb	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8006ac6:	6878      	ldr	r0, [r7, #4]
 8006ac8:	f7fe fee8 	bl	800589c <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8006acc:	4b24      	ldr	r3, [pc, #144]	; (8006b60 <tcp_process+0x590>)
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	687a      	ldr	r2, [r7, #4]
 8006ad2:	429a      	cmp	r2, r3
 8006ad4:	d105      	bne.n	8006ae2 <tcp_process+0x512>
 8006ad6:	4b22      	ldr	r3, [pc, #136]	; (8006b60 <tcp_process+0x590>)
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	68db      	ldr	r3, [r3, #12]
 8006adc:	4a20      	ldr	r2, [pc, #128]	; (8006b60 <tcp_process+0x590>)
 8006ade:	6013      	str	r3, [r2, #0]
 8006ae0:	e013      	b.n	8006b0a <tcp_process+0x53a>
 8006ae2:	4b1f      	ldr	r3, [pc, #124]	; (8006b60 <tcp_process+0x590>)
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	617b      	str	r3, [r7, #20]
 8006ae8:	e00c      	b.n	8006b04 <tcp_process+0x534>
 8006aea:	697b      	ldr	r3, [r7, #20]
 8006aec:	68db      	ldr	r3, [r3, #12]
 8006aee:	687a      	ldr	r2, [r7, #4]
 8006af0:	429a      	cmp	r2, r3
 8006af2:	d104      	bne.n	8006afe <tcp_process+0x52e>
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	68da      	ldr	r2, [r3, #12]
 8006af8:	697b      	ldr	r3, [r7, #20]
 8006afa:	60da      	str	r2, [r3, #12]
 8006afc:	e005      	b.n	8006b0a <tcp_process+0x53a>
 8006afe:	697b      	ldr	r3, [r7, #20]
 8006b00:	68db      	ldr	r3, [r3, #12]
 8006b02:	617b      	str	r3, [r7, #20]
 8006b04:	697b      	ldr	r3, [r7, #20]
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d1ef      	bne.n	8006aea <tcp_process+0x51a>
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	2200      	movs	r2, #0
 8006b0e:	60da      	str	r2, [r3, #12]
 8006b10:	4b14      	ldr	r3, [pc, #80]	; (8006b64 <tcp_process+0x594>)
 8006b12:	2201      	movs	r2, #1
 8006b14:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	220a      	movs	r2, #10
 8006b1a:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8006b1c:	4b12      	ldr	r3, [pc, #72]	; (8006b68 <tcp_process+0x598>)
 8006b1e:	681a      	ldr	r2, [r3, #0]
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	60da      	str	r2, [r3, #12]
 8006b24:	4a10      	ldr	r2, [pc, #64]	; (8006b68 <tcp_process+0x598>)
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	6013      	str	r3, [r2, #0]
 8006b2a:	f002 f98f 	bl	8008e4c <tcp_timer_needed>
      }
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
               pcb->unsent == NULL) {
      pcb->state = FIN_WAIT_2;
    }
    break;
 8006b2e:	e0f0      	b.n	8006d12 <tcp_process+0x742>
 8006b30:	200000fc 	.word	0x200000fc
 8006b34:	200000f4 	.word	0x200000f4
 8006b38:	200000fa 	.word	0x200000fa
 8006b3c:	200000f0 	.word	0x200000f0
 8006b40:	200000e0 	.word	0x200000e0
 8006b44:	20003360 	.word	0x20003360
 8006b48:	20003364 	.word	0x20003364
 8006b4c:	0800f7f8 	.word	0x0800f7f8
 8006b50:	0800f9fc 	.word	0x0800f9fc
 8006b54:	0800f83c 	.word	0x0800f83c
 8006b58:	200000f8 	.word	0x200000f8
 8006b5c:	200000fd 	.word	0x200000fd
 8006b60:	200068a0 	.word	0x200068a0
 8006b64:	2000689c 	.word	0x2000689c
 8006b68:	200068b0 	.word	0x200068b0
        tcp_ack_now(pcb);
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	7e9b      	ldrb	r3, [r3, #26]
 8006b70:	f043 0302 	orr.w	r3, r3, #2
 8006b74:	b2da      	uxtb	r2, r3
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	769a      	strb	r2, [r3, #26]
        pcb->state = CLOSING;
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	2208      	movs	r2, #8
 8006b7e:	751a      	strb	r2, [r3, #20]
    break;
 8006b80:	e0c7      	b.n	8006d12 <tcp_process+0x742>
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8006b82:	4b6a      	ldr	r3, [pc, #424]	; (8006d2c <tcp_process+0x75c>)
 8006b84:	781b      	ldrb	r3, [r3, #0]
 8006b86:	f003 0310 	and.w	r3, r3, #16
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	f000 80c1 	beq.w	8006d12 <tcp_process+0x742>
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006b94:	4b66      	ldr	r3, [pc, #408]	; (8006d30 <tcp_process+0x760>)
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	429a      	cmp	r2, r3
 8006b9a:	f040 80ba 	bne.w	8006d12 <tcp_process+0x742>
               pcb->unsent == NULL) {
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	f040 80b5 	bne.w	8006d12 <tcp_process+0x742>
      pcb->state = FIN_WAIT_2;
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	2206      	movs	r2, #6
 8006bac:	751a      	strb	r2, [r3, #20]
    break;
 8006bae:	e0b0      	b.n	8006d12 <tcp_process+0x742>
  case FIN_WAIT_2:
    tcp_receive(pcb);
 8006bb0:	6878      	ldr	r0, [r7, #4]
 8006bb2:	f000 f93d 	bl	8006e30 <tcp_receive>
    if (recv_flags & TF_GOT_FIN) {
 8006bb6:	4b5f      	ldr	r3, [pc, #380]	; (8006d34 <tcp_process+0x764>)
 8006bb8:	781b      	ldrb	r3, [r3, #0]
 8006bba:	f003 0320 	and.w	r3, r3, #32
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	f000 80a9 	beq.w	8006d16 <tcp_process+0x746>
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      tcp_ack_now(pcb);
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	7e9b      	ldrb	r3, [r3, #26]
 8006bc8:	f043 0302 	orr.w	r3, r3, #2
 8006bcc:	b2da      	uxtb	r2, r3
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	769a      	strb	r2, [r3, #26]
      tcp_pcb_purge(pcb);
 8006bd2:	6878      	ldr	r0, [r7, #4]
 8006bd4:	f7fe fe62 	bl	800589c <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8006bd8:	4b57      	ldr	r3, [pc, #348]	; (8006d38 <tcp_process+0x768>)
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	687a      	ldr	r2, [r7, #4]
 8006bde:	429a      	cmp	r2, r3
 8006be0:	d105      	bne.n	8006bee <tcp_process+0x61e>
 8006be2:	4b55      	ldr	r3, [pc, #340]	; (8006d38 <tcp_process+0x768>)
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	68db      	ldr	r3, [r3, #12]
 8006be8:	4a53      	ldr	r2, [pc, #332]	; (8006d38 <tcp_process+0x768>)
 8006bea:	6013      	str	r3, [r2, #0]
 8006bec:	e013      	b.n	8006c16 <tcp_process+0x646>
 8006bee:	4b52      	ldr	r3, [pc, #328]	; (8006d38 <tcp_process+0x768>)
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	613b      	str	r3, [r7, #16]
 8006bf4:	e00c      	b.n	8006c10 <tcp_process+0x640>
 8006bf6:	693b      	ldr	r3, [r7, #16]
 8006bf8:	68db      	ldr	r3, [r3, #12]
 8006bfa:	687a      	ldr	r2, [r7, #4]
 8006bfc:	429a      	cmp	r2, r3
 8006bfe:	d104      	bne.n	8006c0a <tcp_process+0x63a>
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	68da      	ldr	r2, [r3, #12]
 8006c04:	693b      	ldr	r3, [r7, #16]
 8006c06:	60da      	str	r2, [r3, #12]
 8006c08:	e005      	b.n	8006c16 <tcp_process+0x646>
 8006c0a:	693b      	ldr	r3, [r7, #16]
 8006c0c:	68db      	ldr	r3, [r3, #12]
 8006c0e:	613b      	str	r3, [r7, #16]
 8006c10:	693b      	ldr	r3, [r7, #16]
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d1ef      	bne.n	8006bf6 <tcp_process+0x626>
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	2200      	movs	r2, #0
 8006c1a:	60da      	str	r2, [r3, #12]
 8006c1c:	4b47      	ldr	r3, [pc, #284]	; (8006d3c <tcp_process+0x76c>)
 8006c1e:	2201      	movs	r2, #1
 8006c20:	701a      	strb	r2, [r3, #0]
      pcb->state = TIME_WAIT;
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	220a      	movs	r2, #10
 8006c26:	751a      	strb	r2, [r3, #20]
      TCP_REG(&tcp_tw_pcbs, pcb);
 8006c28:	4b45      	ldr	r3, [pc, #276]	; (8006d40 <tcp_process+0x770>)
 8006c2a:	681a      	ldr	r2, [r3, #0]
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	60da      	str	r2, [r3, #12]
 8006c30:	4a43      	ldr	r2, [pc, #268]	; (8006d40 <tcp_process+0x770>)
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	6013      	str	r3, [r2, #0]
 8006c36:	f002 f909 	bl	8008e4c <tcp_timer_needed>
    }
    break;
 8006c3a:	e06c      	b.n	8006d16 <tcp_process+0x746>
  case CLOSING:
    tcp_receive(pcb);
 8006c3c:	6878      	ldr	r0, [r7, #4]
 8006c3e:	f000 f8f7 	bl	8006e30 <tcp_receive>
    if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8006c42:	4b3a      	ldr	r3, [pc, #232]	; (8006d2c <tcp_process+0x75c>)
 8006c44:	781b      	ldrb	r3, [r3, #0]
 8006c46:	f003 0310 	and.w	r3, r3, #16
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d065      	beq.n	8006d1a <tcp_process+0x74a>
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006c52:	4b37      	ldr	r3, [pc, #220]	; (8006d30 <tcp_process+0x760>)
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	429a      	cmp	r2, r3
 8006c58:	d15f      	bne.n	8006d1a <tcp_process+0x74a>
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d15b      	bne.n	8006d1a <tcp_process+0x74a>
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      tcp_pcb_purge(pcb);
 8006c62:	6878      	ldr	r0, [r7, #4]
 8006c64:	f7fe fe1a 	bl	800589c <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8006c68:	4b33      	ldr	r3, [pc, #204]	; (8006d38 <tcp_process+0x768>)
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	687a      	ldr	r2, [r7, #4]
 8006c6e:	429a      	cmp	r2, r3
 8006c70:	d105      	bne.n	8006c7e <tcp_process+0x6ae>
 8006c72:	4b31      	ldr	r3, [pc, #196]	; (8006d38 <tcp_process+0x768>)
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	68db      	ldr	r3, [r3, #12]
 8006c78:	4a2f      	ldr	r2, [pc, #188]	; (8006d38 <tcp_process+0x768>)
 8006c7a:	6013      	str	r3, [r2, #0]
 8006c7c:	e013      	b.n	8006ca6 <tcp_process+0x6d6>
 8006c7e:	4b2e      	ldr	r3, [pc, #184]	; (8006d38 <tcp_process+0x768>)
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	60fb      	str	r3, [r7, #12]
 8006c84:	e00c      	b.n	8006ca0 <tcp_process+0x6d0>
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	68db      	ldr	r3, [r3, #12]
 8006c8a:	687a      	ldr	r2, [r7, #4]
 8006c8c:	429a      	cmp	r2, r3
 8006c8e:	d104      	bne.n	8006c9a <tcp_process+0x6ca>
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	68da      	ldr	r2, [r3, #12]
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	60da      	str	r2, [r3, #12]
 8006c98:	e005      	b.n	8006ca6 <tcp_process+0x6d6>
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	68db      	ldr	r3, [r3, #12]
 8006c9e:	60fb      	str	r3, [r7, #12]
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d1ef      	bne.n	8006c86 <tcp_process+0x6b6>
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	2200      	movs	r2, #0
 8006caa:	60da      	str	r2, [r3, #12]
 8006cac:	4b23      	ldr	r3, [pc, #140]	; (8006d3c <tcp_process+0x76c>)
 8006cae:	2201      	movs	r2, #1
 8006cb0:	701a      	strb	r2, [r3, #0]
      pcb->state = TIME_WAIT;
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	220a      	movs	r2, #10
 8006cb6:	751a      	strb	r2, [r3, #20]
      TCP_REG(&tcp_tw_pcbs, pcb);
 8006cb8:	4b21      	ldr	r3, [pc, #132]	; (8006d40 <tcp_process+0x770>)
 8006cba:	681a      	ldr	r2, [r3, #0]
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	60da      	str	r2, [r3, #12]
 8006cc0:	4a1f      	ldr	r2, [pc, #124]	; (8006d40 <tcp_process+0x770>)
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	6013      	str	r3, [r2, #0]
 8006cc6:	f002 f8c1 	bl	8008e4c <tcp_timer_needed>
    }
    break;
 8006cca:	e026      	b.n	8006d1a <tcp_process+0x74a>
  case LAST_ACK:
    tcp_receive(pcb);
 8006ccc:	6878      	ldr	r0, [r7, #4]
 8006cce:	f000 f8af 	bl	8006e30 <tcp_receive>
    if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8006cd2:	4b16      	ldr	r3, [pc, #88]	; (8006d2c <tcp_process+0x75c>)
 8006cd4:	781b      	ldrb	r3, [r3, #0]
 8006cd6:	f003 0310 	and.w	r3, r3, #16
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d01f      	beq.n	8006d1e <tcp_process+0x74e>
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006ce2:	4b13      	ldr	r3, [pc, #76]	; (8006d30 <tcp_process+0x760>)
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	429a      	cmp	r2, r3
 8006ce8:	d119      	bne.n	8006d1e <tcp_process+0x74e>
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d115      	bne.n	8006d1e <tcp_process+0x74e>
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
      recv_flags |= TF_CLOSED;
 8006cf2:	4b10      	ldr	r3, [pc, #64]	; (8006d34 <tcp_process+0x764>)
 8006cf4:	781b      	ldrb	r3, [r3, #0]
 8006cf6:	f043 0310 	orr.w	r3, r3, #16
 8006cfa:	b2da      	uxtb	r2, r3
 8006cfc:	4b0d      	ldr	r3, [pc, #52]	; (8006d34 <tcp_process+0x764>)
 8006cfe:	701a      	strb	r2, [r3, #0]
    }
    break;
 8006d00:	e00d      	b.n	8006d1e <tcp_process+0x74e>
  default:
    break;
 8006d02:	bf00      	nop
 8006d04:	e00c      	b.n	8006d20 <tcp_process+0x750>
    break;
 8006d06:	bf00      	nop
 8006d08:	e00a      	b.n	8006d20 <tcp_process+0x750>
    break;
 8006d0a:	bf00      	nop
 8006d0c:	e008      	b.n	8006d20 <tcp_process+0x750>
    break;
 8006d0e:	bf00      	nop
 8006d10:	e006      	b.n	8006d20 <tcp_process+0x750>
    break;
 8006d12:	bf00      	nop
 8006d14:	e004      	b.n	8006d20 <tcp_process+0x750>
    break;
 8006d16:	bf00      	nop
 8006d18:	e002      	b.n	8006d20 <tcp_process+0x750>
    break;
 8006d1a:	bf00      	nop
 8006d1c:	e000      	b.n	8006d20 <tcp_process+0x750>
    break;
 8006d1e:	bf00      	nop
  }
  return ERR_OK;
 8006d20:	2300      	movs	r3, #0
}
 8006d22:	4618      	mov	r0, r3
 8006d24:	3720      	adds	r7, #32
 8006d26:	46bd      	mov	sp, r7
 8006d28:	bd80      	pop	{r7, pc}
 8006d2a:	bf00      	nop
 8006d2c:	200000fc 	.word	0x200000fc
 8006d30:	200000f4 	.word	0x200000f4
 8006d34:	200000fd 	.word	0x200000fd
 8006d38:	200068a0 	.word	0x200068a0
 8006d3c:	2000689c 	.word	0x2000689c
 8006d40:	200068b0 	.word	0x200068b0

08006d44 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8006d44:	b590      	push	{r4, r7, lr}
 8006d46:	b085      	sub	sp, #20
 8006d48:	af00      	add	r7, sp, #0
 8006d4a:	6078      	str	r0, [r7, #4]
 8006d4c:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	68db      	ldr	r3, [r3, #12]
 8006d52:	899b      	ldrh	r3, [r3, #12]
 8006d54:	b29b      	uxth	r3, r3
 8006d56:	4618      	mov	r0, r3
 8006d58:	f7fc f97b 	bl	8003052 <lwip_htons>
 8006d5c:	4603      	mov	r3, r0
 8006d5e:	f003 0301 	and.w	r3, r3, #1
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d027      	beq.n	8006db6 <tcp_oos_insert_segment+0x72>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 8006d66:	6838      	ldr	r0, [r7, #0]
 8006d68:	f7fe fbef 	bl	800554a <tcp_segs_free>
    next = NULL;
 8006d6c:	2300      	movs	r3, #0
 8006d6e:	603b      	str	r3, [r7, #0]
 8006d70:	e055      	b.n	8006e1e <tcp_oos_insert_segment+0xda>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                      (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8006d72:	683b      	ldr	r3, [r7, #0]
 8006d74:	68db      	ldr	r3, [r3, #12]
 8006d76:	899b      	ldrh	r3, [r3, #12]
 8006d78:	b29b      	uxth	r3, r3
 8006d7a:	4618      	mov	r0, r3
 8006d7c:	f7fc f969 	bl	8003052 <lwip_htons>
 8006d80:	4603      	mov	r3, r0
 8006d82:	f003 0301 	and.w	r3, r3, #1
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d00d      	beq.n	8006da6 <tcp_oos_insert_segment+0x62>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	68db      	ldr	r3, [r3, #12]
 8006d8e:	899b      	ldrh	r3, [r3, #12]
 8006d90:	b29c      	uxth	r4, r3
 8006d92:	2001      	movs	r0, #1
 8006d94:	f7fc f95d 	bl	8003052 <lwip_htons>
 8006d98:	4603      	mov	r3, r0
 8006d9a:	461a      	mov	r2, r3
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	68db      	ldr	r3, [r3, #12]
 8006da0:	4322      	orrs	r2, r4
 8006da2:	b292      	uxth	r2, r2
 8006da4:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 8006da6:	683b      	ldr	r3, [r7, #0]
 8006da8:	60fb      	str	r3, [r7, #12]
      next = next->next;
 8006daa:	683b      	ldr	r3, [r7, #0]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 8006db0:	68f8      	ldr	r0, [r7, #12]
 8006db2:	f7fe fbdf 	bl	8005574 <tcp_seg_free>
    while (next &&
 8006db6:	683b      	ldr	r3, [r7, #0]
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d00e      	beq.n	8006dda <tcp_oos_insert_segment+0x96>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	891b      	ldrh	r3, [r3, #8]
 8006dc0:	461a      	mov	r2, r3
 8006dc2:	4b1a      	ldr	r3, [pc, #104]	; (8006e2c <tcp_oos_insert_segment+0xe8>)
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	441a      	add	r2, r3
 8006dc8:	683b      	ldr	r3, [r7, #0]
 8006dca:	68db      	ldr	r3, [r3, #12]
 8006dcc:	685b      	ldr	r3, [r3, #4]
 8006dce:	6839      	ldr	r1, [r7, #0]
 8006dd0:	8909      	ldrh	r1, [r1, #8]
 8006dd2:	440b      	add	r3, r1
 8006dd4:	1ad3      	subs	r3, r2, r3
    while (next &&
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	dacb      	bge.n	8006d72 <tcp_oos_insert_segment+0x2e>
    }
    if (next &&
 8006dda:	683b      	ldr	r3, [r7, #0]
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d01e      	beq.n	8006e1e <tcp_oos_insert_segment+0xda>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	891b      	ldrh	r3, [r3, #8]
 8006de4:	461a      	mov	r2, r3
 8006de6:	4b11      	ldr	r3, [pc, #68]	; (8006e2c <tcp_oos_insert_segment+0xe8>)
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	441a      	add	r2, r3
 8006dec:	683b      	ldr	r3, [r7, #0]
 8006dee:	68db      	ldr	r3, [r3, #12]
 8006df0:	685b      	ldr	r3, [r3, #4]
 8006df2:	1ad3      	subs	r3, r2, r3
    if (next &&
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	dd12      	ble.n	8006e1e <tcp_oos_insert_segment+0xda>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8006df8:	683b      	ldr	r3, [r7, #0]
 8006dfa:	68db      	ldr	r3, [r3, #12]
 8006dfc:	685b      	ldr	r3, [r3, #4]
 8006dfe:	b29a      	uxth	r2, r3
 8006e00:	4b0a      	ldr	r3, [pc, #40]	; (8006e2c <tcp_oos_insert_segment+0xe8>)
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	b29b      	uxth	r3, r3
 8006e06:	1ad3      	subs	r3, r2, r3
 8006e08:	b29a      	uxth	r2, r3
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	685a      	ldr	r2, [r3, #4]
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	891b      	ldrh	r3, [r3, #8]
 8006e16:	4619      	mov	r1, r3
 8006e18:	4610      	mov	r0, r2
 8006e1a:	f7fd f8d9 	bl	8003fd0 <pbuf_realloc>
    }
  }
  cseg->next = next;
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	683a      	ldr	r2, [r7, #0]
 8006e22:	601a      	str	r2, [r3, #0]
}
 8006e24:	bf00      	nop
 8006e26:	3714      	adds	r7, #20
 8006e28:	46bd      	mov	sp, r7
 8006e2a:	bd90      	pop	{r4, r7, pc}
 8006e2c:	200000f0 	.word	0x200000f0

08006e30 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8006e30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006e32:	b08d      	sub	sp, #52	; 0x34
 8006e34:	af00      	add	r7, sp, #0
 8006e36:	6078      	str	r0, [r7, #4]
#endif /* TCP_QUEUE_OOSEQ */
  s32_t off;
  s16_t m;
  u32_t right_wnd_edge;
  u16_t new_tot_len;
  int found_dupack = 0;
 8006e38:	2300      	movs	r3, #0
 8006e3a:	61fb      	str	r3, [r7, #28]
#if TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS
  u32_t ooseq_blen;
  u16_t ooseq_qlen;
#endif /* TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS */

  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	7d1b      	ldrb	r3, [r3, #20]
 8006e40:	2b03      	cmp	r3, #3
 8006e42:	d806      	bhi.n	8006e52 <tcp_receive+0x22>
 8006e44:	4ba6      	ldr	r3, [pc, #664]	; (80070e0 <tcp_receive+0x2b0>)
 8006e46:	f44f 6281 	mov.w	r2, #1032	; 0x408
 8006e4a:	49a6      	ldr	r1, [pc, #664]	; (80070e4 <tcp_receive+0x2b4>)
 8006e4c:	48a6      	ldr	r0, [pc, #664]	; (80070e8 <tcp_receive+0x2b8>)
 8006e4e:	f006 fe07 	bl	800da60 <iprintf>

  if (flags & TCP_ACK) {
 8006e52:	4ba6      	ldr	r3, [pc, #664]	; (80070ec <tcp_receive+0x2bc>)
 8006e54:	781b      	ldrb	r3, [r3, #0]
 8006e56:	f003 0310 	and.w	r3, r3, #16
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	f000 82bf 	beq.w	80073de <tcp_receive+0x5ae>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006e66:	461a      	mov	r2, r3
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e6c:	4413      	add	r3, r2
 8006e6e:	617b      	str	r3, [r7, #20]

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006e74:	4b9e      	ldr	r3, [pc, #632]	; (80070f0 <tcp_receive+0x2c0>)
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	1ad3      	subs	r3, r2, r3
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	db1b      	blt.n	8006eb6 <tcp_receive+0x86>
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006e82:	4b9b      	ldr	r3, [pc, #620]	; (80070f0 <tcp_receive+0x2c0>)
 8006e84:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8006e86:	429a      	cmp	r2, r3
 8006e88:	d106      	bne.n	8006e98 <tcp_receive+0x68>
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006e8e:	4b99      	ldr	r3, [pc, #612]	; (80070f4 <tcp_receive+0x2c4>)
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	1ad3      	subs	r3, r2, r3
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	db0e      	blt.n	8006eb6 <tcp_receive+0x86>
       (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006e9c:	4b95      	ldr	r3, [pc, #596]	; (80070f4 <tcp_receive+0x2c4>)
 8006e9e:	681b      	ldr	r3, [r3, #0]
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8006ea0:	429a      	cmp	r2, r3
 8006ea2:	d141      	bne.n	8006f28 <tcp_receive+0xf8>
       (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8006ea4:	4b94      	ldr	r3, [pc, #592]	; (80070f8 <tcp_receive+0x2c8>)
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	89db      	ldrh	r3, [r3, #14]
 8006eaa:	b29a      	uxth	r2, r3
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006eb2:	429a      	cmp	r2, r3
 8006eb4:	d938      	bls.n	8006f28 <tcp_receive+0xf8>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8006eb6:	4b90      	ldr	r3, [pc, #576]	; (80070f8 <tcp_receive+0x2c8>)
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	89db      	ldrh	r3, [r3, #14]
 8006ebc:	b29a      	uxth	r2, r3
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	f8b3 205e 	ldrh.w	r2, [r3, #94]	; 0x5e
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006ed0:	429a      	cmp	r2, r3
 8006ed2:	d205      	bcs.n	8006ee0 <tcp_receive+0xb0>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      }
      pcb->snd_wl1 = seqno;
 8006ee0:	4b83      	ldr	r3, [pc, #524]	; (80070f0 <tcp_receive+0x2c0>)
 8006ee2:	681a      	ldr	r2, [r3, #0]
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	651a      	str	r2, [r3, #80]	; 0x50
      pcb->snd_wl2 = ackno;
 8006ee8:	4b82      	ldr	r3, [pc, #520]	; (80070f4 <tcp_receive+0x2c4>)
 8006eea:	681a      	ldr	r2, [r3, #0]
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	655a      	str	r2, [r3, #84]	; 0x54
      if (pcb->snd_wnd == 0) {
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d10d      	bne.n	8006f16 <tcp_receive+0xe6>
        if (pcb->persist_backoff == 0) {
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d111      	bne.n	8006f28 <tcp_receive+0xf8>
          /* start persist timer */
          pcb->persist_cnt = 0;
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	2200      	movs	r2, #0
 8006f08:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
          pcb->persist_backoff = 1;
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	2201      	movs	r2, #1
 8006f10:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
 8006f14:	e008      	b.n	8006f28 <tcp_receive+0xf8>
        }
      } else if (pcb->persist_backoff > 0) {
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d003      	beq.n	8006f28 <tcp_receive+0xf8>
        /* stop persist timer */
          pcb->persist_backoff = 0;
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	2200      	movs	r2, #0
 8006f24:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8006f28:	4b72      	ldr	r3, [pc, #456]	; (80070f4 <tcp_receive+0x2c4>)
 8006f2a:	681a      	ldr	r2, [r3, #0]
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f30:	1ad3      	subs	r3, r2, r3
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	dc53      	bgt.n	8006fde <tcp_receive+0x1ae>
      /* Clause 2 */
      if (tcplen == 0) {
 8006f36:	4b71      	ldr	r3, [pc, #452]	; (80070fc <tcp_receive+0x2cc>)
 8006f38:	881b      	ldrh	r3, [r3, #0]
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d146      	bne.n	8006fcc <tcp_receive+0x19c>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f42:	687a      	ldr	r2, [r7, #4]
 8006f44:	f8b2 205c 	ldrh.w	r2, [r2, #92]	; 0x5c
 8006f48:	4413      	add	r3, r2
 8006f4a:	697a      	ldr	r2, [r7, #20]
 8006f4c:	429a      	cmp	r2, r3
 8006f4e:	d13d      	bne.n	8006fcc <tcp_receive+0x19c>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	db38      	blt.n	8006fcc <tcp_receive+0x19c>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006f5e:	4b65      	ldr	r3, [pc, #404]	; (80070f4 <tcp_receive+0x2c4>)
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	429a      	cmp	r2, r3
 8006f64:	d132      	bne.n	8006fcc <tcp_receive+0x19c>
              found_dupack = 1;
 8006f66:	2301      	movs	r3, #1
 8006f68:	61fb      	str	r3, [r7, #28]
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006f70:	2bff      	cmp	r3, #255	; 0xff
 8006f72:	d007      	beq.n	8006f84 <tcp_receive+0x154>
                ++pcb->dupacks;
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006f7a:	3301      	adds	r3, #1
 8006f7c:	b2da      	uxtb	r2, r3
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006f8a:	2b03      	cmp	r3, #3
 8006f8c:	d916      	bls.n	8006fbc <tcp_receive+0x18c>
                /* Inflate the congestion window, but not if it means that
                   the value overflows. */
                if ((tcpwnd_size_t)(pcb->cwnd + pcb->mss) > pcb->cwnd) {
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006f98:	4413      	add	r3, r2
 8006f9a:	b29a      	uxth	r2, r3
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8006fa2:	429a      	cmp	r2, r3
 8006fa4:	d912      	bls.n	8006fcc <tcp_receive+0x19c>
                  pcb->cwnd += pcb->mss;
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006fb0:	4413      	add	r3, r2
 8006fb2:	b29a      	uxth	r2, r3
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8006fba:	e007      	b.n	8006fcc <tcp_receive+0x19c>
                }
              } else if (pcb->dupacks == 3) {
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006fc2:	2b03      	cmp	r3, #3
 8006fc4:	d102      	bne.n	8006fcc <tcp_receive+0x19c>
                /* Do fast retransmit */
                tcp_rexmit_fast(pcb);
 8006fc6:	6878      	ldr	r0, [r7, #4]
 8006fc8:	f001 fdf4 	bl	8008bb4 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 8006fcc:	69fb      	ldr	r3, [r7, #28]
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	f040 8169 	bne.w	80072a6 <tcp_receive+0x476>
        pcb->dupacks = 0;
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	2200      	movs	r2, #0
 8006fd8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006fdc:	e163      	b.n	80072a6 <tcp_receive+0x476>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack+1, pcb->snd_nxt)) {
 8006fde:	4b45      	ldr	r3, [pc, #276]	; (80070f4 <tcp_receive+0x2c4>)
 8006fe0:	681a      	ldr	r2, [r3, #0]
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006fe6:	1ad3      	subs	r3, r2, r3
 8006fe8:	3b01      	subs	r3, #1
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	f2c0 8107 	blt.w	80071fe <tcp_receive+0x3ce>
 8006ff0:	4b40      	ldr	r3, [pc, #256]	; (80070f4 <tcp_receive+0x2c4>)
 8006ff2:	681a      	ldr	r2, [r3, #0]
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ff8:	1ad3      	subs	r3, r2, r3
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	f300 80ff 	bgt.w	80071fe <tcp_receive+0x3ce>
      /* We come here when the ACK acknowledges new data. */

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	7e9b      	ldrb	r3, [r3, #26]
 8007004:	f003 0304 	and.w	r3, r3, #4
 8007008:	2b00      	cmp	r3, #0
 800700a:	d00c      	beq.n	8007026 <tcp_receive+0x1f6>
        pcb->flags &= ~TF_INFR;
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	7e9b      	ldrb	r3, [r3, #26]
 8007010:	f023 0304 	bic.w	r3, r3, #4
 8007014:	b2da      	uxtb	r2, r3
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	769a      	strb	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	2200      	movs	r2, #0
 800702a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8007034:	10db      	asrs	r3, r3, #3
 8007036:	b21b      	sxth	r3, r3
 8007038:	b29a      	uxth	r2, r3
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8007040:	b29b      	uxth	r3, r3
 8007042:	4413      	add	r3, r2
 8007044:	b29b      	uxth	r3, r3
 8007046:	b21a      	sxth	r2, r3
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	2200      	movs	r2, #0
 8007052:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 8007056:	4b27      	ldr	r3, [pc, #156]	; (80070f4 <tcp_receive+0x2c4>)
 8007058:	681a      	ldr	r2, [r3, #0]
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	7d1b      	ldrb	r3, [r3, #20]
 8007062:	2b03      	cmp	r3, #3
 8007064:	f240 8094 	bls.w	8007190 <tcp_receive+0x360>
        if (pcb->cwnd < pcb->ssthresh) {
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8007074:	429a      	cmp	r2, r3
 8007076:	d216      	bcs.n	80070a6 <tcp_receive+0x276>
          if ((tcpwnd_size_t)(pcb->cwnd + pcb->mss) > pcb->cwnd) {
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007082:	4413      	add	r3, r2
 8007084:	b29a      	uxth	r2, r3
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800708c:	429a      	cmp	r2, r3
 800708e:	d97f      	bls.n	8007190 <tcp_receive+0x360>
            pcb->cwnd += pcb->mss;
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800709a:	4413      	add	r3, r2
 800709c:	b29a      	uxth	r2, r3
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80070a4:	e074      	b.n	8007190 <tcp_receive+0x360>
          }
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          tcpwnd_size_t new_cwnd = (pcb->cwnd + pcb->mss * pcb->mss / pcb->cwnd);
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80070b0:	4619      	mov	r1, r3
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80070b6:	fb03 f301 	mul.w	r3, r3, r1
 80070ba:	6879      	ldr	r1, [r7, #4]
 80070bc:	f8b1 1048 	ldrh.w	r1, [r1, #72]	; 0x48
 80070c0:	fb93 f3f1 	sdiv	r3, r3, r1
 80070c4:	b29b      	uxth	r3, r3
 80070c6:	4413      	add	r3, r2
 80070c8:	827b      	strh	r3, [r7, #18]
          if (new_cwnd > pcb->cwnd) {
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80070d0:	8a7a      	ldrh	r2, [r7, #18]
 80070d2:	429a      	cmp	r2, r3
 80070d4:	d95c      	bls.n	8007190 <tcp_receive+0x360>
            pcb->cwnd = new_cwnd;
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	8a7a      	ldrh	r2, [r7, #18]
 80070da:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked): 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      while (pcb->unacked != NULL &&
 80070de:	e057      	b.n	8007190 <tcp_receive+0x360>
 80070e0:	0800f7f8 	.word	0x0800f7f8
 80070e4:	0800fa1c 	.word	0x0800fa1c
 80070e8:	0800f83c 	.word	0x0800f83c
 80070ec:	200000fc 	.word	0x200000fc
 80070f0:	200000f0 	.word	0x200000f0
 80070f4:	200000f4 	.word	0x200000f4
 80070f8:	200000e0 	.word	0x200000e0
 80070fc:	200000fa 	.word	0x200000fa
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->unacked\n",
                                      lwip_ntohl(pcb->unacked->tcphdr->seqno),
                                      lwip_ntohl(pcb->unacked->tcphdr->seqno) +
                                      TCP_TCPLEN(pcb->unacked)));

        next = pcb->unacked;
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007104:	62fb      	str	r3, [r7, #44]	; 0x2c
        pcb->unacked = pcb->unacked->next;
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800710a:	681a      	ldr	r2, [r3, #0]
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	66da      	str	r2, [r3, #108]	; 0x6c

        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ", (tcpwnd_size_t)pcb->snd_queuelen));
        LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	f8b3 4062 	ldrh.w	r4, [r3, #98]	; 0x62
 8007116:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007118:	685b      	ldr	r3, [r3, #4]
 800711a:	4618      	mov	r0, r3
 800711c:	f7fd f960 	bl	80043e0 <pbuf_clen>
 8007120:	4603      	mov	r3, r0
 8007122:	429c      	cmp	r4, r3
 8007124:	d206      	bcs.n	8007134 <tcp_receive+0x304>
 8007126:	4b70      	ldr	r3, [pc, #448]	; (80072e8 <tcp_receive+0x4b8>)
 8007128:	f240 429e 	movw	r2, #1182	; 0x49e
 800712c:	496f      	ldr	r1, [pc, #444]	; (80072ec <tcp_receive+0x4bc>)
 800712e:	4870      	ldr	r0, [pc, #448]	; (80072f0 <tcp_receive+0x4c0>)
 8007130:	f006 fc96 	bl	800da60 <iprintf>

        pcb->snd_queuelen -= pbuf_clen(next->p);
 8007134:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007136:	685b      	ldr	r3, [r3, #4]
 8007138:	4618      	mov	r0, r3
 800713a:	f7fd f951 	bl	80043e0 <pbuf_clen>
 800713e:	4603      	mov	r3, r0
 8007140:	461a      	mov	r2, r3
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8007148:	1a9b      	subs	r3, r3, r2
 800714a:	b29a      	uxth	r2, r3
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        recv_acked += next->len;
 8007152:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007154:	891a      	ldrh	r2, [r3, #8]
 8007156:	4b67      	ldr	r3, [pc, #412]	; (80072f4 <tcp_receive+0x4c4>)
 8007158:	881b      	ldrh	r3, [r3, #0]
 800715a:	4413      	add	r3, r2
 800715c:	b29a      	uxth	r2, r3
 800715e:	4b65      	ldr	r3, [pc, #404]	; (80072f4 <tcp_receive+0x4c4>)
 8007160:	801a      	strh	r2, [r3, #0]
        tcp_seg_free(next);
 8007162:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007164:	f7fe fa06 	bl	8005574 <tcp_seg_free>

        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing unacked)\n", (tcpwnd_size_t)pcb->snd_queuelen));
        if (pcb->snd_queuelen != 0) {
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800716e:	2b00      	cmp	r3, #0
 8007170:	d00e      	beq.n	8007190 <tcp_receive+0x360>
          LWIP_ASSERT("tcp_receive: valid queue length", pcb->unacked != NULL ||
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007176:	2b00      	cmp	r3, #0
 8007178:	d10a      	bne.n	8007190 <tcp_receive+0x360>
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800717e:	2b00      	cmp	r3, #0
 8007180:	d106      	bne.n	8007190 <tcp_receive+0x360>
 8007182:	4b59      	ldr	r3, [pc, #356]	; (80072e8 <tcp_receive+0x4b8>)
 8007184:	f240 42a6 	movw	r2, #1190	; 0x4a6
 8007188:	495b      	ldr	r1, [pc, #364]	; (80072f8 <tcp_receive+0x4c8>)
 800718a:	4859      	ldr	r0, [pc, #356]	; (80072f0 <tcp_receive+0x4c0>)
 800718c:	f006 fc68 	bl	800da60 <iprintf>
      while (pcb->unacked != NULL &&
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007194:	2b00      	cmp	r3, #0
 8007196:	d022      	beq.n	80071de <tcp_receive+0x3ae>
             TCP_SEQ_LEQ(lwip_ntohl(pcb->unacked->tcphdr->seqno) +
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800719c:	68db      	ldr	r3, [r3, #12]
 800719e:	685b      	ldr	r3, [r3, #4]
 80071a0:	4618      	mov	r0, r3
 80071a2:	f7fb ff63 	bl	800306c <lwip_htonl>
 80071a6:	4604      	mov	r4, r0
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80071ac:	891b      	ldrh	r3, [r3, #8]
 80071ae:	461d      	mov	r5, r3
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80071b4:	68db      	ldr	r3, [r3, #12]
 80071b6:	899b      	ldrh	r3, [r3, #12]
 80071b8:	b29b      	uxth	r3, r3
 80071ba:	4618      	mov	r0, r3
 80071bc:	f7fb ff49 	bl	8003052 <lwip_htons>
 80071c0:	4603      	mov	r3, r0
 80071c2:	f003 0303 	and.w	r3, r3, #3
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d001      	beq.n	80071ce <tcp_receive+0x39e>
 80071ca:	2301      	movs	r3, #1
 80071cc:	e000      	b.n	80071d0 <tcp_receive+0x3a0>
 80071ce:	2300      	movs	r3, #0
 80071d0:	442b      	add	r3, r5
 80071d2:	18e2      	adds	r2, r4, r3
 80071d4:	4b49      	ldr	r3, [pc, #292]	; (80072fc <tcp_receive+0x4cc>)
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	1ad3      	subs	r3, r2, r3
      while (pcb->unacked != NULL &&
 80071da:	2b00      	cmp	r3, #0
 80071dc:	dd90      	ble.n	8007100 <tcp_receive+0x2d0>
        }
      }

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d104      	bne.n	80071f0 <tcp_receive+0x3c0>
        pcb->rtime = -1;
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80071ec:	861a      	strh	r2, [r3, #48]	; 0x30
 80071ee:	e002      	b.n	80071f6 <tcp_receive+0x3c6>
      } else {
        pcb->rtime = 0;
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	2200      	movs	r2, #0
 80071f4:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	2200      	movs	r2, #0
 80071fa:	76da      	strb	r2, [r3, #27]
 80071fc:	e002      	b.n	8007204 <tcp_receive+0x3d4>
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 80071fe:	6878      	ldr	r0, [r7, #4]
 8007200:	f001 f8fc 	bl	80083fc <tcp_send_empty_ack>
       on the list are acknowledged by the ACK. This may seem
       strange since an "unsent" segment shouldn't be acked. The
       rationale is that lwIP puts all outstanding segments on the
       ->unsent list after a retransmission, so these segments may
       in fact have been sent once. */
    while (pcb->unsent != NULL &&
 8007204:	e04f      	b.n	80072a6 <tcp_receive+0x476>
                           TCP_TCPLEN(pcb->unsent), pcb->snd_nxt)) {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->unsent\n",
                                    lwip_ntohl(pcb->unsent->tcphdr->seqno), lwip_ntohl(pcb->unsent->tcphdr->seqno) +
                                    TCP_TCPLEN(pcb->unsent)));

      next = pcb->unsent;
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800720a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pcb->unsent = pcb->unsent->next;
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007210:	681a      	ldr	r2, [r3, #0]
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	669a      	str	r2, [r3, #104]	; 0x68
#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800721a:	2b00      	cmp	r3, #0
 800721c:	d103      	bne.n	8007226 <tcp_receive+0x3f6>
        pcb->unsent_oversize = 0;
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	2200      	movs	r2, #0
 8007222:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      }
#endif /* TCP_OVERSIZE */
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ", (tcpwnd_size_t)pcb->snd_queuelen));
      LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	f8b3 4062 	ldrh.w	r4, [r3, #98]	; 0x62
 800722c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800722e:	685b      	ldr	r3, [r3, #4]
 8007230:	4618      	mov	r0, r3
 8007232:	f7fd f8d5 	bl	80043e0 <pbuf_clen>
 8007236:	4603      	mov	r3, r0
 8007238:	429c      	cmp	r4, r3
 800723a:	d206      	bcs.n	800724a <tcp_receive+0x41a>
 800723c:	4b2a      	ldr	r3, [pc, #168]	; (80072e8 <tcp_receive+0x4b8>)
 800723e:	f240 42d5 	movw	r2, #1237	; 0x4d5
 8007242:	492a      	ldr	r1, [pc, #168]	; (80072ec <tcp_receive+0x4bc>)
 8007244:	482a      	ldr	r0, [pc, #168]	; (80072f0 <tcp_receive+0x4c0>)
 8007246:	f006 fc0b 	bl	800da60 <iprintf>
      /* Prevent ACK for FIN to generate a sent event */
      pcb->snd_queuelen -= pbuf_clen(next->p);
 800724a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800724c:	685b      	ldr	r3, [r3, #4]
 800724e:	4618      	mov	r0, r3
 8007250:	f7fd f8c6 	bl	80043e0 <pbuf_clen>
 8007254:	4603      	mov	r3, r0
 8007256:	461a      	mov	r2, r3
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800725e:	1a9b      	subs	r3, r3, r2
 8007260:	b29a      	uxth	r2, r3
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      recv_acked += next->len;
 8007268:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800726a:	891a      	ldrh	r2, [r3, #8]
 800726c:	4b21      	ldr	r3, [pc, #132]	; (80072f4 <tcp_receive+0x4c4>)
 800726e:	881b      	ldrh	r3, [r3, #0]
 8007270:	4413      	add	r3, r2
 8007272:	b29a      	uxth	r2, r3
 8007274:	4b1f      	ldr	r3, [pc, #124]	; (80072f4 <tcp_receive+0x4c4>)
 8007276:	801a      	strh	r2, [r3, #0]
      tcp_seg_free(next);
 8007278:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800727a:	f7fe f97b 	bl	8005574 <tcp_seg_free>
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing unsent)\n", (tcpwnd_size_t)pcb->snd_queuelen));
      if (pcb->snd_queuelen != 0) {
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8007284:	2b00      	cmp	r3, #0
 8007286:	d00e      	beq.n	80072a6 <tcp_receive+0x476>
        LWIP_ASSERT("tcp_receive: valid queue length",
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800728c:	2b00      	cmp	r3, #0
 800728e:	d10a      	bne.n	80072a6 <tcp_receive+0x476>
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007294:	2b00      	cmp	r3, #0
 8007296:	d106      	bne.n	80072a6 <tcp_receive+0x476>
 8007298:	4b13      	ldr	r3, [pc, #76]	; (80072e8 <tcp_receive+0x4b8>)
 800729a:	f240 42dc 	movw	r2, #1244	; 0x4dc
 800729e:	4916      	ldr	r1, [pc, #88]	; (80072f8 <tcp_receive+0x4c8>)
 80072a0:	4813      	ldr	r0, [pc, #76]	; (80072f0 <tcp_receive+0x4c0>)
 80072a2:	f006 fbdd 	bl	800da60 <iprintf>
    while (pcb->unsent != NULL &&
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d036      	beq.n	800731c <tcp_receive+0x4ec>
           TCP_SEQ_BETWEEN(ackno, lwip_ntohl(pcb->unsent->tcphdr->seqno) +
 80072ae:	4b13      	ldr	r3, [pc, #76]	; (80072fc <tcp_receive+0x4cc>)
 80072b0:	681c      	ldr	r4, [r3, #0]
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80072b6:	68db      	ldr	r3, [r3, #12]
 80072b8:	685b      	ldr	r3, [r3, #4]
 80072ba:	4618      	mov	r0, r3
 80072bc:	f7fb fed6 	bl	800306c <lwip_htonl>
 80072c0:	4605      	mov	r5, r0
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80072c6:	891b      	ldrh	r3, [r3, #8]
 80072c8:	461e      	mov	r6, r3
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80072ce:	68db      	ldr	r3, [r3, #12]
 80072d0:	899b      	ldrh	r3, [r3, #12]
 80072d2:	b29b      	uxth	r3, r3
 80072d4:	4618      	mov	r0, r3
 80072d6:	f7fb febc 	bl	8003052 <lwip_htons>
 80072da:	4603      	mov	r3, r0
 80072dc:	f003 0303 	and.w	r3, r3, #3
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d00d      	beq.n	8007300 <tcp_receive+0x4d0>
 80072e4:	2301      	movs	r3, #1
 80072e6:	e00c      	b.n	8007302 <tcp_receive+0x4d2>
 80072e8:	0800f7f8 	.word	0x0800f7f8
 80072ec:	0800fa38 	.word	0x0800fa38
 80072f0:	0800f83c 	.word	0x0800f83c
 80072f4:	200000f8 	.word	0x200000f8
 80072f8:	0800fa60 	.word	0x0800fa60
 80072fc:	200000f4 	.word	0x200000f4
 8007300:	2300      	movs	r3, #0
 8007302:	4433      	add	r3, r6
 8007304:	442b      	add	r3, r5
 8007306:	1ae3      	subs	r3, r4, r3
    while (pcb->unsent != NULL &&
 8007308:	2b00      	cmp	r3, #0
 800730a:	db07      	blt.n	800731c <tcp_receive+0x4ec>
           TCP_SEQ_BETWEEN(ackno, lwip_ntohl(pcb->unsent->tcphdr->seqno) +
 800730c:	4b8d      	ldr	r3, [pc, #564]	; (8007544 <tcp_receive+0x714>)
 800730e:	681a      	ldr	r2, [r3, #0]
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007314:	1ad3      	subs	r3, r2, r3
 8007316:	2b00      	cmp	r3, #0
 8007318:	f77f af75 	ble.w	8007206 <tcp_receive+0x3d6>
          pcb->unacked != NULL || pcb->unsent != NULL);
      }
    }
    pcb->snd_buf += recv_acked;
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8007322:	4b89      	ldr	r3, [pc, #548]	; (8007548 <tcp_receive+0x718>)
 8007324:	881b      	ldrh	r3, [r3, #0]
 8007326:	4413      	add	r3, r2
 8007328:	b29a      	uxth	r2, r3
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007334:	2b00      	cmp	r3, #0
 8007336:	d052      	beq.n	80073de <tcp_receive+0x5ae>
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800733c:	4b81      	ldr	r3, [pc, #516]	; (8007544 <tcp_receive+0x714>)
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	1ad3      	subs	r3, r2, r3
 8007342:	2b00      	cmp	r3, #0
 8007344:	da4b      	bge.n	80073de <tcp_receive+0x5ae>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8007346:	4b81      	ldr	r3, [pc, #516]	; (800754c <tcp_receive+0x71c>)
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	b29a      	uxth	r2, r3
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007350:	b29b      	uxth	r3, r3
 8007352:	1ad3      	subs	r3, r2, r3
 8007354:	b29b      	uxth	r3, r3
 8007356:	847b      	strh	r3, [r7, #34]	; 0x22

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = m - (pcb->sa >> 3);
 8007358:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8007360:	10db      	asrs	r3, r3, #3
 8007362:	b21b      	sxth	r3, r3
 8007364:	b29b      	uxth	r3, r3
 8007366:	1ad3      	subs	r3, r2, r3
 8007368:	b29b      	uxth	r3, r3
 800736a:	847b      	strh	r3, [r7, #34]	; 0x22
      pcb->sa += m;
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8007372:	b29a      	uxth	r2, r3
 8007374:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007376:	4413      	add	r3, r2
 8007378:	b29b      	uxth	r3, r3
 800737a:	b21a      	sxth	r2, r3
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 8007380:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8007384:	2b00      	cmp	r3, #0
 8007386:	da03      	bge.n	8007390 <tcp_receive+0x560>
        m = -m;
 8007388:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800738a:	425b      	negs	r3, r3
 800738c:	b29b      	uxth	r3, r3
 800738e:	847b      	strh	r3, [r7, #34]	; 0x22
      }
      m = m - (pcb->sv >> 2);
 8007390:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8007398:	109b      	asrs	r3, r3, #2
 800739a:	b21b      	sxth	r3, r3
 800739c:	b29b      	uxth	r3, r3
 800739e:	1ad3      	subs	r3, r2, r3
 80073a0:	b29b      	uxth	r3, r3
 80073a2:	847b      	strh	r3, [r7, #34]	; 0x22
      pcb->sv += m;
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80073aa:	b29a      	uxth	r2, r3
 80073ac:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80073ae:	4413      	add	r3, r2
 80073b0:	b29b      	uxth	r3, r3
 80073b2:	b21a      	sxth	r2, r3
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80073be:	10db      	asrs	r3, r3, #3
 80073c0:	b21b      	sxth	r3, r3
 80073c2:	b29a      	uxth	r2, r3
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80073ca:	b29b      	uxth	r3, r3
 80073cc:	4413      	add	r3, r2
 80073ce:	b29b      	uxth	r3, r3
 80073d0:	b21a      	sxth	r2, r3
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	2200      	movs	r2, #0
 80073dc:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 80073de:	4b5c      	ldr	r3, [pc, #368]	; (8007550 <tcp_receive+0x720>)
 80073e0:	881b      	ldrh	r3, [r3, #0]
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	f000 84f1 	beq.w	8007dca <tcp_receive+0xf9a>
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	7d1b      	ldrb	r3, [r3, #20]
 80073ec:	2b06      	cmp	r3, #6
 80073ee:	f200 84ec 	bhi.w	8007dca <tcp_receive+0xf9a>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80073f6:	4b57      	ldr	r3, [pc, #348]	; (8007554 <tcp_receive+0x724>)
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	1ad3      	subs	r3, r2, r3
 80073fc:	3b01      	subs	r3, #1
 80073fe:	2b00      	cmp	r3, #0
 8007400:	f2c0 80b8 	blt.w	8007574 <tcp_receive+0x744>
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007408:	4b51      	ldr	r3, [pc, #324]	; (8007550 <tcp_receive+0x720>)
 800740a:	881b      	ldrh	r3, [r3, #0]
 800740c:	4619      	mov	r1, r3
 800740e:	4b51      	ldr	r3, [pc, #324]	; (8007554 <tcp_receive+0x724>)
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	440b      	add	r3, r1
 8007414:	1ad3      	subs	r3, r2, r3
 8007416:	3301      	adds	r3, #1
 8007418:	2b00      	cmp	r3, #0
 800741a:	f300 80ab 	bgt.w	8007574 <tcp_receive+0x744>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 800741e:	4b4e      	ldr	r3, [pc, #312]	; (8007558 <tcp_receive+0x728>)
 8007420:	685b      	ldr	r3, [r3, #4]
 8007422:	61bb      	str	r3, [r7, #24]
      off = pcb->rcv_nxt - seqno;
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007428:	4b4a      	ldr	r3, [pc, #296]	; (8007554 <tcp_receive+0x724>)
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	1ad3      	subs	r3, r2, r3
 800742e:	627b      	str	r3, [r7, #36]	; 0x24
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8007430:	4b49      	ldr	r3, [pc, #292]	; (8007558 <tcp_receive+0x728>)
 8007432:	685b      	ldr	r3, [r3, #4]
 8007434:	2b00      	cmp	r3, #0
 8007436:	d106      	bne.n	8007446 <tcp_receive+0x616>
 8007438:	4b48      	ldr	r3, [pc, #288]	; (800755c <tcp_receive+0x72c>)
 800743a:	f240 523c 	movw	r2, #1340	; 0x53c
 800743e:	4948      	ldr	r1, [pc, #288]	; (8007560 <tcp_receive+0x730>)
 8007440:	4848      	ldr	r0, [pc, #288]	; (8007564 <tcp_receive+0x734>)
 8007442:	f006 fb0d 	bl	800da60 <iprintf>
      LWIP_ASSERT("insane offset!", (off < 0x7fff));
 8007446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007448:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800744c:	4293      	cmp	r3, r2
 800744e:	dd06      	ble.n	800745e <tcp_receive+0x62e>
 8007450:	4b42      	ldr	r3, [pc, #264]	; (800755c <tcp_receive+0x72c>)
 8007452:	f240 523d 	movw	r2, #1341	; 0x53d
 8007456:	4944      	ldr	r1, [pc, #272]	; (8007568 <tcp_receive+0x738>)
 8007458:	4842      	ldr	r0, [pc, #264]	; (8007564 <tcp_receive+0x734>)
 800745a:	f006 fb01 	bl	800da60 <iprintf>
      if (inseg.p->len < off) {
 800745e:	4b3e      	ldr	r3, [pc, #248]	; (8007558 <tcp_receive+0x728>)
 8007460:	685b      	ldr	r3, [r3, #4]
 8007462:	895b      	ldrh	r3, [r3, #10]
 8007464:	461a      	mov	r2, r3
 8007466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007468:	4293      	cmp	r3, r2
 800746a:	dd3e      	ble.n	80074ea <tcp_receive+0x6ba>
        LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800746c:	4b3a      	ldr	r3, [pc, #232]	; (8007558 <tcp_receive+0x728>)
 800746e:	685b      	ldr	r3, [r3, #4]
 8007470:	891b      	ldrh	r3, [r3, #8]
 8007472:	461a      	mov	r2, r3
 8007474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007476:	4293      	cmp	r3, r2
 8007478:	dd06      	ble.n	8007488 <tcp_receive+0x658>
 800747a:	4b38      	ldr	r3, [pc, #224]	; (800755c <tcp_receive+0x72c>)
 800747c:	f240 523f 	movw	r2, #1343	; 0x53f
 8007480:	493a      	ldr	r1, [pc, #232]	; (800756c <tcp_receive+0x73c>)
 8007482:	4838      	ldr	r0, [pc, #224]	; (8007564 <tcp_receive+0x734>)
 8007484:	f006 faec 	bl	800da60 <iprintf>
        new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8007488:	4b33      	ldr	r3, [pc, #204]	; (8007558 <tcp_receive+0x728>)
 800748a:	685b      	ldr	r3, [r3, #4]
 800748c:	891a      	ldrh	r2, [r3, #8]
 800748e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007490:	b29b      	uxth	r3, r3
 8007492:	1ad3      	subs	r3, r2, r3
 8007494:	823b      	strh	r3, [r7, #16]
        while (p->len < off) {
 8007496:	e00e      	b.n	80074b6 <tcp_receive+0x686>
          off -= p->len;
 8007498:	69bb      	ldr	r3, [r7, #24]
 800749a:	895b      	ldrh	r3, [r3, #10]
 800749c:	461a      	mov	r2, r3
 800749e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074a0:	1a9b      	subs	r3, r3, r2
 80074a2:	627b      	str	r3, [r7, #36]	; 0x24
          /* KJM following line changed (with addition of new_tot_len var)
             to fix bug #9076
             inseg.p->tot_len -= p->len; */
          p->tot_len = new_tot_len;
 80074a4:	69bb      	ldr	r3, [r7, #24]
 80074a6:	8a3a      	ldrh	r2, [r7, #16]
 80074a8:	811a      	strh	r2, [r3, #8]
          p->len = 0;
 80074aa:	69bb      	ldr	r3, [r7, #24]
 80074ac:	2200      	movs	r2, #0
 80074ae:	815a      	strh	r2, [r3, #10]
          p = p->next;
 80074b0:	69bb      	ldr	r3, [r7, #24]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	61bb      	str	r3, [r7, #24]
        while (p->len < off) {
 80074b6:	69bb      	ldr	r3, [r7, #24]
 80074b8:	895b      	ldrh	r3, [r3, #10]
 80074ba:	461a      	mov	r2, r3
 80074bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074be:	4293      	cmp	r3, r2
 80074c0:	dcea      	bgt.n	8007498 <tcp_receive+0x668>
        }
        if (pbuf_header(p, (s16_t)-off)) {
 80074c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074c4:	b29b      	uxth	r3, r3
 80074c6:	425b      	negs	r3, r3
 80074c8:	b29b      	uxth	r3, r3
 80074ca:	b21b      	sxth	r3, r3
 80074cc:	4619      	mov	r1, r3
 80074ce:	69b8      	ldr	r0, [r7, #24]
 80074d0:	f7fc fece 	bl	8004270 <pbuf_header>
 80074d4:	4603      	mov	r3, r0
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d01c      	beq.n	8007514 <tcp_receive+0x6e4>
          /* Do we need to cope with this failing?  Assert for now */
          LWIP_ASSERT("pbuf_header failed", 0);
 80074da:	4b20      	ldr	r3, [pc, #128]	; (800755c <tcp_receive+0x72c>)
 80074dc:	f240 524c 	movw	r2, #1356	; 0x54c
 80074e0:	4923      	ldr	r1, [pc, #140]	; (8007570 <tcp_receive+0x740>)
 80074e2:	4820      	ldr	r0, [pc, #128]	; (8007564 <tcp_receive+0x734>)
 80074e4:	f006 fabc 	bl	800da60 <iprintf>
 80074e8:	e014      	b.n	8007514 <tcp_receive+0x6e4>
        }
      } else {
        if (pbuf_header(inseg.p, (s16_t)-off)) {
 80074ea:	4b1b      	ldr	r3, [pc, #108]	; (8007558 <tcp_receive+0x728>)
 80074ec:	685b      	ldr	r3, [r3, #4]
 80074ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80074f0:	b292      	uxth	r2, r2
 80074f2:	4252      	negs	r2, r2
 80074f4:	b292      	uxth	r2, r2
 80074f6:	b212      	sxth	r2, r2
 80074f8:	4611      	mov	r1, r2
 80074fa:	4618      	mov	r0, r3
 80074fc:	f7fc feb8 	bl	8004270 <pbuf_header>
 8007500:	4603      	mov	r3, r0
 8007502:	2b00      	cmp	r3, #0
 8007504:	d006      	beq.n	8007514 <tcp_receive+0x6e4>
          /* Do we need to cope with this failing?  Assert for now */
          LWIP_ASSERT("pbuf_header failed", 0);
 8007506:	4b15      	ldr	r3, [pc, #84]	; (800755c <tcp_receive+0x72c>)
 8007508:	f240 5251 	movw	r2, #1361	; 0x551
 800750c:	4918      	ldr	r1, [pc, #96]	; (8007570 <tcp_receive+0x740>)
 800750e:	4815      	ldr	r0, [pc, #84]	; (8007564 <tcp_receive+0x734>)
 8007510:	f006 faa6 	bl	800da60 <iprintf>
        }
      }
      inseg.len -= (u16_t)(pcb->rcv_nxt - seqno);
 8007514:	4b10      	ldr	r3, [pc, #64]	; (8007558 <tcp_receive+0x728>)
 8007516:	891a      	ldrh	r2, [r3, #8]
 8007518:	4b0e      	ldr	r3, [pc, #56]	; (8007554 <tcp_receive+0x724>)
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	b299      	uxth	r1, r3
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007522:	b29b      	uxth	r3, r3
 8007524:	1acb      	subs	r3, r1, r3
 8007526:	b29b      	uxth	r3, r3
 8007528:	4413      	add	r3, r2
 800752a:	b29a      	uxth	r2, r3
 800752c:	4b0a      	ldr	r3, [pc, #40]	; (8007558 <tcp_receive+0x728>)
 800752e:	811a      	strh	r2, [r3, #8]
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007534:	4a07      	ldr	r2, [pc, #28]	; (8007554 <tcp_receive+0x724>)
 8007536:	6013      	str	r3, [r2, #0]
 8007538:	4b07      	ldr	r3, [pc, #28]	; (8007558 <tcp_receive+0x728>)
 800753a:	68db      	ldr	r3, [r3, #12]
 800753c:	4a05      	ldr	r2, [pc, #20]	; (8007554 <tcp_receive+0x724>)
 800753e:	6812      	ldr	r2, [r2, #0]
 8007540:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8007542:	e025      	b.n	8007590 <tcp_receive+0x760>
 8007544:	200000f4 	.word	0x200000f4
 8007548:	200000f8 	.word	0x200000f8
 800754c:	200068a4 	.word	0x200068a4
 8007550:	200000fa 	.word	0x200000fa
 8007554:	200000f0 	.word	0x200000f0
 8007558:	200000d0 	.word	0x200000d0
 800755c:	0800f7f8 	.word	0x0800f7f8
 8007560:	0800fa80 	.word	0x0800fa80
 8007564:	0800f83c 	.word	0x0800f83c
 8007568:	0800fa90 	.word	0x0800fa90
 800756c:	0800faa0 	.word	0x0800faa0
 8007570:	0800fab0 	.word	0x0800fab0
    }
    else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8007574:	4b87      	ldr	r3, [pc, #540]	; (8007794 <tcp_receive+0x964>)
 8007576:	681a      	ldr	r2, [r3, #0]
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800757c:	1ad3      	subs	r3, r2, r3
 800757e:	2b00      	cmp	r3, #0
 8007580:	da06      	bge.n	8007590 <tcp_receive+0x760>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	7e9b      	ldrb	r3, [r3, #26]
 8007586:	f043 0302 	orr.w	r3, r3, #2
 800758a:	b2da      	uxtb	r2, r3
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	769a      	strb	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8007590:	4b80      	ldr	r3, [pc, #512]	; (8007794 <tcp_receive+0x964>)
 8007592:	681a      	ldr	r2, [r3, #0]
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007598:	1ad3      	subs	r3, r2, r3
 800759a:	2b00      	cmp	r3, #0
 800759c:	f2c0 8410 	blt.w	8007dc0 <tcp_receive+0xf90>
 80075a0:	4b7c      	ldr	r3, [pc, #496]	; (8007794 <tcp_receive+0x964>)
 80075a2:	681a      	ldr	r2, [r3, #0]
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075a8:	6879      	ldr	r1, [r7, #4]
 80075aa:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80075ac:	440b      	add	r3, r1
 80075ae:	1ad3      	subs	r3, r2, r3
 80075b0:	3301      	adds	r3, #1
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	f300 8404 	bgt.w	8007dc0 <tcp_receive+0xf90>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80075bc:	4b75      	ldr	r3, [pc, #468]	; (8007794 <tcp_receive+0x964>)
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	429a      	cmp	r2, r3
 80075c2:	f040 8287 	bne.w	8007ad4 <tcp_receive+0xca4>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 80075c6:	4b74      	ldr	r3, [pc, #464]	; (8007798 <tcp_receive+0x968>)
 80075c8:	891c      	ldrh	r4, [r3, #8]
 80075ca:	4b73      	ldr	r3, [pc, #460]	; (8007798 <tcp_receive+0x968>)
 80075cc:	68db      	ldr	r3, [r3, #12]
 80075ce:	899b      	ldrh	r3, [r3, #12]
 80075d0:	b29b      	uxth	r3, r3
 80075d2:	4618      	mov	r0, r3
 80075d4:	f7fb fd3d 	bl	8003052 <lwip_htons>
 80075d8:	4603      	mov	r3, r0
 80075da:	f003 0303 	and.w	r3, r3, #3
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d001      	beq.n	80075e6 <tcp_receive+0x7b6>
 80075e2:	2301      	movs	r3, #1
 80075e4:	e000      	b.n	80075e8 <tcp_receive+0x7b8>
 80075e6:	2300      	movs	r3, #0
 80075e8:	4423      	add	r3, r4
 80075ea:	b29a      	uxth	r2, r3
 80075ec:	4b6b      	ldr	r3, [pc, #428]	; (800779c <tcp_receive+0x96c>)
 80075ee:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80075f4:	4b69      	ldr	r3, [pc, #420]	; (800779c <tcp_receive+0x96c>)
 80075f6:	881b      	ldrh	r3, [r3, #0]
 80075f8:	429a      	cmp	r2, r3
 80075fa:	d26e      	bcs.n	80076da <tcp_receive+0x8aa>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80075fc:	4b66      	ldr	r3, [pc, #408]	; (8007798 <tcp_receive+0x968>)
 80075fe:	68db      	ldr	r3, [r3, #12]
 8007600:	899b      	ldrh	r3, [r3, #12]
 8007602:	b29b      	uxth	r3, r3
 8007604:	4618      	mov	r0, r3
 8007606:	f7fb fd24 	bl	8003052 <lwip_htons>
 800760a:	4603      	mov	r3, r0
 800760c:	f003 0301 	and.w	r3, r3, #1
 8007610:	2b00      	cmp	r3, #0
 8007612:	d01b      	beq.n	800764c <tcp_receive+0x81c>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8007614:	4b60      	ldr	r3, [pc, #384]	; (8007798 <tcp_receive+0x968>)
 8007616:	68db      	ldr	r3, [r3, #12]
 8007618:	899b      	ldrh	r3, [r3, #12]
 800761a:	b29b      	uxth	r3, r3
 800761c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8007620:	b29c      	uxth	r4, r3
 8007622:	4b5d      	ldr	r3, [pc, #372]	; (8007798 <tcp_receive+0x968>)
 8007624:	68db      	ldr	r3, [r3, #12]
 8007626:	899b      	ldrh	r3, [r3, #12]
 8007628:	b29b      	uxth	r3, r3
 800762a:	4618      	mov	r0, r3
 800762c:	f7fb fd11 	bl	8003052 <lwip_htons>
 8007630:	4603      	mov	r3, r0
 8007632:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8007636:	b29b      	uxth	r3, r3
 8007638:	4618      	mov	r0, r3
 800763a:	f7fb fd0a 	bl	8003052 <lwip_htons>
 800763e:	4603      	mov	r3, r0
 8007640:	461a      	mov	r2, r3
 8007642:	4b55      	ldr	r3, [pc, #340]	; (8007798 <tcp_receive+0x968>)
 8007644:	68db      	ldr	r3, [r3, #12]
 8007646:	4322      	orrs	r2, r4
 8007648:	b292      	uxth	r2, r2
 800764a:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8007650:	4b51      	ldr	r3, [pc, #324]	; (8007798 <tcp_receive+0x968>)
 8007652:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8007654:	4b50      	ldr	r3, [pc, #320]	; (8007798 <tcp_receive+0x968>)
 8007656:	68db      	ldr	r3, [r3, #12]
 8007658:	899b      	ldrh	r3, [r3, #12]
 800765a:	b29b      	uxth	r3, r3
 800765c:	4618      	mov	r0, r3
 800765e:	f7fb fcf8 	bl	8003052 <lwip_htons>
 8007662:	4603      	mov	r3, r0
 8007664:	f003 0302 	and.w	r3, r3, #2
 8007668:	2b00      	cmp	r3, #0
 800766a:	d005      	beq.n	8007678 <tcp_receive+0x848>
            inseg.len -= 1;
 800766c:	4b4a      	ldr	r3, [pc, #296]	; (8007798 <tcp_receive+0x968>)
 800766e:	891b      	ldrh	r3, [r3, #8]
 8007670:	3b01      	subs	r3, #1
 8007672:	b29a      	uxth	r2, r3
 8007674:	4b48      	ldr	r3, [pc, #288]	; (8007798 <tcp_receive+0x968>)
 8007676:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8007678:	4b47      	ldr	r3, [pc, #284]	; (8007798 <tcp_receive+0x968>)
 800767a:	685b      	ldr	r3, [r3, #4]
 800767c:	4a46      	ldr	r2, [pc, #280]	; (8007798 <tcp_receive+0x968>)
 800767e:	8912      	ldrh	r2, [r2, #8]
 8007680:	4611      	mov	r1, r2
 8007682:	4618      	mov	r0, r3
 8007684:	f7fc fca4 	bl	8003fd0 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8007688:	4b43      	ldr	r3, [pc, #268]	; (8007798 <tcp_receive+0x968>)
 800768a:	891c      	ldrh	r4, [r3, #8]
 800768c:	4b42      	ldr	r3, [pc, #264]	; (8007798 <tcp_receive+0x968>)
 800768e:	68db      	ldr	r3, [r3, #12]
 8007690:	899b      	ldrh	r3, [r3, #12]
 8007692:	b29b      	uxth	r3, r3
 8007694:	4618      	mov	r0, r3
 8007696:	f7fb fcdc 	bl	8003052 <lwip_htons>
 800769a:	4603      	mov	r3, r0
 800769c:	f003 0303 	and.w	r3, r3, #3
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d001      	beq.n	80076a8 <tcp_receive+0x878>
 80076a4:	2301      	movs	r3, #1
 80076a6:	e000      	b.n	80076aa <tcp_receive+0x87a>
 80076a8:	2300      	movs	r3, #0
 80076aa:	4423      	add	r3, r4
 80076ac:	b29a      	uxth	r2, r3
 80076ae:	4b3b      	ldr	r3, [pc, #236]	; (800779c <tcp_receive+0x96c>)
 80076b0:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 80076b2:	4b3a      	ldr	r3, [pc, #232]	; (800779c <tcp_receive+0x96c>)
 80076b4:	881b      	ldrh	r3, [r3, #0]
 80076b6:	461a      	mov	r2, r3
 80076b8:	4b36      	ldr	r3, [pc, #216]	; (8007794 <tcp_receive+0x964>)
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	441a      	add	r2, r3
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076c2:	6879      	ldr	r1, [r7, #4]
 80076c4:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80076c6:	440b      	add	r3, r1
 80076c8:	429a      	cmp	r2, r3
 80076ca:	d006      	beq.n	80076da <tcp_receive+0x8aa>
 80076cc:	4b34      	ldr	r3, [pc, #208]	; (80077a0 <tcp_receive+0x970>)
 80076ce:	f240 527e 	movw	r2, #1406	; 0x57e
 80076d2:	4934      	ldr	r1, [pc, #208]	; (80077a4 <tcp_receive+0x974>)
 80076d4:	4834      	ldr	r0, [pc, #208]	; (80077a8 <tcp_receive+0x978>)
 80076d6:	f006 f9c3 	bl	800da60 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80076de:	2b00      	cmp	r3, #0
 80076e0:	f000 80e1 	beq.w	80078a6 <tcp_receive+0xa76>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80076e4:	4b2c      	ldr	r3, [pc, #176]	; (8007798 <tcp_receive+0x968>)
 80076e6:	68db      	ldr	r3, [r3, #12]
 80076e8:	899b      	ldrh	r3, [r3, #12]
 80076ea:	b29b      	uxth	r3, r3
 80076ec:	4618      	mov	r0, r3
 80076ee:	f7fb fcb0 	bl	8003052 <lwip_htons>
 80076f2:	4603      	mov	r3, r0
 80076f4:	f003 0301 	and.w	r3, r3, #1
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d010      	beq.n	800771e <tcp_receive+0x8ee>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 80076fc:	e00a      	b.n	8007714 <tcp_receive+0x8e4>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007702:	60bb      	str	r3, [r7, #8]
              pcb->ooseq = pcb->ooseq->next;
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007708:	681a      	ldr	r2, [r3, #0]
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	671a      	str	r2, [r3, #112]	; 0x70
              tcp_seg_free(old_ooseq);
 800770e:	68b8      	ldr	r0, [r7, #8]
 8007710:	f7fd ff30 	bl	8005574 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007718:	2b00      	cmp	r3, #0
 800771a:	d1f0      	bne.n	80076fe <tcp_receive+0x8ce>
 800771c:	e0c3      	b.n	80078a6 <tcp_receive+0xa76>
            }
          } else {
            next = pcb->ooseq;
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007722:	62fb      	str	r3, [r7, #44]	; 0x2c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 8007724:	e04f      	b.n	80077c6 <tcp_receive+0x996>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8007726:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007728:	68db      	ldr	r3, [r3, #12]
 800772a:	899b      	ldrh	r3, [r3, #12]
 800772c:	b29b      	uxth	r3, r3
 800772e:	4618      	mov	r0, r3
 8007730:	f7fb fc8f 	bl	8003052 <lwip_htons>
 8007734:	4603      	mov	r3, r0
 8007736:	f003 0301 	and.w	r3, r3, #1
 800773a:	2b00      	cmp	r3, #0
 800773c:	d03b      	beq.n	80077b6 <tcp_receive+0x986>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800773e:	4b16      	ldr	r3, [pc, #88]	; (8007798 <tcp_receive+0x968>)
 8007740:	68db      	ldr	r3, [r3, #12]
 8007742:	899b      	ldrh	r3, [r3, #12]
 8007744:	b29b      	uxth	r3, r3
 8007746:	4618      	mov	r0, r3
 8007748:	f7fb fc83 	bl	8003052 <lwip_htons>
 800774c:	4603      	mov	r3, r0
 800774e:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8007752:	2b00      	cmp	r3, #0
 8007754:	d12f      	bne.n	80077b6 <tcp_receive+0x986>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8007756:	4b10      	ldr	r3, [pc, #64]	; (8007798 <tcp_receive+0x968>)
 8007758:	68db      	ldr	r3, [r3, #12]
 800775a:	899b      	ldrh	r3, [r3, #12]
 800775c:	b29c      	uxth	r4, r3
 800775e:	2001      	movs	r0, #1
 8007760:	f7fb fc77 	bl	8003052 <lwip_htons>
 8007764:	4603      	mov	r3, r0
 8007766:	461a      	mov	r2, r3
 8007768:	4b0b      	ldr	r3, [pc, #44]	; (8007798 <tcp_receive+0x968>)
 800776a:	68db      	ldr	r3, [r3, #12]
 800776c:	4322      	orrs	r2, r4
 800776e:	b292      	uxth	r2, r2
 8007770:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8007772:	4b09      	ldr	r3, [pc, #36]	; (8007798 <tcp_receive+0x968>)
 8007774:	891c      	ldrh	r4, [r3, #8]
 8007776:	4b08      	ldr	r3, [pc, #32]	; (8007798 <tcp_receive+0x968>)
 8007778:	68db      	ldr	r3, [r3, #12]
 800777a:	899b      	ldrh	r3, [r3, #12]
 800777c:	b29b      	uxth	r3, r3
 800777e:	4618      	mov	r0, r3
 8007780:	f7fb fc67 	bl	8003052 <lwip_htons>
 8007784:	4603      	mov	r3, r0
 8007786:	f003 0303 	and.w	r3, r3, #3
 800778a:	2b00      	cmp	r3, #0
 800778c:	d00e      	beq.n	80077ac <tcp_receive+0x97c>
 800778e:	2301      	movs	r3, #1
 8007790:	e00d      	b.n	80077ae <tcp_receive+0x97e>
 8007792:	bf00      	nop
 8007794:	200000f0 	.word	0x200000f0
 8007798:	200000d0 	.word	0x200000d0
 800779c:	200000fa 	.word	0x200000fa
 80077a0:	0800f7f8 	.word	0x0800f7f8
 80077a4:	0800fac4 	.word	0x0800fac4
 80077a8:	0800f83c 	.word	0x0800f83c
 80077ac:	2300      	movs	r3, #0
 80077ae:	4423      	add	r3, r4
 80077b0:	b29a      	uxth	r2, r3
 80077b2:	4b95      	ldr	r3, [pc, #596]	; (8007a08 <tcp_receive+0xbd8>)
 80077b4:	801a      	strh	r2, [r3, #0]
              }
              prev = next;
 80077b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077b8:	62bb      	str	r3, [r7, #40]	; 0x28
              next = next->next;
 80077ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	62fb      	str	r3, [r7, #44]	; 0x2c
              tcp_seg_free(prev);
 80077c0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80077c2:	f7fd fed7 	bl	8005574 <tcp_seg_free>
            while (next &&
 80077c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d00e      	beq.n	80077ea <tcp_receive+0x9ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
 80077cc:	4b8e      	ldr	r3, [pc, #568]	; (8007a08 <tcp_receive+0xbd8>)
 80077ce:	881b      	ldrh	r3, [r3, #0]
 80077d0:	461a      	mov	r2, r3
 80077d2:	4b8e      	ldr	r3, [pc, #568]	; (8007a0c <tcp_receive+0xbdc>)
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	441a      	add	r2, r3
 80077d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077da:	68db      	ldr	r3, [r3, #12]
 80077dc:	685b      	ldr	r3, [r3, #4]
 80077de:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80077e0:	8909      	ldrh	r1, [r1, #8]
 80077e2:	440b      	add	r3, r1
 80077e4:	1ad3      	subs	r3, r2, r3
            while (next &&
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	da9d      	bge.n	8007726 <tcp_receive+0x8f6>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 80077ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d057      	beq.n	80078a0 <tcp_receive+0xa70>
                TCP_SEQ_GT(seqno + tcplen,
 80077f0:	4b85      	ldr	r3, [pc, #532]	; (8007a08 <tcp_receive+0xbd8>)
 80077f2:	881b      	ldrh	r3, [r3, #0]
 80077f4:	461a      	mov	r2, r3
 80077f6:	4b85      	ldr	r3, [pc, #532]	; (8007a0c <tcp_receive+0xbdc>)
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	441a      	add	r2, r3
 80077fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077fe:	68db      	ldr	r3, [r3, #12]
 8007800:	685b      	ldr	r3, [r3, #4]
 8007802:	1ad3      	subs	r3, r2, r3
            if (next &&
 8007804:	2b00      	cmp	r3, #0
 8007806:	dd4b      	ble.n	80078a0 <tcp_receive+0xa70>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8007808:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800780a:	68db      	ldr	r3, [r3, #12]
 800780c:	685b      	ldr	r3, [r3, #4]
 800780e:	b29a      	uxth	r2, r3
 8007810:	4b7e      	ldr	r3, [pc, #504]	; (8007a0c <tcp_receive+0xbdc>)
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	b29b      	uxth	r3, r3
 8007816:	1ad3      	subs	r3, r2, r3
 8007818:	b29a      	uxth	r2, r3
 800781a:	4b7d      	ldr	r3, [pc, #500]	; (8007a10 <tcp_receive+0xbe0>)
 800781c:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800781e:	4b7c      	ldr	r3, [pc, #496]	; (8007a10 <tcp_receive+0xbe0>)
 8007820:	68db      	ldr	r3, [r3, #12]
 8007822:	899b      	ldrh	r3, [r3, #12]
 8007824:	b29b      	uxth	r3, r3
 8007826:	4618      	mov	r0, r3
 8007828:	f7fb fc13 	bl	8003052 <lwip_htons>
 800782c:	4603      	mov	r3, r0
 800782e:	f003 0302 	and.w	r3, r3, #2
 8007832:	2b00      	cmp	r3, #0
 8007834:	d005      	beq.n	8007842 <tcp_receive+0xa12>
                inseg.len -= 1;
 8007836:	4b76      	ldr	r3, [pc, #472]	; (8007a10 <tcp_receive+0xbe0>)
 8007838:	891b      	ldrh	r3, [r3, #8]
 800783a:	3b01      	subs	r3, #1
 800783c:	b29a      	uxth	r2, r3
 800783e:	4b74      	ldr	r3, [pc, #464]	; (8007a10 <tcp_receive+0xbe0>)
 8007840:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8007842:	4b73      	ldr	r3, [pc, #460]	; (8007a10 <tcp_receive+0xbe0>)
 8007844:	685b      	ldr	r3, [r3, #4]
 8007846:	4a72      	ldr	r2, [pc, #456]	; (8007a10 <tcp_receive+0xbe0>)
 8007848:	8912      	ldrh	r2, [r2, #8]
 800784a:	4611      	mov	r1, r2
 800784c:	4618      	mov	r0, r3
 800784e:	f7fc fbbf 	bl	8003fd0 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8007852:	4b6f      	ldr	r3, [pc, #444]	; (8007a10 <tcp_receive+0xbe0>)
 8007854:	891c      	ldrh	r4, [r3, #8]
 8007856:	4b6e      	ldr	r3, [pc, #440]	; (8007a10 <tcp_receive+0xbe0>)
 8007858:	68db      	ldr	r3, [r3, #12]
 800785a:	899b      	ldrh	r3, [r3, #12]
 800785c:	b29b      	uxth	r3, r3
 800785e:	4618      	mov	r0, r3
 8007860:	f7fb fbf7 	bl	8003052 <lwip_htons>
 8007864:	4603      	mov	r3, r0
 8007866:	f003 0303 	and.w	r3, r3, #3
 800786a:	2b00      	cmp	r3, #0
 800786c:	d001      	beq.n	8007872 <tcp_receive+0xa42>
 800786e:	2301      	movs	r3, #1
 8007870:	e000      	b.n	8007874 <tcp_receive+0xa44>
 8007872:	2300      	movs	r3, #0
 8007874:	4423      	add	r3, r4
 8007876:	b29a      	uxth	r2, r3
 8007878:	4b63      	ldr	r3, [pc, #396]	; (8007a08 <tcp_receive+0xbd8>)
 800787a:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800787c:	4b62      	ldr	r3, [pc, #392]	; (8007a08 <tcp_receive+0xbd8>)
 800787e:	881b      	ldrh	r3, [r3, #0]
 8007880:	461a      	mov	r2, r3
 8007882:	4b62      	ldr	r3, [pc, #392]	; (8007a0c <tcp_receive+0xbdc>)
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	441a      	add	r2, r3
 8007888:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800788a:	68db      	ldr	r3, [r3, #12]
 800788c:	685b      	ldr	r3, [r3, #4]
 800788e:	429a      	cmp	r2, r3
 8007890:	d006      	beq.n	80078a0 <tcp_receive+0xa70>
 8007892:	4b60      	ldr	r3, [pc, #384]	; (8007a14 <tcp_receive+0xbe4>)
 8007894:	f240 52ae 	movw	r2, #1454	; 0x5ae
 8007898:	495f      	ldr	r1, [pc, #380]	; (8007a18 <tcp_receive+0xbe8>)
 800789a:	4860      	ldr	r0, [pc, #384]	; (8007a1c <tcp_receive+0xbec>)
 800789c:	f006 f8e0 	bl	800da60 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80078a4:	671a      	str	r2, [r3, #112]	; 0x70
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 80078a6:	4b58      	ldr	r3, [pc, #352]	; (8007a08 <tcp_receive+0xbd8>)
 80078a8:	881b      	ldrh	r3, [r3, #0]
 80078aa:	461a      	mov	r2, r3
 80078ac:	4b57      	ldr	r3, [pc, #348]	; (8007a0c <tcp_receive+0xbdc>)
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	441a      	add	r2, r3
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80078ba:	4b53      	ldr	r3, [pc, #332]	; (8007a08 <tcp_receive+0xbd8>)
 80078bc:	881b      	ldrh	r3, [r3, #0]
 80078be:	429a      	cmp	r2, r3
 80078c0:	d206      	bcs.n	80078d0 <tcp_receive+0xaa0>
 80078c2:	4b54      	ldr	r3, [pc, #336]	; (8007a14 <tcp_receive+0xbe4>)
 80078c4:	f240 52b9 	movw	r2, #1465	; 0x5b9
 80078c8:	4955      	ldr	r1, [pc, #340]	; (8007a20 <tcp_receive+0xbf0>)
 80078ca:	4854      	ldr	r0, [pc, #336]	; (8007a1c <tcp_receive+0xbec>)
 80078cc:	f006 f8c8 	bl	800da60 <iprintf>
        pcb->rcv_wnd -= tcplen;
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80078d4:	4b4c      	ldr	r3, [pc, #304]	; (8007a08 <tcp_receive+0xbd8>)
 80078d6:	881b      	ldrh	r3, [r3, #0]
 80078d8:	1ad3      	subs	r3, r2, r3
 80078da:	b29a      	uxth	r2, r3
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 80078e0:	6878      	ldr	r0, [r7, #4]
 80078e2:	f7fd f9fb 	bl	8004cdc <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 80078e6:	4b4a      	ldr	r3, [pc, #296]	; (8007a10 <tcp_receive+0xbe0>)
 80078e8:	685b      	ldr	r3, [r3, #4]
 80078ea:	891b      	ldrh	r3, [r3, #8]
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d006      	beq.n	80078fe <tcp_receive+0xace>
          recv_data = inseg.p;
 80078f0:	4b47      	ldr	r3, [pc, #284]	; (8007a10 <tcp_receive+0xbe0>)
 80078f2:	685b      	ldr	r3, [r3, #4]
 80078f4:	4a4b      	ldr	r2, [pc, #300]	; (8007a24 <tcp_receive+0xbf4>)
 80078f6:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 80078f8:	4b45      	ldr	r3, [pc, #276]	; (8007a10 <tcp_receive+0xbe0>)
 80078fa:	2200      	movs	r2, #0
 80078fc:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80078fe:	4b44      	ldr	r3, [pc, #272]	; (8007a10 <tcp_receive+0xbe0>)
 8007900:	68db      	ldr	r3, [r3, #12]
 8007902:	899b      	ldrh	r3, [r3, #12]
 8007904:	b29b      	uxth	r3, r3
 8007906:	4618      	mov	r0, r3
 8007908:	f7fb fba3 	bl	8003052 <lwip_htons>
 800790c:	4603      	mov	r3, r0
 800790e:	f003 0301 	and.w	r3, r3, #1
 8007912:	2b00      	cmp	r3, #0
 8007914:	f000 80b4 	beq.w	8007a80 <tcp_receive+0xc50>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 8007918:	4b43      	ldr	r3, [pc, #268]	; (8007a28 <tcp_receive+0xbf8>)
 800791a:	781b      	ldrb	r3, [r3, #0]
 800791c:	f043 0320 	orr.w	r3, r3, #32
 8007920:	b2da      	uxtb	r2, r3
 8007922:	4b41      	ldr	r3, [pc, #260]	; (8007a28 <tcp_receive+0xbf8>)
 8007924:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 8007926:	e0ab      	b.n	8007a80 <tcp_receive+0xc50>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          cseg = pcb->ooseq;
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800792c:	60fb      	str	r3, [r7, #12]
          seqno = pcb->ooseq->tcphdr->seqno;
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007932:	68db      	ldr	r3, [r3, #12]
 8007934:	685b      	ldr	r3, [r3, #4]
 8007936:	4a35      	ldr	r2, [pc, #212]	; (8007a0c <tcp_receive+0xbdc>)
 8007938:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	891b      	ldrh	r3, [r3, #8]
 800793e:	461c      	mov	r4, r3
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	68db      	ldr	r3, [r3, #12]
 8007944:	899b      	ldrh	r3, [r3, #12]
 8007946:	b29b      	uxth	r3, r3
 8007948:	4618      	mov	r0, r3
 800794a:	f7fb fb82 	bl	8003052 <lwip_htons>
 800794e:	4603      	mov	r3, r0
 8007950:	f003 0303 	and.w	r3, r3, #3
 8007954:	2b00      	cmp	r3, #0
 8007956:	d001      	beq.n	800795c <tcp_receive+0xb2c>
 8007958:	2301      	movs	r3, #1
 800795a:	e000      	b.n	800795e <tcp_receive+0xb2e>
 800795c:	2300      	movs	r3, #0
 800795e:	191a      	adds	r2, r3, r4
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007964:	441a      	add	r2, r3
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800796e:	461c      	mov	r4, r3
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	891b      	ldrh	r3, [r3, #8]
 8007974:	461d      	mov	r5, r3
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	68db      	ldr	r3, [r3, #12]
 800797a:	899b      	ldrh	r3, [r3, #12]
 800797c:	b29b      	uxth	r3, r3
 800797e:	4618      	mov	r0, r3
 8007980:	f7fb fb67 	bl	8003052 <lwip_htons>
 8007984:	4603      	mov	r3, r0
 8007986:	f003 0303 	and.w	r3, r3, #3
 800798a:	2b00      	cmp	r3, #0
 800798c:	d001      	beq.n	8007992 <tcp_receive+0xb62>
 800798e:	2301      	movs	r3, #1
 8007990:	e000      	b.n	8007994 <tcp_receive+0xb64>
 8007992:	2300      	movs	r3, #0
 8007994:	442b      	add	r3, r5
 8007996:	429c      	cmp	r4, r3
 8007998:	d206      	bcs.n	80079a8 <tcp_receive+0xb78>
 800799a:	4b1e      	ldr	r3, [pc, #120]	; (8007a14 <tcp_receive+0xbe4>)
 800799c:	f240 52dd 	movw	r2, #1501	; 0x5dd
 80079a0:	4922      	ldr	r1, [pc, #136]	; (8007a2c <tcp_receive+0xbfc>)
 80079a2:	481e      	ldr	r0, [pc, #120]	; (8007a1c <tcp_receive+0xbec>)
 80079a4:	f006 f85c 	bl	800da60 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	891b      	ldrh	r3, [r3, #8]
 80079ac:	461c      	mov	r4, r3
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	68db      	ldr	r3, [r3, #12]
 80079b2:	899b      	ldrh	r3, [r3, #12]
 80079b4:	b29b      	uxth	r3, r3
 80079b6:	4618      	mov	r0, r3
 80079b8:	f7fb fb4b 	bl	8003052 <lwip_htons>
 80079bc:	4603      	mov	r3, r0
 80079be:	f003 0303 	and.w	r3, r3, #3
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d001      	beq.n	80079ca <tcp_receive+0xb9a>
 80079c6:	2301      	movs	r3, #1
 80079c8:	e000      	b.n	80079cc <tcp_receive+0xb9c>
 80079ca:	2300      	movs	r3, #0
 80079cc:	1919      	adds	r1, r3, r4
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80079d2:	b28b      	uxth	r3, r1
 80079d4:	1ad3      	subs	r3, r2, r3
 80079d6:	b29a      	uxth	r2, r3
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 80079dc:	6878      	ldr	r0, [r7, #4]
 80079de:	f7fd f97d 	bl	8004cdc <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	685b      	ldr	r3, [r3, #4]
 80079e6:	891b      	ldrh	r3, [r3, #8]
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d028      	beq.n	8007a3e <tcp_receive+0xc0e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 80079ec:	4b0d      	ldr	r3, [pc, #52]	; (8007a24 <tcp_receive+0xbf4>)
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d01d      	beq.n	8007a30 <tcp_receive+0xc00>
              pbuf_cat(recv_data, cseg->p);
 80079f4:	4b0b      	ldr	r3, [pc, #44]	; (8007a24 <tcp_receive+0xbf4>)
 80079f6:	681a      	ldr	r2, [r3, #0]
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	685b      	ldr	r3, [r3, #4]
 80079fc:	4619      	mov	r1, r3
 80079fe:	4610      	mov	r0, r2
 8007a00:	f7fc fd26 	bl	8004450 <pbuf_cat>
 8007a04:	e018      	b.n	8007a38 <tcp_receive+0xc08>
 8007a06:	bf00      	nop
 8007a08:	200000fa 	.word	0x200000fa
 8007a0c:	200000f0 	.word	0x200000f0
 8007a10:	200000d0 	.word	0x200000d0
 8007a14:	0800f7f8 	.word	0x0800f7f8
 8007a18:	0800fafc 	.word	0x0800fafc
 8007a1c:	0800f83c 	.word	0x0800f83c
 8007a20:	0800fb38 	.word	0x0800fb38
 8007a24:	20000100 	.word	0x20000100
 8007a28:	200000fd 	.word	0x200000fd
 8007a2c:	0800fb58 	.word	0x0800fb58
            } else {
              recv_data = cseg->p;
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	685b      	ldr	r3, [r3, #4]
 8007a34:	4a71      	ldr	r2, [pc, #452]	; (8007bfc <tcp_receive+0xdcc>)
 8007a36:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	2200      	movs	r2, #0
 8007a3c:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	68db      	ldr	r3, [r3, #12]
 8007a42:	899b      	ldrh	r3, [r3, #12]
 8007a44:	b29b      	uxth	r3, r3
 8007a46:	4618      	mov	r0, r3
 8007a48:	f7fb fb03 	bl	8003052 <lwip_htons>
 8007a4c:	4603      	mov	r3, r0
 8007a4e:	f003 0301 	and.w	r3, r3, #1
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d00d      	beq.n	8007a72 <tcp_receive+0xc42>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 8007a56:	4b6a      	ldr	r3, [pc, #424]	; (8007c00 <tcp_receive+0xdd0>)
 8007a58:	781b      	ldrb	r3, [r3, #0]
 8007a5a:	f043 0320 	orr.w	r3, r3, #32
 8007a5e:	b2da      	uxtb	r2, r3
 8007a60:	4b67      	ldr	r3, [pc, #412]	; (8007c00 <tcp_receive+0xdd0>)
 8007a62:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	7d1b      	ldrb	r3, [r3, #20]
 8007a68:	2b04      	cmp	r3, #4
 8007a6a:	d102      	bne.n	8007a72 <tcp_receive+0xc42>
              pcb->state = CLOSE_WAIT;
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	2207      	movs	r2, #7
 8007a70:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	681a      	ldr	r2, [r3, #0]
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	671a      	str	r2, [r3, #112]	; 0x70
          tcp_seg_free(cseg);
 8007a7a:	68f8      	ldr	r0, [r7, #12]
 8007a7c:	f7fd fd7a 	bl	8005574 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d008      	beq.n	8007a9a <tcp_receive+0xc6a>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a8c:	68db      	ldr	r3, [r3, #12]
 8007a8e:	685a      	ldr	r2, [r3, #4]
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 8007a94:	429a      	cmp	r2, r3
 8007a96:	f43f af47 	beq.w	8007928 <tcp_receive+0xaf8>
        }
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	7e9b      	ldrb	r3, [r3, #26]
 8007a9e:	f003 0301 	and.w	r3, r3, #1
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d00e      	beq.n	8007ac4 <tcp_receive+0xc94>
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	7e9b      	ldrb	r3, [r3, #26]
 8007aaa:	f023 0301 	bic.w	r3, r3, #1
 8007aae:	b2da      	uxtb	r2, r3
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	769a      	strb	r2, [r3, #26]
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	7e9b      	ldrb	r3, [r3, #26]
 8007ab8:	f043 0302 	orr.w	r3, r3, #2
 8007abc:	b2da      	uxtb	r2, r3
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	769a      	strb	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8007ac2:	e181      	b.n	8007dc8 <tcp_receive+0xf98>
        tcp_ack(pcb);
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	7e9b      	ldrb	r3, [r3, #26]
 8007ac8:	f043 0301 	orr.w	r3, r3, #1
 8007acc:	b2da      	uxtb	r2, r3
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	769a      	strb	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8007ad2:	e179      	b.n	8007dc8 <tcp_receive+0xf98>
        }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      } else {
        /* We get here if the incoming segment is out-of-sequence. */
        tcp_send_empty_ack(pcb);
 8007ad4:	6878      	ldr	r0, [r7, #4]
 8007ad6:	f000 fc91 	bl	80083fc <tcp_send_empty_ack>
#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d106      	bne.n	8007af0 <tcp_receive+0xcc0>
          pcb->ooseq = tcp_seg_copy(&inseg);
 8007ae2:	4848      	ldr	r0, [pc, #288]	; (8007c04 <tcp_receive+0xdd4>)
 8007ae4:	f7fd fd5e 	bl	80055a4 <tcp_seg_copy>
 8007ae8:	4602      	mov	r2, r0
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	671a      	str	r2, [r3, #112]	; 0x70
      if (pcb->rcv_nxt == seqno) {
 8007aee:	e16b      	b.n	8007dc8 <tcp_receive+0xf98>

             If the incoming segment has the same sequence number as a
             segment on the ->ooseq queue, we discard the segment that
             contains less data. */

          prev = NULL;
 8007af0:	2300      	movs	r3, #0
 8007af2:	62bb      	str	r3, [r7, #40]	; 0x28
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007af8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007afa:	e150      	b.n	8007d9e <tcp_receive+0xf6e>
            if (seqno == next->tcphdr->seqno) {
 8007afc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007afe:	68db      	ldr	r3, [r3, #12]
 8007b00:	685a      	ldr	r2, [r3, #4]
 8007b02:	4b41      	ldr	r3, [pc, #260]	; (8007c08 <tcp_receive+0xdd8>)
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	429a      	cmp	r2, r3
 8007b08:	d11d      	bne.n	8007b46 <tcp_receive+0xd16>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 8007b0a:	4b3e      	ldr	r3, [pc, #248]	; (8007c04 <tcp_receive+0xdd4>)
 8007b0c:	891a      	ldrh	r2, [r3, #8]
 8007b0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b10:	891b      	ldrh	r3, [r3, #8]
 8007b12:	429a      	cmp	r2, r3
 8007b14:	f240 8148 	bls.w	8007da8 <tcp_receive+0xf78>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                cseg = tcp_seg_copy(&inseg);
 8007b18:	483a      	ldr	r0, [pc, #232]	; (8007c04 <tcp_receive+0xdd4>)
 8007b1a:	f7fd fd43 	bl	80055a4 <tcp_seg_copy>
 8007b1e:	60f8      	str	r0, [r7, #12]
                if (cseg != NULL) {
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	f000 8142 	beq.w	8007dac <tcp_receive+0xf7c>
                  if (prev != NULL) {
 8007b28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d003      	beq.n	8007b36 <tcp_receive+0xd06>
                    prev->next = cseg;
 8007b2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b30:	68fa      	ldr	r2, [r7, #12]
 8007b32:	601a      	str	r2, [r3, #0]
 8007b34:	e002      	b.n	8007b3c <tcp_receive+0xd0c>
                  } else {
                    pcb->ooseq = cseg;
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	68fa      	ldr	r2, [r7, #12]
 8007b3a:	671a      	str	r2, [r3, #112]	; 0x70
                  }
                  tcp_oos_insert_segment(cseg, next);
 8007b3c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007b3e:	68f8      	ldr	r0, [r7, #12]
 8007b40:	f7ff f900 	bl	8006d44 <tcp_oos_insert_segment>
                }
                break;
 8007b44:	e132      	b.n	8007dac <tcp_receive+0xf7c>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 8007b46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d117      	bne.n	8007b7c <tcp_receive+0xd4c>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8007b4c:	4b2e      	ldr	r3, [pc, #184]	; (8007c08 <tcp_receive+0xdd8>)
 8007b4e:	681a      	ldr	r2, [r3, #0]
 8007b50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b52:	68db      	ldr	r3, [r3, #12]
 8007b54:	685b      	ldr	r3, [r3, #4]
 8007b56:	1ad3      	subs	r3, r2, r3
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	da57      	bge.n	8007c0c <tcp_receive+0xddc>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  cseg = tcp_seg_copy(&inseg);
 8007b5c:	4829      	ldr	r0, [pc, #164]	; (8007c04 <tcp_receive+0xdd4>)
 8007b5e:	f7fd fd21 	bl	80055a4 <tcp_seg_copy>
 8007b62:	60f8      	str	r0, [r7, #12]
                  if (cseg != NULL) {
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	f000 8122 	beq.w	8007db0 <tcp_receive+0xf80>
                    pcb->ooseq = cseg;
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	68fa      	ldr	r2, [r7, #12]
 8007b70:	671a      	str	r2, [r3, #112]	; 0x70
                    tcp_oos_insert_segment(cseg, next);
 8007b72:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007b74:	68f8      	ldr	r0, [r7, #12]
 8007b76:	f7ff f8e5 	bl	8006d44 <tcp_oos_insert_segment>
                  }
                  break;
 8007b7a:	e119      	b.n	8007db0 <tcp_receive+0xf80>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno+1, next->tcphdr->seqno-1)) {
 8007b7c:	4b22      	ldr	r3, [pc, #136]	; (8007c08 <tcp_receive+0xdd8>)
 8007b7e:	681a      	ldr	r2, [r3, #0]
 8007b80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b82:	68db      	ldr	r3, [r3, #12]
 8007b84:	685b      	ldr	r3, [r3, #4]
 8007b86:	1ad3      	subs	r3, r2, r3
 8007b88:	3b01      	subs	r3, #1
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	db3e      	blt.n	8007c0c <tcp_receive+0xddc>
 8007b8e:	4b1e      	ldr	r3, [pc, #120]	; (8007c08 <tcp_receive+0xdd8>)
 8007b90:	681a      	ldr	r2, [r3, #0]
 8007b92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b94:	68db      	ldr	r3, [r3, #12]
 8007b96:	685b      	ldr	r3, [r3, #4]
 8007b98:	1ad3      	subs	r3, r2, r3
 8007b9a:	3301      	adds	r3, #1
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	dc35      	bgt.n	8007c0c <tcp_receive+0xddc>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  cseg = tcp_seg_copy(&inseg);
 8007ba0:	4818      	ldr	r0, [pc, #96]	; (8007c04 <tcp_receive+0xdd4>)
 8007ba2:	f7fd fcff 	bl	80055a4 <tcp_seg_copy>
 8007ba6:	60f8      	str	r0, [r7, #12]
                  if (cseg != NULL) {
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	f000 8102 	beq.w	8007db4 <tcp_receive+0xf84>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8007bb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bb2:	68db      	ldr	r3, [r3, #12]
 8007bb4:	685b      	ldr	r3, [r3, #4]
 8007bb6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007bb8:	8912      	ldrh	r2, [r2, #8]
 8007bba:	441a      	add	r2, r3
 8007bbc:	4b12      	ldr	r3, [pc, #72]	; (8007c08 <tcp_receive+0xdd8>)
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	1ad3      	subs	r3, r2, r3
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	dd12      	ble.n	8007bec <tcp_receive+0xdbc>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8007bc6:	4b10      	ldr	r3, [pc, #64]	; (8007c08 <tcp_receive+0xdd8>)
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	b29a      	uxth	r2, r3
 8007bcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bce:	68db      	ldr	r3, [r3, #12]
 8007bd0:	685b      	ldr	r3, [r3, #4]
 8007bd2:	b29b      	uxth	r3, r3
 8007bd4:	1ad3      	subs	r3, r2, r3
 8007bd6:	b29a      	uxth	r2, r3
 8007bd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bda:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 8007bdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bde:	685a      	ldr	r2, [r3, #4]
 8007be0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007be2:	891b      	ldrh	r3, [r3, #8]
 8007be4:	4619      	mov	r1, r3
 8007be6:	4610      	mov	r0, r2
 8007be8:	f7fc f9f2 	bl	8003fd0 <pbuf_realloc>
                    }
                    prev->next = cseg;
 8007bec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bee:	68fa      	ldr	r2, [r7, #12]
 8007bf0:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 8007bf2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007bf4:	68f8      	ldr	r0, [r7, #12]
 8007bf6:	f7ff f8a5 	bl	8006d44 <tcp_oos_insert_segment>
                  }
                  break;
 8007bfa:	e0db      	b.n	8007db4 <tcp_receive+0xf84>
 8007bfc:	20000100 	.word	0x20000100
 8007c00:	200000fd 	.word	0x200000fd
 8007c04:	200000d0 	.word	0x200000d0
 8007c08:	200000f0 	.word	0x200000f0
                }
              }
              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8007c0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	f040 80bf 	bne.w	8007d94 <tcp_receive+0xf64>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 8007c16:	4b7c      	ldr	r3, [pc, #496]	; (8007e08 <tcp_receive+0xfd8>)
 8007c18:	681a      	ldr	r2, [r3, #0]
 8007c1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c1c:	68db      	ldr	r3, [r3, #12]
 8007c1e:	685b      	ldr	r3, [r3, #4]
 8007c20:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	f340 80b6 	ble.w	8007d94 <tcp_receive+0xf64>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8007c28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c2a:	68db      	ldr	r3, [r3, #12]
 8007c2c:	899b      	ldrh	r3, [r3, #12]
 8007c2e:	b29b      	uxth	r3, r3
 8007c30:	4618      	mov	r0, r3
 8007c32:	f7fb fa0e 	bl	8003052 <lwip_htons>
 8007c36:	4603      	mov	r3, r0
 8007c38:	f003 0301 	and.w	r3, r3, #1
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	f040 80bb 	bne.w	8007db8 <tcp_receive+0xf88>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 8007c42:	4872      	ldr	r0, [pc, #456]	; (8007e0c <tcp_receive+0xfdc>)
 8007c44:	f7fd fcae 	bl	80055a4 <tcp_seg_copy>
 8007c48:	4602      	mov	r2, r0
 8007c4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c4c:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 8007c4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	f000 80b2 	beq.w	8007dbc <tcp_receive+0xf8c>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 8007c58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c5a:	68db      	ldr	r3, [r3, #12]
 8007c5c:	685b      	ldr	r3, [r3, #4]
 8007c5e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007c60:	8912      	ldrh	r2, [r2, #8]
 8007c62:	441a      	add	r2, r3
 8007c64:	4b68      	ldr	r3, [pc, #416]	; (8007e08 <tcp_receive+0xfd8>)
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	1ad3      	subs	r3, r2, r3
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	dd12      	ble.n	8007c94 <tcp_receive+0xe64>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8007c6e:	4b66      	ldr	r3, [pc, #408]	; (8007e08 <tcp_receive+0xfd8>)
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	b29a      	uxth	r2, r3
 8007c74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c76:	68db      	ldr	r3, [r3, #12]
 8007c78:	685b      	ldr	r3, [r3, #4]
 8007c7a:	b29b      	uxth	r3, r3
 8007c7c:	1ad3      	subs	r3, r2, r3
 8007c7e:	b29a      	uxth	r2, r3
 8007c80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c82:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 8007c84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c86:	685a      	ldr	r2, [r3, #4]
 8007c88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c8a:	891b      	ldrh	r3, [r3, #8]
 8007c8c:	4619      	mov	r1, r3
 8007c8e:	4610      	mov	r0, r2
 8007c90:	f7fc f99e 	bl	8003fd0 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 8007c94:	4b5e      	ldr	r3, [pc, #376]	; (8007e10 <tcp_receive+0xfe0>)
 8007c96:	881b      	ldrh	r3, [r3, #0]
 8007c98:	461a      	mov	r2, r3
 8007c9a:	4b5b      	ldr	r3, [pc, #364]	; (8007e08 <tcp_receive+0xfd8>)
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	441a      	add	r2, r3
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ca4:	6879      	ldr	r1, [r7, #4]
 8007ca6:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8007ca8:	440b      	add	r3, r1
 8007caa:	1ad3      	subs	r3, r2, r3
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	f340 8085 	ble.w	8007dbc <tcp_receive+0xf8c>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8007cb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	68db      	ldr	r3, [r3, #12]
 8007cb8:	899b      	ldrh	r3, [r3, #12]
 8007cba:	b29b      	uxth	r3, r3
 8007cbc:	4618      	mov	r0, r3
 8007cbe:	f7fb f9c8 	bl	8003052 <lwip_htons>
 8007cc2:	4603      	mov	r3, r0
 8007cc4:	f003 0301 	and.w	r3, r3, #1
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d01e      	beq.n	8007d0a <tcp_receive+0xeda>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8007ccc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	68db      	ldr	r3, [r3, #12]
 8007cd2:	899b      	ldrh	r3, [r3, #12]
 8007cd4:	b29b      	uxth	r3, r3
 8007cd6:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8007cda:	b29c      	uxth	r4, r3
 8007cdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	68db      	ldr	r3, [r3, #12]
 8007ce2:	899b      	ldrh	r3, [r3, #12]
 8007ce4:	b29b      	uxth	r3, r3
 8007ce6:	4618      	mov	r0, r3
 8007ce8:	f7fb f9b3 	bl	8003052 <lwip_htons>
 8007cec:	4603      	mov	r3, r0
 8007cee:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8007cf2:	b29b      	uxth	r3, r3
 8007cf4:	4618      	mov	r0, r3
 8007cf6:	f7fb f9ac 	bl	8003052 <lwip_htons>
 8007cfa:	4603      	mov	r3, r0
 8007cfc:	461a      	mov	r2, r3
 8007cfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	68db      	ldr	r3, [r3, #12]
 8007d04:	4322      	orrs	r2, r4
 8007d06:	b292      	uxth	r2, r2
 8007d08:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d0e:	b29a      	uxth	r2, r3
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007d14:	4413      	add	r3, r2
 8007d16:	b299      	uxth	r1, r3
 8007d18:	4b3b      	ldr	r3, [pc, #236]	; (8007e08 <tcp_receive+0xfd8>)
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	b29a      	uxth	r2, r3
 8007d1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	1a8a      	subs	r2, r1, r2
 8007d24:	b292      	uxth	r2, r2
 8007d26:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8007d28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	685a      	ldr	r2, [r3, #4]
 8007d2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	891b      	ldrh	r3, [r3, #8]
 8007d34:	4619      	mov	r1, r3
 8007d36:	4610      	mov	r0, r2
 8007d38:	f7fc f94a 	bl	8003fd0 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8007d3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	891c      	ldrh	r4, [r3, #8]
 8007d42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	68db      	ldr	r3, [r3, #12]
 8007d48:	899b      	ldrh	r3, [r3, #12]
 8007d4a:	b29b      	uxth	r3, r3
 8007d4c:	4618      	mov	r0, r3
 8007d4e:	f7fb f980 	bl	8003052 <lwip_htons>
 8007d52:	4603      	mov	r3, r0
 8007d54:	f003 0303 	and.w	r3, r3, #3
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d001      	beq.n	8007d60 <tcp_receive+0xf30>
 8007d5c:	2301      	movs	r3, #1
 8007d5e:	e000      	b.n	8007d62 <tcp_receive+0xf32>
 8007d60:	2300      	movs	r3, #0
 8007d62:	4423      	add	r3, r4
 8007d64:	b29a      	uxth	r2, r3
 8007d66:	4b2a      	ldr	r3, [pc, #168]	; (8007e10 <tcp_receive+0xfe0>)
 8007d68:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8007d6a:	4b29      	ldr	r3, [pc, #164]	; (8007e10 <tcp_receive+0xfe0>)
 8007d6c:	881b      	ldrh	r3, [r3, #0]
 8007d6e:	461a      	mov	r2, r3
 8007d70:	4b25      	ldr	r3, [pc, #148]	; (8007e08 <tcp_receive+0xfd8>)
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	441a      	add	r2, r3
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d7a:	6879      	ldr	r1, [r7, #4]
 8007d7c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8007d7e:	440b      	add	r3, r1
 8007d80:	429a      	cmp	r2, r3
 8007d82:	d01b      	beq.n	8007dbc <tcp_receive+0xf8c>
 8007d84:	4b23      	ldr	r3, [pc, #140]	; (8007e14 <tcp_receive+0xfe4>)
 8007d86:	f240 627a 	movw	r2, #1658	; 0x67a
 8007d8a:	4923      	ldr	r1, [pc, #140]	; (8007e18 <tcp_receive+0xfe8>)
 8007d8c:	4823      	ldr	r0, [pc, #140]	; (8007e1c <tcp_receive+0xfec>)
 8007d8e:	f005 fe67 	bl	800da60 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 8007d92:	e013      	b.n	8007dbc <tcp_receive+0xf8c>
              }
            }
            prev = next;
 8007d94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d96:	62bb      	str	r3, [r7, #40]	; 0x28
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8007d98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007d9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	f47f aeab 	bne.w	8007afc <tcp_receive+0xccc>
      if (pcb->rcv_nxt == seqno) {
 8007da6:	e00f      	b.n	8007dc8 <tcp_receive+0xf98>
                break;
 8007da8:	bf00      	nop
 8007daa:	e00d      	b.n	8007dc8 <tcp_receive+0xf98>
                break;
 8007dac:	bf00      	nop
 8007dae:	e00b      	b.n	8007dc8 <tcp_receive+0xf98>
                  break;
 8007db0:	bf00      	nop
 8007db2:	e009      	b.n	8007dc8 <tcp_receive+0xf98>
                  break;
 8007db4:	bf00      	nop
 8007db6:	e007      	b.n	8007dc8 <tcp_receive+0xf98>
                  break;
 8007db8:	bf00      	nop
 8007dba:	e005      	b.n	8007dc8 <tcp_receive+0xf98>
                break;
 8007dbc:	bf00      	nop
      if (pcb->rcv_nxt == seqno) {
 8007dbe:	e003      	b.n	8007dc8 <tcp_receive+0xf98>
#endif /* TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS */
#endif /* TCP_QUEUE_OOSEQ */
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 8007dc0:	6878      	ldr	r0, [r7, #4]
 8007dc2:	f000 fb1b 	bl	80083fc <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8007dc6:	e01a      	b.n	8007dfe <tcp_receive+0xfce>
 8007dc8:	e019      	b.n	8007dfe <tcp_receive+0xfce>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 8007dca:	4b0f      	ldr	r3, [pc, #60]	; (8007e08 <tcp_receive+0xfd8>)
 8007dcc:	681a      	ldr	r2, [r3, #0]
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dd2:	1ad3      	subs	r3, r2, r3
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	db0a      	blt.n	8007dee <tcp_receive+0xfbe>
 8007dd8:	4b0b      	ldr	r3, [pc, #44]	; (8007e08 <tcp_receive+0xfd8>)
 8007dda:	681a      	ldr	r2, [r3, #0]
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007de0:	6879      	ldr	r1, [r7, #4]
 8007de2:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8007de4:	440b      	add	r3, r1
 8007de6:	1ad3      	subs	r3, r2, r3
 8007de8:	3301      	adds	r3, #1
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	dd07      	ble.n	8007dfe <tcp_receive+0xfce>
      tcp_ack_now(pcb);
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	7e9b      	ldrb	r3, [r3, #26]
 8007df2:	f043 0302 	orr.w	r3, r3, #2
 8007df6:	b2da      	uxtb	r2, r3
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	769a      	strb	r2, [r3, #26]
    }
  }
}
 8007dfc:	e7ff      	b.n	8007dfe <tcp_receive+0xfce>
 8007dfe:	bf00      	nop
 8007e00:	3734      	adds	r7, #52	; 0x34
 8007e02:	46bd      	mov	sp, r7
 8007e04:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007e06:	bf00      	nop
 8007e08:	200000f0 	.word	0x200000f0
 8007e0c:	200000d0 	.word	0x200000d0
 8007e10:	200000fa 	.word	0x200000fa
 8007e14:	0800f7f8 	.word	0x0800f7f8
 8007e18:	0800fac4 	.word	0x0800fac4
 8007e1c:	0800f83c 	.word	0x0800f83c

08007e20 <tcp_getoptbyte>:

static u8_t
tcp_getoptbyte(void)
{
 8007e20:	b480      	push	{r7}
 8007e22:	b083      	sub	sp, #12
 8007e24:	af00      	add	r7, sp, #0
  if ((tcphdr_opt2 == NULL) || (tcp_optidx < tcphdr_opt1len)) {
 8007e26:	4b17      	ldr	r3, [pc, #92]	; (8007e84 <tcp_getoptbyte+0x64>)
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d005      	beq.n	8007e3a <tcp_getoptbyte+0x1a>
 8007e2e:	4b16      	ldr	r3, [pc, #88]	; (8007e88 <tcp_getoptbyte+0x68>)
 8007e30:	881a      	ldrh	r2, [r3, #0]
 8007e32:	4b16      	ldr	r3, [pc, #88]	; (8007e8c <tcp_getoptbyte+0x6c>)
 8007e34:	881b      	ldrh	r3, [r3, #0]
 8007e36:	429a      	cmp	r2, r3
 8007e38:	d20e      	bcs.n	8007e58 <tcp_getoptbyte+0x38>
    u8_t* opts = (u8_t *)tcphdr + TCP_HLEN;
 8007e3a:	4b15      	ldr	r3, [pc, #84]	; (8007e90 <tcp_getoptbyte+0x70>)
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	3314      	adds	r3, #20
 8007e40:	603b      	str	r3, [r7, #0]
    return opts[tcp_optidx++];
 8007e42:	4b11      	ldr	r3, [pc, #68]	; (8007e88 <tcp_getoptbyte+0x68>)
 8007e44:	881b      	ldrh	r3, [r3, #0]
 8007e46:	1c5a      	adds	r2, r3, #1
 8007e48:	b291      	uxth	r1, r2
 8007e4a:	4a0f      	ldr	r2, [pc, #60]	; (8007e88 <tcp_getoptbyte+0x68>)
 8007e4c:	8011      	strh	r1, [r2, #0]
 8007e4e:	461a      	mov	r2, r3
 8007e50:	683b      	ldr	r3, [r7, #0]
 8007e52:	4413      	add	r3, r2
 8007e54:	781b      	ldrb	r3, [r3, #0]
 8007e56:	e010      	b.n	8007e7a <tcp_getoptbyte+0x5a>
  } else {
    u8_t idx = (u8_t)(tcp_optidx++ - tcphdr_opt1len);
 8007e58:	4b0b      	ldr	r3, [pc, #44]	; (8007e88 <tcp_getoptbyte+0x68>)
 8007e5a:	881b      	ldrh	r3, [r3, #0]
 8007e5c:	1c5a      	adds	r2, r3, #1
 8007e5e:	b291      	uxth	r1, r2
 8007e60:	4a09      	ldr	r2, [pc, #36]	; (8007e88 <tcp_getoptbyte+0x68>)
 8007e62:	8011      	strh	r1, [r2, #0]
 8007e64:	b2da      	uxtb	r2, r3
 8007e66:	4b09      	ldr	r3, [pc, #36]	; (8007e8c <tcp_getoptbyte+0x6c>)
 8007e68:	881b      	ldrh	r3, [r3, #0]
 8007e6a:	b2db      	uxtb	r3, r3
 8007e6c:	1ad3      	subs	r3, r2, r3
 8007e6e:	71fb      	strb	r3, [r7, #7]
    return tcphdr_opt2[idx];
 8007e70:	4b04      	ldr	r3, [pc, #16]	; (8007e84 <tcp_getoptbyte+0x64>)
 8007e72:	681a      	ldr	r2, [r3, #0]
 8007e74:	79fb      	ldrb	r3, [r7, #7]
 8007e76:	4413      	add	r3, r2
 8007e78:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007e7a:	4618      	mov	r0, r3
 8007e7c:	370c      	adds	r7, #12
 8007e7e:	46bd      	mov	sp, r7
 8007e80:	bc80      	pop	{r7}
 8007e82:	4770      	bx	lr
 8007e84:	200000e8 	.word	0x200000e8
 8007e88:	200000ec 	.word	0x200000ec
 8007e8c:	200000e6 	.word	0x200000e6
 8007e90:	200000e0 	.word	0x200000e0

08007e94 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8007e94:	b580      	push	{r7, lr}
 8007e96:	b084      	sub	sp, #16
 8007e98:	af00      	add	r7, sp, #0
 8007e9a:	6078      	str	r0, [r7, #4]
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8007e9c:	4b2e      	ldr	r3, [pc, #184]	; (8007f58 <tcp_parseopt+0xc4>)
 8007e9e:	881b      	ldrh	r3, [r3, #0]
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d055      	beq.n	8007f50 <tcp_parseopt+0xbc>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8007ea4:	4b2d      	ldr	r3, [pc, #180]	; (8007f5c <tcp_parseopt+0xc8>)
 8007ea6:	2200      	movs	r2, #0
 8007ea8:	801a      	strh	r2, [r3, #0]
 8007eaa:	e045      	b.n	8007f38 <tcp_parseopt+0xa4>
      u8_t opt = tcp_getoptbyte();
 8007eac:	f7ff ffb8 	bl	8007e20 <tcp_getoptbyte>
 8007eb0:	4603      	mov	r3, r0
 8007eb2:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8007eb4:	7bfb      	ldrb	r3, [r7, #15]
 8007eb6:	2b02      	cmp	r3, #2
 8007eb8:	d006      	beq.n	8007ec8 <tcp_parseopt+0x34>
 8007eba:	2b02      	cmp	r3, #2
 8007ebc:	dc2b      	bgt.n	8007f16 <tcp_parseopt+0x82>
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d041      	beq.n	8007f46 <tcp_parseopt+0xb2>
 8007ec2:	2b01      	cmp	r3, #1
 8007ec4:	d127      	bne.n	8007f16 <tcp_parseopt+0x82>
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
        return;
      case LWIP_TCP_OPT_NOP:
        /* NOP option. */
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
        break;
 8007ec6:	e037      	b.n	8007f38 <tcp_parseopt+0xa4>
      case LWIP_TCP_OPT_MSS:
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
        if (tcp_getoptbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8007ec8:	f7ff ffaa 	bl	8007e20 <tcp_getoptbyte>
 8007ecc:	4603      	mov	r3, r0
 8007ece:	2b04      	cmp	r3, #4
 8007ed0:	d13b      	bne.n	8007f4a <tcp_parseopt+0xb6>
 8007ed2:	4b22      	ldr	r3, [pc, #136]	; (8007f5c <tcp_parseopt+0xc8>)
 8007ed4:	881b      	ldrh	r3, [r3, #0]
 8007ed6:	3301      	adds	r3, #1
 8007ed8:	4a1f      	ldr	r2, [pc, #124]	; (8007f58 <tcp_parseopt+0xc4>)
 8007eda:	8812      	ldrh	r2, [r2, #0]
 8007edc:	4293      	cmp	r3, r2
 8007ede:	da34      	bge.n	8007f4a <tcp_parseopt+0xb6>
          /* Bad length */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
          return;
        }
        /* An MSS option with the right option length. */
        mss = (tcp_getoptbyte() << 8);
 8007ee0:	f7ff ff9e 	bl	8007e20 <tcp_getoptbyte>
 8007ee4:	4603      	mov	r3, r0
 8007ee6:	b29b      	uxth	r3, r3
 8007ee8:	021b      	lsls	r3, r3, #8
 8007eea:	81bb      	strh	r3, [r7, #12]
        mss |= tcp_getoptbyte();
 8007eec:	f7ff ff98 	bl	8007e20 <tcp_getoptbyte>
 8007ef0:	4603      	mov	r3, r0
 8007ef2:	b29a      	uxth	r2, r3
 8007ef4:	89bb      	ldrh	r3, [r7, #12]
 8007ef6:	4313      	orrs	r3, r2
 8007ef8:	81bb      	strh	r3, [r7, #12]
        /* Limit the mss to the configured TCP_MSS and prevent division by zero */
        pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8007efa:	89bb      	ldrh	r3, [r7, #12]
 8007efc:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8007f00:	d804      	bhi.n	8007f0c <tcp_parseopt+0x78>
 8007f02:	89bb      	ldrh	r3, [r7, #12]
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d001      	beq.n	8007f0c <tcp_parseopt+0x78>
 8007f08:	89ba      	ldrh	r2, [r7, #12]
 8007f0a:	e001      	b.n	8007f10 <tcp_parseopt+0x7c>
 8007f0c:	f44f 7206 	mov.w	r2, #536	; 0x218
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	865a      	strh	r2, [r3, #50]	; 0x32
        break;
 8007f14:	e010      	b.n	8007f38 <tcp_parseopt+0xa4>
        tcp_optidx += LWIP_TCP_OPT_LEN_TS - 6;
        break;
#endif
      default:
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
        data = tcp_getoptbyte();
 8007f16:	f7ff ff83 	bl	8007e20 <tcp_getoptbyte>
 8007f1a:	4603      	mov	r3, r0
 8007f1c:	72fb      	strb	r3, [r7, #11]
        if (data < 2) {
 8007f1e:	7afb      	ldrb	r3, [r7, #11]
 8007f20:	2b01      	cmp	r3, #1
 8007f22:	d914      	bls.n	8007f4e <tcp_parseopt+0xba>
             and we don't process them further. */
          return;
        }
        /* All other options have a length field, so that we easily
           can skip past them. */
        tcp_optidx += data - 2;
 8007f24:	7afb      	ldrb	r3, [r7, #11]
 8007f26:	b29a      	uxth	r2, r3
 8007f28:	4b0c      	ldr	r3, [pc, #48]	; (8007f5c <tcp_parseopt+0xc8>)
 8007f2a:	881b      	ldrh	r3, [r3, #0]
 8007f2c:	4413      	add	r3, r2
 8007f2e:	b29b      	uxth	r3, r3
 8007f30:	3b02      	subs	r3, #2
 8007f32:	b29a      	uxth	r2, r3
 8007f34:	4b09      	ldr	r3, [pc, #36]	; (8007f5c <tcp_parseopt+0xc8>)
 8007f36:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8007f38:	4b08      	ldr	r3, [pc, #32]	; (8007f5c <tcp_parseopt+0xc8>)
 8007f3a:	881a      	ldrh	r2, [r3, #0]
 8007f3c:	4b06      	ldr	r3, [pc, #24]	; (8007f58 <tcp_parseopt+0xc4>)
 8007f3e:	881b      	ldrh	r3, [r3, #0]
 8007f40:	429a      	cmp	r2, r3
 8007f42:	d3b3      	bcc.n	8007eac <tcp_parseopt+0x18>
 8007f44:	e004      	b.n	8007f50 <tcp_parseopt+0xbc>
        return;
 8007f46:	bf00      	nop
 8007f48:	e002      	b.n	8007f50 <tcp_parseopt+0xbc>
          return;
 8007f4a:	bf00      	nop
 8007f4c:	e000      	b.n	8007f50 <tcp_parseopt+0xbc>
          return;
 8007f4e:	bf00      	nop
      }
    }
  }
}
 8007f50:	3710      	adds	r7, #16
 8007f52:	46bd      	mov	sp, r7
 8007f54:	bd80      	pop	{r7, pc}
 8007f56:	bf00      	nop
 8007f58:	200000e4 	.word	0x200000e4
 8007f5c:	200000ec 	.word	0x200000ec

08007f60 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8007f60:	b480      	push	{r7}
 8007f62:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 8007f64:	4b05      	ldr	r3, [pc, #20]	; (8007f7c <tcp_trigger_input_pcb_close+0x1c>)
 8007f66:	781b      	ldrb	r3, [r3, #0]
 8007f68:	f043 0310 	orr.w	r3, r3, #16
 8007f6c:	b2da      	uxtb	r2, r3
 8007f6e:	4b03      	ldr	r3, [pc, #12]	; (8007f7c <tcp_trigger_input_pcb_close+0x1c>)
 8007f70:	701a      	strb	r2, [r3, #0]
}
 8007f72:	bf00      	nop
 8007f74:	46bd      	mov	sp, r7
 8007f76:	bc80      	pop	{r7}
 8007f78:	4770      	bx	lr
 8007f7a:	bf00      	nop
 8007f7c:	200000fd 	.word	0x200000fd

08007f80 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                      u32_t seqno_be /* already in network byte order */)
{
 8007f80:	b580      	push	{r7, lr}
 8007f82:	b086      	sub	sp, #24
 8007f84:	af00      	add	r7, sp, #0
 8007f86:	60f8      	str	r0, [r7, #12]
 8007f88:	607b      	str	r3, [r7, #4]
 8007f8a:	460b      	mov	r3, r1
 8007f8c:	817b      	strh	r3, [r7, #10]
 8007f8e:	4613      	mov	r3, r2
 8007f90:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8007f92:	897a      	ldrh	r2, [r7, #10]
 8007f94:	893b      	ldrh	r3, [r7, #8]
 8007f96:	4413      	add	r3, r2
 8007f98:	b29b      	uxth	r3, r3
 8007f9a:	3314      	adds	r3, #20
 8007f9c:	b29b      	uxth	r3, r3
 8007f9e:	2200      	movs	r2, #0
 8007fa0:	4619      	mov	r1, r3
 8007fa2:	2001      	movs	r0, #1
 8007fa4:	f7fb fe16 	bl	8003bd4 <pbuf_alloc>
 8007fa8:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8007faa:	697b      	ldr	r3, [r7, #20]
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d056      	beq.n	800805e <tcp_output_alloc_header+0xde>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8007fb0:	897b      	ldrh	r3, [r7, #10]
 8007fb2:	3313      	adds	r3, #19
 8007fb4:	697a      	ldr	r2, [r7, #20]
 8007fb6:	8952      	ldrh	r2, [r2, #10]
 8007fb8:	4293      	cmp	r3, r2
 8007fba:	db05      	blt.n	8007fc8 <tcp_output_alloc_header+0x48>
 8007fbc:	4b2a      	ldr	r3, [pc, #168]	; (8008068 <tcp_output_alloc_header+0xe8>)
 8007fbe:	2272      	movs	r2, #114	; 0x72
 8007fc0:	492a      	ldr	r1, [pc, #168]	; (800806c <tcp_output_alloc_header+0xec>)
 8007fc2:	482b      	ldr	r0, [pc, #172]	; (8008070 <tcp_output_alloc_header+0xf0>)
 8007fc4:	f005 fd4c 	bl	800da60 <iprintf>
                 (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 8007fc8:	697b      	ldr	r3, [r7, #20]
 8007fca:	685b      	ldr	r3, [r3, #4]
 8007fcc:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(pcb->local_port);
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	8adb      	ldrh	r3, [r3, #22]
 8007fd2:	4618      	mov	r0, r3
 8007fd4:	f7fb f83d 	bl	8003052 <lwip_htons>
 8007fd8:	4603      	mov	r3, r0
 8007fda:	461a      	mov	r2, r3
 8007fdc:	693b      	ldr	r3, [r7, #16]
 8007fde:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(pcb->remote_port);
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	8b1b      	ldrh	r3, [r3, #24]
 8007fe4:	4618      	mov	r0, r3
 8007fe6:	f7fb f834 	bl	8003052 <lwip_htons>
 8007fea:	4603      	mov	r3, r0
 8007fec:	461a      	mov	r2, r3
 8007fee:	693b      	ldr	r3, [r7, #16]
 8007ff0:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 8007ff2:	693b      	ldr	r3, [r7, #16]
 8007ff4:	687a      	ldr	r2, [r7, #4]
 8007ff6:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ffc:	4618      	mov	r0, r3
 8007ffe:	f7fb f835 	bl	800306c <lwip_htonl>
 8008002:	4602      	mov	r2, r0
 8008004:	693b      	ldr	r3, [r7, #16]
 8008006:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), TCP_ACK);
 8008008:	897b      	ldrh	r3, [r7, #10]
 800800a:	089b      	lsrs	r3, r3, #2
 800800c:	b29b      	uxth	r3, r3
 800800e:	3305      	adds	r3, #5
 8008010:	b29b      	uxth	r3, r3
 8008012:	031b      	lsls	r3, r3, #12
 8008014:	b29b      	uxth	r3, r3
 8008016:	f043 0310 	orr.w	r3, r3, #16
 800801a:	b29b      	uxth	r3, r3
 800801c:	4618      	mov	r0, r3
 800801e:	f7fb f818 	bl	8003052 <lwip_htons>
 8008022:	4603      	mov	r3, r0
 8008024:	461a      	mov	r2, r3
 8008026:	693b      	ldr	r3, [r7, #16]
 8008028:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800802e:	4618      	mov	r0, r3
 8008030:	f7fb f80f 	bl	8003052 <lwip_htons>
 8008034:	4603      	mov	r3, r0
 8008036:	461a      	mov	r2, r3
 8008038:	693b      	ldr	r3, [r7, #16]
 800803a:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 800803c:	693b      	ldr	r3, [r7, #16]
 800803e:	2200      	movs	r2, #0
 8008040:	741a      	strb	r2, [r3, #16]
 8008042:	2200      	movs	r2, #0
 8008044:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8008046:	693b      	ldr	r3, [r7, #16]
 8008048:	2200      	movs	r2, #0
 800804a:	749a      	strb	r2, [r3, #18]
 800804c:	2200      	movs	r2, #0
 800804e:	74da      	strb	r2, [r3, #19]

    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008054:	68fa      	ldr	r2, [r7, #12]
 8008056:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8008058:	441a      	add	r2, r3
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 800805e:	697b      	ldr	r3, [r7, #20]
}
 8008060:	4618      	mov	r0, r3
 8008062:	3718      	adds	r7, #24
 8008064:	46bd      	mov	sp, r7
 8008066:	bd80      	pop	{r7, pc}
 8008068:	0800fb80 	.word	0x0800fb80
 800806c:	0800fbb4 	.word	0x0800fbb4
 8008070:	0800fbe4 	.word	0x0800fbe4

08008074 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8008074:	b590      	push	{r4, r7, lr}
 8008076:	b085      	sub	sp, #20
 8008078:	af00      	add	r7, sp, #0
 800807a:	6078      	str	r0, [r7, #4]
  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008080:	2b00      	cmp	r3, #0
 8008082:	d02d      	beq.n	80080e0 <tcp_send_fin+0x6c>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008088:	60fb      	str	r3, [r7, #12]
 800808a:	e002      	b.n	8008092 <tcp_send_fin+0x1e>
         last_unsent = last_unsent->next);
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	2b00      	cmp	r3, #0
 8008098:	d1f8      	bne.n	800808c <tcp_send_fin+0x18>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	68db      	ldr	r3, [r3, #12]
 800809e:	899b      	ldrh	r3, [r3, #12]
 80080a0:	b29b      	uxth	r3, r3
 80080a2:	4618      	mov	r0, r3
 80080a4:	f7fa ffd5 	bl	8003052 <lwip_htons>
 80080a8:	4603      	mov	r3, r0
 80080aa:	f003 0307 	and.w	r3, r3, #7
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d116      	bne.n	80080e0 <tcp_send_fin+0x6c>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	68db      	ldr	r3, [r3, #12]
 80080b6:	899b      	ldrh	r3, [r3, #12]
 80080b8:	b29c      	uxth	r4, r3
 80080ba:	2001      	movs	r0, #1
 80080bc:	f7fa ffc9 	bl	8003052 <lwip_htons>
 80080c0:	4603      	mov	r3, r0
 80080c2:	461a      	mov	r2, r3
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	68db      	ldr	r3, [r3, #12]
 80080c8:	4322      	orrs	r2, r4
 80080ca:	b292      	uxth	r2, r2
 80080cc:	819a      	strh	r2, [r3, #12]
      pcb->flags |= TF_FIN;
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	7e9b      	ldrb	r3, [r3, #26]
 80080d2:	f043 0320 	orr.w	r3, r3, #32
 80080d6:	b2da      	uxtb	r2, r3
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	769a      	strb	r2, [r3, #26]
      return ERR_OK;
 80080dc:	2300      	movs	r3, #0
 80080de:	e004      	b.n	80080ea <tcp_send_fin+0x76>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 80080e0:	2101      	movs	r1, #1
 80080e2:	6878      	ldr	r0, [r7, #4]
 80080e4:	f000 f88e 	bl	8008204 <tcp_enqueue_flags>
 80080e8:	4603      	mov	r3, r0
}
 80080ea:	4618      	mov	r0, r3
 80080ec:	3714      	adds	r7, #20
 80080ee:	46bd      	mov	sp, r7
 80080f0:	bd90      	pop	{r4, r7, pc}
	...

080080f4 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(struct tcp_pcb *pcb, struct pbuf *p, u8_t flags, u32_t seqno, u8_t optflags)
{
 80080f4:	b590      	push	{r4, r7, lr}
 80080f6:	b087      	sub	sp, #28
 80080f8:	af00      	add	r7, sp, #0
 80080fa:	60f8      	str	r0, [r7, #12]
 80080fc:	60b9      	str	r1, [r7, #8]
 80080fe:	603b      	str	r3, [r7, #0]
 8008100:	4613      	mov	r3, r2
 8008102:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8008104:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8008108:	009b      	lsls	r3, r3, #2
 800810a:	b2db      	uxtb	r3, r3
 800810c:	f003 0304 	and.w	r3, r3, #4
 8008110:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8008112:	2003      	movs	r0, #3
 8008114:	f7fb fb46 	bl	80037a4 <memp_malloc>
 8008118:	6138      	str	r0, [r7, #16]
 800811a:	693b      	ldr	r3, [r7, #16]
 800811c:	2b00      	cmp	r3, #0
 800811e:	d104      	bne.n	800812a <tcp_create_segment+0x36>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8008120:	68b8      	ldr	r0, [r7, #8]
 8008122:	f7fc f8c9 	bl	80042b8 <pbuf_free>
    return NULL;
 8008126:	2300      	movs	r3, #0
 8008128:	e061      	b.n	80081ee <tcp_create_segment+0xfa>
  }
  seg->flags = optflags;
 800812a:	693b      	ldr	r3, [r7, #16]
 800812c:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8008130:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 8008132:	693b      	ldr	r3, [r7, #16]
 8008134:	2200      	movs	r2, #0
 8008136:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8008138:	693b      	ldr	r3, [r7, #16]
 800813a:	68ba      	ldr	r2, [r7, #8]
 800813c:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800813e:	68bb      	ldr	r3, [r7, #8]
 8008140:	891a      	ldrh	r2, [r3, #8]
 8008142:	7dfb      	ldrb	r3, [r7, #23]
 8008144:	b29b      	uxth	r3, r3
 8008146:	429a      	cmp	r2, r3
 8008148:	d205      	bcs.n	8008156 <tcp_create_segment+0x62>
 800814a:	4b2b      	ldr	r3, [pc, #172]	; (80081f8 <tcp_create_segment+0x104>)
 800814c:	22ba      	movs	r2, #186	; 0xba
 800814e:	492b      	ldr	r1, [pc, #172]	; (80081fc <tcp_create_segment+0x108>)
 8008150:	482b      	ldr	r0, [pc, #172]	; (8008200 <tcp_create_segment+0x10c>)
 8008152:	f005 fc85 	bl	800da60 <iprintf>
  seg->len = p->tot_len - optlen;
 8008156:	68bb      	ldr	r3, [r7, #8]
 8008158:	891a      	ldrh	r2, [r3, #8]
 800815a:	7dfb      	ldrb	r3, [r7, #23]
 800815c:	b29b      	uxth	r3, r3
 800815e:	1ad3      	subs	r3, r2, r3
 8008160:	b29a      	uxth	r2, r3
 8008162:	693b      	ldr	r3, [r7, #16]
 8008164:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_header(p, TCP_HLEN)) {
 8008166:	2114      	movs	r1, #20
 8008168:	68b8      	ldr	r0, [r7, #8]
 800816a:	f7fc f881 	bl	8004270 <pbuf_header>
 800816e:	4603      	mov	r3, r0
 8008170:	2b00      	cmp	r3, #0
 8008172:	d004      	beq.n	800817e <tcp_create_segment+0x8a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8008174:	6938      	ldr	r0, [r7, #16]
 8008176:	f7fd f9fd 	bl	8005574 <tcp_seg_free>
    return NULL;
 800817a:	2300      	movs	r3, #0
 800817c:	e037      	b.n	80081ee <tcp_create_segment+0xfa>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800817e:	693b      	ldr	r3, [r7, #16]
 8008180:	685b      	ldr	r3, [r3, #4]
 8008182:	685a      	ldr	r2, [r3, #4]
 8008184:	693b      	ldr	r3, [r7, #16]
 8008186:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	8ada      	ldrh	r2, [r3, #22]
 800818c:	693b      	ldr	r3, [r7, #16]
 800818e:	68dc      	ldr	r4, [r3, #12]
 8008190:	4610      	mov	r0, r2
 8008192:	f7fa ff5e 	bl	8003052 <lwip_htons>
 8008196:	4603      	mov	r3, r0
 8008198:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	8b1a      	ldrh	r2, [r3, #24]
 800819e:	693b      	ldr	r3, [r7, #16]
 80081a0:	68dc      	ldr	r4, [r3, #12]
 80081a2:	4610      	mov	r0, r2
 80081a4:	f7fa ff55 	bl	8003052 <lwip_htons>
 80081a8:	4603      	mov	r3, r0
 80081aa:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 80081ac:	693b      	ldr	r3, [r7, #16]
 80081ae:	68dc      	ldr	r4, [r3, #12]
 80081b0:	6838      	ldr	r0, [r7, #0]
 80081b2:	f7fa ff5b 	bl	800306c <lwip_htonl>
 80081b6:	4603      	mov	r3, r0
 80081b8:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), flags);
 80081ba:	7dfb      	ldrb	r3, [r7, #23]
 80081bc:	089b      	lsrs	r3, r3, #2
 80081be:	b2db      	uxtb	r3, r3
 80081c0:	b29b      	uxth	r3, r3
 80081c2:	3305      	adds	r3, #5
 80081c4:	b29b      	uxth	r3, r3
 80081c6:	031b      	lsls	r3, r3, #12
 80081c8:	b29a      	uxth	r2, r3
 80081ca:	79fb      	ldrb	r3, [r7, #7]
 80081cc:	b29b      	uxth	r3, r3
 80081ce:	4313      	orrs	r3, r2
 80081d0:	b29a      	uxth	r2, r3
 80081d2:	693b      	ldr	r3, [r7, #16]
 80081d4:	68dc      	ldr	r4, [r3, #12]
 80081d6:	4610      	mov	r0, r2
 80081d8:	f7fa ff3b 	bl	8003052 <lwip_htons>
 80081dc:	4603      	mov	r3, r0
 80081de:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 80081e0:	693b      	ldr	r3, [r7, #16]
 80081e2:	68db      	ldr	r3, [r3, #12]
 80081e4:	2200      	movs	r2, #0
 80081e6:	749a      	strb	r2, [r3, #18]
 80081e8:	2200      	movs	r2, #0
 80081ea:	74da      	strb	r2, [r3, #19]
  return seg;
 80081ec:	693b      	ldr	r3, [r7, #16]
}
 80081ee:	4618      	mov	r0, r3
 80081f0:	371c      	adds	r7, #28
 80081f2:	46bd      	mov	sp, r7
 80081f4:	bd90      	pop	{r4, r7, pc}
 80081f6:	bf00      	nop
 80081f8:	0800fb80 	.word	0x0800fb80
 80081fc:	0800fc0c 	.word	0x0800fc0c
 8008200:	0800fbe4 	.word	0x0800fbe4

08008204 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8008204:	b580      	push	{r7, lr}
 8008206:	b08a      	sub	sp, #40	; 0x28
 8008208:	af02      	add	r7, sp, #8
 800820a:	6078      	str	r0, [r7, #4]
 800820c:	460b      	mov	r3, r1
 800820e:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8008210:	2300      	movs	r3, #0
 8008212:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8008214:	2300      	movs	r3, #0
 8008216:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8008218:	78fb      	ldrb	r3, [r7, #3]
 800821a:	f003 0303 	and.w	r3, r3, #3
 800821e:	2b00      	cmp	r3, #0
 8008220:	d106      	bne.n	8008230 <tcp_enqueue_flags+0x2c>
 8008222:	4b6f      	ldr	r3, [pc, #444]	; (80083e0 <tcp_enqueue_flags+0x1dc>)
 8008224:	f240 321a 	movw	r2, #794	; 0x31a
 8008228:	496e      	ldr	r1, [pc, #440]	; (80083e4 <tcp_enqueue_flags+0x1e0>)
 800822a:	486f      	ldr	r0, [pc, #444]	; (80083e8 <tcp_enqueue_flags+0x1e4>)
 800822c:	f005 fc18 	bl	800da60 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);

  /* check for configured max queuelen and possible overflow (FIN flag should always come through!) */
  if (((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) &&
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008236:	2b08      	cmp	r3, #8
 8008238:	d806      	bhi.n	8008248 <tcp_enqueue_flags+0x44>
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008240:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 8008244:	4293      	cmp	r3, r2
 8008246:	d90e      	bls.n	8008266 <tcp_enqueue_flags+0x62>
      ((flags & TCP_FIN) == 0)) {
 8008248:	78fb      	ldrb	r3, [r7, #3]
 800824a:	f003 0301 	and.w	r3, r3, #1
  if (((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) &&
 800824e:	2b00      	cmp	r3, #0
 8008250:	d109      	bne.n	8008266 <tcp_enqueue_flags+0x62>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_enqueue_flags: too long queue %"U16_F" (max %"U16_F")\n",
                                       pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    pcb->flags |= TF_NAGLEMEMERR;
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	7e9b      	ldrb	r3, [r3, #26]
 8008256:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800825a:	b2da      	uxtb	r2, r3
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	769a      	strb	r2, [r3, #26]
    return ERR_MEM;
 8008260:	f04f 33ff 	mov.w	r3, #4294967295
 8008264:	e0b7      	b.n	80083d6 <tcp_enqueue_flags+0x1d2>
  }

  if (flags & TCP_SYN) {
 8008266:	78fb      	ldrb	r3, [r7, #3]
 8008268:	f003 0302 	and.w	r3, r3, #2
 800826c:	2b00      	cmp	r3, #0
 800826e:	d001      	beq.n	8008274 <tcp_enqueue_flags+0x70>
    optflags = TF_SEG_OPTS_MSS;
 8008270:	2301      	movs	r3, #1
 8008272:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host. */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8008274:	7ffb      	ldrb	r3, [r7, #31]
 8008276:	009b      	lsls	r3, r3, #2
 8008278:	b2db      	uxtb	r3, r3
 800827a:	f003 0304 	and.w	r3, r3, #4
 800827e:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8008280:	7dfb      	ldrb	r3, [r7, #23]
 8008282:	b29b      	uxth	r3, r3
 8008284:	2200      	movs	r2, #0
 8008286:	4619      	mov	r1, r3
 8008288:	2000      	movs	r0, #0
 800828a:	f7fb fca3 	bl	8003bd4 <pbuf_alloc>
 800828e:	6138      	str	r0, [r7, #16]
 8008290:	693b      	ldr	r3, [r7, #16]
 8008292:	2b00      	cmp	r3, #0
 8008294:	d109      	bne.n	80082aa <tcp_enqueue_flags+0xa6>
    pcb->flags |= TF_NAGLEMEMERR;
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	7e9b      	ldrb	r3, [r3, #26]
 800829a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800829e:	b2da      	uxtb	r2, r3
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	769a      	strb	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 80082a4:	f04f 33ff 	mov.w	r3, #4294967295
 80082a8:	e095      	b.n	80083d6 <tcp_enqueue_flags+0x1d2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 80082aa:	693b      	ldr	r3, [r7, #16]
 80082ac:	895a      	ldrh	r2, [r3, #10]
 80082ae:	7dfb      	ldrb	r3, [r7, #23]
 80082b0:	b29b      	uxth	r3, r3
 80082b2:	429a      	cmp	r2, r3
 80082b4:	d206      	bcs.n	80082c4 <tcp_enqueue_flags+0xc0>
 80082b6:	4b4a      	ldr	r3, [pc, #296]	; (80083e0 <tcp_enqueue_flags+0x1dc>)
 80082b8:	f44f 7250 	mov.w	r2, #832	; 0x340
 80082bc:	494b      	ldr	r1, [pc, #300]	; (80083ec <tcp_enqueue_flags+0x1e8>)
 80082be:	484a      	ldr	r0, [pc, #296]	; (80083e8 <tcp_enqueue_flags+0x1e4>)
 80082c0:	f005 fbce 	bl	800da60 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	6d99      	ldr	r1, [r3, #88]	; 0x58
 80082c8:	78fa      	ldrb	r2, [r7, #3]
 80082ca:	7ffb      	ldrb	r3, [r7, #31]
 80082cc:	9300      	str	r3, [sp, #0]
 80082ce:	460b      	mov	r3, r1
 80082d0:	6939      	ldr	r1, [r7, #16]
 80082d2:	6878      	ldr	r0, [r7, #4]
 80082d4:	f7ff ff0e 	bl	80080f4 <tcp_create_segment>
 80082d8:	60f8      	str	r0, [r7, #12]
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d109      	bne.n	80082f4 <tcp_enqueue_flags+0xf0>
    pcb->flags |= TF_NAGLEMEMERR;
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	7e9b      	ldrb	r3, [r3, #26]
 80082e4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80082e8:	b2da      	uxtb	r2, r3
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	769a      	strb	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 80082ee:	f04f 33ff 	mov.w	r3, #4294967295
 80082f2:	e070      	b.n	80083d6 <tcp_enqueue_flags+0x1d2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	68db      	ldr	r3, [r3, #12]
 80082f8:	f003 0303 	and.w	r3, r3, #3
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d006      	beq.n	800830e <tcp_enqueue_flags+0x10a>
 8008300:	4b37      	ldr	r3, [pc, #220]	; (80083e0 <tcp_enqueue_flags+0x1dc>)
 8008302:	f240 3249 	movw	r2, #841	; 0x349
 8008306:	493a      	ldr	r1, [pc, #232]	; (80083f0 <tcp_enqueue_flags+0x1ec>)
 8008308:	4837      	ldr	r0, [pc, #220]	; (80083e8 <tcp_enqueue_flags+0x1e4>)
 800830a:	f005 fba9 	bl	800da60 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	891b      	ldrh	r3, [r3, #8]
 8008312:	2b00      	cmp	r3, #0
 8008314:	d006      	beq.n	8008324 <tcp_enqueue_flags+0x120>
 8008316:	4b32      	ldr	r3, [pc, #200]	; (80083e0 <tcp_enqueue_flags+0x1dc>)
 8008318:	f240 324a 	movw	r2, #842	; 0x34a
 800831c:	4935      	ldr	r1, [pc, #212]	; (80083f4 <tcp_enqueue_flags+0x1f0>)
 800831e:	4832      	ldr	r0, [pc, #200]	; (80083e8 <tcp_enqueue_flags+0x1e4>)
 8008320:	f005 fb9e 	bl	800da60 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008328:	2b00      	cmp	r3, #0
 800832a:	d103      	bne.n	8008334 <tcp_enqueue_flags+0x130>
    pcb->unsent = seg;
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	68fa      	ldr	r2, [r7, #12]
 8008330:	669a      	str	r2, [r3, #104]	; 0x68
 8008332:	e00d      	b.n	8008350 <tcp_enqueue_flags+0x14c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008338:	61bb      	str	r3, [r7, #24]
 800833a:	e002      	b.n	8008342 <tcp_enqueue_flags+0x13e>
 800833c:	69bb      	ldr	r3, [r7, #24]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	61bb      	str	r3, [r7, #24]
 8008342:	69bb      	ldr	r3, [r7, #24]
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	2b00      	cmp	r3, #0
 8008348:	d1f8      	bne.n	800833c <tcp_enqueue_flags+0x138>
    useg->next = seg;
 800834a:	69bb      	ldr	r3, [r7, #24]
 800834c:	68fa      	ldr	r2, [r7, #12]
 800834e:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	2200      	movs	r2, #0
 8008354:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8008358:	78fb      	ldrb	r3, [r7, #3]
 800835a:	f003 0302 	and.w	r3, r3, #2
 800835e:	2b00      	cmp	r3, #0
 8008360:	d104      	bne.n	800836c <tcp_enqueue_flags+0x168>
 8008362:	78fb      	ldrb	r3, [r7, #3]
 8008364:	f003 0301 	and.w	r3, r3, #1
 8008368:	2b00      	cmp	r3, #0
 800836a:	d004      	beq.n	8008376 <tcp_enqueue_flags+0x172>
    pcb->snd_lbb++;
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008370:	1c5a      	adds	r2, r3, #1
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	659a      	str	r2, [r3, #88]	; 0x58
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 8008376:	78fb      	ldrb	r3, [r7, #3]
 8008378:	f003 0301 	and.w	r3, r3, #1
 800837c:	2b00      	cmp	r3, #0
 800837e:	d006      	beq.n	800838e <tcp_enqueue_flags+0x18a>
    pcb->flags |= TF_FIN;
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	7e9b      	ldrb	r3, [r3, #26]
 8008384:	f043 0320 	orr.w	r3, r3, #32
 8008388:	b2da      	uxtb	r2, r3
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	769a      	strb	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	685b      	ldr	r3, [r3, #4]
 8008392:	4618      	mov	r0, r3
 8008394:	f7fc f824 	bl	80043e0 <pbuf_clen>
 8008398:	4603      	mov	r3, r0
 800839a:	461a      	mov	r2, r3
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80083a2:	4413      	add	r3, r2
 80083a4:	b29a      	uxth	r2, r3
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d00e      	beq.n	80083d4 <tcp_enqueue_flags+0x1d0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d10a      	bne.n	80083d4 <tcp_enqueue_flags+0x1d0>
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d106      	bne.n	80083d4 <tcp_enqueue_flags+0x1d0>
 80083c6:	4b06      	ldr	r3, [pc, #24]	; (80083e0 <tcp_enqueue_flags+0x1dc>)
 80083c8:	f44f 725b 	mov.w	r2, #876	; 0x36c
 80083cc:	490a      	ldr	r1, [pc, #40]	; (80083f8 <tcp_enqueue_flags+0x1f4>)
 80083ce:	4806      	ldr	r0, [pc, #24]	; (80083e8 <tcp_enqueue_flags+0x1e4>)
 80083d0:	f005 fb46 	bl	800da60 <iprintf>
      pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 80083d4:	2300      	movs	r3, #0
}
 80083d6:	4618      	mov	r0, r3
 80083d8:	3720      	adds	r7, #32
 80083da:	46bd      	mov	sp, r7
 80083dc:	bd80      	pop	{r7, pc}
 80083de:	bf00      	nop
 80083e0:	0800fb80 	.word	0x0800fb80
 80083e4:	0800fe84 	.word	0x0800fe84
 80083e8:	0800fbe4 	.word	0x0800fbe4
 80083ec:	0800fedc 	.word	0x0800fedc
 80083f0:	0800ff18 	.word	0x0800ff18
 80083f4:	0800ff30 	.word	0x0800ff30
 80083f8:	0800ff5c 	.word	0x0800ff5c

080083fc <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 80083fc:	b590      	push	{r4, r7, lr}
 80083fe:	b08b      	sub	sp, #44	; 0x2c
 8008400:	af04      	add	r7, sp, #16
 8008402:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = 0;
 8008404:	2300      	movs	r3, #0
 8008406:	75bb      	strb	r3, [r7, #22]
  if (pcb->flags & TF_TIMESTAMP) {
    optlen = LWIP_TCP_OPT_LENGTH(TF_SEG_OPTS_TS);
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8008408:	7dbb      	ldrb	r3, [r7, #22]
 800840a:	b29c      	uxth	r4, r3
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008410:	4618      	mov	r0, r3
 8008412:	f7fa fe2b 	bl	800306c <lwip_htonl>
 8008416:	4603      	mov	r3, r0
 8008418:	2200      	movs	r2, #0
 800841a:	4621      	mov	r1, r4
 800841c:	6878      	ldr	r0, [r7, #4]
 800841e:	f7ff fdaf 	bl	8007f80 <tcp_output_alloc_header>
 8008422:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8008424:	693b      	ldr	r3, [r7, #16]
 8008426:	2b00      	cmp	r3, #0
 8008428:	d109      	bne.n	800843e <tcp_send_empty_ack+0x42>
    /* let tcp_fasttmr retry sending this ACK */
    pcb->flags |= (TF_ACK_DELAY | TF_ACK_NOW);
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	7e9b      	ldrb	r3, [r3, #26]
 800842e:	f043 0303 	orr.w	r3, r3, #3
 8008432:	b2da      	uxtb	r2, r3
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	769a      	strb	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8008438:	f06f 0301 	mvn.w	r3, #1
 800843c:	e036      	b.n	80084ac <tcp_send_empty_ack+0xb0>
  if (pcb->flags & TF_TIMESTAMP) {
    tcp_build_timestamp_option(pcb, (u32_t *)(tcphdr + 1));
  }
#endif

  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	3304      	adds	r3, #4
 8008442:	4618      	mov	r0, r3
 8008444:	f004 f93c 	bl	800c6c0 <ip4_route>
 8008448:	60f8      	str	r0, [r7, #12]
  if (netif == NULL) {
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	2b00      	cmp	r3, #0
 800844e:	d102      	bne.n	8008456 <tcp_send_empty_ack+0x5a>
    err = ERR_RTE;
 8008450:	23fc      	movs	r3, #252	; 0xfc
 8008452:	75fb      	strb	r3, [r7, #23]
 8008454:	e012      	b.n	800847c <tcp_send_empty_ack+0x80>
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
        &pcb->local_ip, &pcb->remote_ip);
    }
#endif
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip,
 8008456:	6879      	ldr	r1, [r7, #4]
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	1d18      	adds	r0, r3, #4
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	7a9c      	ldrb	r4, [r3, #10]
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	7a5b      	ldrb	r3, [r3, #9]
 8008464:	68fa      	ldr	r2, [r7, #12]
 8008466:	9202      	str	r2, [sp, #8]
 8008468:	2206      	movs	r2, #6
 800846a:	9201      	str	r2, [sp, #4]
 800846c:	9300      	str	r3, [sp, #0]
 800846e:	4623      	mov	r3, r4
 8008470:	4602      	mov	r2, r0
 8008472:	6938      	ldr	r0, [r7, #16]
 8008474:	f004 faec 	bl	800ca50 <ip4_output_if>
 8008478:	4603      	mov	r3, r0
 800847a:	75fb      	strb	r3, [r7, #23]
      pcb->ttl, pcb->tos, IP_PROTO_TCP, netif);
    NETIF_SET_HWADDRHINT(netif, NULL);
  }
  pbuf_free(p);
 800847c:	6938      	ldr	r0, [r7, #16]
 800847e:	f7fb ff1b 	bl	80042b8 <pbuf_free>

  if (err != ERR_OK) {
 8008482:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008486:	2b00      	cmp	r3, #0
 8008488:	d007      	beq.n	800849a <tcp_send_empty_ack+0x9e>
    /* let tcp_fasttmr retry sending this ACK */
    pcb->flags |= (TF_ACK_DELAY | TF_ACK_NOW);
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	7e9b      	ldrb	r3, [r3, #26]
 800848e:	f043 0303 	orr.w	r3, r3, #3
 8008492:	b2da      	uxtb	r2, r3
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	769a      	strb	r2, [r3, #26]
 8008498:	e006      	b.n	80084a8 <tcp_send_empty_ack+0xac>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	7e9b      	ldrb	r3, [r3, #26]
 800849e:	f023 0303 	bic.w	r3, r3, #3
 80084a2:	b2da      	uxtb	r2, r3
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	769a      	strb	r2, [r3, #26]
  }

  return err;
 80084a8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80084ac:	4618      	mov	r0, r3
 80084ae:	371c      	adds	r7, #28
 80084b0:	46bd      	mov	sp, r7
 80084b2:	bd90      	pop	{r4, r7, pc}

080084b4 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 80084b4:	b5b0      	push	{r4, r5, r7, lr}
 80084b6:	b08a      	sub	sp, #40	; 0x28
 80084b8:	af00      	add	r7, sp, #0
 80084ba:	6078      	str	r0, [r7, #4]
#if TCP_CWND_DEBUG
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	7d1b      	ldrb	r3, [r3, #20]
 80084c0:	2b01      	cmp	r3, #1
 80084c2:	d106      	bne.n	80084d2 <tcp_output+0x1e>
 80084c4:	4ba8      	ldr	r3, [pc, #672]	; (8008768 <tcp_output+0x2b4>)
 80084c6:	f44f 727b 	mov.w	r2, #1004	; 0x3ec
 80084ca:	49a8      	ldr	r1, [pc, #672]	; (800876c <tcp_output+0x2b8>)
 80084cc:	48a8      	ldr	r0, [pc, #672]	; (8008770 <tcp_output+0x2bc>)
 80084ce:	f005 fac7 	bl	800da60 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 80084d2:	4ba8      	ldr	r3, [pc, #672]	; (8008774 <tcp_output+0x2c0>)
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	687a      	ldr	r2, [r7, #4]
 80084d8:	429a      	cmp	r2, r3
 80084da:	d101      	bne.n	80084e0 <tcp_output+0x2c>
    return ERR_OK;
 80084dc:	2300      	movs	r3, #0
 80084de:	e1cb      	b.n	8008878 <tcp_output+0x3c4>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80084ec:	4293      	cmp	r3, r2
 80084ee:	bf28      	it	cs
 80084f0:	4613      	movcs	r3, r2
 80084f2:	b29b      	uxth	r3, r3
 80084f4:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80084fa:	627b      	str	r3, [r7, #36]	; 0x24
   * because the ->unsent queue is empty or because the window does
   * not allow it), construct an empty ACK segment and send it.
   *
   * If data is to be sent, we will just piggyback the ACK (see below).
   */
  if (pcb->flags & TF_ACK_NOW &&
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	7e9b      	ldrb	r3, [r3, #26]
 8008500:	f003 0302 	and.w	r3, r3, #2
 8008504:	2b00      	cmp	r3, #0
 8008506:	d017      	beq.n	8008538 <tcp_output+0x84>
 8008508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800850a:	2b00      	cmp	r3, #0
 800850c:	d00f      	beq.n	800852e <tcp_output+0x7a>
     (seg == NULL ||
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd)) {
 800850e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008510:	68db      	ldr	r3, [r3, #12]
 8008512:	685b      	ldr	r3, [r3, #4]
 8008514:	4618      	mov	r0, r3
 8008516:	f7fa fda9 	bl	800306c <lwip_htonl>
 800851a:	4602      	mov	r2, r0
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008520:	1ad3      	subs	r3, r2, r3
 8008522:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008524:	8912      	ldrh	r2, [r2, #8]
 8008526:	4413      	add	r3, r2
     (seg == NULL ||
 8008528:	69ba      	ldr	r2, [r7, #24]
 800852a:	429a      	cmp	r2, r3
 800852c:	d204      	bcs.n	8008538 <tcp_output+0x84>
     return tcp_send_empty_ack(pcb);
 800852e:	6878      	ldr	r0, [r7, #4]
 8008530:	f7ff ff64 	bl	80083fc <tcp_send_empty_ack>
 8008534:	4603      	mov	r3, r0
 8008536:	e19f      	b.n	8008878 <tcp_output+0x3c4>
  }

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800853c:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 800853e:	6a3b      	ldr	r3, [r7, #32]
 8008540:	2b00      	cmp	r3, #0
 8008542:	d007      	beq.n	8008554 <tcp_output+0xa0>
    for (; useg->next != NULL; useg = useg->next);
 8008544:	e002      	b.n	800854c <tcp_output+0x98>
 8008546:	6a3b      	ldr	r3, [r7, #32]
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	623b      	str	r3, [r7, #32]
 800854c:	6a3b      	ldr	r3, [r7, #32]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	2b00      	cmp	r3, #0
 8008552:	d1f8      	bne.n	8008546 <tcp_output+0x92>
  }

  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	3304      	adds	r3, #4
 8008558:	4618      	mov	r0, r3
 800855a:	f004 f8b1 	bl	800c6c0 <ip4_route>
 800855e:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 8008560:	697b      	ldr	r3, [r7, #20]
 8008562:	2b00      	cmp	r3, #0
 8008564:	d102      	bne.n	800856c <tcp_output+0xb8>
    return ERR_RTE;
 8008566:	f06f 0303 	mvn.w	r3, #3
 800856a:	e185      	b.n	8008878 <tcp_output+0x3c4>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	2b00      	cmp	r3, #0
 8008570:	d003      	beq.n	800857a <tcp_output+0xc6>
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	2b00      	cmp	r3, #0
 8008578:	d111      	bne.n	800859e <tcp_output+0xea>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 800857a:	697b      	ldr	r3, [r7, #20]
 800857c:	2b00      	cmp	r3, #0
 800857e:	d002      	beq.n	8008586 <tcp_output+0xd2>
 8008580:	697b      	ldr	r3, [r7, #20]
 8008582:	3304      	adds	r3, #4
 8008584:	e000      	b.n	8008588 <tcp_output+0xd4>
 8008586:	2300      	movs	r3, #0
 8008588:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 800858a:	693b      	ldr	r3, [r7, #16]
 800858c:	2b00      	cmp	r3, #0
 800858e:	d102      	bne.n	8008596 <tcp_output+0xe2>
      return ERR_RTE;
 8008590:	f06f 0303 	mvn.w	r3, #3
 8008594:	e170      	b.n	8008878 <tcp_output+0x3c4>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8008596:	693b      	ldr	r3, [r7, #16]
 8008598:	681a      	ldr	r2, [r3, #0]
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	601a      	str	r2, [r3, #0]
   * with part of the unsent segment (which will engage zero-window probing upon
   * reception of the zero window update from the receiver). This ensures the
   * subsequent window update is reliably received. With the goal of being lightweight,
   * we avoid splitting the unsent segment and treat the window as already zero.
   */
  if (seg != NULL &&
 800859e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	f000 813f 	beq.w	8008824 <tcp_output+0x370>
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd &&
 80085a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085a8:	68db      	ldr	r3, [r3, #12]
 80085aa:	685b      	ldr	r3, [r3, #4]
 80085ac:	4618      	mov	r0, r3
 80085ae:	f7fa fd5d 	bl	800306c <lwip_htonl>
 80085b2:	4602      	mov	r2, r0
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80085b8:	1ad3      	subs	r3, r2, r3
 80085ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80085bc:	8912      	ldrh	r2, [r2, #8]
 80085be:	4413      	add	r3, r2
  if (seg != NULL &&
 80085c0:	69ba      	ldr	r2, [r7, #24]
 80085c2:	429a      	cmp	r2, r3
 80085c4:	f080 812e 	bcs.w	8008824 <tcp_output+0x370>
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd &&
 80085c8:	69bb      	ldr	r3, [r7, #24]
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	f000 812a 	beq.w	8008824 <tcp_output+0x370>
      wnd > 0 && wnd == pcb->snd_wnd && pcb->unacked == NULL) {
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80085d6:	461a      	mov	r2, r3
 80085d8:	69bb      	ldr	r3, [r7, #24]
 80085da:	4293      	cmp	r3, r2
 80085dc:	f040 8122 	bne.w	8008824 <tcp_output+0x370>
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	f040 811d 	bne.w	8008824 <tcp_output+0x370>
    /* Start the persist timer */
    if (pcb->persist_backoff == 0) {
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	f040 812c 	bne.w	800884e <tcp_output+0x39a>
      pcb->persist_cnt = 0;
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	2200      	movs	r2, #0
 80085fa:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
      pcb->persist_backoff = 1;
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	2201      	movs	r2, #1
 8008602:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
    }
    goto output_done;
 8008606:	e122      	b.n	800884e <tcp_output+0x39a>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 8008608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800860a:	68db      	ldr	r3, [r3, #12]
 800860c:	899b      	ldrh	r3, [r3, #12]
 800860e:	b29b      	uxth	r3, r3
 8008610:	4618      	mov	r0, r3
 8008612:	f7fa fd1e 	bl	8003052 <lwip_htons>
 8008616:	4603      	mov	r3, r0
 8008618:	f003 0304 	and.w	r3, r3, #4
 800861c:	2b00      	cmp	r3, #0
 800861e:	d006      	beq.n	800862e <tcp_output+0x17a>
 8008620:	4b51      	ldr	r3, [pc, #324]	; (8008768 <tcp_output+0x2b4>)
 8008622:	f240 4245 	movw	r2, #1093	; 0x445
 8008626:	4954      	ldr	r1, [pc, #336]	; (8008778 <tcp_output+0x2c4>)
 8008628:	4851      	ldr	r0, [pc, #324]	; (8008770 <tcp_output+0x2bc>)
 800862a:	f005 fa19 	bl	800da60 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008632:	2b00      	cmp	r3, #0
 8008634:	d01f      	beq.n	8008676 <tcp_output+0x1c2>
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	7e9b      	ldrb	r3, [r3, #26]
 800863a:	f003 0344 	and.w	r3, r3, #68	; 0x44
 800863e:	2b00      	cmp	r3, #0
 8008640:	d119      	bne.n	8008676 <tcp_output+0x1c2>
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008646:	2b00      	cmp	r3, #0
 8008648:	d00b      	beq.n	8008662 <tcp_output+0x1ae>
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	2b00      	cmp	r3, #0
 8008652:	d110      	bne.n	8008676 <tcp_output+0x1c2>
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008658:	891a      	ldrh	r2, [r3, #8]
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800865e:	429a      	cmp	r2, r3
 8008660:	d209      	bcs.n	8008676 <tcp_output+0x1c2>
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008668:	2b00      	cmp	r3, #0
 800866a:	d004      	beq.n	8008676 <tcp_output+0x1c2>
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008672:	2b08      	cmp	r3, #8
 8008674:	d901      	bls.n	800867a <tcp_output+0x1c6>
 8008676:	2301      	movs	r3, #1
 8008678:	e000      	b.n	800867c <tcp_output+0x1c8>
 800867a:	2300      	movs	r3, #0
 800867c:	2b00      	cmp	r3, #0
 800867e:	d106      	bne.n	800868e <tcp_output+0x1da>
      ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	7e9b      	ldrb	r3, [r3, #26]
 8008684:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8008688:	2b00      	cmp	r3, #0
 800868a:	f000 80e2 	beq.w	8008852 <tcp_output+0x39e>
                            pcb->lastack,
                            lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	7d1b      	ldrb	r3, [r3, #20]
 8008692:	2b02      	cmp	r3, #2
 8008694:	d00d      	beq.n	80086b2 <tcp_output+0x1fe>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8008696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008698:	68db      	ldr	r3, [r3, #12]
 800869a:	899b      	ldrh	r3, [r3, #12]
 800869c:	b29c      	uxth	r4, r3
 800869e:	2010      	movs	r0, #16
 80086a0:	f7fa fcd7 	bl	8003052 <lwip_htons>
 80086a4:	4603      	mov	r3, r0
 80086a6:	461a      	mov	r2, r3
 80086a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086aa:	68db      	ldr	r3, [r3, #12]
 80086ac:	4322      	orrs	r2, r4
 80086ae:	b292      	uxth	r2, r2
 80086b0:	819a      	strh	r2, [r3, #12]
    }

#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    err = tcp_output_segment(seg, pcb, netif);
 80086b2:	697a      	ldr	r2, [r7, #20]
 80086b4:	6879      	ldr	r1, [r7, #4]
 80086b6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80086b8:	f000 f8e2 	bl	8008880 <tcp_output_segment>
 80086bc:	4603      	mov	r3, r0
 80086be:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 80086c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d009      	beq.n	80086dc <tcp_output+0x228>
      /* segment could not be sent, for whatever reason */
      pcb->flags |= TF_NAGLEMEMERR;
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	7e9b      	ldrb	r3, [r3, #26]
 80086cc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80086d0:	b2da      	uxtb	r2, r3
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	769a      	strb	r2, [r3, #26]
      return err;
 80086d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80086da:	e0cd      	b.n	8008878 <tcp_output+0x3c4>
    }
    pcb->unsent = seg->next;
 80086dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086de:	681a      	ldr	r2, [r3, #0]
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	669a      	str	r2, [r3, #104]	; 0x68
    if (pcb->state != SYN_SENT) {
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	7d1b      	ldrb	r3, [r3, #20]
 80086e8:	2b02      	cmp	r3, #2
 80086ea:	d006      	beq.n	80086fa <tcp_output+0x246>
      pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	7e9b      	ldrb	r3, [r3, #26]
 80086f0:	f023 0303 	bic.w	r3, r3, #3
 80086f4:	b2da      	uxtb	r2, r3
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	769a      	strb	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 80086fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086fc:	68db      	ldr	r3, [r3, #12]
 80086fe:	685b      	ldr	r3, [r3, #4]
 8008700:	4618      	mov	r0, r3
 8008702:	f7fa fcb3 	bl	800306c <lwip_htonl>
 8008706:	4604      	mov	r4, r0
 8008708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800870a:	891b      	ldrh	r3, [r3, #8]
 800870c:	461d      	mov	r5, r3
 800870e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008710:	68db      	ldr	r3, [r3, #12]
 8008712:	899b      	ldrh	r3, [r3, #12]
 8008714:	b29b      	uxth	r3, r3
 8008716:	4618      	mov	r0, r3
 8008718:	f7fa fc9b 	bl	8003052 <lwip_htons>
 800871c:	4603      	mov	r3, r0
 800871e:	f003 0303 	and.w	r3, r3, #3
 8008722:	2b00      	cmp	r3, #0
 8008724:	d001      	beq.n	800872a <tcp_output+0x276>
 8008726:	2301      	movs	r3, #1
 8008728:	e000      	b.n	800872c <tcp_output+0x278>
 800872a:	2300      	movs	r3, #0
 800872c:	442b      	add	r3, r5
 800872e:	4423      	add	r3, r4
 8008730:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008736:	68bb      	ldr	r3, [r7, #8]
 8008738:	1ad3      	subs	r3, r2, r3
 800873a:	2b00      	cmp	r3, #0
 800873c:	da02      	bge.n	8008744 <tcp_output+0x290>
      pcb->snd_nxt = snd_nxt;
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	68ba      	ldr	r2, [r7, #8]
 8008742:	64da      	str	r2, [r3, #76]	; 0x4c
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 8008744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008746:	891b      	ldrh	r3, [r3, #8]
 8008748:	461c      	mov	r4, r3
 800874a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800874c:	68db      	ldr	r3, [r3, #12]
 800874e:	899b      	ldrh	r3, [r3, #12]
 8008750:	b29b      	uxth	r3, r3
 8008752:	4618      	mov	r0, r3
 8008754:	f7fa fc7d 	bl	8003052 <lwip_htons>
 8008758:	4603      	mov	r3, r0
 800875a:	f003 0303 	and.w	r3, r3, #3
 800875e:	2b00      	cmp	r3, #0
 8008760:	d00c      	beq.n	800877c <tcp_output+0x2c8>
 8008762:	2301      	movs	r3, #1
 8008764:	e00b      	b.n	800877e <tcp_output+0x2ca>
 8008766:	bf00      	nop
 8008768:	0800fb80 	.word	0x0800fb80
 800876c:	0800ff84 	.word	0x0800ff84
 8008770:	0800fbe4 	.word	0x0800fbe4
 8008774:	200068b4 	.word	0x200068b4
 8008778:	0800ffac 	.word	0x0800ffac
 800877c:	2300      	movs	r3, #0
 800877e:	4423      	add	r3, r4
 8008780:	2b00      	cmp	r3, #0
 8008782:	d049      	beq.n	8008818 <tcp_output+0x364>
      seg->next = NULL;
 8008784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008786:	2200      	movs	r2, #0
 8008788:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800878e:	2b00      	cmp	r3, #0
 8008790:	d105      	bne.n	800879e <tcp_output+0x2ea>
        pcb->unacked = seg;
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008796:	66da      	str	r2, [r3, #108]	; 0x6c
        useg = seg;
 8008798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800879a:	623b      	str	r3, [r7, #32]
 800879c:	e03f      	b.n	800881e <tcp_output+0x36a>
      /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 800879e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087a0:	68db      	ldr	r3, [r3, #12]
 80087a2:	685b      	ldr	r3, [r3, #4]
 80087a4:	4618      	mov	r0, r3
 80087a6:	f7fa fc61 	bl	800306c <lwip_htonl>
 80087aa:	4604      	mov	r4, r0
 80087ac:	6a3b      	ldr	r3, [r7, #32]
 80087ae:	68db      	ldr	r3, [r3, #12]
 80087b0:	685b      	ldr	r3, [r3, #4]
 80087b2:	4618      	mov	r0, r3
 80087b4:	f7fa fc5a 	bl	800306c <lwip_htonl>
 80087b8:	4603      	mov	r3, r0
 80087ba:	1ae3      	subs	r3, r4, r3
 80087bc:	2b00      	cmp	r3, #0
 80087be:	da24      	bge.n	800880a <tcp_output+0x356>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	336c      	adds	r3, #108	; 0x6c
 80087c4:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 80087c6:	e002      	b.n	80087ce <tcp_output+0x31a>
            TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
              cur_seg = &((*cur_seg)->next );
 80087c8:	69fb      	ldr	r3, [r7, #28]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 80087ce:	69fb      	ldr	r3, [r7, #28]
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	d011      	beq.n	80087fa <tcp_output+0x346>
            TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 80087d6:	69fb      	ldr	r3, [r7, #28]
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	68db      	ldr	r3, [r3, #12]
 80087dc:	685b      	ldr	r3, [r3, #4]
 80087de:	4618      	mov	r0, r3
 80087e0:	f7fa fc44 	bl	800306c <lwip_htonl>
 80087e4:	4604      	mov	r4, r0
 80087e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087e8:	68db      	ldr	r3, [r3, #12]
 80087ea:	685b      	ldr	r3, [r3, #4]
 80087ec:	4618      	mov	r0, r3
 80087ee:	f7fa fc3d 	bl	800306c <lwip_htonl>
 80087f2:	4603      	mov	r3, r0
 80087f4:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	dbe6      	blt.n	80087c8 <tcp_output+0x314>
          }
          seg->next = (*cur_seg);
 80087fa:	69fb      	ldr	r3, [r7, #28]
 80087fc:	681a      	ldr	r2, [r3, #0]
 80087fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008800:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8008802:	69fb      	ldr	r3, [r7, #28]
 8008804:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008806:	601a      	str	r2, [r3, #0]
 8008808:	e009      	b.n	800881e <tcp_output+0x36a>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 800880a:	6a3b      	ldr	r3, [r7, #32]
 800880c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800880e:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 8008810:	6a3b      	ldr	r3, [r7, #32]
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	623b      	str	r3, [r7, #32]
 8008816:	e002      	b.n	800881e <tcp_output+0x36a>
        }
      }
    /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 8008818:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800881a:	f7fc feab 	bl	8005574 <tcp_seg_free>
    }
    seg = pcb->unsent;
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008822:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 8008824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008826:	2b00      	cmp	r3, #0
 8008828:	d015      	beq.n	8008856 <tcp_output+0x3a2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800882a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800882c:	68db      	ldr	r3, [r3, #12]
 800882e:	685b      	ldr	r3, [r3, #4]
 8008830:	4618      	mov	r0, r3
 8008832:	f7fa fc1b 	bl	800306c <lwip_htonl>
 8008836:	4602      	mov	r2, r0
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800883c:	1ad3      	subs	r3, r2, r3
 800883e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008840:	8912      	ldrh	r2, [r2, #8]
 8008842:	4413      	add	r3, r2
  while (seg != NULL &&
 8008844:	69ba      	ldr	r2, [r7, #24]
 8008846:	429a      	cmp	r2, r3
 8008848:	f4bf aede 	bcs.w	8008608 <tcp_output+0x154>
  }
output_done:
 800884c:	e003      	b.n	8008856 <tcp_output+0x3a2>
    goto output_done;
 800884e:	bf00      	nop
 8008850:	e002      	b.n	8008858 <tcp_output+0x3a4>
      break;
 8008852:	bf00      	nop
 8008854:	e000      	b.n	8008858 <tcp_output+0x3a4>
output_done:
 8008856:	bf00      	nop
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800885c:	2b00      	cmp	r3, #0
 800885e:	d103      	bne.n	8008868 <tcp_output+0x3b4>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	2200      	movs	r2, #0
 8008864:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  }
#endif /* TCP_OVERSIZE */

  pcb->flags &= ~TF_NAGLEMEMERR;
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	7e9b      	ldrb	r3, [r3, #26]
 800886c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008870:	b2da      	uxtb	r2, r3
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	769a      	strb	r2, [r3, #26]
  return ERR_OK;
 8008876:	2300      	movs	r3, #0
}
 8008878:	4618      	mov	r0, r3
 800887a:	3728      	adds	r7, #40	; 0x28
 800887c:	46bd      	mov	sp, r7
 800887e:	bdb0      	pop	{r4, r5, r7, pc}

08008880 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8008880:	b5b0      	push	{r4, r5, r7, lr}
 8008882:	b08c      	sub	sp, #48	; 0x30
 8008884:	af04      	add	r7, sp, #16
 8008886:	60f8      	str	r0, [r7, #12]
 8008888:	60b9      	str	r1, [r7, #8]
 800888a:	607a      	str	r2, [r7, #4]
  err_t err;
  u16_t len;
  u32_t *opts;

  if (seg->p->ref != 1) {
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	685b      	ldr	r3, [r3, #4]
 8008890:	89db      	ldrh	r3, [r3, #14]
 8008892:	2b01      	cmp	r3, #1
 8008894:	d001      	beq.n	800889a <tcp_output_segment+0x1a>
    /* This can happen if the pbuf of this segment is still referenced by the
       netif driver due to deferred transmission. Since this function modifies
       p->len, we must not continue in this case. */
    return ERR_OK;
 8008896:	2300      	movs	r3, #0
 8008898:	e08a      	b.n	80089b0 <tcp_output_segment+0x130>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800889a:	68bb      	ldr	r3, [r7, #8]
 800889c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	68dc      	ldr	r4, [r3, #12]
 80088a2:	4610      	mov	r0, r2
 80088a4:	f7fa fbe2 	bl	800306c <lwip_htonl>
 80088a8:	4603      	mov	r3, r0
 80088aa:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 80088ac:	68bb      	ldr	r3, [r7, #8]
 80088ae:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	68dc      	ldr	r4, [r3, #12]
 80088b4:	4610      	mov	r0, r2
 80088b6:	f7fa fbcc 	bl	8003052 <lwip_htons>
 80088ba:	4603      	mov	r3, r0
 80088bc:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 80088be:	68bb      	ldr	r3, [r7, #8]
 80088c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088c2:	68ba      	ldr	r2, [r7, #8]
 80088c4:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 80088c6:	441a      	add	r2, r3
 80088c8:	68bb      	ldr	r3, [r7, #8]
 80088ca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	68db      	ldr	r3, [r3, #12]
 80088d0:	3314      	adds	r3, #20
 80088d2:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	7a9b      	ldrb	r3, [r3, #10]
 80088d8:	f003 0301 	and.w	r3, r3, #1
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d014      	beq.n	800890a <tcp_output_segment+0x8a>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss(TCP_MSS, &pcb->local_ip, &pcb->remote_ip);
 80088e0:	68bb      	ldr	r3, [r7, #8]
 80088e2:	3304      	adds	r3, #4
 80088e4:	4619      	mov	r1, r3
 80088e6:	f44f 7006 	mov.w	r0, #536	; 0x218
 80088ea:	f7fd f8ab 	bl	8005a44 <tcp_eff_send_mss_impl>
 80088ee:	4603      	mov	r3, r0
 80088f0:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 80088f2:	8b7b      	ldrh	r3, [r7, #26]
 80088f4:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 80088f8:	4618      	mov	r0, r3
 80088fa:	f7fa fbb7 	bl	800306c <lwip_htonl>
 80088fe:	4602      	mov	r2, r0
 8008900:	69fb      	ldr	r3, [r7, #28]
 8008902:	601a      	str	r2, [r3, #0]
    opts += 1;
 8008904:	69fb      	ldr	r3, [r7, #28]
 8008906:	3304      	adds	r3, #4
 8008908:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 800890a:	68bb      	ldr	r3, [r7, #8]
 800890c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8008910:	2b00      	cmp	r3, #0
 8008912:	da02      	bge.n	800891a <tcp_output_segment+0x9a>
    pcb->rtime = 0;
 8008914:	68bb      	ldr	r3, [r7, #8]
 8008916:	2200      	movs	r2, #0
 8008918:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 800891a:	68bb      	ldr	r3, [r7, #8]
 800891c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800891e:	2b00      	cmp	r3, #0
 8008920:	d10c      	bne.n	800893c <tcp_output_segment+0xbc>
    pcb->rttest = tcp_ticks;
 8008922:	4b25      	ldr	r3, [pc, #148]	; (80089b8 <tcp_output_segment+0x138>)
 8008924:	681a      	ldr	r2, [r3, #0]
 8008926:	68bb      	ldr	r3, [r7, #8]
 8008928:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	68db      	ldr	r3, [r3, #12]
 800892e:	685b      	ldr	r3, [r3, #4]
 8008930:	4618      	mov	r0, r3
 8008932:	f7fa fb9b 	bl	800306c <lwip_htonl>
 8008936:	4602      	mov	r2, r0
 8008938:	68bb      	ldr	r3, [r7, #8]
 800893a:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
          lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
          seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	68da      	ldr	r2, [r3, #12]
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	685b      	ldr	r3, [r3, #4]
 8008944:	685b      	ldr	r3, [r3, #4]
 8008946:	1ad3      	subs	r3, r2, r3
 8008948:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	685b      	ldr	r3, [r3, #4]
 800894e:	8959      	ldrh	r1, [r3, #10]
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	685b      	ldr	r3, [r3, #4]
 8008954:	8b3a      	ldrh	r2, [r7, #24]
 8008956:	1a8a      	subs	r2, r1, r2
 8008958:	b292      	uxth	r2, r2
 800895a:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	685b      	ldr	r3, [r3, #4]
 8008960:	8919      	ldrh	r1, [r3, #8]
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	685b      	ldr	r3, [r3, #4]
 8008966:	8b3a      	ldrh	r2, [r7, #24]
 8008968:	1a8a      	subs	r2, r1, r2
 800896a:	b292      	uxth	r2, r2
 800896c:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	685b      	ldr	r3, [r3, #4]
 8008972:	68fa      	ldr	r2, [r7, #12]
 8008974:	68d2      	ldr	r2, [r2, #12]
 8008976:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	68db      	ldr	r3, [r3, #12]
 800897c:	2200      	movs	r2, #0
 800897e:	741a      	strb	r2, [r3, #16]
 8008980:	2200      	movs	r2, #0
 8008982:	745a      	strb	r2, [r3, #17]
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	6858      	ldr	r0, [r3, #4]
 8008988:	68b9      	ldr	r1, [r7, #8]
 800898a:	68bb      	ldr	r3, [r7, #8]
 800898c:	1d1c      	adds	r4, r3, #4
 800898e:	68bb      	ldr	r3, [r7, #8]
 8008990:	7a9d      	ldrb	r5, [r3, #10]
 8008992:	68bb      	ldr	r3, [r7, #8]
 8008994:	7a5b      	ldrb	r3, [r3, #9]
 8008996:	687a      	ldr	r2, [r7, #4]
 8008998:	9202      	str	r2, [sp, #8]
 800899a:	2206      	movs	r2, #6
 800899c:	9201      	str	r2, [sp, #4]
 800899e:	9300      	str	r3, [sp, #0]
 80089a0:	462b      	mov	r3, r5
 80089a2:	4622      	mov	r2, r4
 80089a4:	f004 f854 	bl	800ca50 <ip4_output_if>
 80089a8:	4603      	mov	r3, r0
 80089aa:	75fb      	strb	r3, [r7, #23]
    pcb->tos, IP_PROTO_TCP, netif);
  NETIF_SET_HWADDRHINT(netif, NULL);
  return err;
 80089ac:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80089b0:	4618      	mov	r0, r3
 80089b2:	3720      	adds	r7, #32
 80089b4:	46bd      	mov	sp, r7
 80089b6:	bdb0      	pop	{r4, r5, r7, pc}
 80089b8:	200068a4 	.word	0x200068a4

080089bc <tcp_rst>:
 */
void
tcp_rst(u32_t seqno, u32_t ackno,
  const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
  u16_t local_port, u16_t remote_port)
{
 80089bc:	b580      	push	{r7, lr}
 80089be:	b08c      	sub	sp, #48	; 0x30
 80089c0:	af04      	add	r7, sp, #16
 80089c2:	60f8      	str	r0, [r7, #12]
 80089c4:	60b9      	str	r1, [r7, #8]
 80089c6:	607a      	str	r2, [r7, #4]
 80089c8:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  struct tcp_hdr *tcphdr;
  struct netif *netif;
  p = pbuf_alloc(PBUF_IP, TCP_HLEN, PBUF_RAM);
 80089ca:	2200      	movs	r2, #0
 80089cc:	2114      	movs	r1, #20
 80089ce:	2001      	movs	r0, #1
 80089d0:	f7fb f900 	bl	8003bd4 <pbuf_alloc>
 80089d4:	61f8      	str	r0, [r7, #28]
  if (p == NULL) {
 80089d6:	69fb      	ldr	r3, [r7, #28]
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d05b      	beq.n	8008a94 <tcp_rst+0xd8>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 80089dc:	69fb      	ldr	r3, [r7, #28]
 80089de:	895b      	ldrh	r3, [r3, #10]
 80089e0:	2b13      	cmp	r3, #19
 80089e2:	d806      	bhi.n	80089f2 <tcp_rst+0x36>
 80089e4:	4b2d      	ldr	r3, [pc, #180]	; (8008a9c <tcp_rst+0xe0>)
 80089e6:	f240 524c 	movw	r2, #1356	; 0x54c
 80089ea:	492d      	ldr	r1, [pc, #180]	; (8008aa0 <tcp_rst+0xe4>)
 80089ec:	482d      	ldr	r0, [pc, #180]	; (8008aa4 <tcp_rst+0xe8>)
 80089ee:	f005 f837 	bl	800da60 <iprintf>
              (p->len >= sizeof(struct tcp_hdr)));

  tcphdr = (struct tcp_hdr *)p->payload;
 80089f2:	69fb      	ldr	r3, [r7, #28]
 80089f4:	685b      	ldr	r3, [r3, #4]
 80089f6:	61bb      	str	r3, [r7, #24]
  tcphdr->src = lwip_htons(local_port);
 80089f8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80089fa:	4618      	mov	r0, r3
 80089fc:	f7fa fb29 	bl	8003052 <lwip_htons>
 8008a00:	4603      	mov	r3, r0
 8008a02:	461a      	mov	r2, r3
 8008a04:	69bb      	ldr	r3, [r7, #24]
 8008a06:	801a      	strh	r2, [r3, #0]
  tcphdr->dest = lwip_htons(remote_port);
 8008a08:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8008a0a:	4618      	mov	r0, r3
 8008a0c:	f7fa fb21 	bl	8003052 <lwip_htons>
 8008a10:	4603      	mov	r3, r0
 8008a12:	461a      	mov	r2, r3
 8008a14:	69bb      	ldr	r3, [r7, #24]
 8008a16:	805a      	strh	r2, [r3, #2]
  tcphdr->seqno = lwip_htonl(seqno);
 8008a18:	68f8      	ldr	r0, [r7, #12]
 8008a1a:	f7fa fb27 	bl	800306c <lwip_htonl>
 8008a1e:	4602      	mov	r2, r0
 8008a20:	69bb      	ldr	r3, [r7, #24]
 8008a22:	605a      	str	r2, [r3, #4]
  tcphdr->ackno = lwip_htonl(ackno);
 8008a24:	68b8      	ldr	r0, [r7, #8]
 8008a26:	f7fa fb21 	bl	800306c <lwip_htonl>
 8008a2a:	4602      	mov	r2, r0
 8008a2c:	69bb      	ldr	r3, [r7, #24]
 8008a2e:	609a      	str	r2, [r3, #8]
  TCPH_HDRLEN_FLAGS_SET(tcphdr, TCP_HLEN/4, TCP_RST | TCP_ACK);
 8008a30:	f245 0014 	movw	r0, #20500	; 0x5014
 8008a34:	f7fa fb0d 	bl	8003052 <lwip_htons>
 8008a38:	4603      	mov	r3, r0
 8008a3a:	461a      	mov	r2, r3
 8008a3c:	69bb      	ldr	r3, [r7, #24]
 8008a3e:	819a      	strh	r2, [r3, #12]
#if LWIP_WND_SCALE
  tcphdr->wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  tcphdr->wnd = PP_HTONS(TCP_WND);
 8008a40:	69bb      	ldr	r3, [r7, #24]
 8008a42:	2200      	movs	r2, #0
 8008a44:	f042 0208 	orr.w	r2, r2, #8
 8008a48:	739a      	strb	r2, [r3, #14]
 8008a4a:	2200      	movs	r2, #0
 8008a4c:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8008a50:	73da      	strb	r2, [r3, #15]
#endif
  tcphdr->chksum = 0;
 8008a52:	69bb      	ldr	r3, [r7, #24]
 8008a54:	2200      	movs	r2, #0
 8008a56:	741a      	strb	r2, [r3, #16]
 8008a58:	2200      	movs	r2, #0
 8008a5a:	745a      	strb	r2, [r3, #17]
  tcphdr->urgp = 0;
 8008a5c:	69bb      	ldr	r3, [r7, #24]
 8008a5e:	2200      	movs	r2, #0
 8008a60:	749a      	strb	r2, [r3, #18]
 8008a62:	2200      	movs	r2, #0
 8008a64:	74da      	strb	r2, [r3, #19]

  TCP_STATS_INC(tcp.xmit);
  MIB2_STATS_INC(mib2.tcpoutrsts);

  netif = ip_route(local_ip, remote_ip);
 8008a66:	6838      	ldr	r0, [r7, #0]
 8008a68:	f003 fe2a 	bl	800c6c0 <ip4_route>
 8008a6c:	6178      	str	r0, [r7, #20]
  if (netif != NULL) {
 8008a6e:	697b      	ldr	r3, [r7, #20]
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	d00b      	beq.n	8008a8c <tcp_rst+0xd0>
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        local_ip, remote_ip);
    }
#endif
    /* Send output with hardcoded TTL/HL since we have no access to the pcb */
    ip_output_if(p, local_ip, remote_ip, TCP_TTL, 0, IP_PROTO_TCP, netif);
 8008a74:	697b      	ldr	r3, [r7, #20]
 8008a76:	9302      	str	r3, [sp, #8]
 8008a78:	2306      	movs	r3, #6
 8008a7a:	9301      	str	r3, [sp, #4]
 8008a7c:	2300      	movs	r3, #0
 8008a7e:	9300      	str	r3, [sp, #0]
 8008a80:	23ff      	movs	r3, #255	; 0xff
 8008a82:	683a      	ldr	r2, [r7, #0]
 8008a84:	6879      	ldr	r1, [r7, #4]
 8008a86:	69f8      	ldr	r0, [r7, #28]
 8008a88:	f003 ffe2 	bl	800ca50 <ip4_output_if>
  }
  pbuf_free(p);
 8008a8c:	69f8      	ldr	r0, [r7, #28]
 8008a8e:	f7fb fc13 	bl	80042b8 <pbuf_free>
 8008a92:	e000      	b.n	8008a96 <tcp_rst+0xda>
    return;
 8008a94:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8008a96:	3720      	adds	r7, #32
 8008a98:	46bd      	mov	sp, r7
 8008a9a:	bd80      	pop	{r7, pc}
 8008a9c:	0800fb80 	.word	0x0800fb80
 8008aa0:	0800fbb4 	.word	0x0800fbb4
 8008aa4:	0800fbe4 	.word	0x0800fbe4

08008aa8 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 8008aa8:	b580      	push	{r7, lr}
 8008aaa:	b084      	sub	sp, #16
 8008aac:	af00      	add	r7, sp, #0
 8008aae:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  if (pcb->unacked == NULL) {
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	d029      	beq.n	8008b0c <tcp_rexmit_rto+0x64>
    return;
  }

  /* Move all unacked segments to the head of the unsent queue */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next);
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008abc:	60fb      	str	r3, [r7, #12]
 8008abe:	e002      	b.n	8008ac6 <tcp_rexmit_rto+0x1e>
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	60fb      	str	r3, [r7, #12]
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d1f8      	bne.n	8008ac0 <tcp_rexmit_rto+0x18>
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	669a      	str	r2, [r3, #104]	; 0x68
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	2200      	movs	r2, #0
 8008ae2:	66da      	str	r2, [r3, #108]	; 0x6c

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008aea:	2bff      	cmp	r3, #255	; 0xff
 8008aec:	d007      	beq.n	8008afe <tcp_rexmit_rto+0x56>
    ++pcb->nrtx;
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008af4:	3301      	adds	r3, #1
 8008af6:	b2da      	uxtb	r2, r3
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	2200      	movs	r2, #0
 8008b02:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission */
  tcp_output(pcb);
 8008b04:	6878      	ldr	r0, [r7, #4]
 8008b06:	f7ff fcd5 	bl	80084b4 <tcp_output>
 8008b0a:	e000      	b.n	8008b0e <tcp_rexmit_rto+0x66>
    return;
 8008b0c:	bf00      	nop
}
 8008b0e:	3710      	adds	r7, #16
 8008b10:	46bd      	mov	sp, r7
 8008b12:	bd80      	pop	{r7, pc}

08008b14 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit(struct tcp_pcb *pcb)
{
 8008b14:	b590      	push	{r4, r7, lr}
 8008b16:	b085      	sub	sp, #20
 8008b18:	af00      	add	r7, sp, #0
 8008b1a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  if (pcb->unacked == NULL) {
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	d043      	beq.n	8008bac <tcp_rexmit+0x98>
    return;
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  seg = pcb->unacked;
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008b28:	60bb      	str	r3, [r7, #8]
  pcb->unacked = seg->next;
 8008b2a:	68bb      	ldr	r3, [r7, #8]
 8008b2c:	681a      	ldr	r2, [r3, #0]
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	66da      	str	r2, [r3, #108]	; 0x6c

  cur_seg = &(pcb->unsent);
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	3368      	adds	r3, #104	; 0x68
 8008b36:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8008b38:	e002      	b.n	8008b40 <tcp_rexmit+0x2c>
    TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
      cur_seg = &((*cur_seg)->next );
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	d011      	beq.n	8008b6c <tcp_rexmit+0x58>
    TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	68db      	ldr	r3, [r3, #12]
 8008b4e:	685b      	ldr	r3, [r3, #4]
 8008b50:	4618      	mov	r0, r3
 8008b52:	f7fa fa8b 	bl	800306c <lwip_htonl>
 8008b56:	4604      	mov	r4, r0
 8008b58:	68bb      	ldr	r3, [r7, #8]
 8008b5a:	68db      	ldr	r3, [r3, #12]
 8008b5c:	685b      	ldr	r3, [r3, #4]
 8008b5e:	4618      	mov	r0, r3
 8008b60:	f7fa fa84 	bl	800306c <lwip_htonl>
 8008b64:	4603      	mov	r3, r0
 8008b66:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	dbe6      	blt.n	8008b3a <tcp_rexmit+0x26>
  }
  seg->next = *cur_seg;
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	681a      	ldr	r2, [r3, #0]
 8008b70:	68bb      	ldr	r3, [r7, #8]
 8008b72:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	68ba      	ldr	r2, [r7, #8]
 8008b78:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 8008b7a:	68bb      	ldr	r3, [r7, #8]
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d103      	bne.n	8008b8a <tcp_rexmit+0x76>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	2200      	movs	r2, #0
 8008b86:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008b90:	2bff      	cmp	r3, #255	; 0xff
 8008b92:	d007      	beq.n	8008ba4 <tcp_rexmit+0x90>
    ++pcb->nrtx;
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008b9a:	3301      	adds	r3, #1
 8008b9c:	b2da      	uxtb	r2, r3
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	2200      	movs	r2, #0
 8008ba8:	635a      	str	r2, [r3, #52]	; 0x34
 8008baa:	e000      	b.n	8008bae <tcp_rexmit+0x9a>
    return;
 8008bac:	bf00      	nop

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
}
 8008bae:	3714      	adds	r7, #20
 8008bb0:	46bd      	mov	sp, r7
 8008bb2:	bd90      	pop	{r4, r7, pc}

08008bb4 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8008bb4:	b580      	push	{r7, lr}
 8008bb6:	b082      	sub	sp, #8
 8008bb8:	af00      	add	r7, sp, #0
 8008bba:	6078      	str	r0, [r7, #4]
  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d041      	beq.n	8008c48 <tcp_rexmit_fast+0x94>
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	7e9b      	ldrb	r3, [r3, #26]
 8008bc8:	f003 0304 	and.w	r3, r3, #4
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	d13b      	bne.n	8008c48 <tcp_rexmit_fast+0x94>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    tcp_rexmit(pcb);
 8008bd0:	6878      	ldr	r0, [r7, #4]
 8008bd2:	f7ff ff9f 	bl	8008b14 <tcp_rexmit>

    /* Set ssthresh to half of the minimum of the current
     * cwnd and the advertised window */
    pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8008be2:	4293      	cmp	r3, r2
 8008be4:	bf28      	it	cs
 8008be6:	4613      	movcs	r3, r2
 8008be8:	b29b      	uxth	r3, r3
 8008bea:	0fda      	lsrs	r2, r3, #31
 8008bec:	4413      	add	r3, r2
 8008bee:	105b      	asrs	r3, r3, #1
 8008bf0:	b29a      	uxth	r2, r3
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

    /* The minimum value for ssthresh should be 2 MSS */
    if (pcb->ssthresh < (2U * pcb->mss)) {
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8008bfe:	461a      	mov	r2, r3
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008c04:	005b      	lsls	r3, r3, #1
 8008c06:	429a      	cmp	r2, r3
 8008c08:	d206      	bcs.n	8008c18 <tcp_rexmit_fast+0x64>
      LWIP_DEBUGF(TCP_FR_DEBUG,
                  ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                   " should be min 2 mss %"U16_F"...\n",
                   pcb->ssthresh, (u16_t)(2*pcb->mss)));
      pcb->ssthresh = 2*pcb->mss;
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008c0e:	005b      	lsls	r3, r3, #1
 8008c10:	b29a      	uxth	r2, r3
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
    }

    pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008c22:	4619      	mov	r1, r3
 8008c24:	0049      	lsls	r1, r1, #1
 8008c26:	440b      	add	r3, r1
 8008c28:	b29b      	uxth	r3, r3
 8008c2a:	4413      	add	r3, r2
 8008c2c:	b29a      	uxth	r2, r3
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->flags |= TF_INFR;
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	7e9b      	ldrb	r3, [r3, #26]
 8008c38:	f043 0304 	orr.w	r3, r3, #4
 8008c3c:	b2da      	uxtb	r2, r3
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	769a      	strb	r2, [r3, #26]

    /* Reset the retransmission timer to prevent immediate rto retransmissions */
    pcb->rtime = 0;
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	2200      	movs	r2, #0
 8008c46:	861a      	strh	r2, [r3, #48]	; 0x30
  }
}
 8008c48:	bf00      	nop
 8008c4a:	3708      	adds	r7, #8
 8008c4c:	46bd      	mov	sp, r7
 8008c4e:	bd80      	pop	{r7, pc}

08008c50 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8008c50:	b580      	push	{r7, lr}
 8008c52:	b08a      	sub	sp, #40	; 0x28
 8008c54:	af04      	add	r7, sp, #16
 8008c56:	6078      	str	r0, [r7, #4]
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, 0, 0, lwip_htonl(pcb->snd_nxt - 1));
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008c5c:	3b01      	subs	r3, #1
 8008c5e:	4618      	mov	r0, r3
 8008c60:	f7fa fa04 	bl	800306c <lwip_htonl>
 8008c64:	4603      	mov	r3, r0
 8008c66:	2200      	movs	r2, #0
 8008c68:	2100      	movs	r1, #0
 8008c6a:	6878      	ldr	r0, [r7, #4]
 8008c6c:	f7ff f988 	bl	8007f80 <tcp_output_alloc_header>
 8008c70:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8008c72:	693b      	ldr	r3, [r7, #16]
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	d102      	bne.n	8008c7e <tcp_keepalive+0x2e>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8008c78:	f04f 33ff 	mov.w	r3, #4294967295
 8008c7c:	e021      	b.n	8008cc2 <tcp_keepalive+0x72>
  }
  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	3304      	adds	r3, #4
 8008c82:	4618      	mov	r0, r3
 8008c84:	f003 fd1c 	bl	800c6c0 <ip4_route>
 8008c88:	60f8      	str	r0, [r7, #12]
  if (netif == NULL) {
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	d102      	bne.n	8008c96 <tcp_keepalive+0x46>
    err = ERR_RTE;
 8008c90:	23fc      	movs	r3, #252	; 0xfc
 8008c92:	75fb      	strb	r3, [r7, #23]
 8008c94:	e010      	b.n	8008cb8 <tcp_keepalive+0x68>
#endif /* CHECKSUM_GEN_TCP */
    TCP_STATS_INC(tcp.xmit);

    /* Send output to IP */
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl, 0, IP_PROTO_TCP, netif);
 8008c96:	6879      	ldr	r1, [r7, #4]
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	1d1a      	adds	r2, r3, #4
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	7a98      	ldrb	r0, [r3, #10]
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	9302      	str	r3, [sp, #8]
 8008ca4:	2306      	movs	r3, #6
 8008ca6:	9301      	str	r3, [sp, #4]
 8008ca8:	2300      	movs	r3, #0
 8008caa:	9300      	str	r3, [sp, #0]
 8008cac:	4603      	mov	r3, r0
 8008cae:	6938      	ldr	r0, [r7, #16]
 8008cb0:	f003 fece 	bl	800ca50 <ip4_output_if>
 8008cb4:	4603      	mov	r3, r0
 8008cb6:	75fb      	strb	r3, [r7, #23]
    NETIF_SET_HWADDRHINT(netif, NULL);
  }
  pbuf_free(p);
 8008cb8:	6938      	ldr	r0, [r7, #16]
 8008cba:	f7fb fafd 	bl	80042b8 <pbuf_free>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8008cbe:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008cc2:	4618      	mov	r0, r3
 8008cc4:	3718      	adds	r7, #24
 8008cc6:	46bd      	mov	sp, r7
 8008cc8:	bd80      	pop	{r7, pc}

08008cca <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8008cca:	b590      	push	{r4, r7, lr}
 8008ccc:	b08f      	sub	sp, #60	; 0x3c
 8008cce:	af04      	add	r7, sp, #16
 8008cd0:	6078      	str	r0, [r7, #4]
  LWIP_DEBUGF(TCP_DEBUG,
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  seg = pcb->unacked;
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008cd6:	623b      	str	r3, [r7, #32]

  if (seg == NULL) {
 8008cd8:	6a3b      	ldr	r3, [r7, #32]
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	d102      	bne.n	8008ce4 <tcp_zero_window_probe+0x1a>
    seg = pcb->unsent;
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008ce2:	623b      	str	r3, [r7, #32]
  }
  if (seg == NULL) {
 8008ce4:	6a3b      	ldr	r3, [r7, #32]
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	d101      	bne.n	8008cee <tcp_zero_window_probe+0x24>
    /* nothing to send, zero window probe not needed */
    return ERR_OK;
 8008cea:	2300      	movs	r3, #0
 8008cec:	e085      	b.n	8008dfa <tcp_zero_window_probe+0x130>
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8008cee:	6a3b      	ldr	r3, [r7, #32]
 8008cf0:	68db      	ldr	r3, [r3, #12]
 8008cf2:	899b      	ldrh	r3, [r3, #12]
 8008cf4:	b29b      	uxth	r3, r3
 8008cf6:	4618      	mov	r0, r3
 8008cf8:	f7fa f9ab 	bl	8003052 <lwip_htons>
 8008cfc:	4603      	mov	r3, r0
 8008cfe:	f003 0301 	and.w	r3, r3, #1
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	d005      	beq.n	8008d12 <tcp_zero_window_probe+0x48>
 8008d06:	6a3b      	ldr	r3, [r7, #32]
 8008d08:	891b      	ldrh	r3, [r3, #8]
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	d101      	bne.n	8008d12 <tcp_zero_window_probe+0x48>
 8008d0e:	2301      	movs	r3, #1
 8008d10:	e000      	b.n	8008d14 <tcp_zero_window_probe+0x4a>
 8008d12:	2300      	movs	r3, #0
 8008d14:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 8008d16:	7ffb      	ldrb	r3, [r7, #31]
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	bf0c      	ite	eq
 8008d1c:	2301      	moveq	r3, #1
 8008d1e:	2300      	movne	r3, #0
 8008d20:	b2db      	uxtb	r3, r3
 8008d22:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, 0, len, seg->tcphdr->seqno);
 8008d24:	6a3b      	ldr	r3, [r7, #32]
 8008d26:	68db      	ldr	r3, [r3, #12]
 8008d28:	685b      	ldr	r3, [r3, #4]
 8008d2a:	8bba      	ldrh	r2, [r7, #28]
 8008d2c:	2100      	movs	r1, #0
 8008d2e:	6878      	ldr	r0, [r7, #4]
 8008d30:	f7ff f926 	bl	8007f80 <tcp_output_alloc_header>
 8008d34:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 8008d36:	69bb      	ldr	r3, [r7, #24]
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	d102      	bne.n	8008d42 <tcp_zero_window_probe+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8008d3c:	f04f 33ff 	mov.w	r3, #4294967295
 8008d40:	e05b      	b.n	8008dfa <tcp_zero_window_probe+0x130>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8008d42:	69bb      	ldr	r3, [r7, #24]
 8008d44:	685b      	ldr	r3, [r3, #4]
 8008d46:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 8008d48:	7ffb      	ldrb	r3, [r7, #31]
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d00e      	beq.n	8008d6c <tcp_zero_window_probe+0xa2>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8008d4e:	697b      	ldr	r3, [r7, #20]
 8008d50:	899b      	ldrh	r3, [r3, #12]
 8008d52:	b29b      	uxth	r3, r3
 8008d54:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8008d58:	b29c      	uxth	r4, r3
 8008d5a:	2011      	movs	r0, #17
 8008d5c:	f7fa f979 	bl	8003052 <lwip_htons>
 8008d60:	4603      	mov	r3, r0
 8008d62:	4323      	orrs	r3, r4
 8008d64:	b29a      	uxth	r2, r3
 8008d66:	697b      	ldr	r3, [r7, #20]
 8008d68:	819a      	strh	r2, [r3, #12]
 8008d6a:	e010      	b.n	8008d8e <tcp_zero_window_probe+0xc4>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 8008d6c:	69bb      	ldr	r3, [r7, #24]
 8008d6e:	685b      	ldr	r3, [r3, #4]
 8008d70:	3314      	adds	r3, #20
 8008d72:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 8008d74:	6a3b      	ldr	r3, [r7, #32]
 8008d76:	6858      	ldr	r0, [r3, #4]
 8008d78:	6a3b      	ldr	r3, [r7, #32]
 8008d7a:	685b      	ldr	r3, [r3, #4]
 8008d7c:	891a      	ldrh	r2, [r3, #8]
 8008d7e:	6a3b      	ldr	r3, [r7, #32]
 8008d80:	891b      	ldrh	r3, [r3, #8]
 8008d82:	1ad3      	subs	r3, r2, r3
 8008d84:	b29b      	uxth	r3, r3
 8008d86:	2201      	movs	r2, #1
 8008d88:	6939      	ldr	r1, [r7, #16]
 8008d8a:	f7fb fc93 	bl	80046b4 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8008d8e:	6a3b      	ldr	r3, [r7, #32]
 8008d90:	68db      	ldr	r3, [r3, #12]
 8008d92:	685b      	ldr	r3, [r3, #4]
 8008d94:	4618      	mov	r0, r3
 8008d96:	f7fa f969 	bl	800306c <lwip_htonl>
 8008d9a:	4603      	mov	r3, r0
 8008d9c:	3301      	adds	r3, #1
 8008d9e:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008da4:	68fb      	ldr	r3, [r7, #12]
 8008da6:	1ad3      	subs	r3, r2, r3
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	da02      	bge.n	8008db2 <tcp_zero_window_probe+0xe8>
    pcb->snd_nxt = snd_nxt;
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	68fa      	ldr	r2, [r7, #12]
 8008db0:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	3304      	adds	r3, #4
 8008db6:	4618      	mov	r0, r3
 8008db8:	f003 fc82 	bl	800c6c0 <ip4_route>
 8008dbc:	60b8      	str	r0, [r7, #8]
  if (netif == NULL) {
 8008dbe:	68bb      	ldr	r3, [r7, #8]
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	d103      	bne.n	8008dcc <tcp_zero_window_probe+0x102>
    err = ERR_RTE;
 8008dc4:	23fc      	movs	r3, #252	; 0xfc
 8008dc6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8008dca:	e011      	b.n	8008df0 <tcp_zero_window_probe+0x126>
#endif
    TCP_STATS_INC(tcp.xmit);

    /* Send output to IP */
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8008dcc:	6879      	ldr	r1, [r7, #4]
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	1d1a      	adds	r2, r3, #4
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	7a98      	ldrb	r0, [r3, #10]
 8008dd6:	68bb      	ldr	r3, [r7, #8]
 8008dd8:	9302      	str	r3, [sp, #8]
 8008dda:	2306      	movs	r3, #6
 8008ddc:	9301      	str	r3, [sp, #4]
 8008dde:	2300      	movs	r3, #0
 8008de0:	9300      	str	r3, [sp, #0]
 8008de2:	4603      	mov	r3, r0
 8008de4:	69b8      	ldr	r0, [r7, #24]
 8008de6:	f003 fe33 	bl	800ca50 <ip4_output_if>
 8008dea:	4603      	mov	r3, r0
 8008dec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      0, IP_PROTO_TCP, netif);
    NETIF_SET_HWADDRHINT(netif, NULL);
  }

  pbuf_free(p);
 8008df0:	69b8      	ldr	r0, [r7, #24]
 8008df2:	f7fb fa61 	bl	80042b8 <pbuf_free>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8008df6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8008dfa:	4618      	mov	r0, r3
 8008dfc:	372c      	adds	r7, #44	; 0x2c
 8008dfe:	46bd      	mov	sp, r7
 8008e00:	bd90      	pop	{r4, r7, pc}
	...

08008e04 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8008e04:	b580      	push	{r7, lr}
 8008e06:	b082      	sub	sp, #8
 8008e08:	af00      	add	r7, sp, #0
 8008e0a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8008e0c:	f7fb fcd2 	bl	80047b4 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8008e10:	4b0a      	ldr	r3, [pc, #40]	; (8008e3c <tcpip_tcp_timer+0x38>)
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d103      	bne.n	8008e20 <tcpip_tcp_timer+0x1c>
 8008e18:	4b09      	ldr	r3, [pc, #36]	; (8008e40 <tcpip_tcp_timer+0x3c>)
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	d005      	beq.n	8008e2c <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8008e20:	2200      	movs	r2, #0
 8008e22:	4908      	ldr	r1, [pc, #32]	; (8008e44 <tcpip_tcp_timer+0x40>)
 8008e24:	20fa      	movs	r0, #250	; 0xfa
 8008e26:	f000 f86f 	bl	8008f08 <sys_timeout>
 8008e2a:	e003      	b.n	8008e34 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8008e2c:	4b06      	ldr	r3, [pc, #24]	; (8008e48 <tcpip_tcp_timer+0x44>)
 8008e2e:	2200      	movs	r2, #0
 8008e30:	601a      	str	r2, [r3, #0]
  }
}
 8008e32:	bf00      	nop
 8008e34:	bf00      	nop
 8008e36:	3708      	adds	r7, #8
 8008e38:	46bd      	mov	sp, r7
 8008e3a:	bd80      	pop	{r7, pc}
 8008e3c:	200068a0 	.word	0x200068a0
 8008e40:	200068b0 	.word	0x200068b0
 8008e44:	08008e05 	.word	0x08008e05
 8008e48:	2000010c 	.word	0x2000010c

08008e4c <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8008e4c:	b580      	push	{r7, lr}
 8008e4e:	af00      	add	r7, sp, #0
  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8008e50:	4b0a      	ldr	r3, [pc, #40]	; (8008e7c <tcp_timer_needed+0x30>)
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	d10f      	bne.n	8008e78 <tcp_timer_needed+0x2c>
 8008e58:	4b09      	ldr	r3, [pc, #36]	; (8008e80 <tcp_timer_needed+0x34>)
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	d103      	bne.n	8008e68 <tcp_timer_needed+0x1c>
 8008e60:	4b08      	ldr	r3, [pc, #32]	; (8008e84 <tcp_timer_needed+0x38>)
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	d007      	beq.n	8008e78 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8008e68:	4b04      	ldr	r3, [pc, #16]	; (8008e7c <tcp_timer_needed+0x30>)
 8008e6a:	2201      	movs	r2, #1
 8008e6c:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8008e6e:	2200      	movs	r2, #0
 8008e70:	4905      	ldr	r1, [pc, #20]	; (8008e88 <tcp_timer_needed+0x3c>)
 8008e72:	20fa      	movs	r0, #250	; 0xfa
 8008e74:	f000 f848 	bl	8008f08 <sys_timeout>
  }
}
 8008e78:	bf00      	nop
 8008e7a:	bd80      	pop	{r7, pc}
 8008e7c:	2000010c 	.word	0x2000010c
 8008e80:	200068a0 	.word	0x200068a0
 8008e84:	200068b0 	.word	0x200068b0
 8008e88:	08008e05 	.word	0x08008e05

08008e8c <cyclic_timer>:
 *
 * @param arg unused argument
 */
static void
cyclic_timer(void *arg)
{
 8008e8c:	b580      	push	{r7, lr}
 8008e8e:	b084      	sub	sp, #16
 8008e90:	af00      	add	r7, sp, #0
 8008e92:	6078      	str	r0, [r7, #4]
  const struct lwip_cyclic_timer* cyclic = (const struct lwip_cyclic_timer*)arg;
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	60fb      	str	r3, [r7, #12]
#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	685b      	ldr	r3, [r3, #4]
 8008e9c:	4798      	blx	r3
  sys_timeout(cyclic->interval_ms, cyclic_timer, arg);
 8008e9e:	68fb      	ldr	r3, [r7, #12]
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	687a      	ldr	r2, [r7, #4]
 8008ea4:	4903      	ldr	r1, [pc, #12]	; (8008eb4 <cyclic_timer+0x28>)
 8008ea6:	4618      	mov	r0, r3
 8008ea8:	f000 f82e 	bl	8008f08 <sys_timeout>
}
 8008eac:	bf00      	nop
 8008eae:	3710      	adds	r7, #16
 8008eb0:	46bd      	mov	sp, r7
 8008eb2:	bd80      	pop	{r7, pc}
 8008eb4:	08008e8d 	.word	0x08008e8d

08008eb8 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8008eb8:	b580      	push	{r7, lr}
 8008eba:	b082      	sub	sp, #8
 8008ebc:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8008ebe:	2301      	movs	r3, #1
 8008ec0:	607b      	str	r3, [r7, #4]
 8008ec2:	e00e      	b.n	8008ee2 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, cyclic_timer, LWIP_CONST_CAST(void*, &lwip_cyclic_timers[i]));
 8008ec4:	4a0d      	ldr	r2, [pc, #52]	; (8008efc <sys_timeouts_init+0x44>)
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	00db      	lsls	r3, r3, #3
 8008ed0:	4a0a      	ldr	r2, [pc, #40]	; (8008efc <sys_timeouts_init+0x44>)
 8008ed2:	4413      	add	r3, r2
 8008ed4:	461a      	mov	r2, r3
 8008ed6:	490a      	ldr	r1, [pc, #40]	; (8008f00 <sys_timeouts_init+0x48>)
 8008ed8:	f000 f816 	bl	8008f08 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	3301      	adds	r3, #1
 8008ee0:	607b      	str	r3, [r7, #4]
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	2b04      	cmp	r3, #4
 8008ee6:	d9ed      	bls.n	8008ec4 <sys_timeouts_init+0xc>
  }

  /* Initialise timestamp for sys_check_timeouts */
  timeouts_last_time = sys_now();
 8008ee8:	f7fa f826 	bl	8002f38 <sys_now>
 8008eec:	4603      	mov	r3, r0
 8008eee:	4a05      	ldr	r2, [pc, #20]	; (8008f04 <sys_timeouts_init+0x4c>)
 8008ef0:	6013      	str	r3, [r2, #0]
}
 8008ef2:	bf00      	nop
 8008ef4:	3708      	adds	r7, #8
 8008ef6:	46bd      	mov	sp, r7
 8008ef8:	bd80      	pop	{r7, pc}
 8008efa:	bf00      	nop
 8008efc:	08010d40 	.word	0x08010d40
 8008f00:	08008e8d 	.word	0x08008e8d
 8008f04:	20000108 	.word	0x20000108

08008f08 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char* handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8008f08:	b580      	push	{r7, lr}
 8008f0a:	b088      	sub	sp, #32
 8008f0c:	af00      	add	r7, sp, #0
 8008f0e:	60f8      	str	r0, [r7, #12]
 8008f10:	60b9      	str	r1, [r7, #8]
 8008f12:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;
  u32_t now, diff;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8008f14:	2006      	movs	r0, #6
 8008f16:	f7fa fc45 	bl	80037a4 <memp_malloc>
 8008f1a:	6178      	str	r0, [r7, #20]
  if (timeout == NULL) {
 8008f1c:	697b      	ldr	r3, [r7, #20]
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d10a      	bne.n	8008f38 <sys_timeout+0x30>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8008f22:	697b      	ldr	r3, [r7, #20]
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	f040 8084 	bne.w	8009032 <sys_timeout+0x12a>
 8008f2a:	4b44      	ldr	r3, [pc, #272]	; (800903c <sys_timeout+0x134>)
 8008f2c:	22d4      	movs	r2, #212	; 0xd4
 8008f2e:	4944      	ldr	r1, [pc, #272]	; (8009040 <sys_timeout+0x138>)
 8008f30:	4844      	ldr	r0, [pc, #272]	; (8009044 <sys_timeout+0x13c>)
 8008f32:	f004 fd95 	bl	800da60 <iprintf>
    return;
 8008f36:	e07c      	b.n	8009032 <sys_timeout+0x12a>
  }

  now = sys_now();
 8008f38:	f7f9 fffe 	bl	8002f38 <sys_now>
 8008f3c:	6138      	str	r0, [r7, #16]
  if (next_timeout == NULL) {
 8008f3e:	4b42      	ldr	r3, [pc, #264]	; (8009048 <sys_timeout+0x140>)
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	d105      	bne.n	8008f52 <sys_timeout+0x4a>
    diff = 0;
 8008f46:	2300      	movs	r3, #0
 8008f48:	61bb      	str	r3, [r7, #24]
    timeouts_last_time = now;
 8008f4a:	4a40      	ldr	r2, [pc, #256]	; (800904c <sys_timeout+0x144>)
 8008f4c:	693b      	ldr	r3, [r7, #16]
 8008f4e:	6013      	str	r3, [r2, #0]
 8008f50:	e004      	b.n	8008f5c <sys_timeout+0x54>
  } else {
    diff = now - timeouts_last_time;
 8008f52:	4b3e      	ldr	r3, [pc, #248]	; (800904c <sys_timeout+0x144>)
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	693a      	ldr	r2, [r7, #16]
 8008f58:	1ad3      	subs	r3, r2, r3
 8008f5a:	61bb      	str	r3, [r7, #24]
  }

  timeout->next = NULL;
 8008f5c:	697b      	ldr	r3, [r7, #20]
 8008f5e:	2200      	movs	r2, #0
 8008f60:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8008f62:	697b      	ldr	r3, [r7, #20]
 8008f64:	68ba      	ldr	r2, [r7, #8]
 8008f66:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 8008f68:	697b      	ldr	r3, [r7, #20]
 8008f6a:	687a      	ldr	r2, [r7, #4]
 8008f6c:	60da      	str	r2, [r3, #12]
  timeout->time = msecs + diff;
 8008f6e:	68fa      	ldr	r2, [r7, #12]
 8008f70:	69bb      	ldr	r3, [r7, #24]
 8008f72:	441a      	add	r2, r3
 8008f74:	697b      	ldr	r3, [r7, #20]
 8008f76:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p msecs=%"U32_F" handler=%s arg=%p\n",
    (void *)timeout, msecs, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 8008f78:	4b33      	ldr	r3, [pc, #204]	; (8009048 <sys_timeout+0x140>)
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	d103      	bne.n	8008f88 <sys_timeout+0x80>
    next_timeout = timeout;
 8008f80:	4a31      	ldr	r2, [pc, #196]	; (8009048 <sys_timeout+0x140>)
 8008f82:	697b      	ldr	r3, [r7, #20]
 8008f84:	6013      	str	r3, [r2, #0]
    return;
 8008f86:	e055      	b.n	8009034 <sys_timeout+0x12c>
  }

  if (next_timeout->time > msecs) {
 8008f88:	4b2f      	ldr	r3, [pc, #188]	; (8009048 <sys_timeout+0x140>)
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	685b      	ldr	r3, [r3, #4]
 8008f8e:	68fa      	ldr	r2, [r7, #12]
 8008f90:	429a      	cmp	r2, r3
 8008f92:	d20f      	bcs.n	8008fb4 <sys_timeout+0xac>
    next_timeout->time -= msecs;
 8008f94:	4b2c      	ldr	r3, [pc, #176]	; (8009048 <sys_timeout+0x140>)
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	6859      	ldr	r1, [r3, #4]
 8008f9a:	4b2b      	ldr	r3, [pc, #172]	; (8009048 <sys_timeout+0x140>)
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	68fa      	ldr	r2, [r7, #12]
 8008fa0:	1a8a      	subs	r2, r1, r2
 8008fa2:	605a      	str	r2, [r3, #4]
    timeout->next = next_timeout;
 8008fa4:	4b28      	ldr	r3, [pc, #160]	; (8009048 <sys_timeout+0x140>)
 8008fa6:	681a      	ldr	r2, [r3, #0]
 8008fa8:	697b      	ldr	r3, [r7, #20]
 8008faa:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 8008fac:	4a26      	ldr	r2, [pc, #152]	; (8009048 <sys_timeout+0x140>)
 8008fae:	697b      	ldr	r3, [r7, #20]
 8008fb0:	6013      	str	r3, [r2, #0]
 8008fb2:	e03f      	b.n	8009034 <sys_timeout+0x12c>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 8008fb4:	4b24      	ldr	r3, [pc, #144]	; (8009048 <sys_timeout+0x140>)
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	61fb      	str	r3, [r7, #28]
 8008fba:	e036      	b.n	800902a <sys_timeout+0x122>
      timeout->time -= t->time;
 8008fbc:	697b      	ldr	r3, [r7, #20]
 8008fbe:	685a      	ldr	r2, [r3, #4]
 8008fc0:	69fb      	ldr	r3, [r7, #28]
 8008fc2:	685b      	ldr	r3, [r3, #4]
 8008fc4:	1ad2      	subs	r2, r2, r3
 8008fc6:	697b      	ldr	r3, [r7, #20]
 8008fc8:	605a      	str	r2, [r3, #4]
      if (t->next == NULL || t->next->time > timeout->time) {
 8008fca:	69fb      	ldr	r3, [r7, #28]
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d006      	beq.n	8008fe0 <sys_timeout+0xd8>
 8008fd2:	69fb      	ldr	r3, [r7, #28]
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	685a      	ldr	r2, [r3, #4]
 8008fd8:	697b      	ldr	r3, [r7, #20]
 8008fda:	685b      	ldr	r3, [r3, #4]
 8008fdc:	429a      	cmp	r2, r3
 8008fde:	d921      	bls.n	8009024 <sys_timeout+0x11c>
        if (t->next != NULL) {
 8008fe0:	69fb      	ldr	r3, [r7, #28]
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	d009      	beq.n	8008ffc <sys_timeout+0xf4>
          t->next->time -= timeout->time;
 8008fe8:	69fb      	ldr	r3, [r7, #28]
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	6859      	ldr	r1, [r3, #4]
 8008fee:	697b      	ldr	r3, [r7, #20]
 8008ff0:	685a      	ldr	r2, [r3, #4]
 8008ff2:	69fb      	ldr	r3, [r7, #28]
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	1a8a      	subs	r2, r1, r2
 8008ff8:	605a      	str	r2, [r3, #4]
 8008ffa:	e00b      	b.n	8009014 <sys_timeout+0x10c>
        } else if (timeout->time > msecs) {
 8008ffc:	697b      	ldr	r3, [r7, #20]
 8008ffe:	685b      	ldr	r3, [r3, #4]
 8009000:	68fa      	ldr	r2, [r7, #12]
 8009002:	429a      	cmp	r2, r3
 8009004:	d206      	bcs.n	8009014 <sys_timeout+0x10c>
          /* If this is the case, 'timeouts_last_time' and 'now' differs too much.
             This can be due to sys_check_timeouts() not being called at the right
             times, but also when stopping in a breakpoint. Anyway, let's assume
             this is not wanted, so add the first timer's time instead of 'diff' */
          timeout->time = msecs + next_timeout->time;
 8009006:	4b10      	ldr	r3, [pc, #64]	; (8009048 <sys_timeout+0x140>)
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	685a      	ldr	r2, [r3, #4]
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	441a      	add	r2, r3
 8009010:	697b      	ldr	r3, [r7, #20]
 8009012:	605a      	str	r2, [r3, #4]
        }
        timeout->next = t->next;
 8009014:	69fb      	ldr	r3, [r7, #28]
 8009016:	681a      	ldr	r2, [r3, #0]
 8009018:	697b      	ldr	r3, [r7, #20]
 800901a:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 800901c:	69fb      	ldr	r3, [r7, #28]
 800901e:	697a      	ldr	r2, [r7, #20]
 8009020:	601a      	str	r2, [r3, #0]
        break;
 8009022:	e007      	b.n	8009034 <sys_timeout+0x12c>
    for (t = next_timeout; t != NULL; t = t->next) {
 8009024:	69fb      	ldr	r3, [r7, #28]
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	61fb      	str	r3, [r7, #28]
 800902a:	69fb      	ldr	r3, [r7, #28]
 800902c:	2b00      	cmp	r3, #0
 800902e:	d1c5      	bne.n	8008fbc <sys_timeout+0xb4>
 8009030:	e000      	b.n	8009034 <sys_timeout+0x12c>
    return;
 8009032:	bf00      	nop
      }
    }
  }
}
 8009034:	3720      	adds	r7, #32
 8009036:	46bd      	mov	sp, r7
 8009038:	bd80      	pop	{r7, pc}
 800903a:	bf00      	nop
 800903c:	0800ffc4 	.word	0x0800ffc4
 8009040:	0800fff8 	.word	0x0800fff8
 8009044:	08010038 	.word	0x08010038
 8009048:	20000104 	.word	0x20000104
 800904c:	20000108 	.word	0x20000108

08009050 <sys_check_timeouts>:
#if !NO_SYS && !defined __DOXYGEN__
static
#endif /* !NO_SYS */
void
sys_check_timeouts(void)
{
 8009050:	b580      	push	{r7, lr}
 8009052:	b086      	sub	sp, #24
 8009054:	af00      	add	r7, sp, #0
  if (next_timeout) {
 8009056:	4b24      	ldr	r3, [pc, #144]	; (80090e8 <sys_check_timeouts+0x98>)
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	2b00      	cmp	r3, #0
 800905c:	d040      	beq.n	80090e0 <sys_check_timeouts+0x90>
    sys_timeout_handler handler;
    void *arg;
    u8_t had_one;
    u32_t now;

    now = sys_now();
 800905e:	f7f9 ff6b 	bl	8002f38 <sys_now>
 8009062:	60f8      	str	r0, [r7, #12]
    /* this cares for wraparounds */
    diff = now - timeouts_last_time;
 8009064:	4b21      	ldr	r3, [pc, #132]	; (80090ec <sys_check_timeouts+0x9c>)
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	68fa      	ldr	r2, [r7, #12]
 800906a:	1ad3      	subs	r3, r2, r3
 800906c:	617b      	str	r3, [r7, #20]
    do {
      PBUF_CHECK_FREE_OOSEQ();
 800906e:	4b20      	ldr	r3, [pc, #128]	; (80090f0 <sys_check_timeouts+0xa0>)
 8009070:	781b      	ldrb	r3, [r3, #0]
 8009072:	b2db      	uxtb	r3, r3
 8009074:	2b00      	cmp	r3, #0
 8009076:	d001      	beq.n	800907c <sys_check_timeouts+0x2c>
 8009078:	f7fa fd7c 	bl	8003b74 <pbuf_free_ooseq>
      had_one = 0;
 800907c:	2300      	movs	r3, #0
 800907e:	74fb      	strb	r3, [r7, #19]
      tmptimeout = next_timeout;
 8009080:	4b19      	ldr	r3, [pc, #100]	; (80090e8 <sys_check_timeouts+0x98>)
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	60bb      	str	r3, [r7, #8]
      if (tmptimeout && (tmptimeout->time <= diff)) {
 8009086:	68bb      	ldr	r3, [r7, #8]
 8009088:	2b00      	cmp	r3, #0
 800908a:	d026      	beq.n	80090da <sys_check_timeouts+0x8a>
 800908c:	68bb      	ldr	r3, [r7, #8]
 800908e:	685b      	ldr	r3, [r3, #4]
 8009090:	697a      	ldr	r2, [r7, #20]
 8009092:	429a      	cmp	r2, r3
 8009094:	d321      	bcc.n	80090da <sys_check_timeouts+0x8a>
        /* timeout has expired */
        had_one = 1;
 8009096:	2301      	movs	r3, #1
 8009098:	74fb      	strb	r3, [r7, #19]
        timeouts_last_time += tmptimeout->time;
 800909a:	68bb      	ldr	r3, [r7, #8]
 800909c:	685a      	ldr	r2, [r3, #4]
 800909e:	4b13      	ldr	r3, [pc, #76]	; (80090ec <sys_check_timeouts+0x9c>)
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	4413      	add	r3, r2
 80090a4:	4a11      	ldr	r2, [pc, #68]	; (80090ec <sys_check_timeouts+0x9c>)
 80090a6:	6013      	str	r3, [r2, #0]
        diff -= tmptimeout->time;
 80090a8:	68bb      	ldr	r3, [r7, #8]
 80090aa:	685b      	ldr	r3, [r3, #4]
 80090ac:	697a      	ldr	r2, [r7, #20]
 80090ae:	1ad3      	subs	r3, r2, r3
 80090b0:	617b      	str	r3, [r7, #20]
        next_timeout = tmptimeout->next;
 80090b2:	68bb      	ldr	r3, [r7, #8]
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	4a0c      	ldr	r2, [pc, #48]	; (80090e8 <sys_check_timeouts+0x98>)
 80090b8:	6013      	str	r3, [r2, #0]
        handler = tmptimeout->h;
 80090ba:	68bb      	ldr	r3, [r7, #8]
 80090bc:	689b      	ldr	r3, [r3, #8]
 80090be:	607b      	str	r3, [r7, #4]
        arg = tmptimeout->arg;
 80090c0:	68bb      	ldr	r3, [r7, #8]
 80090c2:	68db      	ldr	r3, [r3, #12]
 80090c4:	603b      	str	r3, [r7, #0]
        if (handler != NULL) {
          LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s arg=%p\n",
            tmptimeout->handler_name, arg));
        }
#endif /* LWIP_DEBUG_TIMERNAMES */
        memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 80090c6:	68b9      	ldr	r1, [r7, #8]
 80090c8:	2006      	movs	r0, #6
 80090ca:	f7fa fbb7 	bl	800383c <memp_free>
        if (handler != NULL) {
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	2b00      	cmp	r3, #0
 80090d2:	d002      	beq.n	80090da <sys_check_timeouts+0x8a>
#if !NO_SYS
          /* For LWIP_TCPIP_CORE_LOCKING, lock the core before calling the
             timeout handler function. */
          LOCK_TCPIP_CORE();
#endif /* !NO_SYS */
          handler(arg);
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	6838      	ldr	r0, [r7, #0]
 80090d8:	4798      	blx	r3
#endif /* !NO_SYS */
        }
        LWIP_TCPIP_THREAD_ALIVE();
      }
    /* repeat until all expired timers have been called */
    } while (had_one);
 80090da:	7cfb      	ldrb	r3, [r7, #19]
 80090dc:	2b00      	cmp	r3, #0
 80090de:	d1c6      	bne.n	800906e <sys_check_timeouts+0x1e>
  }
}
 80090e0:	bf00      	nop
 80090e2:	3718      	adds	r7, #24
 80090e4:	46bd      	mov	sp, r7
 80090e6:	bd80      	pop	{r7, pc}
 80090e8:	20000104 	.word	0x20000104
 80090ec:	20000108 	.word	0x20000108
 80090f0:	20006898 	.word	0x20006898

080090f4 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 80090f4:	b480      	push	{r7}
 80090f6:	af00      	add	r7, sp, #0
#if LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND)
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
#endif /* LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND) */
}
 80090f8:	bf00      	nop
 80090fa:	46bd      	mov	sp, r7
 80090fc:	bc80      	pop	{r7}
 80090fe:	4770      	bx	lr

08009100 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 8009100:	b480      	push	{r7}
 8009102:	b083      	sub	sp, #12
 8009104:	af00      	add	r7, sp, #0
  u16_t n = 0;
 8009106:	2300      	movs	r3, #0
 8009108:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 800910a:	4b17      	ldr	r3, [pc, #92]	; (8009168 <udp_new_port+0x68>)
 800910c:	881b      	ldrh	r3, [r3, #0]
 800910e:	1c5a      	adds	r2, r3, #1
 8009110:	b291      	uxth	r1, r2
 8009112:	4a15      	ldr	r2, [pc, #84]	; (8009168 <udp_new_port+0x68>)
 8009114:	8011      	strh	r1, [r2, #0]
 8009116:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800911a:	4293      	cmp	r3, r2
 800911c:	d103      	bne.n	8009126 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 800911e:	4b12      	ldr	r3, [pc, #72]	; (8009168 <udp_new_port+0x68>)
 8009120:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8009124:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8009126:	4b11      	ldr	r3, [pc, #68]	; (800916c <udp_new_port+0x6c>)
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	603b      	str	r3, [r7, #0]
 800912c:	e011      	b.n	8009152 <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 800912e:	683b      	ldr	r3, [r7, #0]
 8009130:	8a5a      	ldrh	r2, [r3, #18]
 8009132:	4b0d      	ldr	r3, [pc, #52]	; (8009168 <udp_new_port+0x68>)
 8009134:	881b      	ldrh	r3, [r3, #0]
 8009136:	429a      	cmp	r2, r3
 8009138:	d108      	bne.n	800914c <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 800913a:	88fb      	ldrh	r3, [r7, #6]
 800913c:	3301      	adds	r3, #1
 800913e:	80fb      	strh	r3, [r7, #6]
 8009140:	88fb      	ldrh	r3, [r7, #6]
 8009142:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009146:	d3e0      	bcc.n	800910a <udp_new_port+0xa>
        return 0;
 8009148:	2300      	movs	r3, #0
 800914a:	e007      	b.n	800915c <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800914c:	683b      	ldr	r3, [r7, #0]
 800914e:	68db      	ldr	r3, [r3, #12]
 8009150:	603b      	str	r3, [r7, #0]
 8009152:	683b      	ldr	r3, [r7, #0]
 8009154:	2b00      	cmp	r3, #0
 8009156:	d1ea      	bne.n	800912e <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 8009158:	4b03      	ldr	r3, [pc, #12]	; (8009168 <udp_new_port+0x68>)
 800915a:	881b      	ldrh	r3, [r3, #0]
}
 800915c:	4618      	mov	r0, r3
 800915e:	370c      	adds	r7, #12
 8009160:	46bd      	mov	sp, r7
 8009162:	bc80      	pop	{r7}
 8009164:	4770      	bx	lr
 8009166:	bf00      	nop
 8009168:	20000010 	.word	0x20000010
 800916c:	200068b8 	.word	0x200068b8

08009170 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8009170:	b480      	push	{r7}
 8009172:	b085      	sub	sp, #20
 8009174:	af00      	add	r7, sp, #0
 8009176:	60f8      	str	r0, [r7, #12]
 8009178:	60b9      	str	r1, [r7, #8]
 800917a:	4613      	mov	r3, r2
 800917c:	71fb      	strb	r3, [r7, #7]
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 800917e:	79fb      	ldrb	r3, [r7, #7]
 8009180:	2b00      	cmp	r3, #0
 8009182:	d018      	beq.n	80091b6 <udp_input_local_match+0x46>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8009184:	68fb      	ldr	r3, [r7, #12]
 8009186:	2b00      	cmp	r3, #0
 8009188:	d013      	beq.n	80091b2 <udp_input_local_match+0x42>
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	2b00      	cmp	r3, #0
 8009190:	d00f      	beq.n	80091b2 <udp_input_local_match+0x42>
          ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8009192:	4b13      	ldr	r3, [pc, #76]	; (80091e0 <udp_input_local_match+0x70>)
 8009194:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8009196:	f1b3 3fff 	cmp.w	r3, #4294967295
 800919a:	d00a      	beq.n	80091b2 <udp_input_local_match+0x42>
           ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	681a      	ldr	r2, [r3, #0]
 80091a0:	4b0f      	ldr	r3, [pc, #60]	; (80091e0 <udp_input_local_match+0x70>)
 80091a2:	695b      	ldr	r3, [r3, #20]
 80091a4:	405a      	eors	r2, r3
 80091a6:	68bb      	ldr	r3, [r7, #8]
 80091a8:	3308      	adds	r3, #8
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	4013      	ands	r3, r2
          ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	d110      	bne.n	80091d4 <udp_input_local_match+0x64>
          return 1;
 80091b2:	2301      	movs	r3, #1
 80091b4:	e00f      	b.n	80091d6 <udp_input_local_match+0x66>
        }
      }
    } else
#endif /* LWIP_IPV4 */
    /* Handle IPv4 and IPv6: all or exact match */
    if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 80091b6:	68fb      	ldr	r3, [r7, #12]
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	d009      	beq.n	80091d0 <udp_input_local_match+0x60>
 80091bc:	68fb      	ldr	r3, [r7, #12]
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	d005      	beq.n	80091d0 <udp_input_local_match+0x60>
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	681a      	ldr	r2, [r3, #0]
 80091c8:	4b05      	ldr	r3, [pc, #20]	; (80091e0 <udp_input_local_match+0x70>)
 80091ca:	695b      	ldr	r3, [r3, #20]
 80091cc:	429a      	cmp	r2, r3
 80091ce:	d101      	bne.n	80091d4 <udp_input_local_match+0x64>
      return 1;
 80091d0:	2301      	movs	r3, #1
 80091d2:	e000      	b.n	80091d6 <udp_input_local_match+0x66>
    }
  }

  return 0;
 80091d4:	2300      	movs	r3, #0
}
 80091d6:	4618      	mov	r0, r3
 80091d8:	3714      	adds	r7, #20
 80091da:	46bd      	mov	sp, r7
 80091dc:	bc80      	pop	{r7}
 80091de:	4770      	bx	lr
 80091e0:	20003350 	.word	0x20003350

080091e4 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 80091e4:	b590      	push	{r4, r7, lr}
 80091e6:	b08d      	sub	sp, #52	; 0x34
 80091e8:	af02      	add	r7, sp, #8
 80091ea:	6078      	str	r0, [r7, #4]
 80091ec:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 80091ee:	2300      	movs	r3, #0
 80091f0:	76fb      	strb	r3, [r7, #27]
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	895b      	ldrh	r3, [r3, #10]
 80091f6:	2b07      	cmp	r3, #7
 80091f8:	d803      	bhi.n	8009202 <udp_input+0x1e>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 80091fa:	6878      	ldr	r0, [r7, #4]
 80091fc:	f7fb f85c 	bl	80042b8 <pbuf_free>
    goto end;
 8009200:	e0c6      	b.n	8009390 <udp_input+0x1ac>
  }

  udphdr = (struct udp_hdr *)p->payload;
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	685b      	ldr	r3, [r3, #4]
 8009206:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8009208:	4b63      	ldr	r3, [pc, #396]	; (8009398 <udp_input+0x1b4>)
 800920a:	695b      	ldr	r3, [r3, #20]
 800920c:	4a62      	ldr	r2, [pc, #392]	; (8009398 <udp_input+0x1b4>)
 800920e:	6812      	ldr	r2, [r2, #0]
 8009210:	4611      	mov	r1, r2
 8009212:	4618      	mov	r0, r3
 8009214:	f003 fcee 	bl	800cbf4 <ip4_addr_isbroadcast_u32>
 8009218:	4603      	mov	r3, r0
 800921a:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 800921c:	697b      	ldr	r3, [r7, #20]
 800921e:	881b      	ldrh	r3, [r3, #0]
 8009220:	b29b      	uxth	r3, r3
 8009222:	4618      	mov	r0, r3
 8009224:	f7f9 ff15 	bl	8003052 <lwip_htons>
 8009228:	4603      	mov	r3, r0
 800922a:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 800922c:	697b      	ldr	r3, [r7, #20]
 800922e:	885b      	ldrh	r3, [r3, #2]
 8009230:	b29b      	uxth	r3, r3
 8009232:	4618      	mov	r0, r3
 8009234:	f7f9 ff0d 	bl	8003052 <lwip_htons>
 8009238:	4603      	mov	r3, r0
 800923a:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print(UDP_DEBUG, ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print(UDP_DEBUG, ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 800923c:	2300      	movs	r3, #0
 800923e:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 8009240:	2300      	movs	r3, #0
 8009242:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 8009244:	2300      	movs	r3, #0
 8009246:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8009248:	4b54      	ldr	r3, [pc, #336]	; (800939c <udp_input+0x1b8>)
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	627b      	str	r3, [r7, #36]	; 0x24
 800924e:	e03b      	b.n	80092c8 <udp_input+0xe4>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print(UDP_DEBUG, &pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8009250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009252:	8a5b      	ldrh	r3, [r3, #18]
 8009254:	89fa      	ldrh	r2, [r7, #14]
 8009256:	429a      	cmp	r2, r3
 8009258:	d131      	bne.n	80092be <udp_input+0xda>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 800925a:	7cfb      	ldrb	r3, [r7, #19]
 800925c:	461a      	mov	r2, r3
 800925e:	6839      	ldr	r1, [r7, #0]
 8009260:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009262:	f7ff ff85 	bl	8009170 <udp_input_local_match>
 8009266:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8009268:	2b00      	cmp	r3, #0
 800926a:	d028      	beq.n	80092be <udp_input+0xda>
      if (((pcb->flags & UDP_FLAGS_CONNECTED) == 0) &&
 800926c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800926e:	7c1b      	ldrb	r3, [r3, #16]
 8009270:	f003 0304 	and.w	r3, r3, #4
 8009274:	2b00      	cmp	r3, #0
 8009276:	d104      	bne.n	8009282 <udp_input+0x9e>
 8009278:	69fb      	ldr	r3, [r7, #28]
 800927a:	2b00      	cmp	r3, #0
 800927c:	d101      	bne.n	8009282 <udp_input+0x9e>
          /* prefer specific IPs over cath-all */
          || !ip_addr_isany(&pcb->local_ip)
#endif /* SO_REUSE */
          )) {
        /* the first unconnected matching PCB */
        uncon_pcb = pcb;
 800927e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009280:	61fb      	str	r3, [r7, #28]
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 8009282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009284:	8a9b      	ldrh	r3, [r3, #20]
 8009286:	8a3a      	ldrh	r2, [r7, #16]
 8009288:	429a      	cmp	r2, r3
 800928a:	d118      	bne.n	80092be <udp_input+0xda>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800928c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800928e:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 8009290:	2b00      	cmp	r3, #0
 8009292:	d005      	beq.n	80092a0 <udp_input+0xbc>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 8009294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009296:	685a      	ldr	r2, [r3, #4]
 8009298:	4b3f      	ldr	r3, [pc, #252]	; (8009398 <udp_input+0x1b4>)
 800929a:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 800929c:	429a      	cmp	r2, r3
 800929e:	d10e      	bne.n	80092be <udp_input+0xda>
        /* the first fully matching PCB */
        if (prev != NULL) {
 80092a0:	6a3b      	ldr	r3, [r7, #32]
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	d014      	beq.n	80092d0 <udp_input+0xec>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 80092a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092a8:	68da      	ldr	r2, [r3, #12]
 80092aa:	6a3b      	ldr	r3, [r7, #32]
 80092ac:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 80092ae:	4b3b      	ldr	r3, [pc, #236]	; (800939c <udp_input+0x1b8>)
 80092b0:	681a      	ldr	r2, [r3, #0]
 80092b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092b4:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 80092b6:	4a39      	ldr	r2, [pc, #228]	; (800939c <udp_input+0x1b8>)
 80092b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092ba:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 80092bc:	e008      	b.n	80092d0 <udp_input+0xec>
      }
    }

    prev = pcb;
 80092be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092c0:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80092c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092c4:	68db      	ldr	r3, [r3, #12]
 80092c6:	627b      	str	r3, [r7, #36]	; 0x24
 80092c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	d1c0      	bne.n	8009250 <udp_input+0x6c>
 80092ce:	e000      	b.n	80092d2 <udp_input+0xee>
        break;
 80092d0:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 80092d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	d101      	bne.n	80092dc <udp_input+0xf8>
    pcb = uncon_pcb;
 80092d8:	69fb      	ldr	r3, [r7, #28]
 80092da:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 80092dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092de:	2b00      	cmp	r3, #0
 80092e0:	d002      	beq.n	80092e8 <udp_input+0x104>
    for_us = 1;
 80092e2:	2301      	movs	r3, #1
 80092e4:	76fb      	strb	r3, [r7, #27]
 80092e6:	e00a      	b.n	80092fe <udp_input+0x11a>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 80092e8:	683b      	ldr	r3, [r7, #0]
 80092ea:	3304      	adds	r3, #4
 80092ec:	681a      	ldr	r2, [r3, #0]
 80092ee:	4b2a      	ldr	r3, [pc, #168]	; (8009398 <udp_input+0x1b4>)
 80092f0:	695b      	ldr	r3, [r3, #20]
 80092f2:	429a      	cmp	r2, r3
 80092f4:	bf0c      	ite	eq
 80092f6:	2301      	moveq	r3, #1
 80092f8:	2300      	movne	r3, #0
 80092fa:	b2db      	uxtb	r3, r3
 80092fc:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 80092fe:	7efb      	ldrb	r3, [r7, #27]
 8009300:	2b00      	cmp	r3, #0
 8009302:	d042      	beq.n	800938a <udp_input+0x1a6>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_header(p, -UDP_HLEN)) {
 8009304:	f06f 0107 	mvn.w	r1, #7
 8009308:	6878      	ldr	r0, [r7, #4]
 800930a:	f7fa ffb1 	bl	8004270 <pbuf_header>
 800930e:	4603      	mov	r3, r0
 8009310:	2b00      	cmp	r3, #0
 8009312:	d00a      	beq.n	800932a <udp_input+0x146>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_header failed\n", 0);
 8009314:	4b22      	ldr	r3, [pc, #136]	; (80093a0 <udp_input+0x1bc>)
 8009316:	f240 1255 	movw	r2, #341	; 0x155
 800931a:	4922      	ldr	r1, [pc, #136]	; (80093a4 <udp_input+0x1c0>)
 800931c:	4822      	ldr	r0, [pc, #136]	; (80093a8 <udp_input+0x1c4>)
 800931e:	f004 fb9f 	bl	800da60 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 8009322:	6878      	ldr	r0, [r7, #4]
 8009324:	f7fa ffc8 	bl	80042b8 <pbuf_free>
      goto end;
 8009328:	e032      	b.n	8009390 <udp_input+0x1ac>
    }

    if (pcb != NULL) {
 800932a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800932c:	2b00      	cmp	r3, #0
 800932e:	d012      	beq.n	8009356 <udp_input+0x172>
          pbuf_header(p, -hdrs_len);
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8009330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009332:	699b      	ldr	r3, [r3, #24]
 8009334:	2b00      	cmp	r3, #0
 8009336:	d00a      	beq.n	800934e <udp_input+0x16a>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8009338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800933a:	699c      	ldr	r4, [r3, #24]
 800933c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800933e:	69d8      	ldr	r0, [r3, #28]
 8009340:	8a3b      	ldrh	r3, [r7, #16]
 8009342:	9300      	str	r3, [sp, #0]
 8009344:	4b19      	ldr	r3, [pc, #100]	; (80093ac <udp_input+0x1c8>)
 8009346:	687a      	ldr	r2, [r7, #4]
 8009348:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800934a:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 800934c:	e021      	b.n	8009392 <udp_input+0x1ae>
        pbuf_free(p);
 800934e:	6878      	ldr	r0, [r7, #4]
 8009350:	f7fa ffb2 	bl	80042b8 <pbuf_free>
        goto end;
 8009354:	e01c      	b.n	8009390 <udp_input+0x1ac>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 8009356:	7cfb      	ldrb	r3, [r7, #19]
 8009358:	2b00      	cmp	r3, #0
 800935a:	d112      	bne.n	8009382 <udp_input+0x19e>
 800935c:	4b0e      	ldr	r3, [pc, #56]	; (8009398 <udp_input+0x1b4>)
 800935e:	695b      	ldr	r3, [r3, #20]
 8009360:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009364:	2be0      	cmp	r3, #224	; 0xe0
 8009366:	d00c      	beq.n	8009382 <udp_input+0x19e>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8009368:	4b0b      	ldr	r3, [pc, #44]	; (8009398 <udp_input+0x1b4>)
 800936a:	899b      	ldrh	r3, [r3, #12]
 800936c:	3308      	adds	r3, #8
 800936e:	b29b      	uxth	r3, r3
 8009370:	b21b      	sxth	r3, r3
 8009372:	4619      	mov	r1, r3
 8009374:	6878      	ldr	r0, [r7, #4]
 8009376:	f7fa ff8d 	bl	8004294 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 800937a:	2103      	movs	r1, #3
 800937c:	6878      	ldr	r0, [r7, #4]
 800937e:	f003 f917 	bl	800c5b0 <icmp_dest_unreach>
      pbuf_free(p);
 8009382:	6878      	ldr	r0, [r7, #4]
 8009384:	f7fa ff98 	bl	80042b8 <pbuf_free>
  return;
 8009388:	e003      	b.n	8009392 <udp_input+0x1ae>
    pbuf_free(p);
 800938a:	6878      	ldr	r0, [r7, #4]
 800938c:	f7fa ff94 	bl	80042b8 <pbuf_free>
  return;
 8009390:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 8009392:	372c      	adds	r7, #44	; 0x2c
 8009394:	46bd      	mov	sp, r7
 8009396:	bd90      	pop	{r4, r7, pc}
 8009398:	20003350 	.word	0x20003350
 800939c:	200068b8 	.word	0x200068b8
 80093a0:	08010060 	.word	0x08010060
 80093a4:	08010090 	.word	0x08010090
 80093a8:	080100a4 	.word	0x080100a4
 80093ac:	20003360 	.word	0x20003360

080093b0 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 80093b0:	b580      	push	{r7, lr}
 80093b2:	b088      	sub	sp, #32
 80093b4:	af02      	add	r7, sp, #8
 80093b6:	60f8      	str	r0, [r7, #12]
 80093b8:	60b9      	str	r1, [r7, #8]
 80093ba:	607a      	str	r2, [r7, #4]
 80093bc:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  if ((pcb == NULL) || (dst_ip == NULL) || !IP_ADDR_PCB_VERSION_MATCH(pcb, dst_ip)) {
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	d002      	beq.n	80093ca <udp_sendto_if+0x1a>
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	d102      	bne.n	80093d0 <udp_sendto_if+0x20>
    return ERR_VAL;
 80093ca:	f06f 0305 	mvn.w	r3, #5
 80093ce:	e028      	b.n	8009422 <udp_sendto_if+0x72>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
  if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	d009      	beq.n	80093ea <udp_sendto_if+0x3a>
 80093d6:	68fb      	ldr	r3, [r7, #12]
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	2b00      	cmp	r3, #0
 80093dc:	d005      	beq.n	80093ea <udp_sendto_if+0x3a>
      ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 80093de:	68fb      	ldr	r3, [r7, #12]
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80093e6:	2be0      	cmp	r3, #224	; 0xe0
 80093e8:	d103      	bne.n	80093f2 <udp_sendto_if+0x42>
    /* if the local_ip is any or multicast
     * use the outgoing network interface IP address as source address */
    src_ip = netif_ip_addr4(netif);
 80093ea:	6a3b      	ldr	r3, [r7, #32]
 80093ec:	3304      	adds	r3, #4
 80093ee:	617b      	str	r3, [r7, #20]
 80093f0:	e00b      	b.n	800940a <udp_sendto_if+0x5a>
  } else {
    /* check if UDP PCB local IP address is correct
     * this could be an old address if netif->ip_addr has changed */
    if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 80093f2:	68fb      	ldr	r3, [r7, #12]
 80093f4:	681a      	ldr	r2, [r3, #0]
 80093f6:	6a3b      	ldr	r3, [r7, #32]
 80093f8:	3304      	adds	r3, #4
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	429a      	cmp	r2, r3
 80093fe:	d002      	beq.n	8009406 <udp_sendto_if+0x56>
      /* local_ip doesn't match, drop the packet */
      return ERR_RTE;
 8009400:	f06f 0303 	mvn.w	r3, #3
 8009404:	e00d      	b.n	8009422 <udp_sendto_if+0x72>
    }
    /* use UDP PCB local IP address as source address */
    src_ip = &pcb->local_ip;
 8009406:	68fb      	ldr	r3, [r7, #12]
 8009408:	617b      	str	r3, [r7, #20]
  }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 800940a:	887a      	ldrh	r2, [r7, #2]
 800940c:	697b      	ldr	r3, [r7, #20]
 800940e:	9301      	str	r3, [sp, #4]
 8009410:	6a3b      	ldr	r3, [r7, #32]
 8009412:	9300      	str	r3, [sp, #0]
 8009414:	4613      	mov	r3, r2
 8009416:	687a      	ldr	r2, [r7, #4]
 8009418:	68b9      	ldr	r1, [r7, #8]
 800941a:	68f8      	ldr	r0, [r7, #12]
 800941c:	f000 f806 	bl	800942c <udp_sendto_if_src>
 8009420:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 8009422:	4618      	mov	r0, r3
 8009424:	3718      	adds	r7, #24
 8009426:	46bd      	mov	sp, r7
 8009428:	bd80      	pop	{r7, pc}
	...

0800942c <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 800942c:	b580      	push	{r7, lr}
 800942e:	b08c      	sub	sp, #48	; 0x30
 8009430:	af04      	add	r7, sp, #16
 8009432:	60f8      	str	r0, [r7, #12]
 8009434:	60b9      	str	r1, [r7, #8]
 8009436:	607a      	str	r2, [r7, #4]
 8009438:	807b      	strh	r3, [r7, #2]
  err_t err;
  struct pbuf *q; /* q will be sent down the stack */
  u8_t ip_proto;
  u8_t ttl;

  if ((pcb == NULL) || (dst_ip == NULL) || !IP_ADDR_PCB_VERSION_MATCH(pcb, src_ip) ||
 800943a:	68fb      	ldr	r3, [r7, #12]
 800943c:	2b00      	cmp	r3, #0
 800943e:	d002      	beq.n	8009446 <udp_sendto_if_src+0x1a>
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	2b00      	cmp	r3, #0
 8009444:	d102      	bne.n	800944c <udp_sendto_if_src+0x20>
      !IP_ADDR_PCB_VERSION_MATCH(pcb, dst_ip)) {
    return ERR_VAL;
 8009446:	f06f 0305 	mvn.w	r3, #5
 800944a:	e07e      	b.n	800954a <udp_sendto_if_src+0x11e>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	8a5b      	ldrh	r3, [r3, #18]
 8009450:	2b00      	cmp	r3, #0
 8009452:	d10f      	bne.n	8009474 <udp_sendto_if_src+0x48>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8009454:	68f9      	ldr	r1, [r7, #12]
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	8a5b      	ldrh	r3, [r3, #18]
 800945a:	461a      	mov	r2, r3
 800945c:	68f8      	ldr	r0, [r7, #12]
 800945e:	f000 f87f 	bl	8009560 <udp_bind>
 8009462:	4603      	mov	r3, r0
 8009464:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 8009466:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800946a:	2b00      	cmp	r3, #0
 800946c:	d002      	beq.n	8009474 <udp_sendto_if_src+0x48>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 800946e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8009472:	e06a      	b.n	800954a <udp_sendto_if_src+0x11e>
    }
  }

  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_header(p, UDP_HLEN)) {
 8009474:	2108      	movs	r1, #8
 8009476:	68b8      	ldr	r0, [r7, #8]
 8009478:	f7fa fefa 	bl	8004270 <pbuf_header>
 800947c:	4603      	mov	r3, r0
 800947e:	2b00      	cmp	r3, #0
 8009480:	d014      	beq.n	80094ac <udp_sendto_if_src+0x80>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 8009482:	2200      	movs	r2, #0
 8009484:	2108      	movs	r1, #8
 8009486:	2001      	movs	r0, #1
 8009488:	f7fa fba4 	bl	8003bd4 <pbuf_alloc>
 800948c:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 800948e:	69fb      	ldr	r3, [r7, #28]
 8009490:	2b00      	cmp	r3, #0
 8009492:	d102      	bne.n	800949a <udp_sendto_if_src+0x6e>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 8009494:	f04f 33ff 	mov.w	r3, #4294967295
 8009498:	e057      	b.n	800954a <udp_sendto_if_src+0x11e>
    }
    if (p->tot_len != 0) {
 800949a:	68bb      	ldr	r3, [r7, #8]
 800949c:	891b      	ldrh	r3, [r3, #8]
 800949e:	2b00      	cmp	r3, #0
 80094a0:	d006      	beq.n	80094b0 <udp_sendto_if_src+0x84>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 80094a2:	68b9      	ldr	r1, [r7, #8]
 80094a4:	69f8      	ldr	r0, [r7, #28]
 80094a6:	f7fb f829 	bl	80044fc <pbuf_chain>
 80094aa:	e001      	b.n	80094b0 <udp_sendto_if_src+0x84>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 80094ac:	68bb      	ldr	r3, [r7, #8]
 80094ae:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 80094b0:	69fb      	ldr	r3, [r7, #28]
 80094b2:	895b      	ldrh	r3, [r3, #10]
 80094b4:	2b07      	cmp	r3, #7
 80094b6:	d806      	bhi.n	80094c6 <udp_sendto_if_src+0x9a>
 80094b8:	4b26      	ldr	r3, [pc, #152]	; (8009554 <udp_sendto_if_src+0x128>)
 80094ba:	f240 22db 	movw	r2, #731	; 0x2db
 80094be:	4926      	ldr	r1, [pc, #152]	; (8009558 <udp_sendto_if_src+0x12c>)
 80094c0:	4826      	ldr	r0, [pc, #152]	; (800955c <udp_sendto_if_src+0x130>)
 80094c2:	f004 facd 	bl	800da60 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 80094c6:	69fb      	ldr	r3, [r7, #28]
 80094c8:	685b      	ldr	r3, [r3, #4]
 80094ca:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 80094cc:	68fb      	ldr	r3, [r7, #12]
 80094ce:	8a5b      	ldrh	r3, [r3, #18]
 80094d0:	4618      	mov	r0, r3
 80094d2:	f7f9 fdbe 	bl	8003052 <lwip_htons>
 80094d6:	4603      	mov	r3, r0
 80094d8:	461a      	mov	r2, r3
 80094da:	697b      	ldr	r3, [r7, #20]
 80094dc:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 80094de:	887b      	ldrh	r3, [r7, #2]
 80094e0:	4618      	mov	r0, r3
 80094e2:	f7f9 fdb6 	bl	8003052 <lwip_htons>
 80094e6:	4603      	mov	r3, r0
 80094e8:	461a      	mov	r2, r3
 80094ea:	697b      	ldr	r3, [r7, #20]
 80094ec:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 80094ee:	697b      	ldr	r3, [r7, #20]
 80094f0:	2200      	movs	r2, #0
 80094f2:	719a      	strb	r2, [r3, #6]
 80094f4:	2200      	movs	r2, #0
 80094f6:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 80094f8:	69fb      	ldr	r3, [r7, #28]
 80094fa:	891b      	ldrh	r3, [r3, #8]
 80094fc:	4618      	mov	r0, r3
 80094fe:	f7f9 fda8 	bl	8003052 <lwip_htons>
 8009502:	4603      	mov	r3, r0
 8009504:	461a      	mov	r2, r3
 8009506:	697b      	ldr	r3, [r7, #20]
 8009508:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 800950a:	2311      	movs	r3, #17
 800950c:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 800950e:	68fb      	ldr	r3, [r7, #12]
 8009510:	7a9b      	ldrb	r3, [r3, #10]
 8009512:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 8009514:	68fb      	ldr	r3, [r7, #12]
 8009516:	7a5b      	ldrb	r3, [r3, #9]
 8009518:	7cb9      	ldrb	r1, [r7, #18]
 800951a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800951c:	9202      	str	r2, [sp, #8]
 800951e:	7cfa      	ldrb	r2, [r7, #19]
 8009520:	9201      	str	r2, [sp, #4]
 8009522:	9300      	str	r3, [sp, #0]
 8009524:	460b      	mov	r3, r1
 8009526:	687a      	ldr	r2, [r7, #4]
 8009528:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800952a:	69f8      	ldr	r0, [r7, #28]
 800952c:	f003 faba 	bl	800caa4 <ip4_output_if_src>
 8009530:	4603      	mov	r3, r0
 8009532:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 8009534:	69fa      	ldr	r2, [r7, #28]
 8009536:	68bb      	ldr	r3, [r7, #8]
 8009538:	429a      	cmp	r2, r3
 800953a:	d004      	beq.n	8009546 <udp_sendto_if_src+0x11a>
    /* free the header pbuf */
    pbuf_free(q);
 800953c:	69f8      	ldr	r0, [r7, #28]
 800953e:	f7fa febb 	bl	80042b8 <pbuf_free>
    q = NULL;
 8009542:	2300      	movs	r3, #0
 8009544:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 8009546:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 800954a:	4618      	mov	r0, r3
 800954c:	3720      	adds	r7, #32
 800954e:	46bd      	mov	sp, r7
 8009550:	bd80      	pop	{r7, pc}
 8009552:	bf00      	nop
 8009554:	08010060 	.word	0x08010060
 8009558:	080100cc 	.word	0x080100cc
 800955c:	080100a4 	.word	0x080100a4

08009560 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8009560:	b580      	push	{r7, lr}
 8009562:	b086      	sub	sp, #24
 8009564:	af00      	add	r7, sp, #0
 8009566:	60f8      	str	r0, [r7, #12]
 8009568:	60b9      	str	r1, [r7, #8]
 800956a:	4613      	mov	r3, r2
 800956c:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;
  u8_t rebind;

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800956e:	68bb      	ldr	r3, [r7, #8]
 8009570:	2b00      	cmp	r3, #0
 8009572:	d101      	bne.n	8009578 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 8009574:	4b30      	ldr	r3, [pc, #192]	; (8009638 <udp_bind+0xd8>)
 8009576:	60bb      	str	r3, [r7, #8]
  }
#endif /* LWIP_IPV4 */

  /* still need to check for ipaddr == NULL in IPv6 only case */
  if ((pcb == NULL) || (ipaddr == NULL)) {
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	2b00      	cmp	r3, #0
 800957c:	d002      	beq.n	8009584 <udp_bind+0x24>
 800957e:	68bb      	ldr	r3, [r7, #8]
 8009580:	2b00      	cmp	r3, #0
 8009582:	d102      	bne.n	800958a <udp_bind+0x2a>
    return ERR_VAL;
 8009584:	f06f 0305 	mvn.w	r3, #5
 8009588:	e052      	b.n	8009630 <udp_bind+0xd0>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 800958a:	2300      	movs	r3, #0
 800958c:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800958e:	4b2b      	ldr	r3, [pc, #172]	; (800963c <udp_bind+0xdc>)
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	617b      	str	r3, [r7, #20]
 8009594:	e009      	b.n	80095aa <udp_bind+0x4a>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 8009596:	68fa      	ldr	r2, [r7, #12]
 8009598:	697b      	ldr	r3, [r7, #20]
 800959a:	429a      	cmp	r2, r3
 800959c:	d102      	bne.n	80095a4 <udp_bind+0x44>
      rebind = 1;
 800959e:	2301      	movs	r3, #1
 80095a0:	74fb      	strb	r3, [r7, #19]
      break;
 80095a2:	e005      	b.n	80095b0 <udp_bind+0x50>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80095a4:	697b      	ldr	r3, [r7, #20]
 80095a6:	68db      	ldr	r3, [r3, #12]
 80095a8:	617b      	str	r3, [r7, #20]
 80095aa:	697b      	ldr	r3, [r7, #20]
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	d1f2      	bne.n	8009596 <udp_bind+0x36>
    }
  }

  /* no port specified? */
  if (port == 0) {
 80095b0:	88fb      	ldrh	r3, [r7, #6]
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	d109      	bne.n	80095ca <udp_bind+0x6a>
    port = udp_new_port();
 80095b6:	f7ff fda3 	bl	8009100 <udp_new_port>
 80095ba:	4603      	mov	r3, r0
 80095bc:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 80095be:	88fb      	ldrh	r3, [r7, #6]
 80095c0:	2b00      	cmp	r3, #0
 80095c2:	d11e      	bne.n	8009602 <udp_bind+0xa2>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 80095c4:	f06f 0307 	mvn.w	r3, #7
 80095c8:	e032      	b.n	8009630 <udp_bind+0xd0>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80095ca:	4b1c      	ldr	r3, [pc, #112]	; (800963c <udp_bind+0xdc>)
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	617b      	str	r3, [r7, #20]
 80095d0:	e014      	b.n	80095fc <udp_bind+0x9c>
      if (pcb != ipcb) {
 80095d2:	68fa      	ldr	r2, [r7, #12]
 80095d4:	697b      	ldr	r3, [r7, #20]
 80095d6:	429a      	cmp	r2, r3
 80095d8:	d00d      	beq.n	80095f6 <udp_bind+0x96>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 80095da:	697b      	ldr	r3, [r7, #20]
 80095dc:	8a5b      	ldrh	r3, [r3, #18]
 80095de:	88fa      	ldrh	r2, [r7, #6]
 80095e0:	429a      	cmp	r2, r3
 80095e2:	d108      	bne.n	80095f6 <udp_bind+0x96>
              /* IP address matches? */
              ip_addr_cmp(&ipcb->local_ip, ipaddr)) {
 80095e4:	697b      	ldr	r3, [r7, #20]
 80095e6:	681a      	ldr	r2, [r3, #0]
 80095e8:	68bb      	ldr	r3, [r7, #8]
 80095ea:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 80095ec:	429a      	cmp	r2, r3
 80095ee:	d102      	bne.n	80095f6 <udp_bind+0x96>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 80095f0:	f06f 0307 	mvn.w	r3, #7
 80095f4:	e01c      	b.n	8009630 <udp_bind+0xd0>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80095f6:	697b      	ldr	r3, [r7, #20]
 80095f8:	68db      	ldr	r3, [r3, #12]
 80095fa:	617b      	str	r3, [r7, #20]
 80095fc:	697b      	ldr	r3, [r7, #20]
 80095fe:	2b00      	cmp	r3, #0
 8009600:	d1e7      	bne.n	80095d2 <udp_bind+0x72>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 8009602:	68bb      	ldr	r3, [r7, #8]
 8009604:	2b00      	cmp	r3, #0
 8009606:	d002      	beq.n	800960e <udp_bind+0xae>
 8009608:	68bb      	ldr	r3, [r7, #8]
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	e000      	b.n	8009610 <udp_bind+0xb0>
 800960e:	2300      	movs	r3, #0
 8009610:	68fa      	ldr	r2, [r7, #12]
 8009612:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 8009614:	68fb      	ldr	r3, [r7, #12]
 8009616:	88fa      	ldrh	r2, [r7, #6]
 8009618:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 800961a:	7cfb      	ldrb	r3, [r7, #19]
 800961c:	2b00      	cmp	r3, #0
 800961e:	d106      	bne.n	800962e <udp_bind+0xce>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 8009620:	4b06      	ldr	r3, [pc, #24]	; (800963c <udp_bind+0xdc>)
 8009622:	681a      	ldr	r2, [r3, #0]
 8009624:	68fb      	ldr	r3, [r7, #12]
 8009626:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 8009628:	4a04      	ldr	r2, [pc, #16]	; (800963c <udp_bind+0xdc>)
 800962a:	68fb      	ldr	r3, [r7, #12]
 800962c:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, &pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 800962e:	2300      	movs	r3, #0
}
 8009630:	4618      	mov	r0, r3
 8009632:	3718      	adds	r7, #24
 8009634:	46bd      	mov	sp, r7
 8009636:	bd80      	pop	{r7, pc}
 8009638:	08010d68 	.word	0x08010d68
 800963c:	200068b8 	.word	0x200068b8

08009640 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8009640:	b580      	push	{r7, lr}
 8009642:	b086      	sub	sp, #24
 8009644:	af00      	add	r7, sp, #0
 8009646:	60f8      	str	r0, [r7, #12]
 8009648:	60b9      	str	r1, [r7, #8]
 800964a:	4613      	mov	r3, r2
 800964c:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  if ((pcb == NULL) || (ipaddr == NULL)) {
 800964e:	68fb      	ldr	r3, [r7, #12]
 8009650:	2b00      	cmp	r3, #0
 8009652:	d002      	beq.n	800965a <udp_connect+0x1a>
 8009654:	68bb      	ldr	r3, [r7, #8]
 8009656:	2b00      	cmp	r3, #0
 8009658:	d102      	bne.n	8009660 <udp_connect+0x20>
    return ERR_VAL;
 800965a:	f06f 0305 	mvn.w	r3, #5
 800965e:	e03e      	b.n	80096de <udp_connect+0x9e>
  }

  if (pcb->local_port == 0) {
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	8a5b      	ldrh	r3, [r3, #18]
 8009664:	2b00      	cmp	r3, #0
 8009666:	d10f      	bne.n	8009688 <udp_connect+0x48>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8009668:	68f9      	ldr	r1, [r7, #12]
 800966a:	68fb      	ldr	r3, [r7, #12]
 800966c:	8a5b      	ldrh	r3, [r3, #18]
 800966e:	461a      	mov	r2, r3
 8009670:	68f8      	ldr	r0, [r7, #12]
 8009672:	f7ff ff75 	bl	8009560 <udp_bind>
 8009676:	4603      	mov	r3, r0
 8009678:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 800967a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800967e:	2b00      	cmp	r3, #0
 8009680:	d002      	beq.n	8009688 <udp_connect+0x48>
      return err;
 8009682:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8009686:	e02a      	b.n	80096de <udp_connect+0x9e>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 8009688:	68bb      	ldr	r3, [r7, #8]
 800968a:	2b00      	cmp	r3, #0
 800968c:	d002      	beq.n	8009694 <udp_connect+0x54>
 800968e:	68bb      	ldr	r3, [r7, #8]
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	e000      	b.n	8009696 <udp_connect+0x56>
 8009694:	2300      	movs	r3, #0
 8009696:	68fa      	ldr	r2, [r7, #12]
 8009698:	6053      	str	r3, [r2, #4]
  pcb->remote_port = port;
 800969a:	68fb      	ldr	r3, [r7, #12]
 800969c:	88fa      	ldrh	r2, [r7, #6]
 800969e:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 80096a0:	68fb      	ldr	r3, [r7, #12]
 80096a2:	7c1b      	ldrb	r3, [r3, #16]
 80096a4:	f043 0304 	orr.w	r3, r3, #4
 80096a8:	b2da      	uxtb	r2, r3
 80096aa:	68fb      	ldr	r3, [r7, #12]
 80096ac:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                      &pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80096ae:	4b0e      	ldr	r3, [pc, #56]	; (80096e8 <udp_connect+0xa8>)
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	617b      	str	r3, [r7, #20]
 80096b4:	e008      	b.n	80096c8 <udp_connect+0x88>
    if (pcb == ipcb) {
 80096b6:	68fa      	ldr	r2, [r7, #12]
 80096b8:	697b      	ldr	r3, [r7, #20]
 80096ba:	429a      	cmp	r2, r3
 80096bc:	d101      	bne.n	80096c2 <udp_connect+0x82>
      /* already on the list, just return */
      return ERR_OK;
 80096be:	2300      	movs	r3, #0
 80096c0:	e00d      	b.n	80096de <udp_connect+0x9e>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80096c2:	697b      	ldr	r3, [r7, #20]
 80096c4:	68db      	ldr	r3, [r3, #12]
 80096c6:	617b      	str	r3, [r7, #20]
 80096c8:	697b      	ldr	r3, [r7, #20]
 80096ca:	2b00      	cmp	r3, #0
 80096cc:	d1f3      	bne.n	80096b6 <udp_connect+0x76>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 80096ce:	4b06      	ldr	r3, [pc, #24]	; (80096e8 <udp_connect+0xa8>)
 80096d0:	681a      	ldr	r2, [r3, #0]
 80096d2:	68fb      	ldr	r3, [r7, #12]
 80096d4:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 80096d6:	4a04      	ldr	r2, [pc, #16]	; (80096e8 <udp_connect+0xa8>)
 80096d8:	68fb      	ldr	r3, [r7, #12]
 80096da:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 80096dc:	2300      	movs	r3, #0
}
 80096de:	4618      	mov	r0, r3
 80096e0:	3718      	adds	r7, #24
 80096e2:	46bd      	mov	sp, r7
 80096e4:	bd80      	pop	{r7, pc}
 80096e6:	bf00      	nop
 80096e8:	200068b8 	.word	0x200068b8

080096ec <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 80096ec:	b480      	push	{r7}
 80096ee:	b085      	sub	sp, #20
 80096f0:	af00      	add	r7, sp, #0
 80096f2:	60f8      	str	r0, [r7, #12]
 80096f4:	60b9      	str	r1, [r7, #8]
 80096f6:	607a      	str	r2, [r7, #4]
  /* remember recv() callback and user data */
  pcb->recv = recv;
 80096f8:	68fb      	ldr	r3, [r7, #12]
 80096fa:	68ba      	ldr	r2, [r7, #8]
 80096fc:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 80096fe:	68fb      	ldr	r3, [r7, #12]
 8009700:	687a      	ldr	r2, [r7, #4]
 8009702:	61da      	str	r2, [r3, #28]
}
 8009704:	bf00      	nop
 8009706:	3714      	adds	r7, #20
 8009708:	46bd      	mov	sp, r7
 800970a:	bc80      	pop	{r7}
 800970c:	4770      	bx	lr
	...

08009710 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 8009710:	b580      	push	{r7, lr}
 8009712:	b084      	sub	sp, #16
 8009714:	af00      	add	r7, sp, #0
 8009716:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 8009718:	4b15      	ldr	r3, [pc, #84]	; (8009770 <udp_remove+0x60>)
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	687a      	ldr	r2, [r7, #4]
 800971e:	429a      	cmp	r2, r3
 8009720:	d105      	bne.n	800972e <udp_remove+0x1e>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 8009722:	4b13      	ldr	r3, [pc, #76]	; (8009770 <udp_remove+0x60>)
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	68db      	ldr	r3, [r3, #12]
 8009728:	4a11      	ldr	r2, [pc, #68]	; (8009770 <udp_remove+0x60>)
 800972a:	6013      	str	r3, [r2, #0]
 800972c:	e017      	b.n	800975e <udp_remove+0x4e>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 800972e:	4b10      	ldr	r3, [pc, #64]	; (8009770 <udp_remove+0x60>)
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	60fb      	str	r3, [r7, #12]
 8009734:	e010      	b.n	8009758 <udp_remove+0x48>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 8009736:	68fb      	ldr	r3, [r7, #12]
 8009738:	68db      	ldr	r3, [r3, #12]
 800973a:	2b00      	cmp	r3, #0
 800973c:	d009      	beq.n	8009752 <udp_remove+0x42>
 800973e:	68fb      	ldr	r3, [r7, #12]
 8009740:	68db      	ldr	r3, [r3, #12]
 8009742:	687a      	ldr	r2, [r7, #4]
 8009744:	429a      	cmp	r2, r3
 8009746:	d104      	bne.n	8009752 <udp_remove+0x42>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	68da      	ldr	r2, [r3, #12]
 800974c:	68fb      	ldr	r3, [r7, #12]
 800974e:	60da      	str	r2, [r3, #12]
        break;
 8009750:	e005      	b.n	800975e <udp_remove+0x4e>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8009752:	68fb      	ldr	r3, [r7, #12]
 8009754:	68db      	ldr	r3, [r3, #12]
 8009756:	60fb      	str	r3, [r7, #12]
 8009758:	68fb      	ldr	r3, [r7, #12]
 800975a:	2b00      	cmp	r3, #0
 800975c:	d1eb      	bne.n	8009736 <udp_remove+0x26>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 800975e:	6879      	ldr	r1, [r7, #4]
 8009760:	2000      	movs	r0, #0
 8009762:	f7fa f86b 	bl	800383c <memp_free>
}
 8009766:	bf00      	nop
 8009768:	3710      	adds	r7, #16
 800976a:	46bd      	mov	sp, r7
 800976c:	bd80      	pop	{r7, pc}
 800976e:	bf00      	nop
 8009770:	200068b8 	.word	0x200068b8

08009774 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 8009774:	b580      	push	{r7, lr}
 8009776:	b082      	sub	sp, #8
 8009778:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;
  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 800977a:	2000      	movs	r0, #0
 800977c:	f7fa f812 	bl	80037a4 <memp_malloc>
 8009780:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	2b00      	cmp	r3, #0
 8009786:	d007      	beq.n	8009798 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 8009788:	2220      	movs	r2, #32
 800978a:	2100      	movs	r1, #0
 800978c:	6878      	ldr	r0, [r7, #4]
 800978e:	f004 f95f 	bl	800da50 <memset>
    pcb->ttl = UDP_TTL;
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	22ff      	movs	r2, #255	; 0xff
 8009796:	729a      	strb	r2, [r3, #10]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 8009798:	687b      	ldr	r3, [r7, #4]
}
 800979a:	4618      	mov	r0, r3
 800979c:	3708      	adds	r7, #8
 800979e:	46bd      	mov	sp, r7
 80097a0:	bd80      	pop	{r7, pc}
	...

080097a4 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t* old_addr, const ip_addr_t* new_addr)
{
 80097a4:	b480      	push	{r7}
 80097a6:	b085      	sub	sp, #20
 80097a8:	af00      	add	r7, sp, #0
 80097aa:	6078      	str	r0, [r7, #4]
 80097ac:	6039      	str	r1, [r7, #0]
  struct udp_pcb* upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	d01e      	beq.n	80097f2 <udp_netif_ip_addr_changed+0x4e>
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	d01a      	beq.n	80097f2 <udp_netif_ip_addr_changed+0x4e>
 80097bc:	683b      	ldr	r3, [r7, #0]
 80097be:	2b00      	cmp	r3, #0
 80097c0:	d017      	beq.n	80097f2 <udp_netif_ip_addr_changed+0x4e>
 80097c2:	683b      	ldr	r3, [r7, #0]
 80097c4:	681b      	ldr	r3, [r3, #0]
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	d013      	beq.n	80097f2 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 80097ca:	4b0c      	ldr	r3, [pc, #48]	; (80097fc <udp_netif_ip_addr_changed+0x58>)
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	60fb      	str	r3, [r7, #12]
 80097d0:	e00c      	b.n	80097ec <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 80097d2:	68fb      	ldr	r3, [r7, #12]
 80097d4:	681a      	ldr	r2, [r3, #0]
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	429a      	cmp	r2, r3
 80097dc:	d103      	bne.n	80097e6 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 80097de:	683b      	ldr	r3, [r7, #0]
 80097e0:	681a      	ldr	r2, [r3, #0]
 80097e2:	68fb      	ldr	r3, [r7, #12]
 80097e4:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 80097e6:	68fb      	ldr	r3, [r7, #12]
 80097e8:	68db      	ldr	r3, [r3, #12]
 80097ea:	60fb      	str	r3, [r7, #12]
 80097ec:	68fb      	ldr	r3, [r7, #12]
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	d1ef      	bne.n	80097d2 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 80097f2:	bf00      	nop
 80097f4:	3714      	adds	r7, #20
 80097f6:	46bd      	mov	sp, r7
 80097f8:	bc80      	pop	{r7}
 80097fa:	4770      	bx	lr
 80097fc:	200068b8 	.word	0x200068b8

08009800 <dhcp_inc_pcb_refcount>:
static void dhcp_option_trailer(struct dhcp *dhcp);

/** Ensure DHCP PCB is allocated and bound */
static err_t
dhcp_inc_pcb_refcount(void)
{
 8009800:	b580      	push	{r7, lr}
 8009802:	af00      	add	r7, sp, #0
  if (dhcp_pcb_refcount == 0) {
 8009804:	4b20      	ldr	r3, [pc, #128]	; (8009888 <dhcp_inc_pcb_refcount+0x88>)
 8009806:	781b      	ldrb	r3, [r3, #0]
 8009808:	2b00      	cmp	r3, #0
 800980a:	d133      	bne.n	8009874 <dhcp_inc_pcb_refcount+0x74>
    LWIP_ASSERT("dhcp_inc_pcb_refcount(): memory leak", dhcp_pcb == NULL);
 800980c:	4b1f      	ldr	r3, [pc, #124]	; (800988c <dhcp_inc_pcb_refcount+0x8c>)
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	2b00      	cmp	r3, #0
 8009812:	d005      	beq.n	8009820 <dhcp_inc_pcb_refcount+0x20>
 8009814:	4b1e      	ldr	r3, [pc, #120]	; (8009890 <dhcp_inc_pcb_refcount+0x90>)
 8009816:	22d9      	movs	r2, #217	; 0xd9
 8009818:	491e      	ldr	r1, [pc, #120]	; (8009894 <dhcp_inc_pcb_refcount+0x94>)
 800981a:	481f      	ldr	r0, [pc, #124]	; (8009898 <dhcp_inc_pcb_refcount+0x98>)
 800981c:	f004 f920 	bl	800da60 <iprintf>

    /* allocate UDP PCB */
    dhcp_pcb = udp_new();
 8009820:	f7ff ffa8 	bl	8009774 <udp_new>
 8009824:	4603      	mov	r3, r0
 8009826:	4a19      	ldr	r2, [pc, #100]	; (800988c <dhcp_inc_pcb_refcount+0x8c>)
 8009828:	6013      	str	r3, [r2, #0]

    if (dhcp_pcb == NULL) {
 800982a:	4b18      	ldr	r3, [pc, #96]	; (800988c <dhcp_inc_pcb_refcount+0x8c>)
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	2b00      	cmp	r3, #0
 8009830:	d102      	bne.n	8009838 <dhcp_inc_pcb_refcount+0x38>
      return ERR_MEM;
 8009832:	f04f 33ff 	mov.w	r3, #4294967295
 8009836:	e024      	b.n	8009882 <dhcp_inc_pcb_refcount+0x82>
    }

    ip_set_option(dhcp_pcb, SOF_BROADCAST);
 8009838:	4b14      	ldr	r3, [pc, #80]	; (800988c <dhcp_inc_pcb_refcount+0x8c>)
 800983a:	681b      	ldr	r3, [r3, #0]
 800983c:	7a1a      	ldrb	r2, [r3, #8]
 800983e:	4b13      	ldr	r3, [pc, #76]	; (800988c <dhcp_inc_pcb_refcount+0x8c>)
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	f042 0220 	orr.w	r2, r2, #32
 8009846:	b2d2      	uxtb	r2, r2
 8009848:	721a      	strb	r2, [r3, #8]

    /* set up local and remote port for the pcb -> listen on all interfaces on all src/dest IPs */
    udp_bind(dhcp_pcb, IP4_ADDR_ANY, DHCP_CLIENT_PORT);
 800984a:	4b10      	ldr	r3, [pc, #64]	; (800988c <dhcp_inc_pcb_refcount+0x8c>)
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	2244      	movs	r2, #68	; 0x44
 8009850:	4912      	ldr	r1, [pc, #72]	; (800989c <dhcp_inc_pcb_refcount+0x9c>)
 8009852:	4618      	mov	r0, r3
 8009854:	f7ff fe84 	bl	8009560 <udp_bind>
    udp_connect(dhcp_pcb, IP4_ADDR_ANY, DHCP_SERVER_PORT);
 8009858:	4b0c      	ldr	r3, [pc, #48]	; (800988c <dhcp_inc_pcb_refcount+0x8c>)
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	2243      	movs	r2, #67	; 0x43
 800985e:	490f      	ldr	r1, [pc, #60]	; (800989c <dhcp_inc_pcb_refcount+0x9c>)
 8009860:	4618      	mov	r0, r3
 8009862:	f7ff feed 	bl	8009640 <udp_connect>
    udp_recv(dhcp_pcb, dhcp_recv, NULL);
 8009866:	4b09      	ldr	r3, [pc, #36]	; (800988c <dhcp_inc_pcb_refcount+0x8c>)
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	2200      	movs	r2, #0
 800986c:	490c      	ldr	r1, [pc, #48]	; (80098a0 <dhcp_inc_pcb_refcount+0xa0>)
 800986e:	4618      	mov	r0, r3
 8009870:	f7ff ff3c 	bl	80096ec <udp_recv>
  }

  dhcp_pcb_refcount++;
 8009874:	4b04      	ldr	r3, [pc, #16]	; (8009888 <dhcp_inc_pcb_refcount+0x88>)
 8009876:	781b      	ldrb	r3, [r3, #0]
 8009878:	3301      	adds	r3, #1
 800987a:	b2da      	uxtb	r2, r3
 800987c:	4b02      	ldr	r3, [pc, #8]	; (8009888 <dhcp_inc_pcb_refcount+0x88>)
 800987e:	701a      	strb	r2, [r3, #0]

  return ERR_OK;
 8009880:	2300      	movs	r3, #0
}
 8009882:	4618      	mov	r0, r3
 8009884:	bd80      	pop	{r7, pc}
 8009886:	bf00      	nop
 8009888:	20000114 	.word	0x20000114
 800988c:	20000110 	.word	0x20000110
 8009890:	080100fc 	.word	0x080100fc
 8009894:	08010134 	.word	0x08010134
 8009898:	0801015c 	.word	0x0801015c
 800989c:	08010d68 	.word	0x08010d68
 80098a0:	0800af5d 	.word	0x0800af5d

080098a4 <dhcp_dec_pcb_refcount>:

/** Free DHCP PCB if the last netif stops using it */
static void
dhcp_dec_pcb_refcount(void)
{
 80098a4:	b580      	push	{r7, lr}
 80098a6:	af00      	add	r7, sp, #0
  LWIP_ASSERT("dhcp_pcb_refcount(): refcount error", (dhcp_pcb_refcount > 0));
 80098a8:	4b0e      	ldr	r3, [pc, #56]	; (80098e4 <dhcp_dec_pcb_refcount+0x40>)
 80098aa:	781b      	ldrb	r3, [r3, #0]
 80098ac:	2b00      	cmp	r3, #0
 80098ae:	d105      	bne.n	80098bc <dhcp_dec_pcb_refcount+0x18>
 80098b0:	4b0d      	ldr	r3, [pc, #52]	; (80098e8 <dhcp_dec_pcb_refcount+0x44>)
 80098b2:	22f3      	movs	r2, #243	; 0xf3
 80098b4:	490d      	ldr	r1, [pc, #52]	; (80098ec <dhcp_dec_pcb_refcount+0x48>)
 80098b6:	480e      	ldr	r0, [pc, #56]	; (80098f0 <dhcp_dec_pcb_refcount+0x4c>)
 80098b8:	f004 f8d2 	bl	800da60 <iprintf>
  dhcp_pcb_refcount--;
 80098bc:	4b09      	ldr	r3, [pc, #36]	; (80098e4 <dhcp_dec_pcb_refcount+0x40>)
 80098be:	781b      	ldrb	r3, [r3, #0]
 80098c0:	3b01      	subs	r3, #1
 80098c2:	b2da      	uxtb	r2, r3
 80098c4:	4b07      	ldr	r3, [pc, #28]	; (80098e4 <dhcp_dec_pcb_refcount+0x40>)
 80098c6:	701a      	strb	r2, [r3, #0]

  if (dhcp_pcb_refcount == 0) {
 80098c8:	4b06      	ldr	r3, [pc, #24]	; (80098e4 <dhcp_dec_pcb_refcount+0x40>)
 80098ca:	781b      	ldrb	r3, [r3, #0]
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	d107      	bne.n	80098e0 <dhcp_dec_pcb_refcount+0x3c>
    udp_remove(dhcp_pcb);
 80098d0:	4b08      	ldr	r3, [pc, #32]	; (80098f4 <dhcp_dec_pcb_refcount+0x50>)
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	4618      	mov	r0, r3
 80098d6:	f7ff ff1b 	bl	8009710 <udp_remove>
    dhcp_pcb = NULL;
 80098da:	4b06      	ldr	r3, [pc, #24]	; (80098f4 <dhcp_dec_pcb_refcount+0x50>)
 80098dc:	2200      	movs	r2, #0
 80098de:	601a      	str	r2, [r3, #0]
  }
}
 80098e0:	bf00      	nop
 80098e2:	bd80      	pop	{r7, pc}
 80098e4:	20000114 	.word	0x20000114
 80098e8:	080100fc 	.word	0x080100fc
 80098ec:	08010184 	.word	0x08010184
 80098f0:	0801015c 	.word	0x0801015c
 80098f4:	20000110 	.word	0x20000110

080098f8 <dhcp_handle_nak>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_nak(struct netif *netif)
{
 80098f8:	b580      	push	{r7, lr}
 80098fa:	b084      	sub	sp, #16
 80098fc:	af00      	add	r7, sp, #0
 80098fe:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009904:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_nak(netif=%p) %c%c%"U16_F"\n",
    (void*)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* Change to a defined state - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 8009906:	210c      	movs	r1, #12
 8009908:	68f8      	ldr	r0, [r7, #12]
 800990a:	f000 ff85 	bl	800a818 <dhcp_set_state>
  /* remove IP address from interface (must no longer be used, as per RFC2131) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 800990e:	4b06      	ldr	r3, [pc, #24]	; (8009928 <dhcp_handle_nak+0x30>)
 8009910:	4a05      	ldr	r2, [pc, #20]	; (8009928 <dhcp_handle_nak+0x30>)
 8009912:	4905      	ldr	r1, [pc, #20]	; (8009928 <dhcp_handle_nak+0x30>)
 8009914:	6878      	ldr	r0, [r7, #4]
 8009916:	f7fa f81f 	bl	8003958 <netif_set_addr>
  /* We can immediately restart discovery */
  dhcp_discover(netif);
 800991a:	6878      	ldr	r0, [r7, #4]
 800991c:	f000 fbb6 	bl	800a08c <dhcp_discover>
}
 8009920:	bf00      	nop
 8009922:	3710      	adds	r7, #16
 8009924:	46bd      	mov	sp, r7
 8009926:	bd80      	pop	{r7, pc}
 8009928:	08010d68 	.word	0x08010d68

0800992c <dhcp_check>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_check(struct netif *netif)
{
 800992c:	b580      	push	{r7, lr}
 800992e:	b084      	sub	sp, #16
 8009930:	af00      	add	r7, sp, #0
 8009932:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009938:	60fb      	str	r3, [r7, #12]
  err_t result;
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_check(netif=%p) %c%c\n", (void *)netif, (s16_t)netif->name[0],
    (s16_t)netif->name[1]));
  dhcp_set_state(dhcp, DHCP_STATE_CHECKING);
 800993a:	2108      	movs	r1, #8
 800993c:	68f8      	ldr	r0, [r7, #12]
 800993e:	f000 ff6b 	bl	800a818 <dhcp_set_state>
  /* create an ARP query for the offered IP address, expecting that no host
     responds, as the IP address should not be in use. */
  result = etharp_query(netif, &dhcp->offered_ip_addr, NULL);
 8009942:	68fb      	ldr	r3, [r7, #12]
 8009944:	3328      	adds	r3, #40	; 0x28
 8009946:	2200      	movs	r2, #0
 8009948:	4619      	mov	r1, r3
 800994a:	6878      	ldr	r0, [r7, #4]
 800994c:	f002 fb22 	bl	800bf94 <etharp_query>
 8009950:	4603      	mov	r3, r0
 8009952:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_check: could not perform ARP query\n"));
  }
  if (dhcp->tries < 255) {
 8009954:	68fb      	ldr	r3, [r7, #12]
 8009956:	7a9b      	ldrb	r3, [r3, #10]
 8009958:	2bff      	cmp	r3, #255	; 0xff
 800995a:	d005      	beq.n	8009968 <dhcp_check+0x3c>
    dhcp->tries++;
 800995c:	68fb      	ldr	r3, [r7, #12]
 800995e:	7a9b      	ldrb	r3, [r3, #10]
 8009960:	3301      	adds	r3, #1
 8009962:	b2da      	uxtb	r2, r3
 8009964:	68fb      	ldr	r3, [r7, #12]
 8009966:	729a      	strb	r2, [r3, #10]
  }
  msecs = 500;
 8009968:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800996c:	813b      	strh	r3, [r7, #8]
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 800996e:	893b      	ldrh	r3, [r7, #8]
 8009970:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8009974:	4a06      	ldr	r2, [pc, #24]	; (8009990 <dhcp_check+0x64>)
 8009976:	fb82 1203 	smull	r1, r2, r2, r3
 800997a:	1152      	asrs	r2, r2, #5
 800997c:	17db      	asrs	r3, r3, #31
 800997e:	1ad3      	subs	r3, r2, r3
 8009980:	b29a      	uxth	r2, r3
 8009982:	68fb      	ldr	r3, [r7, #12]
 8009984:	82da      	strh	r2, [r3, #22]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_check(): set request timeout %"U16_F" msecs\n", msecs));
}
 8009986:	bf00      	nop
 8009988:	3710      	adds	r7, #16
 800998a:	46bd      	mov	sp, r7
 800998c:	bd80      	pop	{r7, pc}
 800998e:	bf00      	nop
 8009990:	10624dd3 	.word	0x10624dd3

08009994 <dhcp_handle_offer>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_offer(struct netif *netif)
{
 8009994:	b580      	push	{r7, lr}
 8009996:	b084      	sub	sp, #16
 8009998:	af00      	add	r7, sp, #0
 800999a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099a0:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_offer(netif=%p) %c%c%"U16_F"\n",
    (void*)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* obtain the server address */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SERVER_ID)) {
 80099a2:	4b0c      	ldr	r3, [pc, #48]	; (80099d4 <dhcp_handle_offer+0x40>)
 80099a4:	789b      	ldrb	r3, [r3, #2]
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	d00f      	beq.n	80099ca <dhcp_handle_offer+0x36>
    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 80099aa:	4b0b      	ldr	r3, [pc, #44]	; (80099d8 <dhcp_handle_offer+0x44>)
 80099ac:	689b      	ldr	r3, [r3, #8]
 80099ae:	4618      	mov	r0, r3
 80099b0:	f7f9 fb5c 	bl	800306c <lwip_htonl>
 80099b4:	4602      	mov	r2, r0
 80099b6:	68fb      	ldr	r3, [r7, #12]
 80099b8:	625a      	str	r2, [r3, #36]	; 0x24
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): server 0x%08"X32_F"\n",
      ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
    /* remember offered address */
    ip4_addr_copy(dhcp->offered_ip_addr, dhcp->msg_in->yiaddr);
 80099ba:	68fb      	ldr	r3, [r7, #12]
 80099bc:	685b      	ldr	r3, [r3, #4]
 80099be:	691a      	ldr	r2, [r3, #16]
 80099c0:	68fb      	ldr	r3, [r7, #12]
 80099c2:	629a      	str	r2, [r3, #40]	; 0x28
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): offer for 0x%08"X32_F"\n",
      ip4_addr_get_u32(&dhcp->offered_ip_addr)));

    dhcp_select(netif);
 80099c4:	6878      	ldr	r0, [r7, #4]
 80099c6:	f000 f809 	bl	80099dc <dhcp_select>
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
      ("dhcp_handle_offer(netif=%p) did not get server ID!\n", (void*)netif));
  }
}
 80099ca:	bf00      	nop
 80099cc:	3710      	adds	r7, #16
 80099ce:	46bd      	mov	sp, r7
 80099d0:	bd80      	pop	{r7, pc}
 80099d2:	bf00      	nop
 80099d4:	200068bc 	.word	0x200068bc
 80099d8:	200068c4 	.word	0x200068c4

080099dc <dhcp_select>:
 * @param netif the netif under DHCP control
 * @return lwIP specific error (see error.h)
 */
static err_t
dhcp_select(struct netif *netif)
{
 80099dc:	b580      	push	{r7, lr}
 80099de:	b088      	sub	sp, #32
 80099e0:	af02      	add	r7, sp, #8
 80099e2:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099e8:	613b      	str	r3, [r7, #16]
  err_t result;
  u16_t msecs;
  u8_t i;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_select(netif=%p) %c%c%"U16_F"\n", (void*)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  dhcp_set_state(dhcp, DHCP_STATE_REQUESTING);
 80099ea:	2101      	movs	r1, #1
 80099ec:	6938      	ldr	r0, [r7, #16]
 80099ee:	f000 ff13 	bl	800a818 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  result = dhcp_create_msg(netif, dhcp, DHCP_REQUEST);
 80099f2:	2203      	movs	r2, #3
 80099f4:	6939      	ldr	r1, [r7, #16]
 80099f6:	6878      	ldr	r0, [r7, #4]
 80099f8:	f001 fb96 	bl	800b128 <dhcp_create_msg>
 80099fc:	4603      	mov	r3, r0
 80099fe:	73fb      	strb	r3, [r7, #15]
  if (result == ERR_OK) {
 8009a00:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009a04:	2b00      	cmp	r3, #0
 8009a06:	d159      	bne.n	8009abc <dhcp_select+0xe0>
    dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8009a08:	2202      	movs	r2, #2
 8009a0a:	2139      	movs	r1, #57	; 0x39
 8009a0c:	6938      	ldr	r0, [r7, #16]
 8009a0e:	f000 ff1d 	bl	800a84c <dhcp_option>
    dhcp_option_short(dhcp, DHCP_MAX_MSG_LEN(netif));
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009a16:	4619      	mov	r1, r3
 8009a18:	6938      	ldr	r0, [r7, #16]
 8009a1a:	f000 ff79 	bl	800a910 <dhcp_option_short>

    /* MUST request the offered IP address */
    dhcp_option(dhcp, DHCP_OPTION_REQUESTED_IP, 4);
 8009a1e:	2204      	movs	r2, #4
 8009a20:	2132      	movs	r1, #50	; 0x32
 8009a22:	6938      	ldr	r0, [r7, #16]
 8009a24:	f000 ff12 	bl	800a84c <dhcp_option>
    dhcp_option_long(dhcp, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8009a28:	693b      	ldr	r3, [r7, #16]
 8009a2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a2c:	4618      	mov	r0, r3
 8009a2e:	f7f9 fb1d 	bl	800306c <lwip_htonl>
 8009a32:	4603      	mov	r3, r0
 8009a34:	4619      	mov	r1, r3
 8009a36:	6938      	ldr	r0, [r7, #16]
 8009a38:	f000 ffa4 	bl	800a984 <dhcp_option_long>

    dhcp_option(dhcp, DHCP_OPTION_SERVER_ID, 4);
 8009a3c:	2204      	movs	r2, #4
 8009a3e:	2136      	movs	r1, #54	; 0x36
 8009a40:	6938      	ldr	r0, [r7, #16]
 8009a42:	f000 ff03 	bl	800a84c <dhcp_option>
    dhcp_option_long(dhcp, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 8009a46:	693b      	ldr	r3, [r7, #16]
 8009a48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a4a:	4618      	mov	r0, r3
 8009a4c:	f7f9 fb0e 	bl	800306c <lwip_htonl>
 8009a50:	4603      	mov	r3, r0
 8009a52:	4619      	mov	r1, r3
 8009a54:	6938      	ldr	r0, [r7, #16]
 8009a56:	f000 ff95 	bl	800a984 <dhcp_option_long>

    dhcp_option(dhcp, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8009a5a:	2203      	movs	r2, #3
 8009a5c:	2137      	movs	r1, #55	; 0x37
 8009a5e:	6938      	ldr	r0, [r7, #16]
 8009a60:	f000 fef4 	bl	800a84c <dhcp_option>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8009a64:	2300      	movs	r3, #0
 8009a66:	75fb      	strb	r3, [r7, #23]
 8009a68:	e009      	b.n	8009a7e <dhcp_select+0xa2>
      dhcp_option_byte(dhcp, dhcp_discover_request_options[i]);
 8009a6a:	7dfb      	ldrb	r3, [r7, #23]
 8009a6c:	4a29      	ldr	r2, [pc, #164]	; (8009b14 <dhcp_select+0x138>)
 8009a6e:	5cd3      	ldrb	r3, [r2, r3]
 8009a70:	4619      	mov	r1, r3
 8009a72:	6938      	ldr	r0, [r7, #16]
 8009a74:	f000 ff24 	bl	800a8c0 <dhcp_option_byte>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8009a78:	7dfb      	ldrb	r3, [r7, #23]
 8009a7a:	3301      	adds	r3, #1
 8009a7c:	75fb      	strb	r3, [r7, #23]
 8009a7e:	7dfb      	ldrb	r3, [r7, #23]
 8009a80:	2b02      	cmp	r3, #2
 8009a82:	d9f2      	bls.n	8009a6a <dhcp_select+0x8e>

#if LWIP_NETIF_HOSTNAME
    dhcp_option_hostname(dhcp, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    dhcp_option_trailer(dhcp);
 8009a84:	6938      	ldr	r0, [r7, #16]
 8009a86:	f001 fcf3 	bl	800b470 <dhcp_option_trailer>
    /* shrink the pbuf to the actual content length */
    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
 8009a8a:	693b      	ldr	r3, [r7, #16]
 8009a8c:	68da      	ldr	r2, [r3, #12]
 8009a8e:	693b      	ldr	r3, [r7, #16]
 8009a90:	8a9b      	ldrh	r3, [r3, #20]
 8009a92:	33f0      	adds	r3, #240	; 0xf0
 8009a94:	b29b      	uxth	r3, r3
 8009a96:	4619      	mov	r1, r3
 8009a98:	4610      	mov	r0, r2
 8009a9a:	f7fa fa99 	bl	8003fd0 <pbuf_realloc>

    /* send broadcast to any DHCP server */
    udp_sendto_if_src(dhcp_pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif, IP4_ADDR_ANY);
 8009a9e:	4b1e      	ldr	r3, [pc, #120]	; (8009b18 <dhcp_select+0x13c>)
 8009aa0:	6818      	ldr	r0, [r3, #0]
 8009aa2:	693b      	ldr	r3, [r7, #16]
 8009aa4:	68d9      	ldr	r1, [r3, #12]
 8009aa6:	4b1d      	ldr	r3, [pc, #116]	; (8009b1c <dhcp_select+0x140>)
 8009aa8:	9301      	str	r3, [sp, #4]
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	9300      	str	r3, [sp, #0]
 8009aae:	2343      	movs	r3, #67	; 0x43
 8009ab0:	4a1b      	ldr	r2, [pc, #108]	; (8009b20 <dhcp_select+0x144>)
 8009ab2:	f7ff fcbb 	bl	800942c <udp_sendto_if_src>
    dhcp_delete_msg(dhcp);
 8009ab6:	6938      	ldr	r0, [r7, #16]
 8009ab8:	f001 fc98 	bl	800b3ec <dhcp_delete_msg>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_select: REQUESTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_select: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 8009abc:	693b      	ldr	r3, [r7, #16]
 8009abe:	7a9b      	ldrb	r3, [r3, #10]
 8009ac0:	2bff      	cmp	r3, #255	; 0xff
 8009ac2:	d005      	beq.n	8009ad0 <dhcp_select+0xf4>
    dhcp->tries++;
 8009ac4:	693b      	ldr	r3, [r7, #16]
 8009ac6:	7a9b      	ldrb	r3, [r3, #10]
 8009ac8:	3301      	adds	r3, #1
 8009aca:	b2da      	uxtb	r2, r3
 8009acc:	693b      	ldr	r3, [r7, #16]
 8009ace:	729a      	strb	r2, [r3, #10]
  }
  msecs = (dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000;
 8009ad0:	693b      	ldr	r3, [r7, #16]
 8009ad2:	7a9b      	ldrb	r3, [r3, #10]
 8009ad4:	2b05      	cmp	r3, #5
 8009ad6:	d807      	bhi.n	8009ae8 <dhcp_select+0x10c>
 8009ad8:	693b      	ldr	r3, [r7, #16]
 8009ada:	7a9b      	ldrb	r3, [r3, #10]
 8009adc:	461a      	mov	r2, r3
 8009ade:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8009ae2:	4093      	lsls	r3, r2
 8009ae4:	b29b      	uxth	r3, r3
 8009ae6:	e001      	b.n	8009aec <dhcp_select+0x110>
 8009ae8:	f64e 2360 	movw	r3, #60000	; 0xea60
 8009aec:	81bb      	strh	r3, [r7, #12]
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 8009aee:	89bb      	ldrh	r3, [r7, #12]
 8009af0:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8009af4:	4a0b      	ldr	r2, [pc, #44]	; (8009b24 <dhcp_select+0x148>)
 8009af6:	fb82 1203 	smull	r1, r2, r2, r3
 8009afa:	1152      	asrs	r2, r2, #5
 8009afc:	17db      	asrs	r3, r3, #31
 8009afe:	1ad3      	subs	r3, r2, r3
 8009b00:	b29a      	uxth	r2, r3
 8009b02:	693b      	ldr	r3, [r7, #16]
 8009b04:	82da      	strh	r2, [r3, #22]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_select(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8009b06:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009b0a:	4618      	mov	r0, r3
 8009b0c:	3718      	adds	r7, #24
 8009b0e:	46bd      	mov	sp, r7
 8009b10:	bd80      	pop	{r7, pc}
 8009b12:	bf00      	nop
 8009b14:	20000014 	.word	0x20000014
 8009b18:	20000110 	.word	0x20000110
 8009b1c:	08010d68 	.word	0x08010d68
 8009b20:	08010d6c 	.word	0x08010d6c
 8009b24:	10624dd3 	.word	0x10624dd3

08009b28 <dhcp_coarse_tmr>:
 * The DHCP timer that checks for lease renewal/rebind timeouts.
 * Must be called once a minute (see @ref DHCP_COARSE_TIMER_SECS).
 */
void
dhcp_coarse_tmr(void)
{
 8009b28:	b580      	push	{r7, lr}
 8009b2a:	b082      	sub	sp, #8
 8009b2c:	af00      	add	r7, sp, #0
  struct netif *netif = netif_list;
 8009b2e:	4b27      	ldr	r3, [pc, #156]	; (8009bcc <dhcp_coarse_tmr+0xa4>)
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	607b      	str	r3, [r7, #4]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_coarse_tmr()\n"));
  /* iterate through all network interfaces */
  while (netif != NULL) {
 8009b34:	e042      	b.n	8009bbc <dhcp_coarse_tmr+0x94>
    /* only act on DHCP configured interfaces */
    struct dhcp *dhcp = netif_dhcp_data(netif);
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b3a:	603b      	str	r3, [r7, #0]
    if ((dhcp != NULL) && (dhcp->state != DHCP_STATE_OFF)) {
 8009b3c:	683b      	ldr	r3, [r7, #0]
 8009b3e:	2b00      	cmp	r3, #0
 8009b40:	d039      	beq.n	8009bb6 <dhcp_coarse_tmr+0x8e>
 8009b42:	683b      	ldr	r3, [r7, #0]
 8009b44:	7a5b      	ldrb	r3, [r3, #9]
 8009b46:	2b00      	cmp	r3, #0
 8009b48:	d035      	beq.n	8009bb6 <dhcp_coarse_tmr+0x8e>
      /* compare lease time to expire timeout */
      if (dhcp->t0_timeout && (++dhcp->lease_used == dhcp->t0_timeout)) {
 8009b4a:	683b      	ldr	r3, [r7, #0]
 8009b4c:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8009b4e:	2b00      	cmp	r3, #0
 8009b50:	d012      	beq.n	8009b78 <dhcp_coarse_tmr+0x50>
 8009b52:	683b      	ldr	r3, [r7, #0]
 8009b54:	8c1b      	ldrh	r3, [r3, #32]
 8009b56:	3301      	adds	r3, #1
 8009b58:	b29a      	uxth	r2, r3
 8009b5a:	683b      	ldr	r3, [r7, #0]
 8009b5c:	841a      	strh	r2, [r3, #32]
 8009b5e:	683b      	ldr	r3, [r7, #0]
 8009b60:	8c1a      	ldrh	r2, [r3, #32]
 8009b62:	683b      	ldr	r3, [r7, #0]
 8009b64:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8009b66:	429a      	cmp	r2, r3
 8009b68:	d106      	bne.n	8009b78 <dhcp_coarse_tmr+0x50>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t0 timeout\n"));
        /* this clients' lease time has expired */
        dhcp_release(netif);
 8009b6a:	6878      	ldr	r0, [r7, #4]
 8009b6c:	f000 fd94 	bl	800a698 <dhcp_release>
        dhcp_discover(netif);
 8009b70:	6878      	ldr	r0, [r7, #4]
 8009b72:	f000 fa8b 	bl	800a08c <dhcp_discover>
 8009b76:	e01e      	b.n	8009bb6 <dhcp_coarse_tmr+0x8e>
      /* timer is active (non zero), and triggers (zeroes) now? */
      } else if (dhcp->t2_rebind_time && (dhcp->t2_rebind_time-- == 1)) {
 8009b78:	683b      	ldr	r3, [r7, #0]
 8009b7a:	8bdb      	ldrh	r3, [r3, #30]
 8009b7c:	2b00      	cmp	r3, #0
 8009b7e:	d00b      	beq.n	8009b98 <dhcp_coarse_tmr+0x70>
 8009b80:	683b      	ldr	r3, [r7, #0]
 8009b82:	8bdb      	ldrh	r3, [r3, #30]
 8009b84:	1e5a      	subs	r2, r3, #1
 8009b86:	b291      	uxth	r1, r2
 8009b88:	683a      	ldr	r2, [r7, #0]
 8009b8a:	83d1      	strh	r1, [r2, #30]
 8009b8c:	2b01      	cmp	r3, #1
 8009b8e:	d103      	bne.n	8009b98 <dhcp_coarse_tmr+0x70>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t2 timeout\n"));
        /* this clients' rebind timeout triggered */
        dhcp_t2_timeout(netif);
 8009b90:	6878      	ldr	r0, [r7, #4]
 8009b92:	f000 f8c6 	bl	8009d22 <dhcp_t2_timeout>
 8009b96:	e00e      	b.n	8009bb6 <dhcp_coarse_tmr+0x8e>
      /* timer is active (non zero), and triggers (zeroes) now */
      } else if (dhcp->t1_renew_time && (dhcp->t1_renew_time-- == 1)) {
 8009b98:	683b      	ldr	r3, [r7, #0]
 8009b9a:	8b9b      	ldrh	r3, [r3, #28]
 8009b9c:	2b00      	cmp	r3, #0
 8009b9e:	d00a      	beq.n	8009bb6 <dhcp_coarse_tmr+0x8e>
 8009ba0:	683b      	ldr	r3, [r7, #0]
 8009ba2:	8b9b      	ldrh	r3, [r3, #28]
 8009ba4:	1e5a      	subs	r2, r3, #1
 8009ba6:	b291      	uxth	r1, r2
 8009ba8:	683a      	ldr	r2, [r7, #0]
 8009baa:	8391      	strh	r1, [r2, #28]
 8009bac:	2b01      	cmp	r3, #1
 8009bae:	d102      	bne.n	8009bb6 <dhcp_coarse_tmr+0x8e>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t1 timeout\n"));
        /* this clients' renewal timeout triggered */
        dhcp_t1_timeout(netif);
 8009bb0:	6878      	ldr	r0, [r7, #4]
 8009bb2:	f000 f888 	bl	8009cc6 <dhcp_t1_timeout>
      }
    }
    /* proceed to next netif */
    netif = netif->next;
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	681b      	ldr	r3, [r3, #0]
 8009bba:	607b      	str	r3, [r7, #4]
  while (netif != NULL) {
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	2b00      	cmp	r3, #0
 8009bc0:	d1b9      	bne.n	8009b36 <dhcp_coarse_tmr+0xe>
  }
}
 8009bc2:	bf00      	nop
 8009bc4:	bf00      	nop
 8009bc6:	3708      	adds	r7, #8
 8009bc8:	46bd      	mov	sp, r7
 8009bca:	bd80      	pop	{r7, pc}
 8009bcc:	20006890 	.word	0x20006890

08009bd0 <dhcp_fine_tmr>:
 * A DHCP server is expected to respond within a short period of time.
 * This timer checks whether an outstanding DHCP request is timed out.
 */
void
dhcp_fine_tmr(void)
{
 8009bd0:	b580      	push	{r7, lr}
 8009bd2:	b082      	sub	sp, #8
 8009bd4:	af00      	add	r7, sp, #0
  struct netif *netif = netif_list;
 8009bd6:	4b16      	ldr	r3, [pc, #88]	; (8009c30 <dhcp_fine_tmr+0x60>)
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	607b      	str	r3, [r7, #4]
  /* loop through netif's */
  while (netif != NULL) {
 8009bdc:	e020      	b.n	8009c20 <dhcp_fine_tmr+0x50>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009be2:	603b      	str	r3, [r7, #0]
    /* only act on DHCP configured interfaces */
    if (dhcp != NULL) {
 8009be4:	683b      	ldr	r3, [r7, #0]
 8009be6:	2b00      	cmp	r3, #0
 8009be8:	d017      	beq.n	8009c1a <dhcp_fine_tmr+0x4a>
      /* timer is active (non zero), and is about to trigger now */
      if (dhcp->request_timeout > 1) {
 8009bea:	683b      	ldr	r3, [r7, #0]
 8009bec:	8adb      	ldrh	r3, [r3, #22]
 8009bee:	2b01      	cmp	r3, #1
 8009bf0:	d906      	bls.n	8009c00 <dhcp_fine_tmr+0x30>
        dhcp->request_timeout--;
 8009bf2:	683b      	ldr	r3, [r7, #0]
 8009bf4:	8adb      	ldrh	r3, [r3, #22]
 8009bf6:	3b01      	subs	r3, #1
 8009bf8:	b29a      	uxth	r2, r3
 8009bfa:	683b      	ldr	r3, [r7, #0]
 8009bfc:	82da      	strh	r2, [r3, #22]
 8009bfe:	e00c      	b.n	8009c1a <dhcp_fine_tmr+0x4a>
      }
      else if (dhcp->request_timeout == 1) {
 8009c00:	683b      	ldr	r3, [r7, #0]
 8009c02:	8adb      	ldrh	r3, [r3, #22]
 8009c04:	2b01      	cmp	r3, #1
 8009c06:	d108      	bne.n	8009c1a <dhcp_fine_tmr+0x4a>
        dhcp->request_timeout--;
 8009c08:	683b      	ldr	r3, [r7, #0]
 8009c0a:	8adb      	ldrh	r3, [r3, #22]
 8009c0c:	3b01      	subs	r3, #1
 8009c0e:	b29a      	uxth	r2, r3
 8009c10:	683b      	ldr	r3, [r7, #0]
 8009c12:	82da      	strh	r2, [r3, #22]
        /* { netif->dhcp->request_timeout == 0 } */
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_fine_tmr(): request timeout\n"));
        /* this client's request timeout triggered */
        dhcp_timeout(netif);
 8009c14:	6878      	ldr	r0, [r7, #4]
 8009c16:	f000 f80d 	bl	8009c34 <dhcp_timeout>
      }
    }
    /* proceed to next network interface */
    netif = netif->next;
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	681b      	ldr	r3, [r3, #0]
 8009c1e:	607b      	str	r3, [r7, #4]
  while (netif != NULL) {
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	2b00      	cmp	r3, #0
 8009c24:	d1db      	bne.n	8009bde <dhcp_fine_tmr+0xe>
  }
}
 8009c26:	bf00      	nop
 8009c28:	bf00      	nop
 8009c2a:	3708      	adds	r7, #8
 8009c2c:	46bd      	mov	sp, r7
 8009c2e:	bd80      	pop	{r7, pc}
 8009c30:	20006890 	.word	0x20006890

08009c34 <dhcp_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_timeout(struct netif *netif)
{
 8009c34:	b580      	push	{r7, lr}
 8009c36:	b084      	sub	sp, #16
 8009c38:	af00      	add	r7, sp, #0
 8009c3a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c40:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout()\n"));
  /* back-off period has passed, or server selection timed out */
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
 8009c42:	68fb      	ldr	r3, [r7, #12]
 8009c44:	7a5b      	ldrb	r3, [r3, #9]
 8009c46:	2b0c      	cmp	r3, #12
 8009c48:	d003      	beq.n	8009c52 <dhcp_timeout+0x1e>
 8009c4a:	68fb      	ldr	r3, [r7, #12]
 8009c4c:	7a5b      	ldrb	r3, [r3, #9]
 8009c4e:	2b06      	cmp	r3, #6
 8009c50:	d103      	bne.n	8009c5a <dhcp_timeout+0x26>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout(): restarting discovery\n"));
    dhcp_discover(netif);
 8009c52:	6878      	ldr	r0, [r7, #4]
 8009c54:	f000 fa1a 	bl	800a08c <dhcp_discover>
      dhcp_reboot(netif);
    } else {
      dhcp_discover(netif);
    }
  }
}
 8009c58:	e031      	b.n	8009cbe <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REQUESTING) {
 8009c5a:	68fb      	ldr	r3, [r7, #12]
 8009c5c:	7a5b      	ldrb	r3, [r3, #9]
 8009c5e:	2b01      	cmp	r3, #1
 8009c60:	d10e      	bne.n	8009c80 <dhcp_timeout+0x4c>
    if (dhcp->tries <= 5) {
 8009c62:	68fb      	ldr	r3, [r7, #12]
 8009c64:	7a9b      	ldrb	r3, [r3, #10]
 8009c66:	2b05      	cmp	r3, #5
 8009c68:	d803      	bhi.n	8009c72 <dhcp_timeout+0x3e>
      dhcp_select(netif);
 8009c6a:	6878      	ldr	r0, [r7, #4]
 8009c6c:	f7ff feb6 	bl	80099dc <dhcp_select>
}
 8009c70:	e025      	b.n	8009cbe <dhcp_timeout+0x8a>
      dhcp_release(netif);
 8009c72:	6878      	ldr	r0, [r7, #4]
 8009c74:	f000 fd10 	bl	800a698 <dhcp_release>
      dhcp_discover(netif);
 8009c78:	6878      	ldr	r0, [r7, #4]
 8009c7a:	f000 fa07 	bl	800a08c <dhcp_discover>
}
 8009c7e:	e01e      	b.n	8009cbe <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_CHECKING) {
 8009c80:	68fb      	ldr	r3, [r7, #12]
 8009c82:	7a5b      	ldrb	r3, [r3, #9]
 8009c84:	2b08      	cmp	r3, #8
 8009c86:	d10b      	bne.n	8009ca0 <dhcp_timeout+0x6c>
    if (dhcp->tries <= 1) {
 8009c88:	68fb      	ldr	r3, [r7, #12]
 8009c8a:	7a9b      	ldrb	r3, [r3, #10]
 8009c8c:	2b01      	cmp	r3, #1
 8009c8e:	d803      	bhi.n	8009c98 <dhcp_timeout+0x64>
      dhcp_check(netif);
 8009c90:	6878      	ldr	r0, [r7, #4]
 8009c92:	f7ff fe4b 	bl	800992c <dhcp_check>
}
 8009c96:	e012      	b.n	8009cbe <dhcp_timeout+0x8a>
      dhcp_bind(netif);
 8009c98:	6878      	ldr	r0, [r7, #4]
 8009c9a:	f000 fa83 	bl	800a1a4 <dhcp_bind>
}
 8009c9e:	e00e      	b.n	8009cbe <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REBOOTING) {
 8009ca0:	68fb      	ldr	r3, [r7, #12]
 8009ca2:	7a5b      	ldrb	r3, [r3, #9]
 8009ca4:	2b03      	cmp	r3, #3
 8009ca6:	d10a      	bne.n	8009cbe <dhcp_timeout+0x8a>
    if (dhcp->tries < REBOOT_TRIES) {
 8009ca8:	68fb      	ldr	r3, [r7, #12]
 8009caa:	7a9b      	ldrb	r3, [r3, #10]
 8009cac:	2b01      	cmp	r3, #1
 8009cae:	d803      	bhi.n	8009cb8 <dhcp_timeout+0x84>
      dhcp_reboot(netif);
 8009cb0:	6878      	ldr	r0, [r7, #4]
 8009cb2:	f000 fc5d 	bl	800a570 <dhcp_reboot>
}
 8009cb6:	e002      	b.n	8009cbe <dhcp_timeout+0x8a>
      dhcp_discover(netif);
 8009cb8:	6878      	ldr	r0, [r7, #4]
 8009cba:	f000 f9e7 	bl	800a08c <dhcp_discover>
}
 8009cbe:	bf00      	nop
 8009cc0:	3710      	adds	r7, #16
 8009cc2:	46bd      	mov	sp, r7
 8009cc4:	bd80      	pop	{r7, pc}

08009cc6 <dhcp_t1_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t1_timeout(struct netif *netif)
{
 8009cc6:	b580      	push	{r7, lr}
 8009cc8:	b084      	sub	sp, #16
 8009cca:	af00      	add	r7, sp, #0
 8009ccc:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cd2:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_t1_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8009cd4:	68fb      	ldr	r3, [r7, #12]
 8009cd6:	7a5b      	ldrb	r3, [r3, #9]
 8009cd8:	2b01      	cmp	r3, #1
 8009cda:	d007      	beq.n	8009cec <dhcp_t1_timeout+0x26>
 8009cdc:	68fb      	ldr	r3, [r7, #12]
 8009cde:	7a5b      	ldrb	r3, [r3, #9]
 8009ce0:	2b0a      	cmp	r3, #10
 8009ce2:	d003      	beq.n	8009cec <dhcp_t1_timeout+0x26>
      (dhcp->state == DHCP_STATE_RENEWING)) {
 8009ce4:	68fb      	ldr	r3, [r7, #12]
 8009ce6:	7a5b      	ldrb	r3, [r3, #9]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8009ce8:	2b05      	cmp	r3, #5
 8009cea:	d116      	bne.n	8009d1a <dhcp_t1_timeout+0x54>
     * eventually time-out if renew tries fail. */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t1_timeout(): must renew\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_RENEWING, not DHCP_STATE_BOUND */
    dhcp_renew(netif);
 8009cec:	6878      	ldr	r0, [r7, #4]
 8009cee:	f000 fb33 	bl	800a358 <dhcp_renew>
    /* Calculate next timeout */
    if (((dhcp->t2_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS))
 8009cf2:	68fb      	ldr	r3, [r7, #12]
 8009cf4:	8b5b      	ldrh	r3, [r3, #26]
 8009cf6:	461a      	mov	r2, r3
 8009cf8:	68fb      	ldr	r3, [r7, #12]
 8009cfa:	8c1b      	ldrh	r3, [r3, #32]
 8009cfc:	1ad3      	subs	r3, r2, r3
 8009cfe:	2b01      	cmp	r3, #1
 8009d00:	dd0b      	ble.n	8009d1a <dhcp_t1_timeout+0x54>
    {
       dhcp->t1_renew_time = ((dhcp->t2_timeout - dhcp->lease_used) / 2);
 8009d02:	68fb      	ldr	r3, [r7, #12]
 8009d04:	8b5b      	ldrh	r3, [r3, #26]
 8009d06:	461a      	mov	r2, r3
 8009d08:	68fb      	ldr	r3, [r7, #12]
 8009d0a:	8c1b      	ldrh	r3, [r3, #32]
 8009d0c:	1ad3      	subs	r3, r2, r3
 8009d0e:	0fda      	lsrs	r2, r3, #31
 8009d10:	4413      	add	r3, r2
 8009d12:	105b      	asrs	r3, r3, #1
 8009d14:	b29a      	uxth	r2, r3
 8009d16:	68fb      	ldr	r3, [r7, #12]
 8009d18:	839a      	strh	r2, [r3, #28]
    }
  }
}
 8009d1a:	bf00      	nop
 8009d1c:	3710      	adds	r7, #16
 8009d1e:	46bd      	mov	sp, r7
 8009d20:	bd80      	pop	{r7, pc}

08009d22 <dhcp_t2_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t2_timeout(struct netif *netif)
{
 8009d22:	b580      	push	{r7, lr}
 8009d24:	b084      	sub	sp, #16
 8009d26:	af00      	add	r7, sp, #0
 8009d28:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d2e:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_t2_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8009d30:	68fb      	ldr	r3, [r7, #12]
 8009d32:	7a5b      	ldrb	r3, [r3, #9]
 8009d34:	2b01      	cmp	r3, #1
 8009d36:	d00b      	beq.n	8009d50 <dhcp_t2_timeout+0x2e>
 8009d38:	68fb      	ldr	r3, [r7, #12]
 8009d3a:	7a5b      	ldrb	r3, [r3, #9]
 8009d3c:	2b0a      	cmp	r3, #10
 8009d3e:	d007      	beq.n	8009d50 <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 8009d40:	68fb      	ldr	r3, [r7, #12]
 8009d42:	7a5b      	ldrb	r3, [r3, #9]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8009d44:	2b05      	cmp	r3, #5
 8009d46:	d003      	beq.n	8009d50 <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 8009d48:	68fb      	ldr	r3, [r7, #12]
 8009d4a:	7a5b      	ldrb	r3, [r3, #9]
 8009d4c:	2b04      	cmp	r3, #4
 8009d4e:	d116      	bne.n	8009d7e <dhcp_t2_timeout+0x5c>
    /* just retry to rebind */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t2_timeout(): must rebind\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_REBINDING, not DHCP_STATE_BOUND */
    dhcp_rebind(netif);
 8009d50:	6878      	ldr	r0, [r7, #4]
 8009d52:	f000 fb87 	bl	800a464 <dhcp_rebind>
    /* Calculate next timeout */
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS))
 8009d56:	68fb      	ldr	r3, [r7, #12]
 8009d58:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8009d5a:	461a      	mov	r2, r3
 8009d5c:	68fb      	ldr	r3, [r7, #12]
 8009d5e:	8c1b      	ldrh	r3, [r3, #32]
 8009d60:	1ad3      	subs	r3, r2, r3
 8009d62:	2b01      	cmp	r3, #1
 8009d64:	dd0b      	ble.n	8009d7e <dhcp_t2_timeout+0x5c>
    {
       dhcp->t2_rebind_time = ((dhcp->t0_timeout - dhcp->lease_used) / 2);
 8009d66:	68fb      	ldr	r3, [r7, #12]
 8009d68:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8009d6a:	461a      	mov	r2, r3
 8009d6c:	68fb      	ldr	r3, [r7, #12]
 8009d6e:	8c1b      	ldrh	r3, [r3, #32]
 8009d70:	1ad3      	subs	r3, r2, r3
 8009d72:	0fda      	lsrs	r2, r3, #31
 8009d74:	4413      	add	r3, r2
 8009d76:	105b      	asrs	r3, r3, #1
 8009d78:	b29a      	uxth	r2, r3
 8009d7a:	68fb      	ldr	r3, [r7, #12]
 8009d7c:	83da      	strh	r2, [r3, #30]
    }
  }
}
 8009d7e:	bf00      	nop
 8009d80:	3710      	adds	r7, #16
 8009d82:	46bd      	mov	sp, r7
 8009d84:	bd80      	pop	{r7, pc}
	...

08009d88 <dhcp_handle_ack>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_ack(struct netif *netif)
{
 8009d88:	b580      	push	{r7, lr}
 8009d8a:	b084      	sub	sp, #16
 8009d8c:	af00      	add	r7, sp, #0
 8009d8e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d94:	60fb      	str	r3, [r7, #12]
#if LWIP_DHCP_GET_NTP_SRV
  ip4_addr_t ntp_server_addrs[LWIP_DHCP_MAX_NTP_SERVERS];
#endif

  /* clear options we might not get from the ACK */
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 8009d96:	68fb      	ldr	r3, [r7, #12]
 8009d98:	2200      	movs	r2, #0
 8009d9a:	62da      	str	r2, [r3, #44]	; 0x2c
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 8009d9c:	68fb      	ldr	r3, [r7, #12]
 8009d9e:	2200      	movs	r2, #0
 8009da0:	631a      	str	r2, [r3, #48]	; 0x30
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* lease time given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 8009da2:	4b27      	ldr	r3, [pc, #156]	; (8009e40 <dhcp_handle_ack+0xb8>)
 8009da4:	78db      	ldrb	r3, [r3, #3]
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	d003      	beq.n	8009db2 <dhcp_handle_ack+0x2a>
    /* remember offered lease time */
    dhcp->offered_t0_lease = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_LEASE_TIME);
 8009daa:	4b26      	ldr	r3, [pc, #152]	; (8009e44 <dhcp_handle_ack+0xbc>)
 8009dac:	68da      	ldr	r2, [r3, #12]
 8009dae:	68fb      	ldr	r3, [r7, #12]
 8009db0:	635a      	str	r2, [r3, #52]	; 0x34
  }
  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T1)) {
 8009db2:	4b23      	ldr	r3, [pc, #140]	; (8009e40 <dhcp_handle_ack+0xb8>)
 8009db4:	791b      	ldrb	r3, [r3, #4]
 8009db6:	2b00      	cmp	r3, #0
 8009db8:	d004      	beq.n	8009dc4 <dhcp_handle_ack+0x3c>
    /* remember given renewal period */
    dhcp->offered_t1_renew = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T1);
 8009dba:	4b22      	ldr	r3, [pc, #136]	; (8009e44 <dhcp_handle_ack+0xbc>)
 8009dbc:	691a      	ldr	r2, [r3, #16]
 8009dbe:	68fb      	ldr	r3, [r7, #12]
 8009dc0:	639a      	str	r2, [r3, #56]	; 0x38
 8009dc2:	e004      	b.n	8009dce <dhcp_handle_ack+0x46>
  } else {
    /* calculate safe periods for renewal */
    dhcp->offered_t1_renew = dhcp->offered_t0_lease / 2;
 8009dc4:	68fb      	ldr	r3, [r7, #12]
 8009dc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009dc8:	085a      	lsrs	r2, r3, #1
 8009dca:	68fb      	ldr	r3, [r7, #12]
 8009dcc:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T2)) {
 8009dce:	4b1c      	ldr	r3, [pc, #112]	; (8009e40 <dhcp_handle_ack+0xb8>)
 8009dd0:	795b      	ldrb	r3, [r3, #5]
 8009dd2:	2b00      	cmp	r3, #0
 8009dd4:	d004      	beq.n	8009de0 <dhcp_handle_ack+0x58>
    /* remember given rebind period */
    dhcp->offered_t2_rebind = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T2);
 8009dd6:	4b1b      	ldr	r3, [pc, #108]	; (8009e44 <dhcp_handle_ack+0xbc>)
 8009dd8:	695a      	ldr	r2, [r3, #20]
 8009dda:	68fb      	ldr	r3, [r7, #12]
 8009ddc:	63da      	str	r2, [r3, #60]	; 0x3c
 8009dde:	e007      	b.n	8009df0 <dhcp_handle_ack+0x68>
  } else {
    /* calculate safe periods for rebinding (offered_t0_lease * 0.875 -> 87.5%)*/
    dhcp->offered_t2_rebind = (dhcp->offered_t0_lease * 7U) / 8U;
 8009de0:	68fb      	ldr	r3, [r7, #12]
 8009de2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009de4:	4613      	mov	r3, r2
 8009de6:	00db      	lsls	r3, r3, #3
 8009de8:	1a9b      	subs	r3, r3, r2
 8009dea:	08da      	lsrs	r2, r3, #3
 8009dec:	68fb      	ldr	r3, [r7, #12]
 8009dee:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* (y)our internet address */
  ip4_addr_copy(dhcp->offered_ip_addr, dhcp->msg_in->yiaddr);
 8009df0:	68fb      	ldr	r3, [r7, #12]
 8009df2:	685b      	ldr	r3, [r3, #4]
 8009df4:	691a      	ldr	r2, [r3, #16]
 8009df6:	68fb      	ldr	r3, [r7, #12]
 8009df8:	629a      	str	r2, [r3, #40]	; 0x28
     boot file name copied in dhcp_parse_reply if not overloaded */
  ip4_addr_copy(dhcp->offered_si_addr, dhcp->msg_in->siaddr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* subnet mask given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
 8009dfa:	4b11      	ldr	r3, [pc, #68]	; (8009e40 <dhcp_handle_ack+0xb8>)
 8009dfc:	799b      	ldrb	r3, [r3, #6]
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	d00b      	beq.n	8009e1a <dhcp_handle_ack+0x92>
    /* remember given subnet mask */
    ip4_addr_set_u32(&dhcp->offered_sn_mask, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
 8009e02:	4b10      	ldr	r3, [pc, #64]	; (8009e44 <dhcp_handle_ack+0xbc>)
 8009e04:	699b      	ldr	r3, [r3, #24]
 8009e06:	4618      	mov	r0, r3
 8009e08:	f7f9 f930 	bl	800306c <lwip_htonl>
 8009e0c:	4602      	mov	r2, r0
 8009e0e:	68fb      	ldr	r3, [r7, #12]
 8009e10:	62da      	str	r2, [r3, #44]	; 0x2c
    dhcp->subnet_mask_given = 1;
 8009e12:	68fb      	ldr	r3, [r7, #12]
 8009e14:	2201      	movs	r2, #1
 8009e16:	72da      	strb	r2, [r3, #11]
 8009e18:	e002      	b.n	8009e20 <dhcp_handle_ack+0x98>
  } else {
    dhcp->subnet_mask_given = 0;
 8009e1a:	68fb      	ldr	r3, [r7, #12]
 8009e1c:	2200      	movs	r2, #0
 8009e1e:	72da      	strb	r2, [r3, #11]
  }

  /* gateway router */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_ROUTER)) {
 8009e20:	4b07      	ldr	r3, [pc, #28]	; (8009e40 <dhcp_handle_ack+0xb8>)
 8009e22:	79db      	ldrb	r3, [r3, #7]
 8009e24:	2b00      	cmp	r3, #0
 8009e26:	d007      	beq.n	8009e38 <dhcp_handle_ack+0xb0>
    ip4_addr_set_u32(&dhcp->offered_gw_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_ROUTER)));
 8009e28:	4b06      	ldr	r3, [pc, #24]	; (8009e44 <dhcp_handle_ack+0xbc>)
 8009e2a:	69db      	ldr	r3, [r3, #28]
 8009e2c:	4618      	mov	r0, r3
 8009e2e:	f7f9 f91d 	bl	800306c <lwip_htonl>
 8009e32:	4602      	mov	r2, r0
 8009e34:	68fb      	ldr	r3, [r7, #12]
 8009e36:	631a      	str	r2, [r3, #48]	; 0x30
    ip_addr_t dns_addr;
    ip_addr_set_ip4_u32(&dns_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
    dns_setserver(n, &dns_addr);
  }
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
}
 8009e38:	bf00      	nop
 8009e3a:	3710      	adds	r7, #16
 8009e3c:	46bd      	mov	sp, r7
 8009e3e:	bd80      	pop	{r7, pc}
 8009e40:	200068bc 	.word	0x200068bc
 8009e44:	200068c4 	.word	0x200068c4

08009e48 <dhcp_start>:
 * - ERR_OK - No error
 * - ERR_MEM - Out of memory
 */
err_t
dhcp_start(struct netif *netif)
{
 8009e48:	b580      	push	{r7, lr}
 8009e4a:	b084      	sub	sp, #16
 8009e4c:	af00      	add	r7, sp, #0
 8009e4e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp;
  err_t result;

  LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	2b00      	cmp	r3, #0
 8009e54:	d109      	bne.n	8009e6a <dhcp_start+0x22>
 8009e56:	4b3c      	ldr	r3, [pc, #240]	; (8009f48 <dhcp_start+0x100>)
 8009e58:	f240 22d6 	movw	r2, #726	; 0x2d6
 8009e5c:	493b      	ldr	r1, [pc, #236]	; (8009f4c <dhcp_start+0x104>)
 8009e5e:	483c      	ldr	r0, [pc, #240]	; (8009f50 <dhcp_start+0x108>)
 8009e60:	f003 fdfe 	bl	800da60 <iprintf>
 8009e64:	f06f 030f 	mvn.w	r3, #15
 8009e68:	e069      	b.n	8009f3e <dhcp_start+0xf6>
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8009e70:	f003 0301 	and.w	r3, r3, #1
 8009e74:	2b00      	cmp	r3, #0
 8009e76:	d109      	bne.n	8009e8c <dhcp_start+0x44>
 8009e78:	4b33      	ldr	r3, [pc, #204]	; (8009f48 <dhcp_start+0x100>)
 8009e7a:	f240 22d7 	movw	r2, #727	; 0x2d7
 8009e7e:	4935      	ldr	r1, [pc, #212]	; (8009f54 <dhcp_start+0x10c>)
 8009e80:	4833      	ldr	r0, [pc, #204]	; (8009f50 <dhcp_start+0x108>)
 8009e82:	f003 fded 	bl	800da60 <iprintf>
 8009e86:	f06f 030f 	mvn.w	r3, #15
 8009e8a:	e058      	b.n	8009f3e <dhcp_start+0xf6>
  dhcp = netif_dhcp_data(netif);
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e90:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(netif=%p) %c%c%"U16_F"\n", (void*)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* check MTU of the netif */
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009e96:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 8009e9a:	d202      	bcs.n	8009ea2 <dhcp_start+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): Cannot use this netif with DHCP: MTU is too small\n"));
    return ERR_MEM;
 8009e9c:	f04f 33ff 	mov.w	r3, #4294967295
 8009ea0:	e04d      	b.n	8009f3e <dhcp_start+0xf6>
  }

  /* no DHCP client attached yet? */
  if (dhcp == NULL) {
 8009ea2:	68fb      	ldr	r3, [r7, #12]
 8009ea4:	2b00      	cmp	r3, #0
 8009ea6:	d10d      	bne.n	8009ec4 <dhcp_start+0x7c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): mallocing new DHCP client\n"));
    dhcp = (struct dhcp *)mem_malloc(sizeof(struct dhcp));
 8009ea8:	2040      	movs	r0, #64	; 0x40
 8009eaa:	f7f9 fb1f 	bl	80034ec <mem_malloc>
 8009eae:	60f8      	str	r0, [r7, #12]
    if (dhcp == NULL) {
 8009eb0:	68fb      	ldr	r3, [r7, #12]
 8009eb2:	2b00      	cmp	r3, #0
 8009eb4:	d102      	bne.n	8009ebc <dhcp_start+0x74>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): could not allocate dhcp\n"));
      return ERR_MEM;
 8009eb6:	f04f 33ff 	mov.w	r3, #4294967295
 8009eba:	e040      	b.n	8009f3e <dhcp_start+0xf6>
    }

    /* store this dhcp client in the netif */
    netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_DHCP, dhcp);
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	68fa      	ldr	r2, [r7, #12]
 8009ec0:	625a      	str	r2, [r3, #36]	; 0x24
 8009ec2:	e01b      	b.n	8009efc <dhcp_start+0xb4>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): allocated dhcp"));
  /* already has DHCP client attached */
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(): restarting DHCP configuration\n"));
    LWIP_ASSERT("pbuf p_out wasn't freed", dhcp->p_out == NULL);
 8009ec4:	68fb      	ldr	r3, [r7, #12]
 8009ec6:	68db      	ldr	r3, [r3, #12]
 8009ec8:	2b00      	cmp	r3, #0
 8009eca:	d006      	beq.n	8009eda <dhcp_start+0x92>
 8009ecc:	4b1e      	ldr	r3, [pc, #120]	; (8009f48 <dhcp_start+0x100>)
 8009ece:	f44f 723c 	mov.w	r2, #752	; 0x2f0
 8009ed2:	4921      	ldr	r1, [pc, #132]	; (8009f58 <dhcp_start+0x110>)
 8009ed4:	481e      	ldr	r0, [pc, #120]	; (8009f50 <dhcp_start+0x108>)
 8009ed6:	f003 fdc3 	bl	800da60 <iprintf>
    LWIP_ASSERT("reply wasn't freed", dhcp->msg_in == NULL );
 8009eda:	68fb      	ldr	r3, [r7, #12]
 8009edc:	685b      	ldr	r3, [r3, #4]
 8009ede:	2b00      	cmp	r3, #0
 8009ee0:	d006      	beq.n	8009ef0 <dhcp_start+0xa8>
 8009ee2:	4b19      	ldr	r3, [pc, #100]	; (8009f48 <dhcp_start+0x100>)
 8009ee4:	f240 22f1 	movw	r2, #753	; 0x2f1
 8009ee8:	491c      	ldr	r1, [pc, #112]	; (8009f5c <dhcp_start+0x114>)
 8009eea:	4819      	ldr	r0, [pc, #100]	; (8009f50 <dhcp_start+0x108>)
 8009eec:	f003 fdb8 	bl	800da60 <iprintf>

    if (dhcp->pcb_allocated != 0) {
 8009ef0:	68fb      	ldr	r3, [r7, #12]
 8009ef2:	7a1b      	ldrb	r3, [r3, #8]
 8009ef4:	2b00      	cmp	r3, #0
 8009ef6:	d001      	beq.n	8009efc <dhcp_start+0xb4>
      dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 8009ef8:	f7ff fcd4 	bl	80098a4 <dhcp_dec_pcb_refcount>
    }
    /* dhcp is cleared below, no need to reset flag*/
  }

  /* clear data structure */
  memset(dhcp, 0, sizeof(struct dhcp));
 8009efc:	2240      	movs	r2, #64	; 0x40
 8009efe:	2100      	movs	r1, #0
 8009f00:	68f8      	ldr	r0, [r7, #12]
 8009f02:	f003 fda5 	bl	800da50 <memset>
  /* dhcp_set_state(&dhcp, DHCP_STATE_OFF); */

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): starting DHCP configuration\n"));

  if (dhcp_inc_pcb_refcount() != ERR_OK) { /* ensure DHCP PCB is allocated */
 8009f06:	f7ff fc7b 	bl	8009800 <dhcp_inc_pcb_refcount>
 8009f0a:	4603      	mov	r3, r0
 8009f0c:	2b00      	cmp	r3, #0
 8009f0e:	d002      	beq.n	8009f16 <dhcp_start+0xce>
    return ERR_MEM;
 8009f10:	f04f 33ff 	mov.w	r3, #4294967295
 8009f14:	e013      	b.n	8009f3e <dhcp_start+0xf6>
  }
  dhcp->pcb_allocated = 1;
 8009f16:	68fb      	ldr	r3, [r7, #12]
 8009f18:	2201      	movs	r2, #1
 8009f1a:	721a      	strb	r2, [r3, #8]
  }
#endif /* LWIP_DHCP_CHECK_LINK_UP */


  /* (re)start the DHCP negotiation */
  result = dhcp_discover(netif);
 8009f1c:	6878      	ldr	r0, [r7, #4]
 8009f1e:	f000 f8b5 	bl	800a08c <dhcp_discover>
 8009f22:	4603      	mov	r3, r0
 8009f24:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
 8009f26:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8009f2a:	2b00      	cmp	r3, #0
 8009f2c:	d005      	beq.n	8009f3a <dhcp_start+0xf2>
    /* free resources allocated above */
    dhcp_stop(netif);
 8009f2e:	6878      	ldr	r0, [r7, #4]
 8009f30:	f000 fc3a 	bl	800a7a8 <dhcp_stop>
    return ERR_MEM;
 8009f34:	f04f 33ff 	mov.w	r3, #4294967295
 8009f38:	e001      	b.n	8009f3e <dhcp_start+0xf6>
  }
  return result;
 8009f3a:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8009f3e:	4618      	mov	r0, r3
 8009f40:	3710      	adds	r7, #16
 8009f42:	46bd      	mov	sp, r7
 8009f44:	bd80      	pop	{r7, pc}
 8009f46:	bf00      	nop
 8009f48:	080100fc 	.word	0x080100fc
 8009f4c:	080101a8 	.word	0x080101a8
 8009f50:	0801015c 	.word	0x0801015c
 8009f54:	080101ec 	.word	0x080101ec
 8009f58:	08010210 	.word	0x08010210
 8009f5c:	08010228 	.word	0x08010228

08009f60 <dhcp_arp_reply>:
 * @param netif the network interface on which the reply was received
 * @param addr The IP address we received a reply from
 */
void
dhcp_arp_reply(struct netif *netif, const ip4_addr_t *addr)
{
 8009f60:	b580      	push	{r7, lr}
 8009f62:	b084      	sub	sp, #16
 8009f64:	af00      	add	r7, sp, #0
 8009f66:	6078      	str	r0, [r7, #4]
 8009f68:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	2b00      	cmp	r3, #0
 8009f6e:	d107      	bne.n	8009f80 <dhcp_arp_reply+0x20>
 8009f70:	4b0e      	ldr	r3, [pc, #56]	; (8009fac <dhcp_arp_reply+0x4c>)
 8009f72:	f240 327b 	movw	r2, #891	; 0x37b
 8009f76:	490e      	ldr	r1, [pc, #56]	; (8009fb0 <dhcp_arp_reply+0x50>)
 8009f78:	480e      	ldr	r0, [pc, #56]	; (8009fb4 <dhcp_arp_reply+0x54>)
 8009f7a:	f003 fd71 	bl	800da60 <iprintf>
 8009f7e:	e012      	b.n	8009fa6 <dhcp_arp_reply+0x46>
  dhcp = netif_dhcp_data(netif);
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f84:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_arp_reply()\n"));
  /* is a DHCP client doing an ARP check? */
  if ((dhcp != NULL) && (dhcp->state == DHCP_STATE_CHECKING)) {
 8009f86:	68fb      	ldr	r3, [r7, #12]
 8009f88:	2b00      	cmp	r3, #0
 8009f8a:	d00c      	beq.n	8009fa6 <dhcp_arp_reply+0x46>
 8009f8c:	68fb      	ldr	r3, [r7, #12]
 8009f8e:	7a5b      	ldrb	r3, [r3, #9]
 8009f90:	2b08      	cmp	r3, #8
 8009f92:	d108      	bne.n	8009fa6 <dhcp_arp_reply+0x46>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_arp_reply(): CHECKING, arp reply for 0x%08"X32_F"\n",
      ip4_addr_get_u32(addr)));
    /* did a host respond with the address we
       were offered by the DHCP server? */
    if (ip4_addr_cmp(addr, &dhcp->offered_ip_addr)) {
 8009f94:	683b      	ldr	r3, [r7, #0]
 8009f96:	681a      	ldr	r2, [r3, #0]
 8009f98:	68fb      	ldr	r3, [r7, #12]
 8009f9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f9c:	429a      	cmp	r2, r3
 8009f9e:	d102      	bne.n	8009fa6 <dhcp_arp_reply+0x46>
      /* we will not accept the offered address */
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE | LWIP_DBG_LEVEL_WARNING,
        ("dhcp_arp_reply(): arp reply matched with offered address, declining\n"));
      dhcp_decline(netif);
 8009fa0:	6878      	ldr	r0, [r7, #4]
 8009fa2:	f000 f809 	bl	8009fb8 <dhcp_decline>
    }
  }
}
 8009fa6:	3710      	adds	r7, #16
 8009fa8:	46bd      	mov	sp, r7
 8009faa:	bd80      	pop	{r7, pc}
 8009fac:	080100fc 	.word	0x080100fc
 8009fb0:	080101a8 	.word	0x080101a8
 8009fb4:	0801015c 	.word	0x0801015c

08009fb8 <dhcp_decline>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_decline(struct netif *netif)
{
 8009fb8:	b580      	push	{r7, lr}
 8009fba:	b086      	sub	sp, #24
 8009fbc:	af02      	add	r7, sp, #8
 8009fbe:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fc4:	60fb      	str	r3, [r7, #12]
  err_t result = ERR_OK;
 8009fc6:	2300      	movs	r3, #0
 8009fc8:	72fb      	strb	r3, [r7, #11]
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 8009fca:	210c      	movs	r1, #12
 8009fcc:	68f8      	ldr	r0, [r7, #12]
 8009fce:	f000 fc23 	bl	800a818 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  result = dhcp_create_msg(netif, dhcp, DHCP_DECLINE);
 8009fd2:	2204      	movs	r2, #4
 8009fd4:	68f9      	ldr	r1, [r7, #12]
 8009fd6:	6878      	ldr	r0, [r7, #4]
 8009fd8:	f001 f8a6 	bl	800b128 <dhcp_create_msg>
 8009fdc:	4603      	mov	r3, r0
 8009fde:	72fb      	strb	r3, [r7, #11]
  if (result == ERR_OK) {
 8009fe0:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8009fe4:	2b00      	cmp	r3, #0
 8009fe6:	d12a      	bne.n	800a03e <dhcp_decline+0x86>
    dhcp_option(dhcp, DHCP_OPTION_REQUESTED_IP, 4);
 8009fe8:	2204      	movs	r2, #4
 8009fea:	2132      	movs	r1, #50	; 0x32
 8009fec:	68f8      	ldr	r0, [r7, #12]
 8009fee:	f000 fc2d 	bl	800a84c <dhcp_option>
    dhcp_option_long(dhcp, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8009ff2:	68fb      	ldr	r3, [r7, #12]
 8009ff4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ff6:	4618      	mov	r0, r3
 8009ff8:	f7f9 f838 	bl	800306c <lwip_htonl>
 8009ffc:	4603      	mov	r3, r0
 8009ffe:	4619      	mov	r1, r3
 800a000:	68f8      	ldr	r0, [r7, #12]
 800a002:	f000 fcbf 	bl	800a984 <dhcp_option_long>

    dhcp_option_trailer(dhcp);
 800a006:	68f8      	ldr	r0, [r7, #12]
 800a008:	f001 fa32 	bl	800b470 <dhcp_option_trailer>
    /* resize pbuf to reflect true size of options */
    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
 800a00c:	68fb      	ldr	r3, [r7, #12]
 800a00e:	68da      	ldr	r2, [r3, #12]
 800a010:	68fb      	ldr	r3, [r7, #12]
 800a012:	8a9b      	ldrh	r3, [r3, #20]
 800a014:	33f0      	adds	r3, #240	; 0xf0
 800a016:	b29b      	uxth	r3, r3
 800a018:	4619      	mov	r1, r3
 800a01a:	4610      	mov	r0, r2
 800a01c:	f7f9 ffd8 	bl	8003fd0 <pbuf_realloc>

    /* per section 4.4.4, broadcast DECLINE messages */
    udp_sendto_if_src(dhcp_pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif, IP4_ADDR_ANY);
 800a020:	4b16      	ldr	r3, [pc, #88]	; (800a07c <dhcp_decline+0xc4>)
 800a022:	6818      	ldr	r0, [r3, #0]
 800a024:	68fb      	ldr	r3, [r7, #12]
 800a026:	68d9      	ldr	r1, [r3, #12]
 800a028:	4b15      	ldr	r3, [pc, #84]	; (800a080 <dhcp_decline+0xc8>)
 800a02a:	9301      	str	r3, [sp, #4]
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	9300      	str	r3, [sp, #0]
 800a030:	2343      	movs	r3, #67	; 0x43
 800a032:	4a14      	ldr	r2, [pc, #80]	; (800a084 <dhcp_decline+0xcc>)
 800a034:	f7ff f9fa 	bl	800942c <udp_sendto_if_src>
    dhcp_delete_msg(dhcp);
 800a038:	68f8      	ldr	r0, [r7, #12]
 800a03a:	f001 f9d7 	bl	800b3ec <dhcp_delete_msg>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_decline: BACKING OFF\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
      ("dhcp_decline: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 800a03e:	68fb      	ldr	r3, [r7, #12]
 800a040:	7a9b      	ldrb	r3, [r3, #10]
 800a042:	2bff      	cmp	r3, #255	; 0xff
 800a044:	d005      	beq.n	800a052 <dhcp_decline+0x9a>
    dhcp->tries++;
 800a046:	68fb      	ldr	r3, [r7, #12]
 800a048:	7a9b      	ldrb	r3, [r3, #10]
 800a04a:	3301      	adds	r3, #1
 800a04c:	b2da      	uxtb	r2, r3
 800a04e:	68fb      	ldr	r3, [r7, #12]
 800a050:	729a      	strb	r2, [r3, #10]
  }
  msecs = 10*1000;
 800a052:	f242 7310 	movw	r3, #10000	; 0x2710
 800a056:	813b      	strh	r3, [r7, #8]
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 800a058:	893b      	ldrh	r3, [r7, #8]
 800a05a:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800a05e:	4a0a      	ldr	r2, [pc, #40]	; (800a088 <dhcp_decline+0xd0>)
 800a060:	fb82 1203 	smull	r1, r2, r2, r3
 800a064:	1152      	asrs	r2, r2, #5
 800a066:	17db      	asrs	r3, r3, #31
 800a068:	1ad3      	subs	r3, r2, r3
 800a06a:	b29a      	uxth	r2, r3
 800a06c:	68fb      	ldr	r3, [r7, #12]
 800a06e:	82da      	strh	r2, [r3, #22]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 800a070:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800a074:	4618      	mov	r0, r3
 800a076:	3710      	adds	r7, #16
 800a078:	46bd      	mov	sp, r7
 800a07a:	bd80      	pop	{r7, pc}
 800a07c:	20000110 	.word	0x20000110
 800a080:	08010d68 	.word	0x08010d68
 800a084:	08010d6c 	.word	0x08010d6c
 800a088:	10624dd3 	.word	0x10624dd3

0800a08c <dhcp_discover>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_discover(struct netif *netif)
{
 800a08c:	b580      	push	{r7, lr}
 800a08e:	b088      	sub	sp, #32
 800a090:	af02      	add	r7, sp, #8
 800a092:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a098:	613b      	str	r3, [r7, #16]
  err_t result = ERR_OK;
 800a09a:	2300      	movs	r3, #0
 800a09c:	73fb      	strb	r3, [r7, #15]
  u16_t msecs;
  u8_t i;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover()\n"));
  ip4_addr_set_any(&dhcp->offered_ip_addr);
 800a09e:	693b      	ldr	r3, [r7, #16]
 800a0a0:	2200      	movs	r2, #0
 800a0a2:	629a      	str	r2, [r3, #40]	; 0x28
  dhcp_set_state(dhcp, DHCP_STATE_SELECTING);
 800a0a4:	2106      	movs	r1, #6
 800a0a6:	6938      	ldr	r0, [r7, #16]
 800a0a8:	f000 fbb6 	bl	800a818 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  result = dhcp_create_msg(netif, dhcp, DHCP_DISCOVER);
 800a0ac:	2201      	movs	r2, #1
 800a0ae:	6939      	ldr	r1, [r7, #16]
 800a0b0:	6878      	ldr	r0, [r7, #4]
 800a0b2:	f001 f839 	bl	800b128 <dhcp_create_msg>
 800a0b6:	4603      	mov	r3, r0
 800a0b8:	73fb      	strb	r3, [r7, #15]
  if (result == ERR_OK) {
 800a0ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a0be:	2b00      	cmp	r3, #0
 800a0c0:	d13b      	bne.n	800a13a <dhcp_discover+0xae>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: making request\n"));

    dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 800a0c2:	2202      	movs	r2, #2
 800a0c4:	2139      	movs	r1, #57	; 0x39
 800a0c6:	6938      	ldr	r0, [r7, #16]
 800a0c8:	f000 fbc0 	bl	800a84c <dhcp_option>
    dhcp_option_short(dhcp, DHCP_MAX_MSG_LEN(netif));
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a0d0:	4619      	mov	r1, r3
 800a0d2:	6938      	ldr	r0, [r7, #16]
 800a0d4:	f000 fc1c 	bl	800a910 <dhcp_option_short>

    dhcp_option(dhcp, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 800a0d8:	2203      	movs	r2, #3
 800a0da:	2137      	movs	r1, #55	; 0x37
 800a0dc:	6938      	ldr	r0, [r7, #16]
 800a0de:	f000 fbb5 	bl	800a84c <dhcp_option>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800a0e2:	2300      	movs	r3, #0
 800a0e4:	75fb      	strb	r3, [r7, #23]
 800a0e6:	e009      	b.n	800a0fc <dhcp_discover+0x70>
      dhcp_option_byte(dhcp, dhcp_discover_request_options[i]);
 800a0e8:	7dfb      	ldrb	r3, [r7, #23]
 800a0ea:	4a29      	ldr	r2, [pc, #164]	; (800a190 <dhcp_discover+0x104>)
 800a0ec:	5cd3      	ldrb	r3, [r2, r3]
 800a0ee:	4619      	mov	r1, r3
 800a0f0:	6938      	ldr	r0, [r7, #16]
 800a0f2:	f000 fbe5 	bl	800a8c0 <dhcp_option_byte>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800a0f6:	7dfb      	ldrb	r3, [r7, #23]
 800a0f8:	3301      	adds	r3, #1
 800a0fa:	75fb      	strb	r3, [r7, #23]
 800a0fc:	7dfb      	ldrb	r3, [r7, #23]
 800a0fe:	2b02      	cmp	r3, #2
 800a100:	d9f2      	bls.n	800a0e8 <dhcp_discover+0x5c>
    }
    dhcp_option_trailer(dhcp);
 800a102:	6938      	ldr	r0, [r7, #16]
 800a104:	f001 f9b4 	bl	800b470 <dhcp_option_trailer>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: realloc()ing\n"));
    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
 800a108:	693b      	ldr	r3, [r7, #16]
 800a10a:	68da      	ldr	r2, [r3, #12]
 800a10c:	693b      	ldr	r3, [r7, #16]
 800a10e:	8a9b      	ldrh	r3, [r3, #20]
 800a110:	33f0      	adds	r3, #240	; 0xf0
 800a112:	b29b      	uxth	r3, r3
 800a114:	4619      	mov	r1, r3
 800a116:	4610      	mov	r0, r2
 800a118:	f7f9 ff5a 	bl	8003fd0 <pbuf_realloc>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: sendto(DISCOVER, IP_ADDR_BROADCAST, DHCP_SERVER_PORT)\n"));
    udp_sendto_if_src(dhcp_pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif, IP4_ADDR_ANY);
 800a11c:	4b1d      	ldr	r3, [pc, #116]	; (800a194 <dhcp_discover+0x108>)
 800a11e:	6818      	ldr	r0, [r3, #0]
 800a120:	693b      	ldr	r3, [r7, #16]
 800a122:	68d9      	ldr	r1, [r3, #12]
 800a124:	4b1c      	ldr	r3, [pc, #112]	; (800a198 <dhcp_discover+0x10c>)
 800a126:	9301      	str	r3, [sp, #4]
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	9300      	str	r3, [sp, #0]
 800a12c:	2343      	movs	r3, #67	; 0x43
 800a12e:	4a1b      	ldr	r2, [pc, #108]	; (800a19c <dhcp_discover+0x110>)
 800a130:	f7ff f97c 	bl	800942c <udp_sendto_if_src>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: deleting()ing\n"));
    dhcp_delete_msg(dhcp);
 800a134:	6938      	ldr	r0, [r7, #16]
 800a136:	f001 f959 	bl	800b3ec <dhcp_delete_msg>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover: SELECTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_discover: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 800a13a:	693b      	ldr	r3, [r7, #16]
 800a13c:	7a9b      	ldrb	r3, [r3, #10]
 800a13e:	2bff      	cmp	r3, #255	; 0xff
 800a140:	d005      	beq.n	800a14e <dhcp_discover+0xc2>
    dhcp->tries++;
 800a142:	693b      	ldr	r3, [r7, #16]
 800a144:	7a9b      	ldrb	r3, [r3, #10]
 800a146:	3301      	adds	r3, #1
 800a148:	b2da      	uxtb	r2, r3
 800a14a:	693b      	ldr	r3, [r7, #16]
 800a14c:	729a      	strb	r2, [r3, #10]
  if (dhcp->tries >= LWIP_DHCP_AUTOIP_COOP_TRIES && dhcp->autoip_coop_state == DHCP_AUTOIP_COOP_STATE_OFF) {
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_ON;
    autoip_start(netif);
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */
  msecs = (dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000;
 800a14e:	693b      	ldr	r3, [r7, #16]
 800a150:	7a9b      	ldrb	r3, [r3, #10]
 800a152:	2b05      	cmp	r3, #5
 800a154:	d807      	bhi.n	800a166 <dhcp_discover+0xda>
 800a156:	693b      	ldr	r3, [r7, #16]
 800a158:	7a9b      	ldrb	r3, [r3, #10]
 800a15a:	461a      	mov	r2, r3
 800a15c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800a160:	4093      	lsls	r3, r2
 800a162:	b29b      	uxth	r3, r3
 800a164:	e001      	b.n	800a16a <dhcp_discover+0xde>
 800a166:	f64e 2360 	movw	r3, #60000	; 0xea60
 800a16a:	81bb      	strh	r3, [r7, #12]
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 800a16c:	89bb      	ldrh	r3, [r7, #12]
 800a16e:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800a172:	4a0b      	ldr	r2, [pc, #44]	; (800a1a0 <dhcp_discover+0x114>)
 800a174:	fb82 1203 	smull	r1, r2, r2, r3
 800a178:	1152      	asrs	r2, r2, #5
 800a17a:	17db      	asrs	r3, r3, #31
 800a17c:	1ad3      	subs	r3, r2, r3
 800a17e:	b29a      	uxth	r2, r3
 800a180:	693b      	ldr	r3, [r7, #16]
 800a182:	82da      	strh	r2, [r3, #22]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 800a184:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a188:	4618      	mov	r0, r3
 800a18a:	3718      	adds	r7, #24
 800a18c:	46bd      	mov	sp, r7
 800a18e:	bd80      	pop	{r7, pc}
 800a190:	20000014 	.word	0x20000014
 800a194:	20000110 	.word	0x20000110
 800a198:	08010d68 	.word	0x08010d68
 800a19c:	08010d6c 	.word	0x08010d6c
 800a1a0:	10624dd3 	.word	0x10624dd3

0800a1a4 <dhcp_bind>:
 *
 * @param netif network interface to bind to the offered address
 */
static void
dhcp_bind(struct netif *netif)
{
 800a1a4:	b580      	push	{r7, lr}
 800a1a6:	b088      	sub	sp, #32
 800a1a8:	af00      	add	r7, sp, #0
 800a1aa:	6078      	str	r0, [r7, #4]
  u32_t timeout;
  struct dhcp *dhcp;
  ip4_addr_t sn_mask, gw_addr;
  LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	d107      	bne.n	800a1c2 <dhcp_bind+0x1e>
 800a1b2:	4b64      	ldr	r3, [pc, #400]	; (800a344 <dhcp_bind+0x1a0>)
 800a1b4:	f240 32fe 	movw	r2, #1022	; 0x3fe
 800a1b8:	4963      	ldr	r1, [pc, #396]	; (800a348 <dhcp_bind+0x1a4>)
 800a1ba:	4864      	ldr	r0, [pc, #400]	; (800a34c <dhcp_bind+0x1a8>)
 800a1bc:	f003 fc50 	bl	800da60 <iprintf>
 800a1c0:	e0bc      	b.n	800a33c <dhcp_bind+0x198>
  dhcp = netif_dhcp_data(netif);
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1c6:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 800a1c8:	69bb      	ldr	r3, [r7, #24]
 800a1ca:	2b00      	cmp	r3, #0
 800a1cc:	d107      	bne.n	800a1de <dhcp_bind+0x3a>
 800a1ce:	4b5d      	ldr	r3, [pc, #372]	; (800a344 <dhcp_bind+0x1a0>)
 800a1d0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800a1d4:	495e      	ldr	r1, [pc, #376]	; (800a350 <dhcp_bind+0x1ac>)
 800a1d6:	485d      	ldr	r0, [pc, #372]	; (800a34c <dhcp_bind+0x1a8>)
 800a1d8:	f003 fc42 	bl	800da60 <iprintf>
 800a1dc:	e0ae      	b.n	800a33c <dhcp_bind+0x198>
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(netif=%p) %c%c%"U16_F"\n", (void*)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* reset time used of lease */
  dhcp->lease_used = 0;
 800a1de:	69bb      	ldr	r3, [r7, #24]
 800a1e0:	2200      	movs	r2, #0
 800a1e2:	841a      	strh	r2, [r3, #32]

  if (dhcp->offered_t0_lease != 0xffffffffUL) {
 800a1e4:	69bb      	ldr	r3, [r7, #24]
 800a1e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a1e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a1ec:	d019      	beq.n	800a222 <dhcp_bind+0x7e>
     /* set renewal period timer */
     LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t0 renewal timer %"U32_F" secs\n", dhcp->offered_t0_lease));
     timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 800a1ee:	69bb      	ldr	r3, [r7, #24]
 800a1f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a1f2:	331e      	adds	r3, #30
 800a1f4:	4a57      	ldr	r2, [pc, #348]	; (800a354 <dhcp_bind+0x1b0>)
 800a1f6:	fba2 2303 	umull	r2, r3, r2, r3
 800a1fa:	095b      	lsrs	r3, r3, #5
 800a1fc:	61fb      	str	r3, [r7, #28]
     if (timeout > 0xffff) {
 800a1fe:	69fb      	ldr	r3, [r7, #28]
 800a200:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a204:	d302      	bcc.n	800a20c <dhcp_bind+0x68>
       timeout = 0xffff;
 800a206:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a20a:	61fb      	str	r3, [r7, #28]
     }
     dhcp->t0_timeout = (u16_t)timeout;
 800a20c:	69fb      	ldr	r3, [r7, #28]
 800a20e:	b29a      	uxth	r2, r3
 800a210:	69bb      	ldr	r3, [r7, #24]
 800a212:	845a      	strh	r2, [r3, #34]	; 0x22
     if (dhcp->t0_timeout == 0) {
 800a214:	69bb      	ldr	r3, [r7, #24]
 800a216:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800a218:	2b00      	cmp	r3, #0
 800a21a:	d102      	bne.n	800a222 <dhcp_bind+0x7e>
       dhcp->t0_timeout = 1;
 800a21c:	69bb      	ldr	r3, [r7, #24]
 800a21e:	2201      	movs	r2, #1
 800a220:	845a      	strh	r2, [r3, #34]	; 0x22
     }
     LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t0_lease*1000));
  }

  /* temporary DHCP lease? */
  if (dhcp->offered_t1_renew != 0xffffffffUL) {
 800a222:	69bb      	ldr	r3, [r7, #24]
 800a224:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a226:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a22a:	d01d      	beq.n	800a268 <dhcp_bind+0xc4>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t1 renewal timer %"U32_F" secs\n", dhcp->offered_t1_renew));
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 800a22c:	69bb      	ldr	r3, [r7, #24]
 800a22e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a230:	331e      	adds	r3, #30
 800a232:	4a48      	ldr	r2, [pc, #288]	; (800a354 <dhcp_bind+0x1b0>)
 800a234:	fba2 2303 	umull	r2, r3, r2, r3
 800a238:	095b      	lsrs	r3, r3, #5
 800a23a:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 800a23c:	69fb      	ldr	r3, [r7, #28]
 800a23e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a242:	d302      	bcc.n	800a24a <dhcp_bind+0xa6>
      timeout = 0xffff;
 800a244:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a248:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t1_timeout = (u16_t)timeout;
 800a24a:	69fb      	ldr	r3, [r7, #28]
 800a24c:	b29a      	uxth	r2, r3
 800a24e:	69bb      	ldr	r3, [r7, #24]
 800a250:	831a      	strh	r2, [r3, #24]
    if (dhcp->t1_timeout == 0) {
 800a252:	69bb      	ldr	r3, [r7, #24]
 800a254:	8b1b      	ldrh	r3, [r3, #24]
 800a256:	2b00      	cmp	r3, #0
 800a258:	d102      	bne.n	800a260 <dhcp_bind+0xbc>
      dhcp->t1_timeout = 1;
 800a25a:	69bb      	ldr	r3, [r7, #24]
 800a25c:	2201      	movs	r2, #1
 800a25e:	831a      	strh	r2, [r3, #24]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t1_renew*1000));
    dhcp->t1_renew_time = dhcp->t1_timeout;
 800a260:	69bb      	ldr	r3, [r7, #24]
 800a262:	8b1a      	ldrh	r2, [r3, #24]
 800a264:	69bb      	ldr	r3, [r7, #24]
 800a266:	839a      	strh	r2, [r3, #28]
  }
  /* set renewal period timer */
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 800a268:	69bb      	ldr	r3, [r7, #24]
 800a26a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a26c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a270:	d01d      	beq.n	800a2ae <dhcp_bind+0x10a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t2 rebind timer %"U32_F" secs\n", dhcp->offered_t2_rebind));
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 800a272:	69bb      	ldr	r3, [r7, #24]
 800a274:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a276:	331e      	adds	r3, #30
 800a278:	4a36      	ldr	r2, [pc, #216]	; (800a354 <dhcp_bind+0x1b0>)
 800a27a:	fba2 2303 	umull	r2, r3, r2, r3
 800a27e:	095b      	lsrs	r3, r3, #5
 800a280:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 800a282:	69fb      	ldr	r3, [r7, #28]
 800a284:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a288:	d302      	bcc.n	800a290 <dhcp_bind+0xec>
      timeout = 0xffff;
 800a28a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a28e:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t2_timeout = (u16_t)timeout;
 800a290:	69fb      	ldr	r3, [r7, #28]
 800a292:	b29a      	uxth	r2, r3
 800a294:	69bb      	ldr	r3, [r7, #24]
 800a296:	835a      	strh	r2, [r3, #26]
    if (dhcp->t2_timeout == 0) {
 800a298:	69bb      	ldr	r3, [r7, #24]
 800a29a:	8b5b      	ldrh	r3, [r3, #26]
 800a29c:	2b00      	cmp	r3, #0
 800a29e:	d102      	bne.n	800a2a6 <dhcp_bind+0x102>
      dhcp->t2_timeout = 1;
 800a2a0:	69bb      	ldr	r3, [r7, #24]
 800a2a2:	2201      	movs	r2, #1
 800a2a4:	835a      	strh	r2, [r3, #26]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t2_rebind*1000));
    dhcp->t2_rebind_time = dhcp->t2_timeout;
 800a2a6:	69bb      	ldr	r3, [r7, #24]
 800a2a8:	8b5a      	ldrh	r2, [r3, #26]
 800a2aa:	69bb      	ldr	r3, [r7, #24]
 800a2ac:	83da      	strh	r2, [r3, #30]
  }

  /* If we have sub 1 minute lease, t2 and t1 will kick in at the same time. */
  if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
 800a2ae:	69bb      	ldr	r3, [r7, #24]
 800a2b0:	8b1a      	ldrh	r2, [r3, #24]
 800a2b2:	69bb      	ldr	r3, [r7, #24]
 800a2b4:	8b5b      	ldrh	r3, [r3, #26]
 800a2b6:	429a      	cmp	r2, r3
 800a2b8:	d306      	bcc.n	800a2c8 <dhcp_bind+0x124>
 800a2ba:	69bb      	ldr	r3, [r7, #24]
 800a2bc:	8b5b      	ldrh	r3, [r3, #26]
 800a2be:	2b00      	cmp	r3, #0
 800a2c0:	d002      	beq.n	800a2c8 <dhcp_bind+0x124>
    dhcp->t1_timeout = 0;
 800a2c2:	69bb      	ldr	r3, [r7, #24]
 800a2c4:	2200      	movs	r2, #0
 800a2c6:	831a      	strh	r2, [r3, #24]
  }

  if (dhcp->subnet_mask_given) {
 800a2c8:	69bb      	ldr	r3, [r7, #24]
 800a2ca:	7adb      	ldrb	r3, [r3, #11]
 800a2cc:	2b00      	cmp	r3, #0
 800a2ce:	d003      	beq.n	800a2d8 <dhcp_bind+0x134>
    /* copy offered network mask */
    ip4_addr_copy(sn_mask, dhcp->offered_sn_mask);
 800a2d0:	69bb      	ldr	r3, [r7, #24]
 800a2d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2d4:	613b      	str	r3, [r7, #16]
 800a2d6:	e014      	b.n	800a302 <dhcp_bind+0x15e>
  } else {
    /* subnet mask not given, choose a safe subnet mask given the network class */
    u8_t first_octet = ip4_addr1(&dhcp->offered_ip_addr);
 800a2d8:	69bb      	ldr	r3, [r7, #24]
 800a2da:	3328      	adds	r3, #40	; 0x28
 800a2dc:	781b      	ldrb	r3, [r3, #0]
 800a2de:	75fb      	strb	r3, [r7, #23]
    if (first_octet <= 127) {
 800a2e0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a2e4:	2b00      	cmp	r3, #0
 800a2e6:	db02      	blt.n	800a2ee <dhcp_bind+0x14a>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xff000000UL));
 800a2e8:	23ff      	movs	r3, #255	; 0xff
 800a2ea:	613b      	str	r3, [r7, #16]
 800a2ec:	e009      	b.n	800a302 <dhcp_bind+0x15e>
    } else if (first_octet >= 192) {
 800a2ee:	7dfb      	ldrb	r3, [r7, #23]
 800a2f0:	2bbf      	cmp	r3, #191	; 0xbf
 800a2f2:	d903      	bls.n	800a2fc <dhcp_bind+0x158>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffffff00UL));
 800a2f4:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 800a2f8:	613b      	str	r3, [r7, #16]
 800a2fa:	e002      	b.n	800a302 <dhcp_bind+0x15e>
    } else {
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffff0000UL));
 800a2fc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a300:	613b      	str	r3, [r7, #16]
    }
  }

  ip4_addr_copy(gw_addr, dhcp->offered_gw_addr);
 800a302:	69bb      	ldr	r3, [r7, #24]
 800a304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a306:	60fb      	str	r3, [r7, #12]
  /* gateway address not given? */
  if (ip4_addr_isany_val(gw_addr)) {
 800a308:	68fb      	ldr	r3, [r7, #12]
 800a30a:	2b00      	cmp	r3, #0
 800a30c:	d108      	bne.n	800a320 <dhcp_bind+0x17c>
    /* copy network address */
    ip4_addr_get_network(&gw_addr, &dhcp->offered_ip_addr, &sn_mask);
 800a30e:	69bb      	ldr	r3, [r7, #24]
 800a310:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a312:	693b      	ldr	r3, [r7, #16]
 800a314:	4013      	ands	r3, r2
 800a316:	60fb      	str	r3, [r7, #12]
    /* use first host address on network as gateway */
    ip4_addr_set_u32(&gw_addr, ip4_addr_get_u32(&gw_addr) | PP_HTONL(0x00000001UL));
 800a318:	68fb      	ldr	r3, [r7, #12]
 800a31a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a31e:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_bind(): IP: 0x%08"X32_F" SN: 0x%08"X32_F" GW: 0x%08"X32_F"\n",
    ip4_addr_get_u32(&dhcp->offered_ip_addr), ip4_addr_get_u32(&sn_mask), ip4_addr_get_u32(&gw_addr)));
  /* netif is now bound to DHCP leased address - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BOUND);
 800a320:	210a      	movs	r1, #10
 800a322:	69b8      	ldr	r0, [r7, #24]
 800a324:	f000 fa78 	bl	800a818 <dhcp_set_state>

  netif_set_addr(netif, &dhcp->offered_ip_addr, &sn_mask, &gw_addr);
 800a328:	69bb      	ldr	r3, [r7, #24]
 800a32a:	f103 0128 	add.w	r1, r3, #40	; 0x28
 800a32e:	f107 030c 	add.w	r3, r7, #12
 800a332:	f107 0210 	add.w	r2, r7, #16
 800a336:	6878      	ldr	r0, [r7, #4]
 800a338:	f7f9 fb0e 	bl	8003958 <netif_set_addr>
  /* interface is used by routing now that an address is set */
}
 800a33c:	3720      	adds	r7, #32
 800a33e:	46bd      	mov	sp, r7
 800a340:	bd80      	pop	{r7, pc}
 800a342:	bf00      	nop
 800a344:	080100fc 	.word	0x080100fc
 800a348:	0801023c 	.word	0x0801023c
 800a34c:	0801015c 	.word	0x0801015c
 800a350:	08010258 	.word	0x08010258
 800a354:	88888889 	.word	0x88888889

0800a358 <dhcp_renew>:
 *
 * @param netif network interface which must renew its lease
 */
err_t
dhcp_renew(struct netif *netif)
{
 800a358:	b580      	push	{r7, lr}
 800a35a:	b088      	sub	sp, #32
 800a35c:	af02      	add	r7, sp, #8
 800a35e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a364:	613b      	str	r3, [r7, #16]
  err_t result;
  u16_t msecs;
  u8_t i;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_renew()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_RENEWING);
 800a366:	2105      	movs	r1, #5
 800a368:	6938      	ldr	r0, [r7, #16]
 800a36a:	f000 fa55 	bl	800a818 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  result = dhcp_create_msg(netif, dhcp, DHCP_REQUEST);
 800a36e:	2203      	movs	r2, #3
 800a370:	6939      	ldr	r1, [r7, #16]
 800a372:	6878      	ldr	r0, [r7, #4]
 800a374:	f000 fed8 	bl	800b128 <dhcp_create_msg>
 800a378:	4603      	mov	r3, r0
 800a37a:	73fb      	strb	r3, [r7, #15]
  if (result == ERR_OK) {
 800a37c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a380:	2b00      	cmp	r3, #0
 800a382:	d13b      	bne.n	800a3fc <dhcp_renew+0xa4>
    dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 800a384:	2202      	movs	r2, #2
 800a386:	2139      	movs	r1, #57	; 0x39
 800a388:	6938      	ldr	r0, [r7, #16]
 800a38a:	f000 fa5f 	bl	800a84c <dhcp_option>
    dhcp_option_short(dhcp, DHCP_MAX_MSG_LEN(netif));
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a392:	4619      	mov	r1, r3
 800a394:	6938      	ldr	r0, [r7, #16]
 800a396:	f000 fabb 	bl	800a910 <dhcp_option_short>

    dhcp_option(dhcp, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 800a39a:	2203      	movs	r2, #3
 800a39c:	2137      	movs	r1, #55	; 0x37
 800a39e:	6938      	ldr	r0, [r7, #16]
 800a3a0:	f000 fa54 	bl	800a84c <dhcp_option>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800a3a4:	2300      	movs	r3, #0
 800a3a6:	75fb      	strb	r3, [r7, #23]
 800a3a8:	e009      	b.n	800a3be <dhcp_renew+0x66>
      dhcp_option_byte(dhcp, dhcp_discover_request_options[i]);
 800a3aa:	7dfb      	ldrb	r3, [r7, #23]
 800a3ac:	4a2a      	ldr	r2, [pc, #168]	; (800a458 <dhcp_renew+0x100>)
 800a3ae:	5cd3      	ldrb	r3, [r2, r3]
 800a3b0:	4619      	mov	r1, r3
 800a3b2:	6938      	ldr	r0, [r7, #16]
 800a3b4:	f000 fa84 	bl	800a8c0 <dhcp_option_byte>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800a3b8:	7dfb      	ldrb	r3, [r7, #23]
 800a3ba:	3301      	adds	r3, #1
 800a3bc:	75fb      	strb	r3, [r7, #23]
 800a3be:	7dfb      	ldrb	r3, [r7, #23]
 800a3c0:	2b02      	cmp	r3, #2
 800a3c2:	d9f2      	bls.n	800a3aa <dhcp_renew+0x52>
#if LWIP_NETIF_HOSTNAME
    dhcp_option_hostname(dhcp, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    /* append DHCP message trailer */
    dhcp_option_trailer(dhcp);
 800a3c4:	6938      	ldr	r0, [r7, #16]
 800a3c6:	f001 f853 	bl	800b470 <dhcp_option_trailer>

    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
 800a3ca:	693b      	ldr	r3, [r7, #16]
 800a3cc:	68da      	ldr	r2, [r3, #12]
 800a3ce:	693b      	ldr	r3, [r7, #16]
 800a3d0:	8a9b      	ldrh	r3, [r3, #20]
 800a3d2:	33f0      	adds	r3, #240	; 0xf0
 800a3d4:	b29b      	uxth	r3, r3
 800a3d6:	4619      	mov	r1, r3
 800a3d8:	4610      	mov	r0, r2
 800a3da:	f7f9 fdf9 	bl	8003fd0 <pbuf_realloc>

    udp_sendto_if(dhcp_pcb, dhcp->p_out, &dhcp->server_ip_addr, DHCP_SERVER_PORT, netif);
 800a3de:	4b1f      	ldr	r3, [pc, #124]	; (800a45c <dhcp_renew+0x104>)
 800a3e0:	6818      	ldr	r0, [r3, #0]
 800a3e2:	693b      	ldr	r3, [r7, #16]
 800a3e4:	68d9      	ldr	r1, [r3, #12]
 800a3e6:	693b      	ldr	r3, [r7, #16]
 800a3e8:	f103 0224 	add.w	r2, r3, #36	; 0x24
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	9300      	str	r3, [sp, #0]
 800a3f0:	2343      	movs	r3, #67	; 0x43
 800a3f2:	f7fe ffdd 	bl	80093b0 <udp_sendto_if>
    dhcp_delete_msg(dhcp);
 800a3f6:	6938      	ldr	r0, [r7, #16]
 800a3f8:	f000 fff8 	bl	800b3ec <dhcp_delete_msg>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew: RENEWING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_renew: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 800a3fc:	693b      	ldr	r3, [r7, #16]
 800a3fe:	7a9b      	ldrb	r3, [r3, #10]
 800a400:	2bff      	cmp	r3, #255	; 0xff
 800a402:	d005      	beq.n	800a410 <dhcp_renew+0xb8>
    dhcp->tries++;
 800a404:	693b      	ldr	r3, [r7, #16]
 800a406:	7a9b      	ldrb	r3, [r3, #10]
 800a408:	3301      	adds	r3, #1
 800a40a:	b2da      	uxtb	r2, r3
 800a40c:	693b      	ldr	r3, [r7, #16]
 800a40e:	729a      	strb	r2, [r3, #10]
  }
  /* back-off on retries, but to a maximum of 20 seconds */
  msecs = dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000;
 800a410:	693b      	ldr	r3, [r7, #16]
 800a412:	7a9b      	ldrb	r3, [r3, #10]
 800a414:	2b09      	cmp	r3, #9
 800a416:	d80a      	bhi.n	800a42e <dhcp_renew+0xd6>
 800a418:	693b      	ldr	r3, [r7, #16]
 800a41a:	7a9b      	ldrb	r3, [r3, #10]
 800a41c:	b29b      	uxth	r3, r3
 800a41e:	461a      	mov	r2, r3
 800a420:	0152      	lsls	r2, r2, #5
 800a422:	1ad2      	subs	r2, r2, r3
 800a424:	0092      	lsls	r2, r2, #2
 800a426:	4413      	add	r3, r2
 800a428:	011b      	lsls	r3, r3, #4
 800a42a:	b29b      	uxth	r3, r3
 800a42c:	e001      	b.n	800a432 <dhcp_renew+0xda>
 800a42e:	f644 6320 	movw	r3, #20000	; 0x4e20
 800a432:	81bb      	strh	r3, [r7, #12]
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 800a434:	89bb      	ldrh	r3, [r7, #12]
 800a436:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800a43a:	4a09      	ldr	r2, [pc, #36]	; (800a460 <dhcp_renew+0x108>)
 800a43c:	fb82 1203 	smull	r1, r2, r2, r3
 800a440:	1152      	asrs	r2, r2, #5
 800a442:	17db      	asrs	r3, r3, #31
 800a444:	1ad3      	subs	r3, r2, r3
 800a446:	b29a      	uxth	r2, r3
 800a448:	693b      	ldr	r3, [r7, #16]
 800a44a:	82da      	strh	r2, [r3, #22]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 800a44c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a450:	4618      	mov	r0, r3
 800a452:	3718      	adds	r7, #24
 800a454:	46bd      	mov	sp, r7
 800a456:	bd80      	pop	{r7, pc}
 800a458:	20000014 	.word	0x20000014
 800a45c:	20000110 	.word	0x20000110
 800a460:	10624dd3 	.word	0x10624dd3

0800a464 <dhcp_rebind>:
 *
 * @param netif network interface which must rebind with a DHCP server
 */
static err_t
dhcp_rebind(struct netif *netif)
{
 800a464:	b580      	push	{r7, lr}
 800a466:	b088      	sub	sp, #32
 800a468:	af02      	add	r7, sp, #8
 800a46a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a470:	613b      	str	r3, [r7, #16]
  err_t result;
  u16_t msecs;
  u8_t i;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBINDING);
 800a472:	2104      	movs	r1, #4
 800a474:	6938      	ldr	r0, [r7, #16]
 800a476:	f000 f9cf 	bl	800a818 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  result = dhcp_create_msg(netif, dhcp, DHCP_REQUEST);
 800a47a:	2203      	movs	r2, #3
 800a47c:	6939      	ldr	r1, [r7, #16]
 800a47e:	6878      	ldr	r0, [r7, #4]
 800a480:	f000 fe52 	bl	800b128 <dhcp_create_msg>
 800a484:	4603      	mov	r3, r0
 800a486:	73fb      	strb	r3, [r7, #15]
  if (result == ERR_OK) {
 800a488:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a48c:	2b00      	cmp	r3, #0
 800a48e:	d139      	bne.n	800a504 <dhcp_rebind+0xa0>
    dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 800a490:	2202      	movs	r2, #2
 800a492:	2139      	movs	r1, #57	; 0x39
 800a494:	6938      	ldr	r0, [r7, #16]
 800a496:	f000 f9d9 	bl	800a84c <dhcp_option>
    dhcp_option_short(dhcp, DHCP_MAX_MSG_LEN(netif));
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a49e:	4619      	mov	r1, r3
 800a4a0:	6938      	ldr	r0, [r7, #16]
 800a4a2:	f000 fa35 	bl	800a910 <dhcp_option_short>

    dhcp_option(dhcp, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 800a4a6:	2203      	movs	r2, #3
 800a4a8:	2137      	movs	r1, #55	; 0x37
 800a4aa:	6938      	ldr	r0, [r7, #16]
 800a4ac:	f000 f9ce 	bl	800a84c <dhcp_option>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800a4b0:	2300      	movs	r3, #0
 800a4b2:	75fb      	strb	r3, [r7, #23]
 800a4b4:	e009      	b.n	800a4ca <dhcp_rebind+0x66>
      dhcp_option_byte(dhcp, dhcp_discover_request_options[i]);
 800a4b6:	7dfb      	ldrb	r3, [r7, #23]
 800a4b8:	4a29      	ldr	r2, [pc, #164]	; (800a560 <dhcp_rebind+0xfc>)
 800a4ba:	5cd3      	ldrb	r3, [r2, r3]
 800a4bc:	4619      	mov	r1, r3
 800a4be:	6938      	ldr	r0, [r7, #16]
 800a4c0:	f000 f9fe 	bl	800a8c0 <dhcp_option_byte>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800a4c4:	7dfb      	ldrb	r3, [r7, #23]
 800a4c6:	3301      	adds	r3, #1
 800a4c8:	75fb      	strb	r3, [r7, #23]
 800a4ca:	7dfb      	ldrb	r3, [r7, #23]
 800a4cc:	2b02      	cmp	r3, #2
 800a4ce:	d9f2      	bls.n	800a4b6 <dhcp_rebind+0x52>

#if LWIP_NETIF_HOSTNAME
    dhcp_option_hostname(dhcp, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    dhcp_option_trailer(dhcp);
 800a4d0:	6938      	ldr	r0, [r7, #16]
 800a4d2:	f000 ffcd 	bl	800b470 <dhcp_option_trailer>

    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
 800a4d6:	693b      	ldr	r3, [r7, #16]
 800a4d8:	68da      	ldr	r2, [r3, #12]
 800a4da:	693b      	ldr	r3, [r7, #16]
 800a4dc:	8a9b      	ldrh	r3, [r3, #20]
 800a4de:	33f0      	adds	r3, #240	; 0xf0
 800a4e0:	b29b      	uxth	r3, r3
 800a4e2:	4619      	mov	r1, r3
 800a4e4:	4610      	mov	r0, r2
 800a4e6:	f7f9 fd73 	bl	8003fd0 <pbuf_realloc>

    /* broadcast to server */
    udp_sendto_if(dhcp_pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif);
 800a4ea:	4b1e      	ldr	r3, [pc, #120]	; (800a564 <dhcp_rebind+0x100>)
 800a4ec:	6818      	ldr	r0, [r3, #0]
 800a4ee:	693b      	ldr	r3, [r7, #16]
 800a4f0:	68d9      	ldr	r1, [r3, #12]
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	9300      	str	r3, [sp, #0]
 800a4f6:	2343      	movs	r3, #67	; 0x43
 800a4f8:	4a1b      	ldr	r2, [pc, #108]	; (800a568 <dhcp_rebind+0x104>)
 800a4fa:	f7fe ff59 	bl	80093b0 <udp_sendto_if>
    dhcp_delete_msg(dhcp);
 800a4fe:	6938      	ldr	r0, [r7, #16]
 800a500:	f000 ff74 	bl	800b3ec <dhcp_delete_msg>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind: REBINDING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_rebind: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 800a504:	693b      	ldr	r3, [r7, #16]
 800a506:	7a9b      	ldrb	r3, [r3, #10]
 800a508:	2bff      	cmp	r3, #255	; 0xff
 800a50a:	d005      	beq.n	800a518 <dhcp_rebind+0xb4>
    dhcp->tries++;
 800a50c:	693b      	ldr	r3, [r7, #16]
 800a50e:	7a9b      	ldrb	r3, [r3, #10]
 800a510:	3301      	adds	r3, #1
 800a512:	b2da      	uxtb	r2, r3
 800a514:	693b      	ldr	r3, [r7, #16]
 800a516:	729a      	strb	r2, [r3, #10]
  }
  msecs = dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000;
 800a518:	693b      	ldr	r3, [r7, #16]
 800a51a:	7a9b      	ldrb	r3, [r3, #10]
 800a51c:	2b09      	cmp	r3, #9
 800a51e:	d80a      	bhi.n	800a536 <dhcp_rebind+0xd2>
 800a520:	693b      	ldr	r3, [r7, #16]
 800a522:	7a9b      	ldrb	r3, [r3, #10]
 800a524:	b29b      	uxth	r3, r3
 800a526:	461a      	mov	r2, r3
 800a528:	0152      	lsls	r2, r2, #5
 800a52a:	1ad2      	subs	r2, r2, r3
 800a52c:	0092      	lsls	r2, r2, #2
 800a52e:	4413      	add	r3, r2
 800a530:	00db      	lsls	r3, r3, #3
 800a532:	b29b      	uxth	r3, r3
 800a534:	e001      	b.n	800a53a <dhcp_rebind+0xd6>
 800a536:	f242 7310 	movw	r3, #10000	; 0x2710
 800a53a:	81bb      	strh	r3, [r7, #12]
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 800a53c:	89bb      	ldrh	r3, [r7, #12]
 800a53e:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800a542:	4a0a      	ldr	r2, [pc, #40]	; (800a56c <dhcp_rebind+0x108>)
 800a544:	fb82 1203 	smull	r1, r2, r2, r3
 800a548:	1152      	asrs	r2, r2, #5
 800a54a:	17db      	asrs	r3, r3, #31
 800a54c:	1ad3      	subs	r3, r2, r3
 800a54e:	b29a      	uxth	r2, r3
 800a550:	693b      	ldr	r3, [r7, #16]
 800a552:	82da      	strh	r2, [r3, #22]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 800a554:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a558:	4618      	mov	r0, r3
 800a55a:	3718      	adds	r7, #24
 800a55c:	46bd      	mov	sp, r7
 800a55e:	bd80      	pop	{r7, pc}
 800a560:	20000014 	.word	0x20000014
 800a564:	20000110 	.word	0x20000110
 800a568:	08010d6c 	.word	0x08010d6c
 800a56c:	10624dd3 	.word	0x10624dd3

0800a570 <dhcp_reboot>:
 *
 * @param netif network interface which must reboot
 */
static err_t
dhcp_reboot(struct netif *netif)
{
 800a570:	b580      	push	{r7, lr}
 800a572:	b088      	sub	sp, #32
 800a574:	af02      	add	r7, sp, #8
 800a576:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a57c:	613b      	str	r3, [r7, #16]
  err_t result;
  u16_t msecs;
  u8_t i;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBOOTING);
 800a57e:	2103      	movs	r1, #3
 800a580:	6938      	ldr	r0, [r7, #16]
 800a582:	f000 f949 	bl	800a818 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  result = dhcp_create_msg(netif, dhcp, DHCP_REQUEST);
 800a586:	2203      	movs	r2, #3
 800a588:	6939      	ldr	r1, [r7, #16]
 800a58a:	6878      	ldr	r0, [r7, #4]
 800a58c:	f000 fdcc 	bl	800b128 <dhcp_create_msg>
 800a590:	4603      	mov	r3, r0
 800a592:	73fb      	strb	r3, [r7, #15]
  if (result == ERR_OK) {
 800a594:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a598:	2b00      	cmp	r3, #0
 800a59a:	d147      	bne.n	800a62c <dhcp_reboot+0xbc>
    dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 800a59c:	2202      	movs	r2, #2
 800a59e:	2139      	movs	r1, #57	; 0x39
 800a5a0:	6938      	ldr	r0, [r7, #16]
 800a5a2:	f000 f953 	bl	800a84c <dhcp_option>
    dhcp_option_short(dhcp, DHCP_MAX_MSG_LEN_MIN_REQUIRED);
 800a5a6:	f44f 7110 	mov.w	r1, #576	; 0x240
 800a5aa:	6938      	ldr	r0, [r7, #16]
 800a5ac:	f000 f9b0 	bl	800a910 <dhcp_option_short>

    dhcp_option(dhcp, DHCP_OPTION_REQUESTED_IP, 4);
 800a5b0:	2204      	movs	r2, #4
 800a5b2:	2132      	movs	r1, #50	; 0x32
 800a5b4:	6938      	ldr	r0, [r7, #16]
 800a5b6:	f000 f949 	bl	800a84c <dhcp_option>
    dhcp_option_long(dhcp, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 800a5ba:	693b      	ldr	r3, [r7, #16]
 800a5bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a5be:	4618      	mov	r0, r3
 800a5c0:	f7f8 fd54 	bl	800306c <lwip_htonl>
 800a5c4:	4603      	mov	r3, r0
 800a5c6:	4619      	mov	r1, r3
 800a5c8:	6938      	ldr	r0, [r7, #16]
 800a5ca:	f000 f9db 	bl	800a984 <dhcp_option_long>

    dhcp_option(dhcp, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 800a5ce:	2203      	movs	r2, #3
 800a5d0:	2137      	movs	r1, #55	; 0x37
 800a5d2:	6938      	ldr	r0, [r7, #16]
 800a5d4:	f000 f93a 	bl	800a84c <dhcp_option>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800a5d8:	2300      	movs	r3, #0
 800a5da:	75fb      	strb	r3, [r7, #23]
 800a5dc:	e009      	b.n	800a5f2 <dhcp_reboot+0x82>
      dhcp_option_byte(dhcp, dhcp_discover_request_options[i]);
 800a5de:	7dfb      	ldrb	r3, [r7, #23]
 800a5e0:	4a29      	ldr	r2, [pc, #164]	; (800a688 <dhcp_reboot+0x118>)
 800a5e2:	5cd3      	ldrb	r3, [r2, r3]
 800a5e4:	4619      	mov	r1, r3
 800a5e6:	6938      	ldr	r0, [r7, #16]
 800a5e8:	f000 f96a 	bl	800a8c0 <dhcp_option_byte>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800a5ec:	7dfb      	ldrb	r3, [r7, #23]
 800a5ee:	3301      	adds	r3, #1
 800a5f0:	75fb      	strb	r3, [r7, #23]
 800a5f2:	7dfb      	ldrb	r3, [r7, #23]
 800a5f4:	2b02      	cmp	r3, #2
 800a5f6:	d9f2      	bls.n	800a5de <dhcp_reboot+0x6e>
    }

    dhcp_option_trailer(dhcp);
 800a5f8:	6938      	ldr	r0, [r7, #16]
 800a5fa:	f000 ff39 	bl	800b470 <dhcp_option_trailer>

    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
 800a5fe:	693b      	ldr	r3, [r7, #16]
 800a600:	68da      	ldr	r2, [r3, #12]
 800a602:	693b      	ldr	r3, [r7, #16]
 800a604:	8a9b      	ldrh	r3, [r3, #20]
 800a606:	33f0      	adds	r3, #240	; 0xf0
 800a608:	b29b      	uxth	r3, r3
 800a60a:	4619      	mov	r1, r3
 800a60c:	4610      	mov	r0, r2
 800a60e:	f7f9 fcdf 	bl	8003fd0 <pbuf_realloc>

    /* broadcast to server */
    udp_sendto_if(dhcp_pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif);
 800a612:	4b1e      	ldr	r3, [pc, #120]	; (800a68c <dhcp_reboot+0x11c>)
 800a614:	6818      	ldr	r0, [r3, #0]
 800a616:	693b      	ldr	r3, [r7, #16]
 800a618:	68d9      	ldr	r1, [r3, #12]
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	9300      	str	r3, [sp, #0]
 800a61e:	2343      	movs	r3, #67	; 0x43
 800a620:	4a1b      	ldr	r2, [pc, #108]	; (800a690 <dhcp_reboot+0x120>)
 800a622:	f7fe fec5 	bl	80093b0 <udp_sendto_if>
    dhcp_delete_msg(dhcp);
 800a626:	6938      	ldr	r0, [r7, #16]
 800a628:	f000 fee0 	bl	800b3ec <dhcp_delete_msg>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot: REBOOTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_reboot: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 800a62c:	693b      	ldr	r3, [r7, #16]
 800a62e:	7a9b      	ldrb	r3, [r3, #10]
 800a630:	2bff      	cmp	r3, #255	; 0xff
 800a632:	d005      	beq.n	800a640 <dhcp_reboot+0xd0>
    dhcp->tries++;
 800a634:	693b      	ldr	r3, [r7, #16]
 800a636:	7a9b      	ldrb	r3, [r3, #10]
 800a638:	3301      	adds	r3, #1
 800a63a:	b2da      	uxtb	r2, r3
 800a63c:	693b      	ldr	r3, [r7, #16]
 800a63e:	729a      	strb	r2, [r3, #10]
  }
  msecs = dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000;
 800a640:	693b      	ldr	r3, [r7, #16]
 800a642:	7a9b      	ldrb	r3, [r3, #10]
 800a644:	2b09      	cmp	r3, #9
 800a646:	d80a      	bhi.n	800a65e <dhcp_reboot+0xee>
 800a648:	693b      	ldr	r3, [r7, #16]
 800a64a:	7a9b      	ldrb	r3, [r3, #10]
 800a64c:	b29b      	uxth	r3, r3
 800a64e:	461a      	mov	r2, r3
 800a650:	0152      	lsls	r2, r2, #5
 800a652:	1ad2      	subs	r2, r2, r3
 800a654:	0092      	lsls	r2, r2, #2
 800a656:	4413      	add	r3, r2
 800a658:	00db      	lsls	r3, r3, #3
 800a65a:	b29b      	uxth	r3, r3
 800a65c:	e001      	b.n	800a662 <dhcp_reboot+0xf2>
 800a65e:	f242 7310 	movw	r3, #10000	; 0x2710
 800a662:	81bb      	strh	r3, [r7, #12]
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 800a664:	89bb      	ldrh	r3, [r7, #12]
 800a666:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800a66a:	4a0a      	ldr	r2, [pc, #40]	; (800a694 <dhcp_reboot+0x124>)
 800a66c:	fb82 1203 	smull	r1, r2, r2, r3
 800a670:	1152      	asrs	r2, r2, #5
 800a672:	17db      	asrs	r3, r3, #31
 800a674:	1ad3      	subs	r3, r2, r3
 800a676:	b29a      	uxth	r2, r3
 800a678:	693b      	ldr	r3, [r7, #16]
 800a67a:	82da      	strh	r2, [r3, #22]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 800a67c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a680:	4618      	mov	r0, r3
 800a682:	3718      	adds	r7, #24
 800a684:	46bd      	mov	sp, r7
 800a686:	bd80      	pop	{r7, pc}
 800a688:	20000014 	.word	0x20000014
 800a68c:	20000110 	.word	0x20000110
 800a690:	08010d6c 	.word	0x08010d6c
 800a694:	10624dd3 	.word	0x10624dd3

0800a698 <dhcp_release>:
 *
 * @param netif network interface which must release its lease
 */
err_t
dhcp_release(struct netif *netif)
{
 800a698:	b580      	push	{r7, lr}
 800a69a:	b088      	sub	sp, #32
 800a69c:	af02      	add	r7, sp, #8
 800a69e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6a4:	617b      	str	r3, [r7, #20]
  err_t result;
  ip_addr_t server_ip_addr;
  u8_t is_dhcp_supplied_address;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_release()\n"));
  if (dhcp == NULL) {
 800a6a6:	697b      	ldr	r3, [r7, #20]
 800a6a8:	2b00      	cmp	r3, #0
 800a6aa:	d102      	bne.n	800a6b2 <dhcp_release+0x1a>
    return ERR_ARG;
 800a6ac:	f06f 030f 	mvn.w	r3, #15
 800a6b0:	e072      	b.n	800a798 <dhcp_release+0x100>
  }
  ip_addr_copy(server_ip_addr, dhcp->server_ip_addr);
 800a6b2:	697b      	ldr	r3, [r7, #20]
 800a6b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6b6:	60fb      	str	r3, [r7, #12]

  is_dhcp_supplied_address = dhcp_supplied_address(netif);
 800a6b8:	6878      	ldr	r0, [r7, #4]
 800a6ba:	f000 ff33 	bl	800b524 <dhcp_supplied_address>
 800a6be:	4603      	mov	r3, r0
 800a6c0:	74fb      	strb	r3, [r7, #19]

  /* idle DHCP client */
  dhcp_set_state(dhcp, DHCP_STATE_OFF);
 800a6c2:	2100      	movs	r1, #0
 800a6c4:	6978      	ldr	r0, [r7, #20]
 800a6c6:	f000 f8a7 	bl	800a818 <dhcp_set_state>
  /* clean old DHCP offer */
  ip_addr_set_zero_ip4(&dhcp->server_ip_addr);
 800a6ca:	697b      	ldr	r3, [r7, #20]
 800a6cc:	2200      	movs	r2, #0
 800a6ce:	625a      	str	r2, [r3, #36]	; 0x24
  ip4_addr_set_zero(&dhcp->offered_ip_addr);
 800a6d0:	697b      	ldr	r3, [r7, #20]
 800a6d2:	2200      	movs	r2, #0
 800a6d4:	629a      	str	r2, [r3, #40]	; 0x28
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 800a6d6:	697b      	ldr	r3, [r7, #20]
 800a6d8:	2200      	movs	r2, #0
 800a6da:	62da      	str	r2, [r3, #44]	; 0x2c
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 800a6dc:	697b      	ldr	r3, [r7, #20]
 800a6de:	2200      	movs	r2, #0
 800a6e0:	631a      	str	r2, [r3, #48]	; 0x30
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */
  dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
 800a6e2:	697b      	ldr	r3, [r7, #20]
 800a6e4:	2200      	movs	r2, #0
 800a6e6:	63da      	str	r2, [r3, #60]	; 0x3c
 800a6e8:	697b      	ldr	r3, [r7, #20]
 800a6ea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a6ec:	697b      	ldr	r3, [r7, #20]
 800a6ee:	639a      	str	r2, [r3, #56]	; 0x38
 800a6f0:	697b      	ldr	r3, [r7, #20]
 800a6f2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a6f4:	697b      	ldr	r3, [r7, #20]
 800a6f6:	635a      	str	r2, [r3, #52]	; 0x34
  dhcp->t1_renew_time = dhcp->t2_rebind_time = dhcp->lease_used = dhcp->t0_timeout = 0;
 800a6f8:	697b      	ldr	r3, [r7, #20]
 800a6fa:	2200      	movs	r2, #0
 800a6fc:	845a      	strh	r2, [r3, #34]	; 0x22
 800a6fe:	697b      	ldr	r3, [r7, #20]
 800a700:	8c5a      	ldrh	r2, [r3, #34]	; 0x22
 800a702:	697b      	ldr	r3, [r7, #20]
 800a704:	841a      	strh	r2, [r3, #32]
 800a706:	697b      	ldr	r3, [r7, #20]
 800a708:	8c1a      	ldrh	r2, [r3, #32]
 800a70a:	697b      	ldr	r3, [r7, #20]
 800a70c:	83da      	strh	r2, [r3, #30]
 800a70e:	697b      	ldr	r3, [r7, #20]
 800a710:	8bda      	ldrh	r2, [r3, #30]
 800a712:	697b      	ldr	r3, [r7, #20]
 800a714:	839a      	strh	r2, [r3, #28]

  if (!is_dhcp_supplied_address) {
 800a716:	7cfb      	ldrb	r3, [r7, #19]
 800a718:	2b00      	cmp	r3, #0
 800a71a:	d101      	bne.n	800a720 <dhcp_release+0x88>
    /* don't issue release message when address is not dhcp-assigned */
    return ERR_OK;
 800a71c:	2300      	movs	r3, #0
 800a71e:	e03b      	b.n	800a798 <dhcp_release+0x100>
  }

  /* create and initialize the DHCP message header */
  result = dhcp_create_msg(netif, dhcp, DHCP_RELEASE);
 800a720:	2207      	movs	r2, #7
 800a722:	6979      	ldr	r1, [r7, #20]
 800a724:	6878      	ldr	r0, [r7, #4]
 800a726:	f000 fcff 	bl	800b128 <dhcp_create_msg>
 800a72a:	4603      	mov	r3, r0
 800a72c:	74bb      	strb	r3, [r7, #18]
  if (result == ERR_OK) {
 800a72e:	f997 3012 	ldrsb.w	r3, [r7, #18]
 800a732:	2b00      	cmp	r3, #0
 800a734:	d128      	bne.n	800a788 <dhcp_release+0xf0>
    dhcp_option(dhcp, DHCP_OPTION_SERVER_ID, 4);
 800a736:	2204      	movs	r2, #4
 800a738:	2136      	movs	r1, #54	; 0x36
 800a73a:	6978      	ldr	r0, [r7, #20]
 800a73c:	f000 f886 	bl	800a84c <dhcp_option>
    dhcp_option_long(dhcp, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 800a740:	68fb      	ldr	r3, [r7, #12]
 800a742:	4618      	mov	r0, r3
 800a744:	f7f8 fc92 	bl	800306c <lwip_htonl>
 800a748:	4603      	mov	r3, r0
 800a74a:	4619      	mov	r1, r3
 800a74c:	6978      	ldr	r0, [r7, #20]
 800a74e:	f000 f919 	bl	800a984 <dhcp_option_long>

    dhcp_option_trailer(dhcp);
 800a752:	6978      	ldr	r0, [r7, #20]
 800a754:	f000 fe8c 	bl	800b470 <dhcp_option_trailer>

    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
 800a758:	697b      	ldr	r3, [r7, #20]
 800a75a:	68da      	ldr	r2, [r3, #12]
 800a75c:	697b      	ldr	r3, [r7, #20]
 800a75e:	8a9b      	ldrh	r3, [r3, #20]
 800a760:	33f0      	adds	r3, #240	; 0xf0
 800a762:	b29b      	uxth	r3, r3
 800a764:	4619      	mov	r1, r3
 800a766:	4610      	mov	r0, r2
 800a768:	f7f9 fc32 	bl	8003fd0 <pbuf_realloc>

    udp_sendto_if(dhcp_pcb, dhcp->p_out, &server_ip_addr, DHCP_SERVER_PORT, netif);
 800a76c:	4b0c      	ldr	r3, [pc, #48]	; (800a7a0 <dhcp_release+0x108>)
 800a76e:	6818      	ldr	r0, [r3, #0]
 800a770:	697b      	ldr	r3, [r7, #20]
 800a772:	68d9      	ldr	r1, [r3, #12]
 800a774:	f107 020c 	add.w	r2, r7, #12
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	9300      	str	r3, [sp, #0]
 800a77c:	2343      	movs	r3, #67	; 0x43
 800a77e:	f7fe fe17 	bl	80093b0 <udp_sendto_if>
    dhcp_delete_msg(dhcp);
 800a782:	6978      	ldr	r0, [r7, #20]
 800a784:	f000 fe32 	bl	800b3ec <dhcp_delete_msg>
  } else {
    /* sending release failed, but that's not a problem since the correct behaviour of dhcp does not rely on release */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_release: could not allocate DHCP request\n"));
  }
  /* remove IP address from interface (prevents routing from selecting this interface) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 800a788:	4b06      	ldr	r3, [pc, #24]	; (800a7a4 <dhcp_release+0x10c>)
 800a78a:	4a06      	ldr	r2, [pc, #24]	; (800a7a4 <dhcp_release+0x10c>)
 800a78c:	4905      	ldr	r1, [pc, #20]	; (800a7a4 <dhcp_release+0x10c>)
 800a78e:	6878      	ldr	r0, [r7, #4]
 800a790:	f7f9 f8e2 	bl	8003958 <netif_set_addr>

  return result;
 800a794:	f997 3012 	ldrsb.w	r3, [r7, #18]
}
 800a798:	4618      	mov	r0, r3
 800a79a:	3718      	adds	r7, #24
 800a79c:	46bd      	mov	sp, r7
 800a79e:	bd80      	pop	{r7, pc}
 800a7a0:	20000110 	.word	0x20000110
 800a7a4:	08010d68 	.word	0x08010d68

0800a7a8 <dhcp_stop>:
 *
 * @param netif The network interface to stop DHCP on
 */
void
dhcp_stop(struct netif *netif)
{
 800a7a8:	b580      	push	{r7, lr}
 800a7aa:	b084      	sub	sp, #16
 800a7ac:	af00      	add	r7, sp, #0
 800a7ae:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp;
  LWIP_ERROR("dhcp_stop: netif != NULL", (netif != NULL), return;);
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	2b00      	cmp	r3, #0
 800a7b4:	d107      	bne.n	800a7c6 <dhcp_stop+0x1e>
 800a7b6:	4b14      	ldr	r3, [pc, #80]	; (800a808 <dhcp_stop+0x60>)
 800a7b8:	f240 5242 	movw	r2, #1346	; 0x542
 800a7bc:	4913      	ldr	r1, [pc, #76]	; (800a80c <dhcp_stop+0x64>)
 800a7be:	4814      	ldr	r0, [pc, #80]	; (800a810 <dhcp_stop+0x68>)
 800a7c0:	f003 f94e 	bl	800da60 <iprintf>
 800a7c4:	e01d      	b.n	800a802 <dhcp_stop+0x5a>
  dhcp = netif_dhcp_data(netif);
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7ca:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_stop()\n"));
  /* netif is DHCP configured? */
  if (dhcp != NULL) {
 800a7cc:	68fb      	ldr	r3, [r7, #12]
 800a7ce:	2b00      	cmp	r3, #0
 800a7d0:	d017      	beq.n	800a802 <dhcp_stop+0x5a>
      autoip_stop(netif);
      dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
    }
#endif /* LWIP_DHCP_AUTOIP_COOP */

    LWIP_ASSERT("reply wasn't freed", dhcp->msg_in == NULL);
 800a7d2:	68fb      	ldr	r3, [r7, #12]
 800a7d4:	685b      	ldr	r3, [r3, #4]
 800a7d6:	2b00      	cmp	r3, #0
 800a7d8:	d006      	beq.n	800a7e8 <dhcp_stop+0x40>
 800a7da:	4b0b      	ldr	r3, [pc, #44]	; (800a808 <dhcp_stop+0x60>)
 800a7dc:	f240 524f 	movw	r2, #1359	; 0x54f
 800a7e0:	490c      	ldr	r1, [pc, #48]	; (800a814 <dhcp_stop+0x6c>)
 800a7e2:	480b      	ldr	r0, [pc, #44]	; (800a810 <dhcp_stop+0x68>)
 800a7e4:	f003 f93c 	bl	800da60 <iprintf>
    dhcp_set_state(dhcp, DHCP_STATE_OFF);
 800a7e8:	2100      	movs	r1, #0
 800a7ea:	68f8      	ldr	r0, [r7, #12]
 800a7ec:	f000 f814 	bl	800a818 <dhcp_set_state>

    if (dhcp->pcb_allocated != 0) {
 800a7f0:	68fb      	ldr	r3, [r7, #12]
 800a7f2:	7a1b      	ldrb	r3, [r3, #8]
 800a7f4:	2b00      	cmp	r3, #0
 800a7f6:	d004      	beq.n	800a802 <dhcp_stop+0x5a>
      dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 800a7f8:	f7ff f854 	bl	80098a4 <dhcp_dec_pcb_refcount>
      dhcp->pcb_allocated = 0;
 800a7fc:	68fb      	ldr	r3, [r7, #12]
 800a7fe:	2200      	movs	r2, #0
 800a800:	721a      	strb	r2, [r3, #8]
    }
  }
}
 800a802:	3710      	adds	r7, #16
 800a804:	46bd      	mov	sp, r7
 800a806:	bd80      	pop	{r7, pc}
 800a808:	080100fc 	.word	0x080100fc
 800a80c:	08010270 	.word	0x08010270
 800a810:	0801015c 	.word	0x0801015c
 800a814:	08010228 	.word	0x08010228

0800a818 <dhcp_set_state>:
 *
 * If the state changed, reset the number of tries.
 */
static void
dhcp_set_state(struct dhcp *dhcp, u8_t new_state)
{
 800a818:	b480      	push	{r7}
 800a81a:	b083      	sub	sp, #12
 800a81c:	af00      	add	r7, sp, #0
 800a81e:	6078      	str	r0, [r7, #4]
 800a820:	460b      	mov	r3, r1
 800a822:	70fb      	strb	r3, [r7, #3]
  if (new_state != dhcp->state) {
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	7a5b      	ldrb	r3, [r3, #9]
 800a828:	78fa      	ldrb	r2, [r7, #3]
 800a82a:	429a      	cmp	r2, r3
 800a82c:	d008      	beq.n	800a840 <dhcp_set_state+0x28>
    dhcp->state = new_state;
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	78fa      	ldrb	r2, [r7, #3]
 800a832:	725a      	strb	r2, [r3, #9]
    dhcp->tries = 0;
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	2200      	movs	r2, #0
 800a838:	729a      	strb	r2, [r3, #10]
    dhcp->request_timeout = 0;
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	2200      	movs	r2, #0
 800a83e:	82da      	strh	r2, [r3, #22]
  }
}
 800a840:	bf00      	nop
 800a842:	370c      	adds	r7, #12
 800a844:	46bd      	mov	sp, r7
 800a846:	bc80      	pop	{r7}
 800a848:	4770      	bx	lr
	...

0800a84c <dhcp_option>:
 * DHCP message.
 *
 */
static void
dhcp_option(struct dhcp *dhcp, u8_t option_type, u8_t option_len)
{
 800a84c:	b580      	push	{r7, lr}
 800a84e:	b082      	sub	sp, #8
 800a850:	af00      	add	r7, sp, #0
 800a852:	6078      	str	r0, [r7, #4]
 800a854:	460b      	mov	r3, r1
 800a856:	70fb      	strb	r3, [r7, #3]
 800a858:	4613      	mov	r3, r2
 800a85a:	70bb      	strb	r3, [r7, #2]
  LWIP_ASSERT("dhcp_option: dhcp->options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", dhcp->options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	8a9b      	ldrh	r3, [r3, #20]
 800a860:	461a      	mov	r2, r3
 800a862:	78bb      	ldrb	r3, [r7, #2]
 800a864:	4413      	add	r3, r2
 800a866:	3302      	adds	r3, #2
 800a868:	2b44      	cmp	r3, #68	; 0x44
 800a86a:	d906      	bls.n	800a87a <dhcp_option+0x2e>
 800a86c:	4b11      	ldr	r3, [pc, #68]	; (800a8b4 <dhcp_option+0x68>)
 800a86e:	f44f 62ae 	mov.w	r2, #1392	; 0x570
 800a872:	4911      	ldr	r1, [pc, #68]	; (800a8b8 <dhcp_option+0x6c>)
 800a874:	4811      	ldr	r0, [pc, #68]	; (800a8bc <dhcp_option+0x70>)
 800a876:	f003 f8f3 	bl	800da60 <iprintf>
  dhcp->msg_out->options[dhcp->options_out_len++] = option_type;
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	691a      	ldr	r2, [r3, #16]
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	8a9b      	ldrh	r3, [r3, #20]
 800a882:	1c59      	adds	r1, r3, #1
 800a884:	b288      	uxth	r0, r1
 800a886:	6879      	ldr	r1, [r7, #4]
 800a888:	8288      	strh	r0, [r1, #20]
 800a88a:	4413      	add	r3, r2
 800a88c:	78fa      	ldrb	r2, [r7, #3]
 800a88e:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
  dhcp->msg_out->options[dhcp->options_out_len++] = option_len;
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	691a      	ldr	r2, [r3, #16]
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	8a9b      	ldrh	r3, [r3, #20]
 800a89a:	1c59      	adds	r1, r3, #1
 800a89c:	b288      	uxth	r0, r1
 800a89e:	6879      	ldr	r1, [r7, #4]
 800a8a0:	8288      	strh	r0, [r1, #20]
 800a8a2:	4413      	add	r3, r2
 800a8a4:	78ba      	ldrb	r2, [r7, #2]
 800a8a6:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
}
 800a8aa:	bf00      	nop
 800a8ac:	3708      	adds	r7, #8
 800a8ae:	46bd      	mov	sp, r7
 800a8b0:	bd80      	pop	{r7, pc}
 800a8b2:	bf00      	nop
 800a8b4:	080100fc 	.word	0x080100fc
 800a8b8:	0801028c 	.word	0x0801028c
 800a8bc:	0801015c 	.word	0x0801015c

0800a8c0 <dhcp_option_byte>:
 * Concatenate a single byte to the outgoing DHCP message.
 *
 */
static void
dhcp_option_byte(struct dhcp *dhcp, u8_t value)
{
 800a8c0:	b580      	push	{r7, lr}
 800a8c2:	b082      	sub	sp, #8
 800a8c4:	af00      	add	r7, sp, #0
 800a8c6:	6078      	str	r0, [r7, #4]
 800a8c8:	460b      	mov	r3, r1
 800a8ca:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("dhcp_option_byte: dhcp->options_out_len < DHCP_OPTIONS_LEN", dhcp->options_out_len < DHCP_OPTIONS_LEN);
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	8a9b      	ldrh	r3, [r3, #20]
 800a8d0:	2b43      	cmp	r3, #67	; 0x43
 800a8d2:	d906      	bls.n	800a8e2 <dhcp_option_byte+0x22>
 800a8d4:	4b0b      	ldr	r3, [pc, #44]	; (800a904 <dhcp_option_byte+0x44>)
 800a8d6:	f240 527b 	movw	r2, #1403	; 0x57b
 800a8da:	490b      	ldr	r1, [pc, #44]	; (800a908 <dhcp_option_byte+0x48>)
 800a8dc:	480b      	ldr	r0, [pc, #44]	; (800a90c <dhcp_option_byte+0x4c>)
 800a8de:	f003 f8bf 	bl	800da60 <iprintf>
  dhcp->msg_out->options[dhcp->options_out_len++] = value;
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	691a      	ldr	r2, [r3, #16]
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	8a9b      	ldrh	r3, [r3, #20]
 800a8ea:	1c59      	adds	r1, r3, #1
 800a8ec:	b288      	uxth	r0, r1
 800a8ee:	6879      	ldr	r1, [r7, #4]
 800a8f0:	8288      	strh	r0, [r1, #20]
 800a8f2:	4413      	add	r3, r2
 800a8f4:	78fa      	ldrb	r2, [r7, #3]
 800a8f6:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
}
 800a8fa:	bf00      	nop
 800a8fc:	3708      	adds	r7, #8
 800a8fe:	46bd      	mov	sp, r7
 800a900:	bd80      	pop	{r7, pc}
 800a902:	bf00      	nop
 800a904:	080100fc 	.word	0x080100fc
 800a908:	080102d4 	.word	0x080102d4
 800a90c:	0801015c 	.word	0x0801015c

0800a910 <dhcp_option_short>:

static void
dhcp_option_short(struct dhcp *dhcp, u16_t value)
{
 800a910:	b590      	push	{r4, r7, lr}
 800a912:	b083      	sub	sp, #12
 800a914:	af00      	add	r7, sp, #0
 800a916:	6078      	str	r0, [r7, #4]
 800a918:	460b      	mov	r3, r1
 800a91a:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("dhcp_option_short: dhcp->options_out_len + 2 <= DHCP_OPTIONS_LEN", dhcp->options_out_len + 2U <= DHCP_OPTIONS_LEN);
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	8a9b      	ldrh	r3, [r3, #20]
 800a920:	3302      	adds	r3, #2
 800a922:	2b44      	cmp	r3, #68	; 0x44
 800a924:	d906      	bls.n	800a934 <dhcp_option_short+0x24>
 800a926:	4b14      	ldr	r3, [pc, #80]	; (800a978 <dhcp_option_short+0x68>)
 800a928:	f240 5282 	movw	r2, #1410	; 0x582
 800a92c:	4913      	ldr	r1, [pc, #76]	; (800a97c <dhcp_option_short+0x6c>)
 800a92e:	4814      	ldr	r0, [pc, #80]	; (800a980 <dhcp_option_short+0x70>)
 800a930:	f003 f896 	bl	800da60 <iprintf>
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 800a934:	887b      	ldrh	r3, [r7, #2]
 800a936:	0a1b      	lsrs	r3, r3, #8
 800a938:	b298      	uxth	r0, r3
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	691a      	ldr	r2, [r3, #16]
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	8a9b      	ldrh	r3, [r3, #20]
 800a942:	1c59      	adds	r1, r3, #1
 800a944:	b28c      	uxth	r4, r1
 800a946:	6879      	ldr	r1, [r7, #4]
 800a948:	828c      	strh	r4, [r1, #20]
 800a94a:	b2c1      	uxtb	r1, r0
 800a94c:	4413      	add	r3, r2
 800a94e:	460a      	mov	r2, r1
 800a950:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t) (value & 0x00ffU);
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	691a      	ldr	r2, [r3, #16]
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	8a9b      	ldrh	r3, [r3, #20]
 800a95c:	1c59      	adds	r1, r3, #1
 800a95e:	b288      	uxth	r0, r1
 800a960:	6879      	ldr	r1, [r7, #4]
 800a962:	8288      	strh	r0, [r1, #20]
 800a964:	8879      	ldrh	r1, [r7, #2]
 800a966:	b2c9      	uxtb	r1, r1
 800a968:	4413      	add	r3, r2
 800a96a:	460a      	mov	r2, r1
 800a96c:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
}
 800a970:	bf00      	nop
 800a972:	370c      	adds	r7, #12
 800a974:	46bd      	mov	sp, r7
 800a976:	bd90      	pop	{r4, r7, pc}
 800a978:	080100fc 	.word	0x080100fc
 800a97c:	08010310 	.word	0x08010310
 800a980:	0801015c 	.word	0x0801015c

0800a984 <dhcp_option_long>:

static void
dhcp_option_long(struct dhcp *dhcp, u32_t value)
{
 800a984:	b590      	push	{r4, r7, lr}
 800a986:	b083      	sub	sp, #12
 800a988:	af00      	add	r7, sp, #0
 800a98a:	6078      	str	r0, [r7, #4]
 800a98c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("dhcp_option_long: dhcp->options_out_len + 4 <= DHCP_OPTIONS_LEN", dhcp->options_out_len + 4U <= DHCP_OPTIONS_LEN);
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	8a9b      	ldrh	r3, [r3, #20]
 800a992:	3304      	adds	r3, #4
 800a994:	2b44      	cmp	r3, #68	; 0x44
 800a996:	d906      	bls.n	800a9a6 <dhcp_option_long+0x22>
 800a998:	4b22      	ldr	r3, [pc, #136]	; (800aa24 <dhcp_option_long+0xa0>)
 800a99a:	f240 528a 	movw	r2, #1418	; 0x58a
 800a99e:	4922      	ldr	r1, [pc, #136]	; (800aa28 <dhcp_option_long+0xa4>)
 800a9a0:	4822      	ldr	r0, [pc, #136]	; (800aa2c <dhcp_option_long+0xa8>)
 800a9a2:	f003 f85d 	bl	800da60 <iprintf>
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
 800a9a6:	683b      	ldr	r3, [r7, #0]
 800a9a8:	0e18      	lsrs	r0, r3, #24
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	691a      	ldr	r2, [r3, #16]
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	8a9b      	ldrh	r3, [r3, #20]
 800a9b2:	1c59      	adds	r1, r3, #1
 800a9b4:	b28c      	uxth	r4, r1
 800a9b6:	6879      	ldr	r1, [r7, #4]
 800a9b8:	828c      	strh	r4, [r1, #20]
 800a9ba:	b2c1      	uxtb	r1, r0
 800a9bc:	4413      	add	r3, r2
 800a9be:	460a      	mov	r2, r1
 800a9c0:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 800a9c4:	683b      	ldr	r3, [r7, #0]
 800a9c6:	0c18      	lsrs	r0, r3, #16
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	691a      	ldr	r2, [r3, #16]
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	8a9b      	ldrh	r3, [r3, #20]
 800a9d0:	1c59      	adds	r1, r3, #1
 800a9d2:	b28c      	uxth	r4, r1
 800a9d4:	6879      	ldr	r1, [r7, #4]
 800a9d6:	828c      	strh	r4, [r1, #20]
 800a9d8:	b2c1      	uxtb	r1, r0
 800a9da:	4413      	add	r3, r2
 800a9dc:	460a      	mov	r2, r1
 800a9de:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 800a9e2:	683b      	ldr	r3, [r7, #0]
 800a9e4:	0a18      	lsrs	r0, r3, #8
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	691a      	ldr	r2, [r3, #16]
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	8a9b      	ldrh	r3, [r3, #20]
 800a9ee:	1c59      	adds	r1, r3, #1
 800a9f0:	b28c      	uxth	r4, r1
 800a9f2:	6879      	ldr	r1, [r7, #4]
 800a9f4:	828c      	strh	r4, [r1, #20]
 800a9f6:	b2c1      	uxtb	r1, r0
 800a9f8:	4413      	add	r3, r2
 800a9fa:	460a      	mov	r2, r1
 800a9fc:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0x000000ffUL));
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	691a      	ldr	r2, [r3, #16]
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	8a9b      	ldrh	r3, [r3, #20]
 800aa08:	1c59      	adds	r1, r3, #1
 800aa0a:	b288      	uxth	r0, r1
 800aa0c:	6879      	ldr	r1, [r7, #4]
 800aa0e:	8288      	strh	r0, [r1, #20]
 800aa10:	6839      	ldr	r1, [r7, #0]
 800aa12:	b2c9      	uxtb	r1, r1
 800aa14:	4413      	add	r3, r2
 800aa16:	460a      	mov	r2, r1
 800aa18:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
}
 800aa1c:	bf00      	nop
 800aa1e:	370c      	adds	r7, #12
 800aa20:	46bd      	mov	sp, r7
 800aa22:	bd90      	pop	{r4, r7, pc}
 800aa24:	080100fc 	.word	0x080100fc
 800aa28:	08010354 	.word	0x08010354
 800aa2c:	0801015c 	.word	0x0801015c

0800aa30 <dhcp_parse_reply>:
 * use that further on.
 *
 */
static err_t
dhcp_parse_reply(struct dhcp *dhcp, struct pbuf *p)
{
 800aa30:	b580      	push	{r7, lr}
 800aa32:	b08e      	sub	sp, #56	; 0x38
 800aa34:	af00      	add	r7, sp, #0
 800aa36:	6078      	str	r0, [r7, #4]
 800aa38:	6039      	str	r1, [r7, #0]
  u16_t offset;
  u16_t offset_max;
  u16_t options_idx;
  u16_t options_idx_max;
  struct pbuf *q;
  int parse_file_as_options = 0;
 800aa3a:	2300      	movs	r3, #0
 800aa3c:	627b      	str	r3, [r7, #36]	; 0x24
  int parse_sname_as_options = 0;
 800aa3e:	2300      	movs	r3, #0
 800aa40:	623b      	str	r3, [r7, #32]

  /* clear received options */
  dhcp_clear_all_options(dhcp);
 800aa42:	2208      	movs	r2, #8
 800aa44:	2100      	movs	r1, #0
 800aa46:	48b3      	ldr	r0, [pc, #716]	; (800ad14 <dhcp_parse_reply+0x2e4>)
 800aa48:	f003 f802 	bl	800da50 <memset>
  /* check that beginning of dhcp_msg (up to and including chaddr) is in first pbuf */
  if (p->len < DHCP_SNAME_OFS) {
 800aa4c:	683b      	ldr	r3, [r7, #0]
 800aa4e:	895b      	ldrh	r3, [r3, #10]
 800aa50:	2b2b      	cmp	r3, #43	; 0x2b
 800aa52:	d802      	bhi.n	800aa5a <dhcp_parse_reply+0x2a>
    return ERR_BUF;
 800aa54:	f06f 0301 	mvn.w	r3, #1
 800aa58:	e26a      	b.n	800af30 <dhcp_parse_reply+0x500>
  }
  dhcp->msg_in = (struct dhcp_msg *)p->payload;
 800aa5a:	683b      	ldr	r3, [r7, #0]
 800aa5c:	685a      	ldr	r2, [r3, #4]
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	605a      	str	r2, [r3, #4]
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* parse options */

  /* start with options field */
  options_idx = DHCP_OPTIONS_OFS;
 800aa62:	23f0      	movs	r3, #240	; 0xf0
 800aa64:	85fb      	strh	r3, [r7, #46]	; 0x2e
  /* parse options to the end of the received packet */
  options_idx_max = p->tot_len;
 800aa66:	683b      	ldr	r3, [r7, #0]
 800aa68:	891b      	ldrh	r3, [r3, #8]
 800aa6a:	85bb      	strh	r3, [r7, #44]	; 0x2c
again:
  q = p;
 800aa6c:	683b      	ldr	r3, [r7, #0]
 800aa6e:	62bb      	str	r3, [r7, #40]	; 0x28
  while ((q != NULL) && (options_idx >= q->len)) {
 800aa70:	e00c      	b.n	800aa8c <dhcp_parse_reply+0x5c>
    options_idx -= q->len;
 800aa72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa74:	895b      	ldrh	r3, [r3, #10]
 800aa76:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800aa78:	1ad3      	subs	r3, r2, r3
 800aa7a:	85fb      	strh	r3, [r7, #46]	; 0x2e
    options_idx_max -= q->len;
 800aa7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa7e:	895b      	ldrh	r3, [r3, #10]
 800aa80:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 800aa82:	1ad3      	subs	r3, r2, r3
 800aa84:	85bb      	strh	r3, [r7, #44]	; 0x2c
    q = q->next;
 800aa86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa88:	681b      	ldr	r3, [r3, #0]
 800aa8a:	62bb      	str	r3, [r7, #40]	; 0x28
  while ((q != NULL) && (options_idx >= q->len)) {
 800aa8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa8e:	2b00      	cmp	r3, #0
 800aa90:	d004      	beq.n	800aa9c <dhcp_parse_reply+0x6c>
 800aa92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa94:	895b      	ldrh	r3, [r3, #10]
 800aa96:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800aa98:	429a      	cmp	r2, r3
 800aa9a:	d2ea      	bcs.n	800aa72 <dhcp_parse_reply+0x42>
  }
  if (q == NULL) {
 800aa9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa9e:	2b00      	cmp	r3, #0
 800aaa0:	d102      	bne.n	800aaa8 <dhcp_parse_reply+0x78>
    return ERR_BUF;
 800aaa2:	f06f 0301 	mvn.w	r3, #1
 800aaa6:	e243      	b.n	800af30 <dhcp_parse_reply+0x500>
  }
  offset = options_idx;
 800aaa8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800aaaa:	867b      	strh	r3, [r7, #50]	; 0x32
  offset_max = options_idx_max;
 800aaac:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800aaae:	863b      	strh	r3, [r7, #48]	; 0x30
  options = (u8_t*)q->payload;
 800aab0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aab2:	685b      	ldr	r3, [r3, #4]
 800aab4:	637b      	str	r3, [r7, #52]	; 0x34
  /* at least 1 byte to read and no end marker, then at least 3 bytes to read? */
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 800aab6:	e1fb      	b.n	800aeb0 <dhcp_parse_reply+0x480>
    u8_t op = options[offset];
 800aab8:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800aaba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800aabc:	4413      	add	r3, r2
 800aabe:	781b      	ldrb	r3, [r3, #0]
 800aac0:	757b      	strb	r3, [r7, #21]
    u8_t len;
    u8_t decode_len = 0;
 800aac2:	2300      	movs	r3, #0
 800aac4:	77bb      	strb	r3, [r7, #30]
    int decode_idx = -1;
 800aac6:	f04f 33ff 	mov.w	r3, #4294967295
 800aaca:	61bb      	str	r3, [r7, #24]
    u16_t val_offset = offset + 2;
 800aacc:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800aace:	3302      	adds	r3, #2
 800aad0:	82fb      	strh	r3, [r7, #22]
    /* len byte might be in the next pbuf */
    if ((offset + 1) < q->len) {
 800aad2:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800aad4:	3301      	adds	r3, #1
 800aad6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800aad8:	8952      	ldrh	r2, [r2, #10]
 800aada:	4293      	cmp	r3, r2
 800aadc:	da06      	bge.n	800aaec <dhcp_parse_reply+0xbc>
      len = options[offset + 1];
 800aade:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800aae0:	3301      	adds	r3, #1
 800aae2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800aae4:	4413      	add	r3, r2
 800aae6:	781b      	ldrb	r3, [r3, #0]
 800aae8:	77fb      	strb	r3, [r7, #31]
 800aaea:	e00a      	b.n	800ab02 <dhcp_parse_reply+0xd2>
    } else {
      len = (q->next != NULL ? ((u8_t*)q->next->payload)[0] : 0);
 800aaec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aaee:	681b      	ldr	r3, [r3, #0]
 800aaf0:	2b00      	cmp	r3, #0
 800aaf2:	d004      	beq.n	800aafe <dhcp_parse_reply+0xce>
 800aaf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aaf6:	681b      	ldr	r3, [r3, #0]
 800aaf8:	685b      	ldr	r3, [r3, #4]
 800aafa:	781b      	ldrb	r3, [r3, #0]
 800aafc:	e000      	b.n	800ab00 <dhcp_parse_reply+0xd0>
 800aafe:	2300      	movs	r3, #0
 800ab00:	77fb      	strb	r3, [r7, #31]
    }
    /* LWIP_DEBUGF(DHCP_DEBUG, ("msg_offset=%"U16_F", q->len=%"U16_F, msg_offset, q->len)); */
    decode_len = len;
 800ab02:	7ffb      	ldrb	r3, [r7, #31]
 800ab04:	77bb      	strb	r3, [r7, #30]
    switch(op) {
 800ab06:	7d7b      	ldrb	r3, [r7, #21]
 800ab08:	2b3b      	cmp	r3, #59	; 0x3b
 800ab0a:	f200 8121 	bhi.w	800ad50 <dhcp_parse_reply+0x320>
 800ab0e:	a201      	add	r2, pc, #4	; (adr r2, 800ab14 <dhcp_parse_reply+0xe4>)
 800ab10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab14:	0800ac05 	.word	0x0800ac05
 800ab18:	0800ac15 	.word	0x0800ac15
 800ab1c:	0800ad51 	.word	0x0800ad51
 800ab20:	0800ac35 	.word	0x0800ac35
 800ab24:	0800ad51 	.word	0x0800ad51
 800ab28:	0800ad51 	.word	0x0800ad51
 800ab2c:	0800ad51 	.word	0x0800ad51
 800ab30:	0800ad51 	.word	0x0800ad51
 800ab34:	0800ad51 	.word	0x0800ad51
 800ab38:	0800ad51 	.word	0x0800ad51
 800ab3c:	0800ad51 	.word	0x0800ad51
 800ab40:	0800ad51 	.word	0x0800ad51
 800ab44:	0800ad51 	.word	0x0800ad51
 800ab48:	0800ad51 	.word	0x0800ad51
 800ab4c:	0800ad51 	.word	0x0800ad51
 800ab50:	0800ad51 	.word	0x0800ad51
 800ab54:	0800ad51 	.word	0x0800ad51
 800ab58:	0800ad51 	.word	0x0800ad51
 800ab5c:	0800ad51 	.word	0x0800ad51
 800ab60:	0800ad51 	.word	0x0800ad51
 800ab64:	0800ad51 	.word	0x0800ad51
 800ab68:	0800ad51 	.word	0x0800ad51
 800ab6c:	0800ad51 	.word	0x0800ad51
 800ab70:	0800ad51 	.word	0x0800ad51
 800ab74:	0800ad51 	.word	0x0800ad51
 800ab78:	0800ad51 	.word	0x0800ad51
 800ab7c:	0800ad51 	.word	0x0800ad51
 800ab80:	0800ad51 	.word	0x0800ad51
 800ab84:	0800ad51 	.word	0x0800ad51
 800ab88:	0800ad51 	.word	0x0800ad51
 800ab8c:	0800ad51 	.word	0x0800ad51
 800ab90:	0800ad51 	.word	0x0800ad51
 800ab94:	0800ad51 	.word	0x0800ad51
 800ab98:	0800ad51 	.word	0x0800ad51
 800ab9c:	0800ad51 	.word	0x0800ad51
 800aba0:	0800ad51 	.word	0x0800ad51
 800aba4:	0800ad51 	.word	0x0800ad51
 800aba8:	0800ad51 	.word	0x0800ad51
 800abac:	0800ad51 	.word	0x0800ad51
 800abb0:	0800ad51 	.word	0x0800ad51
 800abb4:	0800ad51 	.word	0x0800ad51
 800abb8:	0800ad51 	.word	0x0800ad51
 800abbc:	0800ad51 	.word	0x0800ad51
 800abc0:	0800ad51 	.word	0x0800ad51
 800abc4:	0800ad51 	.word	0x0800ad51
 800abc8:	0800ad51 	.word	0x0800ad51
 800abcc:	0800ad51 	.word	0x0800ad51
 800abd0:	0800ad51 	.word	0x0800ad51
 800abd4:	0800ad51 	.word	0x0800ad51
 800abd8:	0800ad51 	.word	0x0800ad51
 800abdc:	0800ad51 	.word	0x0800ad51
 800abe0:	0800ac5b 	.word	0x0800ac5b
 800abe4:	0800ac7b 	.word	0x0800ac7b
 800abe8:	0800acb5 	.word	0x0800acb5
 800abec:	0800acd5 	.word	0x0800acd5
 800abf0:	0800ad51 	.word	0x0800ad51
 800abf4:	0800ad51 	.word	0x0800ad51
 800abf8:	0800ad51 	.word	0x0800ad51
 800abfc:	0800acf5 	.word	0x0800acf5
 800ac00:	0800ad31 	.word	0x0800ad31
      /* case(DHCP_OPTION_END): handled above */
      case(DHCP_OPTION_PAD):
        /* special option: no len encoded */
        decode_len = len = 0;
 800ac04:	2300      	movs	r3, #0
 800ac06:	77fb      	strb	r3, [r7, #31]
 800ac08:	7ffb      	ldrb	r3, [r7, #31]
 800ac0a:	77bb      	strb	r3, [r7, #30]
        /* will be increased below */
        offset--;
 800ac0c:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800ac0e:	3b01      	subs	r3, #1
 800ac10:	867b      	strh	r3, [r7, #50]	; 0x32
        break;
 800ac12:	e0a0      	b.n	800ad56 <dhcp_parse_reply+0x326>
      case(DHCP_OPTION_SUBNET_MASK):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 800ac14:	7ffb      	ldrb	r3, [r7, #31]
 800ac16:	2b04      	cmp	r3, #4
 800ac18:	d009      	beq.n	800ac2e <dhcp_parse_reply+0x1fe>
 800ac1a:	4b3f      	ldr	r3, [pc, #252]	; (800ad18 <dhcp_parse_reply+0x2e8>)
 800ac1c:	f240 52f6 	movw	r2, #1526	; 0x5f6
 800ac20:	493e      	ldr	r1, [pc, #248]	; (800ad1c <dhcp_parse_reply+0x2ec>)
 800ac22:	483f      	ldr	r0, [pc, #252]	; (800ad20 <dhcp_parse_reply+0x2f0>)
 800ac24:	f002 ff1c 	bl	800da60 <iprintf>
 800ac28:	f06f 0305 	mvn.w	r3, #5
 800ac2c:	e180      	b.n	800af30 <dhcp_parse_reply+0x500>
        decode_idx = DHCP_OPTION_IDX_SUBNET_MASK;
 800ac2e:	2306      	movs	r3, #6
 800ac30:	61bb      	str	r3, [r7, #24]
        break;
 800ac32:	e090      	b.n	800ad56 <dhcp_parse_reply+0x326>
      case(DHCP_OPTION_ROUTER):
        decode_len = 4; /* only copy the first given router */
 800ac34:	2304      	movs	r3, #4
 800ac36:	77bb      	strb	r3, [r7, #30]
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 800ac38:	7ffa      	ldrb	r2, [r7, #31]
 800ac3a:	7fbb      	ldrb	r3, [r7, #30]
 800ac3c:	429a      	cmp	r2, r3
 800ac3e:	d209      	bcs.n	800ac54 <dhcp_parse_reply+0x224>
 800ac40:	4b35      	ldr	r3, [pc, #212]	; (800ad18 <dhcp_parse_reply+0x2e8>)
 800ac42:	f240 52fb 	movw	r2, #1531	; 0x5fb
 800ac46:	4937      	ldr	r1, [pc, #220]	; (800ad24 <dhcp_parse_reply+0x2f4>)
 800ac48:	4835      	ldr	r0, [pc, #212]	; (800ad20 <dhcp_parse_reply+0x2f0>)
 800ac4a:	f002 ff09 	bl	800da60 <iprintf>
 800ac4e:	f06f 0305 	mvn.w	r3, #5
 800ac52:	e16d      	b.n	800af30 <dhcp_parse_reply+0x500>
        decode_idx = DHCP_OPTION_IDX_ROUTER;
 800ac54:	2307      	movs	r3, #7
 800ac56:	61bb      	str	r3, [r7, #24]
        break;
 800ac58:	e07d      	b.n	800ad56 <dhcp_parse_reply+0x326>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_DNS_SERVER;
        break;
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
      case(DHCP_OPTION_LEASE_TIME):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 800ac5a:	7ffb      	ldrb	r3, [r7, #31]
 800ac5c:	2b04      	cmp	r3, #4
 800ac5e:	d009      	beq.n	800ac74 <dhcp_parse_reply+0x244>
 800ac60:	4b2d      	ldr	r3, [pc, #180]	; (800ad18 <dhcp_parse_reply+0x2e8>)
 800ac62:	f240 6209 	movw	r2, #1545	; 0x609
 800ac66:	492d      	ldr	r1, [pc, #180]	; (800ad1c <dhcp_parse_reply+0x2ec>)
 800ac68:	482d      	ldr	r0, [pc, #180]	; (800ad20 <dhcp_parse_reply+0x2f0>)
 800ac6a:	f002 fef9 	bl	800da60 <iprintf>
 800ac6e:	f06f 0305 	mvn.w	r3, #5
 800ac72:	e15d      	b.n	800af30 <dhcp_parse_reply+0x500>
        decode_idx = DHCP_OPTION_IDX_LEASE_TIME;
 800ac74:	2303      	movs	r3, #3
 800ac76:	61bb      	str	r3, [r7, #24]
        break;
 800ac78:	e06d      	b.n	800ad56 <dhcp_parse_reply+0x326>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_NTP_SERVER;
        break;
#endif /* LWIP_DHCP_GET_NTP_SRV*/
      case(DHCP_OPTION_OVERLOAD):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 800ac7a:	7ffb      	ldrb	r3, [r7, #31]
 800ac7c:	2b01      	cmp	r3, #1
 800ac7e:	d009      	beq.n	800ac94 <dhcp_parse_reply+0x264>
 800ac80:	4b25      	ldr	r3, [pc, #148]	; (800ad18 <dhcp_parse_reply+0x2e8>)
 800ac82:	f240 6217 	movw	r2, #1559	; 0x617
 800ac86:	4928      	ldr	r1, [pc, #160]	; (800ad28 <dhcp_parse_reply+0x2f8>)
 800ac88:	4825      	ldr	r0, [pc, #148]	; (800ad20 <dhcp_parse_reply+0x2f0>)
 800ac8a:	f002 fee9 	bl	800da60 <iprintf>
 800ac8e:	f06f 0305 	mvn.w	r3, #5
 800ac92:	e14d      	b.n	800af30 <dhcp_parse_reply+0x500>
        /* decode overload only in options, not in file/sname: invalid packet */
        LWIP_ERROR("overload in file/sname", options_idx == DHCP_OPTIONS_OFS, return ERR_VAL;);
 800ac94:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800ac96:	2bf0      	cmp	r3, #240	; 0xf0
 800ac98:	d009      	beq.n	800acae <dhcp_parse_reply+0x27e>
 800ac9a:	4b1f      	ldr	r3, [pc, #124]	; (800ad18 <dhcp_parse_reply+0x2e8>)
 800ac9c:	f240 6219 	movw	r2, #1561	; 0x619
 800aca0:	4922      	ldr	r1, [pc, #136]	; (800ad2c <dhcp_parse_reply+0x2fc>)
 800aca2:	481f      	ldr	r0, [pc, #124]	; (800ad20 <dhcp_parse_reply+0x2f0>)
 800aca4:	f002 fedc 	bl	800da60 <iprintf>
 800aca8:	f06f 0305 	mvn.w	r3, #5
 800acac:	e140      	b.n	800af30 <dhcp_parse_reply+0x500>
        decode_idx = DHCP_OPTION_IDX_OVERLOAD;
 800acae:	2300      	movs	r3, #0
 800acb0:	61bb      	str	r3, [r7, #24]
        break;
 800acb2:	e050      	b.n	800ad56 <dhcp_parse_reply+0x326>
      case(DHCP_OPTION_MESSAGE_TYPE):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 800acb4:	7ffb      	ldrb	r3, [r7, #31]
 800acb6:	2b01      	cmp	r3, #1
 800acb8:	d009      	beq.n	800acce <dhcp_parse_reply+0x29e>
 800acba:	4b17      	ldr	r3, [pc, #92]	; (800ad18 <dhcp_parse_reply+0x2e8>)
 800acbc:	f240 621d 	movw	r2, #1565	; 0x61d
 800acc0:	4919      	ldr	r1, [pc, #100]	; (800ad28 <dhcp_parse_reply+0x2f8>)
 800acc2:	4817      	ldr	r0, [pc, #92]	; (800ad20 <dhcp_parse_reply+0x2f0>)
 800acc4:	f002 fecc 	bl	800da60 <iprintf>
 800acc8:	f06f 0305 	mvn.w	r3, #5
 800accc:	e130      	b.n	800af30 <dhcp_parse_reply+0x500>
        decode_idx = DHCP_OPTION_IDX_MSG_TYPE;
 800acce:	2301      	movs	r3, #1
 800acd0:	61bb      	str	r3, [r7, #24]
        break;
 800acd2:	e040      	b.n	800ad56 <dhcp_parse_reply+0x326>
      case(DHCP_OPTION_SERVER_ID):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 800acd4:	7ffb      	ldrb	r3, [r7, #31]
 800acd6:	2b04      	cmp	r3, #4
 800acd8:	d009      	beq.n	800acee <dhcp_parse_reply+0x2be>
 800acda:	4b0f      	ldr	r3, [pc, #60]	; (800ad18 <dhcp_parse_reply+0x2e8>)
 800acdc:	f240 6221 	movw	r2, #1569	; 0x621
 800ace0:	490e      	ldr	r1, [pc, #56]	; (800ad1c <dhcp_parse_reply+0x2ec>)
 800ace2:	480f      	ldr	r0, [pc, #60]	; (800ad20 <dhcp_parse_reply+0x2f0>)
 800ace4:	f002 febc 	bl	800da60 <iprintf>
 800ace8:	f06f 0305 	mvn.w	r3, #5
 800acec:	e120      	b.n	800af30 <dhcp_parse_reply+0x500>
        decode_idx = DHCP_OPTION_IDX_SERVER_ID;
 800acee:	2302      	movs	r3, #2
 800acf0:	61bb      	str	r3, [r7, #24]
        break;
 800acf2:	e030      	b.n	800ad56 <dhcp_parse_reply+0x326>
      case(DHCP_OPTION_T1):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 800acf4:	7ffb      	ldrb	r3, [r7, #31]
 800acf6:	2b04      	cmp	r3, #4
 800acf8:	d009      	beq.n	800ad0e <dhcp_parse_reply+0x2de>
 800acfa:	4b07      	ldr	r3, [pc, #28]	; (800ad18 <dhcp_parse_reply+0x2e8>)
 800acfc:	f240 6225 	movw	r2, #1573	; 0x625
 800ad00:	4906      	ldr	r1, [pc, #24]	; (800ad1c <dhcp_parse_reply+0x2ec>)
 800ad02:	4807      	ldr	r0, [pc, #28]	; (800ad20 <dhcp_parse_reply+0x2f0>)
 800ad04:	f002 feac 	bl	800da60 <iprintf>
 800ad08:	f06f 0305 	mvn.w	r3, #5
 800ad0c:	e110      	b.n	800af30 <dhcp_parse_reply+0x500>
        decode_idx = DHCP_OPTION_IDX_T1;
 800ad0e:	2304      	movs	r3, #4
 800ad10:	61bb      	str	r3, [r7, #24]
        break;
 800ad12:	e020      	b.n	800ad56 <dhcp_parse_reply+0x326>
 800ad14:	200068bc 	.word	0x200068bc
 800ad18:	080100fc 	.word	0x080100fc
 800ad1c:	08010394 	.word	0x08010394
 800ad20:	0801015c 	.word	0x0801015c
 800ad24:	080103a0 	.word	0x080103a0
 800ad28:	080103b4 	.word	0x080103b4
 800ad2c:	080103c0 	.word	0x080103c0
      case(DHCP_OPTION_T2):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 800ad30:	7ffb      	ldrb	r3, [r7, #31]
 800ad32:	2b04      	cmp	r3, #4
 800ad34:	d009      	beq.n	800ad4a <dhcp_parse_reply+0x31a>
 800ad36:	4b80      	ldr	r3, [pc, #512]	; (800af38 <dhcp_parse_reply+0x508>)
 800ad38:	f240 6229 	movw	r2, #1577	; 0x629
 800ad3c:	497f      	ldr	r1, [pc, #508]	; (800af3c <dhcp_parse_reply+0x50c>)
 800ad3e:	4880      	ldr	r0, [pc, #512]	; (800af40 <dhcp_parse_reply+0x510>)
 800ad40:	f002 fe8e 	bl	800da60 <iprintf>
 800ad44:	f06f 0305 	mvn.w	r3, #5
 800ad48:	e0f2      	b.n	800af30 <dhcp_parse_reply+0x500>
        decode_idx = DHCP_OPTION_IDX_T2;
 800ad4a:	2305      	movs	r3, #5
 800ad4c:	61bb      	str	r3, [r7, #24]
        break;
 800ad4e:	e002      	b.n	800ad56 <dhcp_parse_reply+0x326>
      default:
        decode_len = 0;
 800ad50:	2300      	movs	r3, #0
 800ad52:	77bb      	strb	r3, [r7, #30]
        LWIP_DEBUGF(DHCP_DEBUG, ("skipping option %"U16_F" in options\n", (u16_t)op));
        break;
 800ad54:	bf00      	nop
    }
    offset += len + 2;
 800ad56:	7ffb      	ldrb	r3, [r7, #31]
 800ad58:	b29a      	uxth	r2, r3
 800ad5a:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800ad5c:	4413      	add	r3, r2
 800ad5e:	b29b      	uxth	r3, r3
 800ad60:	3302      	adds	r3, #2
 800ad62:	867b      	strh	r3, [r7, #50]	; 0x32
    if (decode_len > 0) {
 800ad64:	7fbb      	ldrb	r3, [r7, #30]
 800ad66:	2b00      	cmp	r3, #0
 800ad68:	d079      	beq.n	800ae5e <dhcp_parse_reply+0x42e>
      u32_t value = 0;
 800ad6a:	2300      	movs	r3, #0
 800ad6c:	60bb      	str	r3, [r7, #8]
      u16_t copy_len;
decode_next:
      LWIP_ASSERT("check decode_idx", decode_idx >= 0 && decode_idx < DHCP_OPTION_IDX_MAX);
 800ad6e:	69bb      	ldr	r3, [r7, #24]
 800ad70:	2b00      	cmp	r3, #0
 800ad72:	db02      	blt.n	800ad7a <dhcp_parse_reply+0x34a>
 800ad74:	69bb      	ldr	r3, [r7, #24]
 800ad76:	2b07      	cmp	r3, #7
 800ad78:	dd06      	ble.n	800ad88 <dhcp_parse_reply+0x358>
 800ad7a:	4b6f      	ldr	r3, [pc, #444]	; (800af38 <dhcp_parse_reply+0x508>)
 800ad7c:	f240 6236 	movw	r2, #1590	; 0x636
 800ad80:	4970      	ldr	r1, [pc, #448]	; (800af44 <dhcp_parse_reply+0x514>)
 800ad82:	486f      	ldr	r0, [pc, #444]	; (800af40 <dhcp_parse_reply+0x510>)
 800ad84:	f002 fe6c 	bl	800da60 <iprintf>
      if (!dhcp_option_given(dhcp, decode_idx)) {
 800ad88:	4a6f      	ldr	r2, [pc, #444]	; (800af48 <dhcp_parse_reply+0x518>)
 800ad8a:	69bb      	ldr	r3, [r7, #24]
 800ad8c:	4413      	add	r3, r2
 800ad8e:	781b      	ldrb	r3, [r3, #0]
 800ad90:	2b00      	cmp	r3, #0
 800ad92:	d164      	bne.n	800ae5e <dhcp_parse_reply+0x42e>
        copy_len = LWIP_MIN(decode_len, 4);
 800ad94:	7fbb      	ldrb	r3, [r7, #30]
 800ad96:	2b04      	cmp	r3, #4
 800ad98:	bf28      	it	cs
 800ad9a:	2304      	movcs	r3, #4
 800ad9c:	b2db      	uxtb	r3, r3
 800ad9e:	827b      	strh	r3, [r7, #18]
        if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
 800ada0:	8afb      	ldrh	r3, [r7, #22]
 800ada2:	8a7a      	ldrh	r2, [r7, #18]
 800ada4:	f107 0108 	add.w	r1, r7, #8
 800ada8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800adaa:	f7f9 fc83 	bl	80046b4 <pbuf_copy_partial>
 800adae:	4603      	mov	r3, r0
 800adb0:	461a      	mov	r2, r3
 800adb2:	8a7b      	ldrh	r3, [r7, #18]
 800adb4:	4293      	cmp	r3, r2
 800adb6:	d002      	beq.n	800adbe <dhcp_parse_reply+0x38e>
          return ERR_BUF;
 800adb8:	f06f 0301 	mvn.w	r3, #1
 800adbc:	e0b8      	b.n	800af30 <dhcp_parse_reply+0x500>
        }
        if (decode_len > 4) {
 800adbe:	7fbb      	ldrb	r3, [r7, #30]
 800adc0:	2b04      	cmp	r3, #4
 800adc2:	d927      	bls.n	800ae14 <dhcp_parse_reply+0x3e4>
          /* decode more than one u32_t */
          LWIP_ERROR("decode_len %% 4 == 0", decode_len % 4 == 0, return ERR_VAL;);
 800adc4:	7fbb      	ldrb	r3, [r7, #30]
 800adc6:	f003 0303 	and.w	r3, r3, #3
 800adca:	b2db      	uxtb	r3, r3
 800adcc:	2b00      	cmp	r3, #0
 800adce:	d009      	beq.n	800ade4 <dhcp_parse_reply+0x3b4>
 800add0:	4b59      	ldr	r3, [pc, #356]	; (800af38 <dhcp_parse_reply+0x508>)
 800add2:	f240 623e 	movw	r2, #1598	; 0x63e
 800add6:	495d      	ldr	r1, [pc, #372]	; (800af4c <dhcp_parse_reply+0x51c>)
 800add8:	4859      	ldr	r0, [pc, #356]	; (800af40 <dhcp_parse_reply+0x510>)
 800adda:	f002 fe41 	bl	800da60 <iprintf>
 800adde:	f06f 0305 	mvn.w	r3, #5
 800ade2:	e0a5      	b.n	800af30 <dhcp_parse_reply+0x500>
          dhcp_got_option(dhcp, decode_idx);
 800ade4:	4a58      	ldr	r2, [pc, #352]	; (800af48 <dhcp_parse_reply+0x518>)
 800ade6:	69bb      	ldr	r3, [r7, #24]
 800ade8:	4413      	add	r3, r2
 800adea:	2201      	movs	r2, #1
 800adec:	701a      	strb	r2, [r3, #0]
          dhcp_set_option_value(dhcp, decode_idx, lwip_htonl(value));
 800adee:	68bb      	ldr	r3, [r7, #8]
 800adf0:	4618      	mov	r0, r3
 800adf2:	f7f8 f93b 	bl	800306c <lwip_htonl>
 800adf6:	4602      	mov	r2, r0
 800adf8:	4955      	ldr	r1, [pc, #340]	; (800af50 <dhcp_parse_reply+0x520>)
 800adfa:	69bb      	ldr	r3, [r7, #24]
 800adfc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
          decode_len -= 4;
 800ae00:	7fbb      	ldrb	r3, [r7, #30]
 800ae02:	3b04      	subs	r3, #4
 800ae04:	77bb      	strb	r3, [r7, #30]
          val_offset += 4;
 800ae06:	8afb      	ldrh	r3, [r7, #22]
 800ae08:	3304      	adds	r3, #4
 800ae0a:	82fb      	strh	r3, [r7, #22]
          decode_idx++;
 800ae0c:	69bb      	ldr	r3, [r7, #24]
 800ae0e:	3301      	adds	r3, #1
 800ae10:	61bb      	str	r3, [r7, #24]
          goto decode_next;
 800ae12:	e7ac      	b.n	800ad6e <dhcp_parse_reply+0x33e>
        } else if (decode_len == 4) {
 800ae14:	7fbb      	ldrb	r3, [r7, #30]
 800ae16:	2b04      	cmp	r3, #4
 800ae18:	d106      	bne.n	800ae28 <dhcp_parse_reply+0x3f8>
          value = lwip_ntohl(value);
 800ae1a:	68bb      	ldr	r3, [r7, #8]
 800ae1c:	4618      	mov	r0, r3
 800ae1e:	f7f8 f925 	bl	800306c <lwip_htonl>
 800ae22:	4603      	mov	r3, r0
 800ae24:	60bb      	str	r3, [r7, #8]
 800ae26:	e010      	b.n	800ae4a <dhcp_parse_reply+0x41a>
        } else {
          LWIP_ERROR("invalid decode_len", decode_len == 1, return ERR_VAL;);
 800ae28:	7fbb      	ldrb	r3, [r7, #30]
 800ae2a:	2b01      	cmp	r3, #1
 800ae2c:	d009      	beq.n	800ae42 <dhcp_parse_reply+0x412>
 800ae2e:	4b42      	ldr	r3, [pc, #264]	; (800af38 <dhcp_parse_reply+0x508>)
 800ae30:	f44f 62c9 	mov.w	r2, #1608	; 0x648
 800ae34:	4947      	ldr	r1, [pc, #284]	; (800af54 <dhcp_parse_reply+0x524>)
 800ae36:	4842      	ldr	r0, [pc, #264]	; (800af40 <dhcp_parse_reply+0x510>)
 800ae38:	f002 fe12 	bl	800da60 <iprintf>
 800ae3c:	f06f 0305 	mvn.w	r3, #5
 800ae40:	e076      	b.n	800af30 <dhcp_parse_reply+0x500>
          value = ((u8_t*)&value)[0];
 800ae42:	f107 0308 	add.w	r3, r7, #8
 800ae46:	781b      	ldrb	r3, [r3, #0]
 800ae48:	60bb      	str	r3, [r7, #8]
        }
        dhcp_got_option(dhcp, decode_idx);
 800ae4a:	4a3f      	ldr	r2, [pc, #252]	; (800af48 <dhcp_parse_reply+0x518>)
 800ae4c:	69bb      	ldr	r3, [r7, #24]
 800ae4e:	4413      	add	r3, r2
 800ae50:	2201      	movs	r2, #1
 800ae52:	701a      	strb	r2, [r3, #0]
        dhcp_set_option_value(dhcp, decode_idx, value);
 800ae54:	68ba      	ldr	r2, [r7, #8]
 800ae56:	493e      	ldr	r1, [pc, #248]	; (800af50 <dhcp_parse_reply+0x520>)
 800ae58:	69bb      	ldr	r3, [r7, #24]
 800ae5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      }
    }
    if (offset >= q->len) {
 800ae5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae60:	895b      	ldrh	r3, [r3, #10]
 800ae62:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 800ae64:	429a      	cmp	r2, r3
 800ae66:	d323      	bcc.n	800aeb0 <dhcp_parse_reply+0x480>
      offset -= q->len;
 800ae68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae6a:	895b      	ldrh	r3, [r3, #10]
 800ae6c:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 800ae6e:	1ad3      	subs	r3, r2, r3
 800ae70:	867b      	strh	r3, [r7, #50]	; 0x32
      offset_max -= q->len;
 800ae72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae74:	895b      	ldrh	r3, [r3, #10]
 800ae76:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 800ae78:	1ad3      	subs	r3, r2, r3
 800ae7a:	863b      	strh	r3, [r7, #48]	; 0x30
      if ((offset < offset_max) && offset_max) {
 800ae7c:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 800ae7e:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800ae80:	429a      	cmp	r2, r3
 800ae82:	d223      	bcs.n	800aecc <dhcp_parse_reply+0x49c>
 800ae84:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800ae86:	2b00      	cmp	r3, #0
 800ae88:	d020      	beq.n	800aecc <dhcp_parse_reply+0x49c>
        q = q->next;
 800ae8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae8c:	681b      	ldr	r3, [r3, #0]
 800ae8e:	62bb      	str	r3, [r7, #40]	; 0x28
        LWIP_ERROR("next pbuf was null", q != NULL, return ERR_VAL;);
 800ae90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae92:	2b00      	cmp	r3, #0
 800ae94:	d109      	bne.n	800aeaa <dhcp_parse_reply+0x47a>
 800ae96:	4b28      	ldr	r3, [pc, #160]	; (800af38 <dhcp_parse_reply+0x508>)
 800ae98:	f240 6254 	movw	r2, #1620	; 0x654
 800ae9c:	492e      	ldr	r1, [pc, #184]	; (800af58 <dhcp_parse_reply+0x528>)
 800ae9e:	4828      	ldr	r0, [pc, #160]	; (800af40 <dhcp_parse_reply+0x510>)
 800aea0:	f002 fdde 	bl	800da60 <iprintf>
 800aea4:	f06f 0305 	mvn.w	r3, #5
 800aea8:	e042      	b.n	800af30 <dhcp_parse_reply+0x500>
        options = (u8_t*)q->payload;
 800aeaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aeac:	685b      	ldr	r3, [r3, #4]
 800aeae:	637b      	str	r3, [r7, #52]	; 0x34
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 800aeb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aeb2:	2b00      	cmp	r3, #0
 800aeb4:	d00a      	beq.n	800aecc <dhcp_parse_reply+0x49c>
 800aeb6:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 800aeb8:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800aeba:	429a      	cmp	r2, r3
 800aebc:	d206      	bcs.n	800aecc <dhcp_parse_reply+0x49c>
 800aebe:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800aec0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800aec2:	4413      	add	r3, r2
 800aec4:	781b      	ldrb	r3, [r3, #0]
 800aec6:	2bff      	cmp	r3, #255	; 0xff
 800aec8:	f47f adf6 	bne.w	800aab8 <dhcp_parse_reply+0x88>
        break;
      }
    }
  }
  /* is this an overloaded message? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_OVERLOAD)) {
 800aecc:	4b1e      	ldr	r3, [pc, #120]	; (800af48 <dhcp_parse_reply+0x518>)
 800aece:	781b      	ldrb	r3, [r3, #0]
 800aed0:	2b00      	cmp	r3, #0
 800aed2:	d018      	beq.n	800af06 <dhcp_parse_reply+0x4d6>
    u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 800aed4:	4b1e      	ldr	r3, [pc, #120]	; (800af50 <dhcp_parse_reply+0x520>)
 800aed6:	681b      	ldr	r3, [r3, #0]
 800aed8:	60fb      	str	r3, [r7, #12]
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 800aeda:	4b1b      	ldr	r3, [pc, #108]	; (800af48 <dhcp_parse_reply+0x518>)
 800aedc:	2200      	movs	r2, #0
 800aede:	701a      	strb	r2, [r3, #0]
    if (overload == DHCP_OVERLOAD_FILE) {
 800aee0:	68fb      	ldr	r3, [r7, #12]
 800aee2:	2b01      	cmp	r3, #1
 800aee4:	d102      	bne.n	800aeec <dhcp_parse_reply+0x4bc>
      parse_file_as_options = 1;
 800aee6:	2301      	movs	r3, #1
 800aee8:	627b      	str	r3, [r7, #36]	; 0x24
 800aeea:	e00c      	b.n	800af06 <dhcp_parse_reply+0x4d6>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded file field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME) {
 800aeec:	68fb      	ldr	r3, [r7, #12]
 800aeee:	2b02      	cmp	r3, #2
 800aef0:	d102      	bne.n	800aef8 <dhcp_parse_reply+0x4c8>
      parse_sname_as_options = 1;
 800aef2:	2301      	movs	r3, #1
 800aef4:	623b      	str	r3, [r7, #32]
 800aef6:	e006      	b.n	800af06 <dhcp_parse_reply+0x4d6>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME_FILE) {
 800aef8:	68fb      	ldr	r3, [r7, #12]
 800aefa:	2b03      	cmp	r3, #3
 800aefc:	d103      	bne.n	800af06 <dhcp_parse_reply+0x4d6>
      parse_sname_as_options = 1;
 800aefe:	2301      	movs	r3, #1
 800af00:	623b      	str	r3, [r7, #32]
      parse_file_as_options = 1;
 800af02:	2301      	movs	r3, #1
 800af04:	627b      	str	r3, [r7, #36]	; 0x24
      /* make sure the string is really NULL-terminated */
      dhcp->boot_file_name[DHCP_FILE_LEN-1] = 0;
    }
#endif /* LWIP_DHCP_BOOTP_FILE */
  }
  if (parse_file_as_options) {
 800af06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af08:	2b00      	cmp	r3, #0
 800af0a:	d006      	beq.n	800af1a <dhcp_parse_reply+0x4ea>
    /* if both are overloaded, parse file first and then sname (RFC 2131 ch. 4.1) */
    parse_file_as_options = 0;
 800af0c:	2300      	movs	r3, #0
 800af0e:	627b      	str	r3, [r7, #36]	; 0x24
    options_idx = DHCP_FILE_OFS;
 800af10:	236c      	movs	r3, #108	; 0x6c
 800af12:	85fb      	strh	r3, [r7, #46]	; 0x2e
    options_idx_max = DHCP_FILE_OFS + DHCP_FILE_LEN;
 800af14:	23ec      	movs	r3, #236	; 0xec
 800af16:	85bb      	strh	r3, [r7, #44]	; 0x2c
    goto again;
 800af18:	e5a8      	b.n	800aa6c <dhcp_parse_reply+0x3c>
  } else if (parse_sname_as_options) {
 800af1a:	6a3b      	ldr	r3, [r7, #32]
 800af1c:	2b00      	cmp	r3, #0
 800af1e:	d006      	beq.n	800af2e <dhcp_parse_reply+0x4fe>
    parse_sname_as_options = 0;
 800af20:	2300      	movs	r3, #0
 800af22:	623b      	str	r3, [r7, #32]
    options_idx = DHCP_SNAME_OFS;
 800af24:	232c      	movs	r3, #44	; 0x2c
 800af26:	85fb      	strh	r3, [r7, #46]	; 0x2e
    options_idx_max = DHCP_SNAME_OFS + DHCP_SNAME_LEN;
 800af28:	236c      	movs	r3, #108	; 0x6c
 800af2a:	85bb      	strh	r3, [r7, #44]	; 0x2c
    goto again;
 800af2c:	e59e      	b.n	800aa6c <dhcp_parse_reply+0x3c>
  }
  return ERR_OK;
 800af2e:	2300      	movs	r3, #0
}
 800af30:	4618      	mov	r0, r3
 800af32:	3738      	adds	r7, #56	; 0x38
 800af34:	46bd      	mov	sp, r7
 800af36:	bd80      	pop	{r7, pc}
 800af38:	080100fc 	.word	0x080100fc
 800af3c:	08010394 	.word	0x08010394
 800af40:	0801015c 	.word	0x0801015c
 800af44:	080103d8 	.word	0x080103d8
 800af48:	200068bc 	.word	0x200068bc
 800af4c:	080103ec 	.word	0x080103ec
 800af50:	200068c4 	.word	0x200068c4
 800af54:	08010404 	.word	0x08010404
 800af58:	08010418 	.word	0x08010418

0800af5c <dhcp_recv>:
/**
 * If an incoming DHCP message is in response to us, then trigger the state machine
 */
static void
dhcp_recv(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 800af5c:	b580      	push	{r7, lr}
 800af5e:	b08a      	sub	sp, #40	; 0x28
 800af60:	af00      	add	r7, sp, #0
 800af62:	60f8      	str	r0, [r7, #12]
 800af64:	60b9      	str	r1, [r7, #8]
 800af66:	607a      	str	r2, [r7, #4]
 800af68:	603b      	str	r3, [r7, #0]
  struct netif *netif = ip_current_input_netif();
 800af6a:	4b69      	ldr	r3, [pc, #420]	; (800b110 <dhcp_recv+0x1b4>)
 800af6c:	685b      	ldr	r3, [r3, #4]
 800af6e:	623b      	str	r3, [r7, #32]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800af70:	6a3b      	ldr	r3, [r7, #32]
 800af72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af74:	61fb      	str	r3, [r7, #28]
  struct dhcp_msg *reply_msg = (struct dhcp_msg *)p->payload;
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	685b      	ldr	r3, [r3, #4]
 800af7a:	61bb      	str	r3, [r7, #24]
  u8_t i;

  LWIP_UNUSED_ARG(arg);

  /* Caught DHCP message from netif that does not have DHCP enabled? -> not interested */
  if ((dhcp == NULL) || (dhcp->pcb_allocated == 0)) {
 800af7c:	69fb      	ldr	r3, [r7, #28]
 800af7e:	2b00      	cmp	r3, #0
 800af80:	f000 80a9 	beq.w	800b0d6 <dhcp_recv+0x17a>
 800af84:	69fb      	ldr	r3, [r7, #28]
 800af86:	7a1b      	ldrb	r3, [r3, #8]
 800af88:	2b00      	cmp	r3, #0
 800af8a:	f000 80a4 	beq.w	800b0d6 <dhcp_recv+0x17a>
  /* prevent warnings about unused arguments */
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(addr);
  LWIP_UNUSED_ARG(port);

  LWIP_ASSERT("reply wasn't freed", dhcp->msg_in == NULL);
 800af8e:	69fb      	ldr	r3, [r7, #28]
 800af90:	685b      	ldr	r3, [r3, #4]
 800af92:	2b00      	cmp	r3, #0
 800af94:	d006      	beq.n	800afa4 <dhcp_recv+0x48>
 800af96:	4b5f      	ldr	r3, [pc, #380]	; (800b114 <dhcp_recv+0x1b8>)
 800af98:	f44f 62d5 	mov.w	r2, #1704	; 0x6a8
 800af9c:	495e      	ldr	r1, [pc, #376]	; (800b118 <dhcp_recv+0x1bc>)
 800af9e:	485f      	ldr	r0, [pc, #380]	; (800b11c <dhcp_recv+0x1c0>)
 800afa0:	f002 fd5e 	bl	800da60 <iprintf>

  if (p->len < DHCP_MIN_REPLY_LEN) {
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	895b      	ldrh	r3, [r3, #10]
 800afa8:	2b2b      	cmp	r3, #43	; 0x2b
 800afaa:	f240 8096 	bls.w	800b0da <dhcp_recv+0x17e>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP reply message or pbuf too short\n"));
    goto free_pbuf_and_return;
  }

  if (reply_msg->op != DHCP_BOOTREPLY) {
 800afae:	69bb      	ldr	r3, [r7, #24]
 800afb0:	781b      	ldrb	r3, [r3, #0]
 800afb2:	2b02      	cmp	r3, #2
 800afb4:	f040 8093 	bne.w	800b0de <dhcp_recv+0x182>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("not a DHCP reply message, but type %"U16_F"\n", (u16_t)reply_msg->op));
    goto free_pbuf_and_return;
  }
  /* iterate through hardware address and match against DHCP message */
  for (i = 0; i < netif->hwaddr_len && i < NETIF_MAX_HWADDR_LEN && i < DHCP_CHADDR_LEN; i++) {
 800afb8:	2300      	movs	r3, #0
 800afba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800afbe:	e012      	b.n	800afe6 <dhcp_recv+0x8a>
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
 800afc0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800afc4:	6a3a      	ldr	r2, [r7, #32]
 800afc6:	4413      	add	r3, r2
 800afc8:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
 800afcc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800afd0:	69b9      	ldr	r1, [r7, #24]
 800afd2:	440b      	add	r3, r1
 800afd4:	7f1b      	ldrb	r3, [r3, #28]
 800afd6:	429a      	cmp	r2, r3
 800afd8:	f040 8083 	bne.w	800b0e2 <dhcp_recv+0x186>
  for (i = 0; i < netif->hwaddr_len && i < NETIF_MAX_HWADDR_LEN && i < DHCP_CHADDR_LEN; i++) {
 800afdc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800afe0:	3301      	adds	r3, #1
 800afe2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800afe6:	6a3b      	ldr	r3, [r7, #32]
 800afe8:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800afec:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800aff0:	429a      	cmp	r2, r3
 800aff2:	d207      	bcs.n	800b004 <dhcp_recv+0xa8>
 800aff4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800aff8:	2b05      	cmp	r3, #5
 800affa:	d803      	bhi.n	800b004 <dhcp_recv+0xa8>
 800affc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b000:	2b0f      	cmp	r3, #15
 800b002:	d9dd      	bls.n	800afc0 <dhcp_recv+0x64>
        (u16_t)i, (u16_t)netif->hwaddr[i], (u16_t)i, (u16_t)reply_msg->chaddr[i]));
      goto free_pbuf_and_return;
    }
  }
  /* match transaction ID against what we expected */
  if (lwip_ntohl(reply_msg->xid) != dhcp->xid) {
 800b004:	69bb      	ldr	r3, [r7, #24]
 800b006:	685b      	ldr	r3, [r3, #4]
 800b008:	4618      	mov	r0, r3
 800b00a:	f7f8 f82f 	bl	800306c <lwip_htonl>
 800b00e:	4602      	mov	r2, r0
 800b010:	69fb      	ldr	r3, [r7, #28]
 800b012:	681b      	ldr	r3, [r3, #0]
 800b014:	429a      	cmp	r2, r3
 800b016:	d166      	bne.n	800b0e6 <dhcp_recv+0x18a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
      ("transaction id mismatch reply_msg->xid(%"X32_F")!=dhcp->xid(%"X32_F")\n",lwip_ntohl(reply_msg->xid),dhcp->xid));
    goto free_pbuf_and_return;
  }
  /* option fields could be unfold? */
  if (dhcp_parse_reply(dhcp, p) != ERR_OK) {
 800b018:	6879      	ldr	r1, [r7, #4]
 800b01a:	69f8      	ldr	r0, [r7, #28]
 800b01c:	f7ff fd08 	bl	800aa30 <dhcp_parse_reply>
 800b020:	4603      	mov	r3, r0
 800b022:	2b00      	cmp	r3, #0
 800b024:	d161      	bne.n	800b0ea <dhcp_recv+0x18e>
    goto free_pbuf_and_return;
  }

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("searching DHCP_OPTION_MESSAGE_TYPE\n"));
  /* obtain pointer to DHCP message type */
  if (!dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE)) {
 800b026:	4b3e      	ldr	r3, [pc, #248]	; (800b120 <dhcp_recv+0x1c4>)
 800b028:	785b      	ldrb	r3, [r3, #1]
 800b02a:	2b00      	cmp	r3, #0
 800b02c:	d05f      	beq.n	800b0ee <dhcp_recv+0x192>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP_OPTION_MESSAGE_TYPE option not found\n"));
    goto free_pbuf_and_return;
  }

  /* read DHCP message type */
  msg_type = (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE);
 800b02e:	4b3d      	ldr	r3, [pc, #244]	; (800b124 <dhcp_recv+0x1c8>)
 800b030:	685b      	ldr	r3, [r3, #4]
 800b032:	75fb      	strb	r3, [r7, #23]
  /* message type is DHCP ACK? */
  if (msg_type == DHCP_ACK) {
 800b034:	7dfb      	ldrb	r3, [r7, #23]
 800b036:	2b05      	cmp	r3, #5
 800b038:	d128      	bne.n	800b08c <dhcp_recv+0x130>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_ACK received\n"));
    /* in requesting state? */
    if (dhcp->state == DHCP_STATE_REQUESTING) {
 800b03a:	69fb      	ldr	r3, [r7, #28]
 800b03c:	7a5b      	ldrb	r3, [r3, #9]
 800b03e:	2b01      	cmp	r3, #1
 800b040:	d111      	bne.n	800b066 <dhcp_recv+0x10a>
      dhcp_handle_ack(netif);
 800b042:	6a38      	ldr	r0, [r7, #32]
 800b044:	f7fe fea0 	bl	8009d88 <dhcp_handle_ack>
#if DHCP_DOES_ARP_CHECK
      if ((netif->flags & NETIF_FLAG_ETHARP) != 0) {
 800b048:	6a3b      	ldr	r3, [r7, #32]
 800b04a:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 800b04e:	f003 0308 	and.w	r3, r3, #8
 800b052:	2b00      	cmp	r3, #0
 800b054:	d003      	beq.n	800b05e <dhcp_recv+0x102>
        /* check if the acknowledged lease address is already in use */
        dhcp_check(netif);
 800b056:	6a38      	ldr	r0, [r7, #32]
 800b058:	f7fe fc68 	bl	800992c <dhcp_check>
 800b05c:	e04a      	b.n	800b0f4 <dhcp_recv+0x198>
      } else {
        /* bind interface to the acknowledged lease address */
        dhcp_bind(netif);
 800b05e:	6a38      	ldr	r0, [r7, #32]
 800b060:	f7ff f8a0 	bl	800a1a4 <dhcp_bind>
 800b064:	e046      	b.n	800b0f4 <dhcp_recv+0x198>
      /* bind interface to the acknowledged lease address */
      dhcp_bind(netif);
#endif
    }
    /* already bound to the given lease address? */
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 800b066:	69fb      	ldr	r3, [r7, #28]
 800b068:	7a5b      	ldrb	r3, [r3, #9]
 800b06a:	2b03      	cmp	r3, #3
 800b06c:	d007      	beq.n	800b07e <dhcp_recv+0x122>
 800b06e:	69fb      	ldr	r3, [r7, #28]
 800b070:	7a5b      	ldrb	r3, [r3, #9]
 800b072:	2b04      	cmp	r3, #4
 800b074:	d003      	beq.n	800b07e <dhcp_recv+0x122>
             (dhcp->state == DHCP_STATE_RENEWING)) {
 800b076:	69fb      	ldr	r3, [r7, #28]
 800b078:	7a5b      	ldrb	r3, [r3, #9]
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 800b07a:	2b05      	cmp	r3, #5
 800b07c:	d13a      	bne.n	800b0f4 <dhcp_recv+0x198>
      dhcp_handle_ack(netif);
 800b07e:	6a38      	ldr	r0, [r7, #32]
 800b080:	f7fe fe82 	bl	8009d88 <dhcp_handle_ack>
      dhcp_bind(netif);
 800b084:	6a38      	ldr	r0, [r7, #32]
 800b086:	f7ff f88d 	bl	800a1a4 <dhcp_bind>
 800b08a:	e033      	b.n	800b0f4 <dhcp_recv+0x198>
    }
  }
  /* received a DHCP_NAK in appropriate state? */
  else if ((msg_type == DHCP_NAK) &&
 800b08c:	7dfb      	ldrb	r3, [r7, #23]
 800b08e:	2b06      	cmp	r3, #6
 800b090:	d113      	bne.n	800b0ba <dhcp_recv+0x15e>
    ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 800b092:	69fb      	ldr	r3, [r7, #28]
 800b094:	7a5b      	ldrb	r3, [r3, #9]
  else if ((msg_type == DHCP_NAK) &&
 800b096:	2b03      	cmp	r3, #3
 800b098:	d00b      	beq.n	800b0b2 <dhcp_recv+0x156>
    ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 800b09a:	69fb      	ldr	r3, [r7, #28]
 800b09c:	7a5b      	ldrb	r3, [r3, #9]
 800b09e:	2b01      	cmp	r3, #1
 800b0a0:	d007      	beq.n	800b0b2 <dhcp_recv+0x156>
     (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 800b0a2:	69fb      	ldr	r3, [r7, #28]
 800b0a4:	7a5b      	ldrb	r3, [r3, #9]
    ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 800b0a6:	2b04      	cmp	r3, #4
 800b0a8:	d003      	beq.n	800b0b2 <dhcp_recv+0x156>
     (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 800b0aa:	69fb      	ldr	r3, [r7, #28]
 800b0ac:	7a5b      	ldrb	r3, [r3, #9]
 800b0ae:	2b05      	cmp	r3, #5
 800b0b0:	d103      	bne.n	800b0ba <dhcp_recv+0x15e>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_NAK received\n"));
    dhcp_handle_nak(netif);
 800b0b2:	6a38      	ldr	r0, [r7, #32]
 800b0b4:	f7fe fc20 	bl	80098f8 <dhcp_handle_nak>
 800b0b8:	e01c      	b.n	800b0f4 <dhcp_recv+0x198>
  }
  /* received a DHCP_OFFER in DHCP_STATE_SELECTING state? */
  else if ((msg_type == DHCP_OFFER) && (dhcp->state == DHCP_STATE_SELECTING)) {
 800b0ba:	7dfb      	ldrb	r3, [r7, #23]
 800b0bc:	2b02      	cmp	r3, #2
 800b0be:	d118      	bne.n	800b0f2 <dhcp_recv+0x196>
 800b0c0:	69fb      	ldr	r3, [r7, #28]
 800b0c2:	7a5b      	ldrb	r3, [r3, #9]
 800b0c4:	2b06      	cmp	r3, #6
 800b0c6:	d114      	bne.n	800b0f2 <dhcp_recv+0x196>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_OFFER received in DHCP_STATE_SELECTING state\n"));
    dhcp->request_timeout = 0;
 800b0c8:	69fb      	ldr	r3, [r7, #28]
 800b0ca:	2200      	movs	r2, #0
 800b0cc:	82da      	strh	r2, [r3, #22]
    /* remember offered lease */
    dhcp_handle_offer(netif);
 800b0ce:	6a38      	ldr	r0, [r7, #32]
 800b0d0:	f7fe fc60 	bl	8009994 <dhcp_handle_offer>
 800b0d4:	e00e      	b.n	800b0f4 <dhcp_recv+0x198>
    goto free_pbuf_and_return;
 800b0d6:	bf00      	nop
 800b0d8:	e00c      	b.n	800b0f4 <dhcp_recv+0x198>
    goto free_pbuf_and_return;
 800b0da:	bf00      	nop
 800b0dc:	e00a      	b.n	800b0f4 <dhcp_recv+0x198>
    goto free_pbuf_and_return;
 800b0de:	bf00      	nop
 800b0e0:	e008      	b.n	800b0f4 <dhcp_recv+0x198>
      goto free_pbuf_and_return;
 800b0e2:	bf00      	nop
 800b0e4:	e006      	b.n	800b0f4 <dhcp_recv+0x198>
    goto free_pbuf_and_return;
 800b0e6:	bf00      	nop
 800b0e8:	e004      	b.n	800b0f4 <dhcp_recv+0x198>
    goto free_pbuf_and_return;
 800b0ea:	bf00      	nop
 800b0ec:	e002      	b.n	800b0f4 <dhcp_recv+0x198>
    goto free_pbuf_and_return;
 800b0ee:	bf00      	nop
 800b0f0:	e000      	b.n	800b0f4 <dhcp_recv+0x198>
  }

free_pbuf_and_return:
 800b0f2:	bf00      	nop
  if (dhcp != NULL) {
 800b0f4:	69fb      	ldr	r3, [r7, #28]
 800b0f6:	2b00      	cmp	r3, #0
 800b0f8:	d002      	beq.n	800b100 <dhcp_recv+0x1a4>
    dhcp->msg_in = NULL;
 800b0fa:	69fb      	ldr	r3, [r7, #28]
 800b0fc:	2200      	movs	r2, #0
 800b0fe:	605a      	str	r2, [r3, #4]
  }
  pbuf_free(p);
 800b100:	6878      	ldr	r0, [r7, #4]
 800b102:	f7f9 f8d9 	bl	80042b8 <pbuf_free>
}
 800b106:	bf00      	nop
 800b108:	3728      	adds	r7, #40	; 0x28
 800b10a:	46bd      	mov	sp, r7
 800b10c:	bd80      	pop	{r7, pc}
 800b10e:	bf00      	nop
 800b110:	20003350 	.word	0x20003350
 800b114:	080100fc 	.word	0x080100fc
 800b118:	08010228 	.word	0x08010228
 800b11c:	0801015c 	.word	0x0801015c
 800b120:	200068bc 	.word	0x200068bc
 800b124:	200068c4 	.word	0x200068c4

0800b128 <dhcp_create_msg>:
 * @param dhcp dhcp control struct
 * @param message_type message type of the request
 */
static err_t
dhcp_create_msg(struct netif *netif, struct dhcp *dhcp, u8_t message_type)
{
 800b128:	b590      	push	{r4, r7, lr}
 800b12a:	b087      	sub	sp, #28
 800b12c:	af00      	add	r7, sp, #0
 800b12e:	60f8      	str	r0, [r7, #12]
 800b130:	60b9      	str	r1, [r7, #8]
 800b132:	4613      	mov	r3, r2
 800b134:	71fb      	strb	r3, [r7, #7]
  if (!xid_initialised) {
    xid = DHCP_GLOBAL_XID;
    xid_initialised = !xid_initialised;
  }
#endif
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return ERR_ARG;);
 800b136:	68fb      	ldr	r3, [r7, #12]
 800b138:	2b00      	cmp	r3, #0
 800b13a:	d109      	bne.n	800b150 <dhcp_create_msg+0x28>
 800b13c:	4ba3      	ldr	r3, [pc, #652]	; (800b3cc <dhcp_create_msg+0x2a4>)
 800b13e:	f240 721d 	movw	r2, #1821	; 0x71d
 800b142:	49a3      	ldr	r1, [pc, #652]	; (800b3d0 <dhcp_create_msg+0x2a8>)
 800b144:	48a3      	ldr	r0, [pc, #652]	; (800b3d4 <dhcp_create_msg+0x2ac>)
 800b146:	f002 fc8b 	bl	800da60 <iprintf>
 800b14a:	f06f 030f 	mvn.w	r3, #15
 800b14e:	e138      	b.n	800b3c2 <dhcp_create_msg+0x29a>
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 800b150:	68bb      	ldr	r3, [r7, #8]
 800b152:	2b00      	cmp	r3, #0
 800b154:	d109      	bne.n	800b16a <dhcp_create_msg+0x42>
 800b156:	4b9d      	ldr	r3, [pc, #628]	; (800b3cc <dhcp_create_msg+0x2a4>)
 800b158:	f240 721e 	movw	r2, #1822	; 0x71e
 800b15c:	499e      	ldr	r1, [pc, #632]	; (800b3d8 <dhcp_create_msg+0x2b0>)
 800b15e:	489d      	ldr	r0, [pc, #628]	; (800b3d4 <dhcp_create_msg+0x2ac>)
 800b160:	f002 fc7e 	bl	800da60 <iprintf>
 800b164:	f06f 0305 	mvn.w	r3, #5
 800b168:	e12b      	b.n	800b3c2 <dhcp_create_msg+0x29a>
  LWIP_ASSERT("dhcp_create_msg: dhcp->p_out == NULL", dhcp->p_out == NULL);
 800b16a:	68bb      	ldr	r3, [r7, #8]
 800b16c:	68db      	ldr	r3, [r3, #12]
 800b16e:	2b00      	cmp	r3, #0
 800b170:	d006      	beq.n	800b180 <dhcp_create_msg+0x58>
 800b172:	4b96      	ldr	r3, [pc, #600]	; (800b3cc <dhcp_create_msg+0x2a4>)
 800b174:	f240 721f 	movw	r2, #1823	; 0x71f
 800b178:	4998      	ldr	r1, [pc, #608]	; (800b3dc <dhcp_create_msg+0x2b4>)
 800b17a:	4896      	ldr	r0, [pc, #600]	; (800b3d4 <dhcp_create_msg+0x2ac>)
 800b17c:	f002 fc70 	bl	800da60 <iprintf>
  LWIP_ASSERT("dhcp_create_msg: dhcp->msg_out == NULL", dhcp->msg_out == NULL);
 800b180:	68bb      	ldr	r3, [r7, #8]
 800b182:	691b      	ldr	r3, [r3, #16]
 800b184:	2b00      	cmp	r3, #0
 800b186:	d006      	beq.n	800b196 <dhcp_create_msg+0x6e>
 800b188:	4b90      	ldr	r3, [pc, #576]	; (800b3cc <dhcp_create_msg+0x2a4>)
 800b18a:	f44f 62e4 	mov.w	r2, #1824	; 0x720
 800b18e:	4994      	ldr	r1, [pc, #592]	; (800b3e0 <dhcp_create_msg+0x2b8>)
 800b190:	4890      	ldr	r0, [pc, #576]	; (800b3d4 <dhcp_create_msg+0x2ac>)
 800b192:	f002 fc65 	bl	800da60 <iprintf>
  dhcp->p_out = pbuf_alloc(PBUF_TRANSPORT, sizeof(struct dhcp_msg), PBUF_RAM);
 800b196:	2200      	movs	r2, #0
 800b198:	f44f 719a 	mov.w	r1, #308	; 0x134
 800b19c:	2000      	movs	r0, #0
 800b19e:	f7f8 fd19 	bl	8003bd4 <pbuf_alloc>
 800b1a2:	4602      	mov	r2, r0
 800b1a4:	68bb      	ldr	r3, [r7, #8]
 800b1a6:	60da      	str	r2, [r3, #12]
  if (dhcp->p_out == NULL) {
 800b1a8:	68bb      	ldr	r3, [r7, #8]
 800b1aa:	68db      	ldr	r3, [r3, #12]
 800b1ac:	2b00      	cmp	r3, #0
 800b1ae:	d102      	bne.n	800b1b6 <dhcp_create_msg+0x8e>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
      ("dhcp_create_msg(): could not allocate pbuf\n"));
    return ERR_MEM;
 800b1b0:	f04f 33ff 	mov.w	r3, #4294967295
 800b1b4:	e105      	b.n	800b3c2 <dhcp_create_msg+0x29a>
  }
  LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
 800b1b6:	68bb      	ldr	r3, [r7, #8]
 800b1b8:	68db      	ldr	r3, [r3, #12]
 800b1ba:	895b      	ldrh	r3, [r3, #10]
 800b1bc:	f5b3 7f9a 	cmp.w	r3, #308	; 0x134
 800b1c0:	d206      	bcs.n	800b1d0 <dhcp_create_msg+0xa8>
 800b1c2:	4b82      	ldr	r3, [pc, #520]	; (800b3cc <dhcp_create_msg+0x2a4>)
 800b1c4:	f240 7227 	movw	r2, #1831	; 0x727
 800b1c8:	4986      	ldr	r1, [pc, #536]	; (800b3e4 <dhcp_create_msg+0x2bc>)
 800b1ca:	4882      	ldr	r0, [pc, #520]	; (800b3d4 <dhcp_create_msg+0x2ac>)
 800b1cc:	f002 fc48 	bl	800da60 <iprintf>
           (dhcp->p_out->len >= sizeof(struct dhcp_msg)));

  /* DHCP_REQUEST should reuse 'xid' from DHCPOFFER */
  if ((message_type != DHCP_REQUEST) || (dhcp->state == DHCP_STATE_REBOOTING)) {
 800b1d0:	79fb      	ldrb	r3, [r7, #7]
 800b1d2:	2b03      	cmp	r3, #3
 800b1d4:	d103      	bne.n	800b1de <dhcp_create_msg+0xb6>
 800b1d6:	68bb      	ldr	r3, [r7, #8]
 800b1d8:	7a5b      	ldrb	r3, [r3, #9]
 800b1da:	2b03      	cmp	r3, #3
 800b1dc:	d10d      	bne.n	800b1fa <dhcp_create_msg+0xd2>
    /* reuse transaction identifier in retransmissions */
    if (dhcp->tries == 0) {
 800b1de:	68bb      	ldr	r3, [r7, #8]
 800b1e0:	7a9b      	ldrb	r3, [r3, #10]
 800b1e2:	2b00      	cmp	r3, #0
 800b1e4:	d105      	bne.n	800b1f2 <dhcp_create_msg+0xca>
#if DHCP_CREATE_RAND_XID && defined(LWIP_RAND)
      xid = LWIP_RAND();
 800b1e6:	f002 fc53 	bl	800da90 <rand>
 800b1ea:	4603      	mov	r3, r0
 800b1ec:	461a      	mov	r2, r3
 800b1ee:	4b7e      	ldr	r3, [pc, #504]	; (800b3e8 <dhcp_create_msg+0x2c0>)
 800b1f0:	601a      	str	r2, [r3, #0]
#else /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
      xid++;
#endif /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
    }
    dhcp->xid = xid;
 800b1f2:	4b7d      	ldr	r3, [pc, #500]	; (800b3e8 <dhcp_create_msg+0x2c0>)
 800b1f4:	681a      	ldr	r2, [r3, #0]
 800b1f6:	68bb      	ldr	r3, [r7, #8]
 800b1f8:	601a      	str	r2, [r3, #0]
  }
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE,
              ("transaction id xid(%"X32_F")\n", xid));

  dhcp->msg_out = (struct dhcp_msg *)dhcp->p_out->payload;
 800b1fa:	68bb      	ldr	r3, [r7, #8]
 800b1fc:	68db      	ldr	r3, [r3, #12]
 800b1fe:	685a      	ldr	r2, [r3, #4]
 800b200:	68bb      	ldr	r3, [r7, #8]
 800b202:	611a      	str	r2, [r3, #16]

  dhcp->msg_out->op = DHCP_BOOTREQUEST;
 800b204:	68bb      	ldr	r3, [r7, #8]
 800b206:	691b      	ldr	r3, [r3, #16]
 800b208:	2201      	movs	r2, #1
 800b20a:	701a      	strb	r2, [r3, #0]
  /* @todo: make link layer independent */
  dhcp->msg_out->htype = DHCP_HTYPE_ETH;
 800b20c:	68bb      	ldr	r3, [r7, #8]
 800b20e:	691b      	ldr	r3, [r3, #16]
 800b210:	2201      	movs	r2, #1
 800b212:	705a      	strb	r2, [r3, #1]
  dhcp->msg_out->hlen = netif->hwaddr_len;
 800b214:	68bb      	ldr	r3, [r7, #8]
 800b216:	691b      	ldr	r3, [r3, #16]
 800b218:	68fa      	ldr	r2, [r7, #12]
 800b21a:	f892 202c 	ldrb.w	r2, [r2, #44]	; 0x2c
 800b21e:	709a      	strb	r2, [r3, #2]
  dhcp->msg_out->hops = 0;
 800b220:	68bb      	ldr	r3, [r7, #8]
 800b222:	691b      	ldr	r3, [r3, #16]
 800b224:	2200      	movs	r2, #0
 800b226:	70da      	strb	r2, [r3, #3]
  dhcp->msg_out->xid = lwip_htonl(dhcp->xid);
 800b228:	68bb      	ldr	r3, [r7, #8]
 800b22a:	681a      	ldr	r2, [r3, #0]
 800b22c:	68bb      	ldr	r3, [r7, #8]
 800b22e:	691c      	ldr	r4, [r3, #16]
 800b230:	4610      	mov	r0, r2
 800b232:	f7f7 ff1b 	bl	800306c <lwip_htonl>
 800b236:	4603      	mov	r3, r0
 800b238:	6063      	str	r3, [r4, #4]
  dhcp->msg_out->secs = 0;
 800b23a:	68bb      	ldr	r3, [r7, #8]
 800b23c:	691b      	ldr	r3, [r3, #16]
 800b23e:	2200      	movs	r2, #0
 800b240:	721a      	strb	r2, [r3, #8]
 800b242:	2200      	movs	r2, #0
 800b244:	725a      	strb	r2, [r3, #9]
  /* we don't need the broadcast flag since we can receive unicast traffic
     before being fully configured! */
  dhcp->msg_out->flags = 0;
 800b246:	68bb      	ldr	r3, [r7, #8]
 800b248:	691b      	ldr	r3, [r3, #16]
 800b24a:	2200      	movs	r2, #0
 800b24c:	729a      	strb	r2, [r3, #10]
 800b24e:	2200      	movs	r2, #0
 800b250:	72da      	strb	r2, [r3, #11]
  ip4_addr_set_zero(&dhcp->msg_out->ciaddr);
 800b252:	68bb      	ldr	r3, [r7, #8]
 800b254:	691b      	ldr	r3, [r3, #16]
 800b256:	2200      	movs	r2, #0
 800b258:	731a      	strb	r2, [r3, #12]
 800b25a:	2200      	movs	r2, #0
 800b25c:	735a      	strb	r2, [r3, #13]
 800b25e:	2200      	movs	r2, #0
 800b260:	739a      	strb	r2, [r3, #14]
 800b262:	2200      	movs	r2, #0
 800b264:	73da      	strb	r2, [r3, #15]
  /* set ciaddr to netif->ip_addr based on message_type and state */
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 800b266:	79fb      	ldrb	r3, [r7, #7]
 800b268:	2b08      	cmp	r3, #8
 800b26a:	d010      	beq.n	800b28e <dhcp_create_msg+0x166>
 800b26c:	79fb      	ldrb	r3, [r7, #7]
 800b26e:	2b04      	cmp	r3, #4
 800b270:	d00d      	beq.n	800b28e <dhcp_create_msg+0x166>
 800b272:	79fb      	ldrb	r3, [r7, #7]
 800b274:	2b07      	cmp	r3, #7
 800b276:	d00a      	beq.n	800b28e <dhcp_create_msg+0x166>
 800b278:	79fb      	ldrb	r3, [r7, #7]
 800b27a:	2b03      	cmp	r3, #3
 800b27c:	d10d      	bne.n	800b29a <dhcp_create_msg+0x172>
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
       ((dhcp->state== DHCP_STATE_RENEWING) || dhcp->state== DHCP_STATE_REBINDING))) {
 800b27e:	68bb      	ldr	r3, [r7, #8]
 800b280:	7a5b      	ldrb	r3, [r3, #9]
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
 800b282:	2b05      	cmp	r3, #5
 800b284:	d003      	beq.n	800b28e <dhcp_create_msg+0x166>
       ((dhcp->state== DHCP_STATE_RENEWING) || dhcp->state== DHCP_STATE_REBINDING))) {
 800b286:	68bb      	ldr	r3, [r7, #8]
 800b288:	7a5b      	ldrb	r3, [r3, #9]
 800b28a:	2b04      	cmp	r3, #4
 800b28c:	d105      	bne.n	800b29a <dhcp_create_msg+0x172>
    ip4_addr_copy(dhcp->msg_out->ciaddr, *netif_ip4_addr(netif));
 800b28e:	68fb      	ldr	r3, [r7, #12]
 800b290:	1d1a      	adds	r2, r3, #4
 800b292:	68bb      	ldr	r3, [r7, #8]
 800b294:	691b      	ldr	r3, [r3, #16]
 800b296:	6812      	ldr	r2, [r2, #0]
 800b298:	60da      	str	r2, [r3, #12]
  }
  ip4_addr_set_zero(&dhcp->msg_out->yiaddr);
 800b29a:	68bb      	ldr	r3, [r7, #8]
 800b29c:	691b      	ldr	r3, [r3, #16]
 800b29e:	2200      	movs	r2, #0
 800b2a0:	741a      	strb	r2, [r3, #16]
 800b2a2:	2200      	movs	r2, #0
 800b2a4:	745a      	strb	r2, [r3, #17]
 800b2a6:	2200      	movs	r2, #0
 800b2a8:	749a      	strb	r2, [r3, #18]
 800b2aa:	2200      	movs	r2, #0
 800b2ac:	74da      	strb	r2, [r3, #19]
  ip4_addr_set_zero(&dhcp->msg_out->siaddr);
 800b2ae:	68bb      	ldr	r3, [r7, #8]
 800b2b0:	691b      	ldr	r3, [r3, #16]
 800b2b2:	2200      	movs	r2, #0
 800b2b4:	751a      	strb	r2, [r3, #20]
 800b2b6:	2200      	movs	r2, #0
 800b2b8:	755a      	strb	r2, [r3, #21]
 800b2ba:	2200      	movs	r2, #0
 800b2bc:	759a      	strb	r2, [r3, #22]
 800b2be:	2200      	movs	r2, #0
 800b2c0:	75da      	strb	r2, [r3, #23]
  ip4_addr_set_zero(&dhcp->msg_out->giaddr);
 800b2c2:	68bb      	ldr	r3, [r7, #8]
 800b2c4:	691b      	ldr	r3, [r3, #16]
 800b2c6:	2200      	movs	r2, #0
 800b2c8:	761a      	strb	r2, [r3, #24]
 800b2ca:	2200      	movs	r2, #0
 800b2cc:	765a      	strb	r2, [r3, #25]
 800b2ce:	2200      	movs	r2, #0
 800b2d0:	769a      	strb	r2, [r3, #26]
 800b2d2:	2200      	movs	r2, #0
 800b2d4:	76da      	strb	r2, [r3, #27]
  for (i = 0; i < DHCP_CHADDR_LEN; i++) {
 800b2d6:	2300      	movs	r3, #0
 800b2d8:	82fb      	strh	r3, [r7, #22]
 800b2da:	e019      	b.n	800b310 <dhcp_create_msg+0x1e8>
    /* copy netif hardware address, pad with zeroes */
    dhcp->msg_out->chaddr[i] = (i < netif->hwaddr_len && i < NETIF_MAX_HWADDR_LEN) ? netif->hwaddr[i] : 0/* pad byte*/;
 800b2dc:	68fb      	ldr	r3, [r7, #12]
 800b2de:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800b2e2:	b29b      	uxth	r3, r3
 800b2e4:	8afa      	ldrh	r2, [r7, #22]
 800b2e6:	429a      	cmp	r2, r3
 800b2e8:	d208      	bcs.n	800b2fc <dhcp_create_msg+0x1d4>
 800b2ea:	8afb      	ldrh	r3, [r7, #22]
 800b2ec:	2b05      	cmp	r3, #5
 800b2ee:	d805      	bhi.n	800b2fc <dhcp_create_msg+0x1d4>
 800b2f0:	8afb      	ldrh	r3, [r7, #22]
 800b2f2:	68fa      	ldr	r2, [r7, #12]
 800b2f4:	4413      	add	r3, r2
 800b2f6:	f893 102d 	ldrb.w	r1, [r3, #45]	; 0x2d
 800b2fa:	e000      	b.n	800b2fe <dhcp_create_msg+0x1d6>
 800b2fc:	2100      	movs	r1, #0
 800b2fe:	68bb      	ldr	r3, [r7, #8]
 800b300:	691a      	ldr	r2, [r3, #16]
 800b302:	8afb      	ldrh	r3, [r7, #22]
 800b304:	4413      	add	r3, r2
 800b306:	460a      	mov	r2, r1
 800b308:	771a      	strb	r2, [r3, #28]
  for (i = 0; i < DHCP_CHADDR_LEN; i++) {
 800b30a:	8afb      	ldrh	r3, [r7, #22]
 800b30c:	3301      	adds	r3, #1
 800b30e:	82fb      	strh	r3, [r7, #22]
 800b310:	8afb      	ldrh	r3, [r7, #22]
 800b312:	2b0f      	cmp	r3, #15
 800b314:	d9e2      	bls.n	800b2dc <dhcp_create_msg+0x1b4>
  }
  for (i = 0; i < DHCP_SNAME_LEN; i++) {
 800b316:	2300      	movs	r3, #0
 800b318:	82fb      	strh	r3, [r7, #22]
 800b31a:	e009      	b.n	800b330 <dhcp_create_msg+0x208>
    dhcp->msg_out->sname[i] = 0;
 800b31c:	68bb      	ldr	r3, [r7, #8]
 800b31e:	691a      	ldr	r2, [r3, #16]
 800b320:	8afb      	ldrh	r3, [r7, #22]
 800b322:	4413      	add	r3, r2
 800b324:	2200      	movs	r2, #0
 800b326:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  for (i = 0; i < DHCP_SNAME_LEN; i++) {
 800b32a:	8afb      	ldrh	r3, [r7, #22]
 800b32c:	3301      	adds	r3, #1
 800b32e:	82fb      	strh	r3, [r7, #22]
 800b330:	8afb      	ldrh	r3, [r7, #22]
 800b332:	2b3f      	cmp	r3, #63	; 0x3f
 800b334:	d9f2      	bls.n	800b31c <dhcp_create_msg+0x1f4>
  }
  for (i = 0; i < DHCP_FILE_LEN; i++) {
 800b336:	2300      	movs	r3, #0
 800b338:	82fb      	strh	r3, [r7, #22]
 800b33a:	e009      	b.n	800b350 <dhcp_create_msg+0x228>
    dhcp->msg_out->file[i] = 0;
 800b33c:	68bb      	ldr	r3, [r7, #8]
 800b33e:	691a      	ldr	r2, [r3, #16]
 800b340:	8afb      	ldrh	r3, [r7, #22]
 800b342:	4413      	add	r3, r2
 800b344:	2200      	movs	r2, #0
 800b346:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
  for (i = 0; i < DHCP_FILE_LEN; i++) {
 800b34a:	8afb      	ldrh	r3, [r7, #22]
 800b34c:	3301      	adds	r3, #1
 800b34e:	82fb      	strh	r3, [r7, #22]
 800b350:	8afb      	ldrh	r3, [r7, #22]
 800b352:	2b7f      	cmp	r3, #127	; 0x7f
 800b354:	d9f2      	bls.n	800b33c <dhcp_create_msg+0x214>
  }
  dhcp->msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 800b356:	68bb      	ldr	r3, [r7, #8]
 800b358:	691b      	ldr	r3, [r3, #16]
 800b35a:	2200      	movs	r2, #0
 800b35c:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 800b360:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
 800b364:	2200      	movs	r2, #0
 800b366:	f062 027d 	orn	r2, r2, #125	; 0x7d
 800b36a:	f883 20ed 	strb.w	r2, [r3, #237]	; 0xed
 800b36e:	2200      	movs	r2, #0
 800b370:	f042 0253 	orr.w	r2, r2, #83	; 0x53
 800b374:	f883 20ee 	strb.w	r2, [r3, #238]	; 0xee
 800b378:	2200      	movs	r2, #0
 800b37a:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 800b37e:	f883 20ef 	strb.w	r2, [r3, #239]	; 0xef
  dhcp->options_out_len = 0;
 800b382:	68bb      	ldr	r3, [r7, #8]
 800b384:	2200      	movs	r2, #0
 800b386:	829a      	strh	r2, [r3, #20]
  /* fill options field with an incrementing array (for debugging purposes) */
  for (i = 0; i < DHCP_OPTIONS_LEN; i++) {
 800b388:	2300      	movs	r3, #0
 800b38a:	82fb      	strh	r3, [r7, #22]
 800b38c:	e00b      	b.n	800b3a6 <dhcp_create_msg+0x27e>
    dhcp->msg_out->options[i] = (u8_t)i; /* for debugging only, no matter if truncated */
 800b38e:	68bb      	ldr	r3, [r7, #8]
 800b390:	691a      	ldr	r2, [r3, #16]
 800b392:	8afb      	ldrh	r3, [r7, #22]
 800b394:	8af9      	ldrh	r1, [r7, #22]
 800b396:	b2c9      	uxtb	r1, r1
 800b398:	4413      	add	r3, r2
 800b39a:	460a      	mov	r2, r1
 800b39c:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
  for (i = 0; i < DHCP_OPTIONS_LEN; i++) {
 800b3a0:	8afb      	ldrh	r3, [r7, #22]
 800b3a2:	3301      	adds	r3, #1
 800b3a4:	82fb      	strh	r3, [r7, #22]
 800b3a6:	8afb      	ldrh	r3, [r7, #22]
 800b3a8:	2b43      	cmp	r3, #67	; 0x43
 800b3aa:	d9f0      	bls.n	800b38e <dhcp_create_msg+0x266>
  }
  /* Add option MESSAGE_TYPE */
  dhcp_option(dhcp, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
 800b3ac:	2201      	movs	r2, #1
 800b3ae:	2135      	movs	r1, #53	; 0x35
 800b3b0:	68b8      	ldr	r0, [r7, #8]
 800b3b2:	f7ff fa4b 	bl	800a84c <dhcp_option>
  dhcp_option_byte(dhcp, message_type);
 800b3b6:	79fb      	ldrb	r3, [r7, #7]
 800b3b8:	4619      	mov	r1, r3
 800b3ba:	68b8      	ldr	r0, [r7, #8]
 800b3bc:	f7ff fa80 	bl	800a8c0 <dhcp_option_byte>
  return ERR_OK;
 800b3c0:	2300      	movs	r3, #0
}
 800b3c2:	4618      	mov	r0, r3
 800b3c4:	371c      	adds	r7, #28
 800b3c6:	46bd      	mov	sp, r7
 800b3c8:	bd90      	pop	{r4, r7, pc}
 800b3ca:	bf00      	nop
 800b3cc:	080100fc 	.word	0x080100fc
 800b3d0:	0801042c 	.word	0x0801042c
 800b3d4:	0801015c 	.word	0x0801015c
 800b3d8:	0801044c 	.word	0x0801044c
 800b3dc:	0801046c 	.word	0x0801046c
 800b3e0:	08010494 	.word	0x08010494
 800b3e4:	080104bc 	.word	0x080104bc
 800b3e8:	20000118 	.word	0x20000118

0800b3ec <dhcp_delete_msg>:
 *
 * @param dhcp the dhcp struct to free the request from
 */
static void
dhcp_delete_msg(struct dhcp *dhcp)
{
 800b3ec:	b580      	push	{r7, lr}
 800b3ee:	b082      	sub	sp, #8
 800b3f0:	af00      	add	r7, sp, #0
 800b3f2:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("dhcp_delete_msg: dhcp != NULL", (dhcp != NULL), return;);
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	2b00      	cmp	r3, #0
 800b3f8:	d107      	bne.n	800b40a <dhcp_delete_msg+0x1e>
 800b3fa:	4b18      	ldr	r3, [pc, #96]	; (800b45c <dhcp_delete_msg+0x70>)
 800b3fc:	f240 726d 	movw	r2, #1901	; 0x76d
 800b400:	4917      	ldr	r1, [pc, #92]	; (800b460 <dhcp_delete_msg+0x74>)
 800b402:	4818      	ldr	r0, [pc, #96]	; (800b464 <dhcp_delete_msg+0x78>)
 800b404:	f002 fb2c 	bl	800da60 <iprintf>
 800b408:	e024      	b.n	800b454 <dhcp_delete_msg+0x68>
  LWIP_ASSERT("dhcp_delete_msg: dhcp->p_out != NULL", dhcp->p_out != NULL);
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	68db      	ldr	r3, [r3, #12]
 800b40e:	2b00      	cmp	r3, #0
 800b410:	d106      	bne.n	800b420 <dhcp_delete_msg+0x34>
 800b412:	4b12      	ldr	r3, [pc, #72]	; (800b45c <dhcp_delete_msg+0x70>)
 800b414:	f240 726e 	movw	r2, #1902	; 0x76e
 800b418:	4913      	ldr	r1, [pc, #76]	; (800b468 <dhcp_delete_msg+0x7c>)
 800b41a:	4812      	ldr	r0, [pc, #72]	; (800b464 <dhcp_delete_msg+0x78>)
 800b41c:	f002 fb20 	bl	800da60 <iprintf>
  LWIP_ASSERT("dhcp_delete_msg: dhcp->msg_out != NULL", dhcp->msg_out != NULL);
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	691b      	ldr	r3, [r3, #16]
 800b424:	2b00      	cmp	r3, #0
 800b426:	d106      	bne.n	800b436 <dhcp_delete_msg+0x4a>
 800b428:	4b0c      	ldr	r3, [pc, #48]	; (800b45c <dhcp_delete_msg+0x70>)
 800b42a:	f240 726f 	movw	r2, #1903	; 0x76f
 800b42e:	490f      	ldr	r1, [pc, #60]	; (800b46c <dhcp_delete_msg+0x80>)
 800b430:	480c      	ldr	r0, [pc, #48]	; (800b464 <dhcp_delete_msg+0x78>)
 800b432:	f002 fb15 	bl	800da60 <iprintf>
  if (dhcp->p_out != NULL) {
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	68db      	ldr	r3, [r3, #12]
 800b43a:	2b00      	cmp	r3, #0
 800b43c:	d004      	beq.n	800b448 <dhcp_delete_msg+0x5c>
    pbuf_free(dhcp->p_out);
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	68db      	ldr	r3, [r3, #12]
 800b442:	4618      	mov	r0, r3
 800b444:	f7f8 ff38 	bl	80042b8 <pbuf_free>
  }
  dhcp->p_out = NULL;
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	2200      	movs	r2, #0
 800b44c:	60da      	str	r2, [r3, #12]
  dhcp->msg_out = NULL;
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	2200      	movs	r2, #0
 800b452:	611a      	str	r2, [r3, #16]
}
 800b454:	3708      	adds	r7, #8
 800b456:	46bd      	mov	sp, r7
 800b458:	bd80      	pop	{r7, pc}
 800b45a:	bf00      	nop
 800b45c:	080100fc 	.word	0x080100fc
 800b460:	080104fc 	.word	0x080104fc
 800b464:	0801015c 	.word	0x0801015c
 800b468:	0801051c 	.word	0x0801051c
 800b46c:	08010544 	.word	0x08010544

0800b470 <dhcp_option_trailer>:
 *
 * @param dhcp DHCP state structure
 */
static void
dhcp_option_trailer(struct dhcp *dhcp)
{
 800b470:	b580      	push	{r7, lr}
 800b472:	b082      	sub	sp, #8
 800b474:	af00      	add	r7, sp, #0
 800b476:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("dhcp_option_trailer: dhcp != NULL", (dhcp != NULL), return;);
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	2b00      	cmp	r3, #0
 800b47c:	d107      	bne.n	800b48e <dhcp_option_trailer+0x1e>
 800b47e:	4b24      	ldr	r3, [pc, #144]	; (800b510 <dhcp_option_trailer+0xa0>)
 800b480:	f240 7282 	movw	r2, #1922	; 0x782
 800b484:	4923      	ldr	r1, [pc, #140]	; (800b514 <dhcp_option_trailer+0xa4>)
 800b486:	4824      	ldr	r0, [pc, #144]	; (800b518 <dhcp_option_trailer+0xa8>)
 800b488:	f002 faea 	bl	800da60 <iprintf>
 800b48c:	e03c      	b.n	800b508 <dhcp_option_trailer+0x98>
  LWIP_ASSERT("dhcp_option_trailer: dhcp->msg_out != NULL\n", dhcp->msg_out != NULL);
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	691b      	ldr	r3, [r3, #16]
 800b492:	2b00      	cmp	r3, #0
 800b494:	d106      	bne.n	800b4a4 <dhcp_option_trailer+0x34>
 800b496:	4b1e      	ldr	r3, [pc, #120]	; (800b510 <dhcp_option_trailer+0xa0>)
 800b498:	f240 7283 	movw	r2, #1923	; 0x783
 800b49c:	491f      	ldr	r1, [pc, #124]	; (800b51c <dhcp_option_trailer+0xac>)
 800b49e:	481e      	ldr	r0, [pc, #120]	; (800b518 <dhcp_option_trailer+0xa8>)
 800b4a0:	f002 fade 	bl	800da60 <iprintf>
  LWIP_ASSERT("dhcp_option_trailer: dhcp->options_out_len < DHCP_OPTIONS_LEN\n", dhcp->options_out_len < DHCP_OPTIONS_LEN);
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	8a9b      	ldrh	r3, [r3, #20]
 800b4a8:	2b43      	cmp	r3, #67	; 0x43
 800b4aa:	d906      	bls.n	800b4ba <dhcp_option_trailer+0x4a>
 800b4ac:	4b18      	ldr	r3, [pc, #96]	; (800b510 <dhcp_option_trailer+0xa0>)
 800b4ae:	f240 7284 	movw	r2, #1924	; 0x784
 800b4b2:	491b      	ldr	r1, [pc, #108]	; (800b520 <dhcp_option_trailer+0xb0>)
 800b4b4:	4818      	ldr	r0, [pc, #96]	; (800b518 <dhcp_option_trailer+0xa8>)
 800b4b6:	f002 fad3 	bl	800da60 <iprintf>
  dhcp->msg_out->options[dhcp->options_out_len++] = DHCP_OPTION_END;
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	691a      	ldr	r2, [r3, #16]
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	8a9b      	ldrh	r3, [r3, #20]
 800b4c2:	1c59      	adds	r1, r3, #1
 800b4c4:	b288      	uxth	r0, r1
 800b4c6:	6879      	ldr	r1, [r7, #4]
 800b4c8:	8288      	strh	r0, [r1, #20]
 800b4ca:	4413      	add	r3, r2
 800b4cc:	22ff      	movs	r2, #255	; 0xff
 800b4ce:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
  /* packet is too small, or not 4 byte aligned? */
  while (((dhcp->options_out_len < DHCP_MIN_OPTIONS_LEN) || (dhcp->options_out_len & 3)) &&
 800b4d2:	e00b      	b.n	800b4ec <dhcp_option_trailer+0x7c>
         (dhcp->options_out_len < DHCP_OPTIONS_LEN)) {
    /* add a fill/padding byte */
    dhcp->msg_out->options[dhcp->options_out_len++] = 0;
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	691a      	ldr	r2, [r3, #16]
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	8a9b      	ldrh	r3, [r3, #20]
 800b4dc:	1c59      	adds	r1, r3, #1
 800b4de:	b288      	uxth	r0, r1
 800b4e0:	6879      	ldr	r1, [r7, #4]
 800b4e2:	8288      	strh	r0, [r1, #20]
 800b4e4:	4413      	add	r3, r2
 800b4e6:	2200      	movs	r2, #0
 800b4e8:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
  while (((dhcp->options_out_len < DHCP_MIN_OPTIONS_LEN) || (dhcp->options_out_len & 3)) &&
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	8a9b      	ldrh	r3, [r3, #20]
 800b4f0:	2b43      	cmp	r3, #67	; 0x43
 800b4f2:	d905      	bls.n	800b500 <dhcp_option_trailer+0x90>
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	8a9b      	ldrh	r3, [r3, #20]
 800b4f8:	f003 0303 	and.w	r3, r3, #3
 800b4fc:	2b00      	cmp	r3, #0
 800b4fe:	d003      	beq.n	800b508 <dhcp_option_trailer+0x98>
         (dhcp->options_out_len < DHCP_OPTIONS_LEN)) {
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	8a9b      	ldrh	r3, [r3, #20]
  while (((dhcp->options_out_len < DHCP_MIN_OPTIONS_LEN) || (dhcp->options_out_len & 3)) &&
 800b504:	2b43      	cmp	r3, #67	; 0x43
 800b506:	d9e5      	bls.n	800b4d4 <dhcp_option_trailer+0x64>
  }
}
 800b508:	3708      	adds	r7, #8
 800b50a:	46bd      	mov	sp, r7
 800b50c:	bd80      	pop	{r7, pc}
 800b50e:	bf00      	nop
 800b510:	080100fc 	.word	0x080100fc
 800b514:	0801056c 	.word	0x0801056c
 800b518:	0801015c 	.word	0x0801015c
 800b51c:	08010590 	.word	0x08010590
 800b520:	080105bc 	.word	0x080105bc

0800b524 <dhcp_supplied_address>:
 * @return 1 if DHCP supplied netif->ip_addr (states BOUND or RENEWING),
 *         0 otherwise
 */
u8_t
dhcp_supplied_address(const struct netif *netif)
{
 800b524:	b480      	push	{r7}
 800b526:	b085      	sub	sp, #20
 800b528:	af00      	add	r7, sp, #0
 800b52a:	6078      	str	r0, [r7, #4]
  if ((netif != NULL) && (netif_dhcp_data(netif) != NULL)) {
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	2b00      	cmp	r3, #0
 800b530:	d017      	beq.n	800b562 <dhcp_supplied_address+0x3e>
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b536:	2b00      	cmp	r3, #0
 800b538:	d013      	beq.n	800b562 <dhcp_supplied_address+0x3e>
    struct dhcp* dhcp = netif_dhcp_data(netif);
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b53e:	60fb      	str	r3, [r7, #12]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 800b540:	68fb      	ldr	r3, [r7, #12]
 800b542:	7a5b      	ldrb	r3, [r3, #9]
 800b544:	2b0a      	cmp	r3, #10
 800b546:	d007      	beq.n	800b558 <dhcp_supplied_address+0x34>
 800b548:	68fb      	ldr	r3, [r7, #12]
 800b54a:	7a5b      	ldrb	r3, [r3, #9]
 800b54c:	2b05      	cmp	r3, #5
 800b54e:	d003      	beq.n	800b558 <dhcp_supplied_address+0x34>
           (dhcp->state == DHCP_STATE_REBINDING);
 800b550:	68fb      	ldr	r3, [r7, #12]
 800b552:	7a5b      	ldrb	r3, [r3, #9]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 800b554:	2b04      	cmp	r3, #4
 800b556:	d101      	bne.n	800b55c <dhcp_supplied_address+0x38>
 800b558:	2301      	movs	r3, #1
 800b55a:	e000      	b.n	800b55e <dhcp_supplied_address+0x3a>
 800b55c:	2300      	movs	r3, #0
 800b55e:	b2db      	uxtb	r3, r3
 800b560:	e000      	b.n	800b564 <dhcp_supplied_address+0x40>
  }
  return 0;
 800b562:	2300      	movs	r3, #0
}
 800b564:	4618      	mov	r0, r3
 800b566:	3714      	adds	r7, #20
 800b568:	46bd      	mov	sp, r7
 800b56a:	bc80      	pop	{r7}
 800b56c:	4770      	bx	lr
	...

0800b570 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 800b570:	b580      	push	{r7, lr}
 800b572:	b082      	sub	sp, #8
 800b574:	af00      	add	r7, sp, #0
 800b576:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 800b578:	4915      	ldr	r1, [pc, #84]	; (800b5d0 <etharp_free_entry+0x60>)
 800b57a:	687a      	ldr	r2, [r7, #4]
 800b57c:	4613      	mov	r3, r2
 800b57e:	005b      	lsls	r3, r3, #1
 800b580:	4413      	add	r3, r2
 800b582:	00db      	lsls	r3, r3, #3
 800b584:	440b      	add	r3, r1
 800b586:	681b      	ldr	r3, [r3, #0]
 800b588:	2b00      	cmp	r3, #0
 800b58a:	d013      	beq.n	800b5b4 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 800b58c:	4910      	ldr	r1, [pc, #64]	; (800b5d0 <etharp_free_entry+0x60>)
 800b58e:	687a      	ldr	r2, [r7, #4]
 800b590:	4613      	mov	r3, r2
 800b592:	005b      	lsls	r3, r3, #1
 800b594:	4413      	add	r3, r2
 800b596:	00db      	lsls	r3, r3, #3
 800b598:	440b      	add	r3, r1
 800b59a:	681b      	ldr	r3, [r3, #0]
 800b59c:	4618      	mov	r0, r3
 800b59e:	f7f8 fe8b 	bl	80042b8 <pbuf_free>
    arp_table[i].q = NULL;
 800b5a2:	490b      	ldr	r1, [pc, #44]	; (800b5d0 <etharp_free_entry+0x60>)
 800b5a4:	687a      	ldr	r2, [r7, #4]
 800b5a6:	4613      	mov	r3, r2
 800b5a8:	005b      	lsls	r3, r3, #1
 800b5aa:	4413      	add	r3, r2
 800b5ac:	00db      	lsls	r3, r3, #3
 800b5ae:	440b      	add	r3, r1
 800b5b0:	2200      	movs	r2, #0
 800b5b2:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 800b5b4:	4906      	ldr	r1, [pc, #24]	; (800b5d0 <etharp_free_entry+0x60>)
 800b5b6:	687a      	ldr	r2, [r7, #4]
 800b5b8:	4613      	mov	r3, r2
 800b5ba:	005b      	lsls	r3, r3, #1
 800b5bc:	4413      	add	r3, r2
 800b5be:	00db      	lsls	r3, r3, #3
 800b5c0:	440b      	add	r3, r1
 800b5c2:	3314      	adds	r3, #20
 800b5c4:	2200      	movs	r2, #0
 800b5c6:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 800b5c8:	bf00      	nop
 800b5ca:	3708      	adds	r7, #8
 800b5cc:	46bd      	mov	sp, r7
 800b5ce:	bd80      	pop	{r7, pc}
 800b5d0:	2000011c 	.word	0x2000011c

0800b5d4 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 800b5d4:	b580      	push	{r7, lr}
 800b5d6:	b082      	sub	sp, #8
 800b5d8:	af00      	add	r7, sp, #0
  u8_t i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800b5da:	2300      	movs	r3, #0
 800b5dc:	71fb      	strb	r3, [r7, #7]
 800b5de:	e096      	b.n	800b70e <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 800b5e0:	79fa      	ldrb	r2, [r7, #7]
 800b5e2:	494f      	ldr	r1, [pc, #316]	; (800b720 <etharp_tmr+0x14c>)
 800b5e4:	4613      	mov	r3, r2
 800b5e6:	005b      	lsls	r3, r3, #1
 800b5e8:	4413      	add	r3, r2
 800b5ea:	00db      	lsls	r3, r3, #3
 800b5ec:	440b      	add	r3, r1
 800b5ee:	3314      	adds	r3, #20
 800b5f0:	781b      	ldrb	r3, [r3, #0]
 800b5f2:	71bb      	strb	r3, [r7, #6]
    if (state != ETHARP_STATE_EMPTY
 800b5f4:	79bb      	ldrb	r3, [r7, #6]
 800b5f6:	2b00      	cmp	r3, #0
 800b5f8:	f000 8086 	beq.w	800b708 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
      && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
      ) {
      arp_table[i].ctime++;
 800b5fc:	79fa      	ldrb	r2, [r7, #7]
 800b5fe:	4948      	ldr	r1, [pc, #288]	; (800b720 <etharp_tmr+0x14c>)
 800b600:	4613      	mov	r3, r2
 800b602:	005b      	lsls	r3, r3, #1
 800b604:	4413      	add	r3, r2
 800b606:	00db      	lsls	r3, r3, #3
 800b608:	440b      	add	r3, r1
 800b60a:	3312      	adds	r3, #18
 800b60c:	881b      	ldrh	r3, [r3, #0]
 800b60e:	3301      	adds	r3, #1
 800b610:	b298      	uxth	r0, r3
 800b612:	4943      	ldr	r1, [pc, #268]	; (800b720 <etharp_tmr+0x14c>)
 800b614:	4613      	mov	r3, r2
 800b616:	005b      	lsls	r3, r3, #1
 800b618:	4413      	add	r3, r2
 800b61a:	00db      	lsls	r3, r3, #3
 800b61c:	440b      	add	r3, r1
 800b61e:	3312      	adds	r3, #18
 800b620:	4602      	mov	r2, r0
 800b622:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800b624:	79fa      	ldrb	r2, [r7, #7]
 800b626:	493e      	ldr	r1, [pc, #248]	; (800b720 <etharp_tmr+0x14c>)
 800b628:	4613      	mov	r3, r2
 800b62a:	005b      	lsls	r3, r3, #1
 800b62c:	4413      	add	r3, r2
 800b62e:	00db      	lsls	r3, r3, #3
 800b630:	440b      	add	r3, r1
 800b632:	3312      	adds	r3, #18
 800b634:	881b      	ldrh	r3, [r3, #0]
 800b636:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800b63a:	d215      	bcs.n	800b668 <etharp_tmr+0x94>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800b63c:	79fa      	ldrb	r2, [r7, #7]
 800b63e:	4938      	ldr	r1, [pc, #224]	; (800b720 <etharp_tmr+0x14c>)
 800b640:	4613      	mov	r3, r2
 800b642:	005b      	lsls	r3, r3, #1
 800b644:	4413      	add	r3, r2
 800b646:	00db      	lsls	r3, r3, #3
 800b648:	440b      	add	r3, r1
 800b64a:	3314      	adds	r3, #20
 800b64c:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800b64e:	2b01      	cmp	r3, #1
 800b650:	d10f      	bne.n	800b672 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 800b652:	79fa      	ldrb	r2, [r7, #7]
 800b654:	4932      	ldr	r1, [pc, #200]	; (800b720 <etharp_tmr+0x14c>)
 800b656:	4613      	mov	r3, r2
 800b658:	005b      	lsls	r3, r3, #1
 800b65a:	4413      	add	r3, r2
 800b65c:	00db      	lsls	r3, r3, #3
 800b65e:	440b      	add	r3, r1
 800b660:	3312      	adds	r3, #18
 800b662:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800b664:	2b04      	cmp	r3, #4
 800b666:	d904      	bls.n	800b672 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %"U16_F".\n",
             arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", (u16_t)i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 800b668:	79fb      	ldrb	r3, [r7, #7]
 800b66a:	4618      	mov	r0, r3
 800b66c:	f7ff ff80 	bl	800b570 <etharp_free_entry>
 800b670:	e04a      	b.n	800b708 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 800b672:	79fa      	ldrb	r2, [r7, #7]
 800b674:	492a      	ldr	r1, [pc, #168]	; (800b720 <etharp_tmr+0x14c>)
 800b676:	4613      	mov	r3, r2
 800b678:	005b      	lsls	r3, r3, #1
 800b67a:	4413      	add	r3, r2
 800b67c:	00db      	lsls	r3, r3, #3
 800b67e:	440b      	add	r3, r1
 800b680:	3314      	adds	r3, #20
 800b682:	781b      	ldrb	r3, [r3, #0]
 800b684:	2b03      	cmp	r3, #3
 800b686:	d10a      	bne.n	800b69e <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 800b688:	79fa      	ldrb	r2, [r7, #7]
 800b68a:	4925      	ldr	r1, [pc, #148]	; (800b720 <etharp_tmr+0x14c>)
 800b68c:	4613      	mov	r3, r2
 800b68e:	005b      	lsls	r3, r3, #1
 800b690:	4413      	add	r3, r2
 800b692:	00db      	lsls	r3, r3, #3
 800b694:	440b      	add	r3, r1
 800b696:	3314      	adds	r3, #20
 800b698:	2204      	movs	r2, #4
 800b69a:	701a      	strb	r2, [r3, #0]
 800b69c:	e034      	b.n	800b708 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 800b69e:	79fa      	ldrb	r2, [r7, #7]
 800b6a0:	491f      	ldr	r1, [pc, #124]	; (800b720 <etharp_tmr+0x14c>)
 800b6a2:	4613      	mov	r3, r2
 800b6a4:	005b      	lsls	r3, r3, #1
 800b6a6:	4413      	add	r3, r2
 800b6a8:	00db      	lsls	r3, r3, #3
 800b6aa:	440b      	add	r3, r1
 800b6ac:	3314      	adds	r3, #20
 800b6ae:	781b      	ldrb	r3, [r3, #0]
 800b6b0:	2b04      	cmp	r3, #4
 800b6b2:	d10a      	bne.n	800b6ca <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 800b6b4:	79fa      	ldrb	r2, [r7, #7]
 800b6b6:	491a      	ldr	r1, [pc, #104]	; (800b720 <etharp_tmr+0x14c>)
 800b6b8:	4613      	mov	r3, r2
 800b6ba:	005b      	lsls	r3, r3, #1
 800b6bc:	4413      	add	r3, r2
 800b6be:	00db      	lsls	r3, r3, #3
 800b6c0:	440b      	add	r3, r1
 800b6c2:	3314      	adds	r3, #20
 800b6c4:	2202      	movs	r2, #2
 800b6c6:	701a      	strb	r2, [r3, #0]
 800b6c8:	e01e      	b.n	800b708 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800b6ca:	79fa      	ldrb	r2, [r7, #7]
 800b6cc:	4914      	ldr	r1, [pc, #80]	; (800b720 <etharp_tmr+0x14c>)
 800b6ce:	4613      	mov	r3, r2
 800b6d0:	005b      	lsls	r3, r3, #1
 800b6d2:	4413      	add	r3, r2
 800b6d4:	00db      	lsls	r3, r3, #3
 800b6d6:	440b      	add	r3, r1
 800b6d8:	3314      	adds	r3, #20
 800b6da:	781b      	ldrb	r3, [r3, #0]
 800b6dc:	2b01      	cmp	r3, #1
 800b6de:	d113      	bne.n	800b708 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 800b6e0:	79fa      	ldrb	r2, [r7, #7]
 800b6e2:	490f      	ldr	r1, [pc, #60]	; (800b720 <etharp_tmr+0x14c>)
 800b6e4:	4613      	mov	r3, r2
 800b6e6:	005b      	lsls	r3, r3, #1
 800b6e8:	4413      	add	r3, r2
 800b6ea:	00db      	lsls	r3, r3, #3
 800b6ec:	440b      	add	r3, r1
 800b6ee:	3308      	adds	r3, #8
 800b6f0:	6818      	ldr	r0, [r3, #0]
 800b6f2:	79fa      	ldrb	r2, [r7, #7]
 800b6f4:	4613      	mov	r3, r2
 800b6f6:	005b      	lsls	r3, r3, #1
 800b6f8:	4413      	add	r3, r2
 800b6fa:	00db      	lsls	r3, r3, #3
 800b6fc:	4a08      	ldr	r2, [pc, #32]	; (800b720 <etharp_tmr+0x14c>)
 800b6fe:	4413      	add	r3, r2
 800b700:	3304      	adds	r3, #4
 800b702:	4619      	mov	r1, r3
 800b704:	f000 fe3c 	bl	800c380 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800b708:	79fb      	ldrb	r3, [r7, #7]
 800b70a:	3301      	adds	r3, #1
 800b70c:	71fb      	strb	r3, [r7, #7]
 800b70e:	79fb      	ldrb	r3, [r7, #7]
 800b710:	2b09      	cmp	r3, #9
 800b712:	f67f af65 	bls.w	800b5e0 <etharp_tmr+0xc>
      }
    }
  }
}
 800b716:	bf00      	nop
 800b718:	bf00      	nop
 800b71a:	3708      	adds	r7, #8
 800b71c:	46bd      	mov	sp, r7
 800b71e:	bd80      	pop	{r7, pc}
 800b720:	2000011c 	.word	0x2000011c

0800b724 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s8_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif* netif)
{
 800b724:	b580      	push	{r7, lr}
 800b726:	b088      	sub	sp, #32
 800b728:	af00      	add	r7, sp, #0
 800b72a:	60f8      	str	r0, [r7, #12]
 800b72c:	460b      	mov	r3, r1
 800b72e:	607a      	str	r2, [r7, #4]
 800b730:	72fb      	strb	r3, [r7, #11]
  s8_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 800b732:	230a      	movs	r3, #10
 800b734:	77fb      	strb	r3, [r7, #31]
 800b736:	230a      	movs	r3, #10
 800b738:	77bb      	strb	r3, [r7, #30]
  s8_t empty = ARP_TABLE_SIZE;
 800b73a:	230a      	movs	r3, #10
 800b73c:	777b      	strb	r3, [r7, #29]
  u8_t i = 0;
 800b73e:	2300      	movs	r3, #0
 800b740:	773b      	strb	r3, [r7, #28]
  /* oldest entry with packets on queue */
  s8_t old_queue = ARP_TABLE_SIZE;
 800b742:	230a      	movs	r3, #10
 800b744:	76fb      	strb	r3, [r7, #27]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 800b746:	2300      	movs	r3, #0
 800b748:	833b      	strh	r3, [r7, #24]
 800b74a:	2300      	movs	r3, #0
 800b74c:	82fb      	strh	r3, [r7, #22]
 800b74e:	2300      	movs	r3, #0
 800b750:	82bb      	strh	r3, [r7, #20]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800b752:	2300      	movs	r3, #0
 800b754:	773b      	strb	r3, [r7, #28]
 800b756:	e093      	b.n	800b880 <etharp_find_entry+0x15c>
    u8_t state = arp_table[i].state;
 800b758:	7f3a      	ldrb	r2, [r7, #28]
 800b75a:	4990      	ldr	r1, [pc, #576]	; (800b99c <etharp_find_entry+0x278>)
 800b75c:	4613      	mov	r3, r2
 800b75e:	005b      	lsls	r3, r3, #1
 800b760:	4413      	add	r3, r2
 800b762:	00db      	lsls	r3, r3, #3
 800b764:	440b      	add	r3, r1
 800b766:	3314      	adds	r3, #20
 800b768:	781b      	ldrb	r3, [r3, #0]
 800b76a:	74fb      	strb	r3, [r7, #19]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 800b76c:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800b770:	2b0a      	cmp	r3, #10
 800b772:	d105      	bne.n	800b780 <etharp_find_entry+0x5c>
 800b774:	7cfb      	ldrb	r3, [r7, #19]
 800b776:	2b00      	cmp	r3, #0
 800b778:	d102      	bne.n	800b780 <etharp_find_entry+0x5c>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %"U16_F"\n", (u16_t)i));
      /* remember first empty entry */
      empty = i;
 800b77a:	7f3b      	ldrb	r3, [r7, #28]
 800b77c:	777b      	strb	r3, [r7, #29]
 800b77e:	e07c      	b.n	800b87a <etharp_find_entry+0x156>
    } else if (state != ETHARP_STATE_EMPTY) {
 800b780:	7cfb      	ldrb	r3, [r7, #19]
 800b782:	2b00      	cmp	r3, #0
 800b784:	d079      	beq.n	800b87a <etharp_find_entry+0x156>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 800b786:	7cfb      	ldrb	r3, [r7, #19]
 800b788:	2b01      	cmp	r3, #1
 800b78a:	d009      	beq.n	800b7a0 <etharp_find_entry+0x7c>
 800b78c:	7cfb      	ldrb	r3, [r7, #19]
 800b78e:	2b01      	cmp	r3, #1
 800b790:	d806      	bhi.n	800b7a0 <etharp_find_entry+0x7c>
 800b792:	4b83      	ldr	r3, [pc, #524]	; (800b9a0 <etharp_find_entry+0x27c>)
 800b794:	f240 1225 	movw	r2, #293	; 0x125
 800b798:	4982      	ldr	r1, [pc, #520]	; (800b9a4 <etharp_find_entry+0x280>)
 800b79a:	4883      	ldr	r0, [pc, #524]	; (800b9a8 <etharp_find_entry+0x284>)
 800b79c:	f002 f960 	bl	800da60 <iprintf>
        state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 800b7a0:	68fb      	ldr	r3, [r7, #12]
 800b7a2:	2b00      	cmp	r3, #0
 800b7a4:	d00f      	beq.n	800b7c6 <etharp_find_entry+0xa2>
 800b7a6:	68fb      	ldr	r3, [r7, #12]
 800b7a8:	6819      	ldr	r1, [r3, #0]
 800b7aa:	7f3a      	ldrb	r2, [r7, #28]
 800b7ac:	487b      	ldr	r0, [pc, #492]	; (800b99c <etharp_find_entry+0x278>)
 800b7ae:	4613      	mov	r3, r2
 800b7b0:	005b      	lsls	r3, r3, #1
 800b7b2:	4413      	add	r3, r2
 800b7b4:	00db      	lsls	r3, r3, #3
 800b7b6:	4403      	add	r3, r0
 800b7b8:	3304      	adds	r3, #4
 800b7ba:	681b      	ldr	r3, [r3, #0]
 800b7bc:	4299      	cmp	r1, r3
 800b7be:	d102      	bne.n	800b7c6 <etharp_find_entry+0xa2>
          && ((netif == NULL) || (netif == arp_table[i].netif))
#endif /* ETHARP_TABLE_MATCH_NETIF */
        ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %"U16_F"\n", (u16_t)i));
        /* found exact IP address match, simply bail out */
        return i;
 800b7c0:	f997 301c 	ldrsb.w	r3, [r7, #28]
 800b7c4:	e0e5      	b.n	800b992 <etharp_find_entry+0x26e>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 800b7c6:	7cfb      	ldrb	r3, [r7, #19]
 800b7c8:	2b01      	cmp	r3, #1
 800b7ca:	d13b      	bne.n	800b844 <etharp_find_entry+0x120>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 800b7cc:	7f3a      	ldrb	r2, [r7, #28]
 800b7ce:	4973      	ldr	r1, [pc, #460]	; (800b99c <etharp_find_entry+0x278>)
 800b7d0:	4613      	mov	r3, r2
 800b7d2:	005b      	lsls	r3, r3, #1
 800b7d4:	4413      	add	r3, r2
 800b7d6:	00db      	lsls	r3, r3, #3
 800b7d8:	440b      	add	r3, r1
 800b7da:	681b      	ldr	r3, [r3, #0]
 800b7dc:	2b00      	cmp	r3, #0
 800b7de:	d018      	beq.n	800b812 <etharp_find_entry+0xee>
          if (arp_table[i].ctime >= age_queue) {
 800b7e0:	7f3a      	ldrb	r2, [r7, #28]
 800b7e2:	496e      	ldr	r1, [pc, #440]	; (800b99c <etharp_find_entry+0x278>)
 800b7e4:	4613      	mov	r3, r2
 800b7e6:	005b      	lsls	r3, r3, #1
 800b7e8:	4413      	add	r3, r2
 800b7ea:	00db      	lsls	r3, r3, #3
 800b7ec:	440b      	add	r3, r1
 800b7ee:	3312      	adds	r3, #18
 800b7f0:	881b      	ldrh	r3, [r3, #0]
 800b7f2:	8b3a      	ldrh	r2, [r7, #24]
 800b7f4:	429a      	cmp	r2, r3
 800b7f6:	d840      	bhi.n	800b87a <etharp_find_entry+0x156>
            old_queue = i;
 800b7f8:	7f3b      	ldrb	r3, [r7, #28]
 800b7fa:	76fb      	strb	r3, [r7, #27]
            age_queue = arp_table[i].ctime;
 800b7fc:	7f3a      	ldrb	r2, [r7, #28]
 800b7fe:	4967      	ldr	r1, [pc, #412]	; (800b99c <etharp_find_entry+0x278>)
 800b800:	4613      	mov	r3, r2
 800b802:	005b      	lsls	r3, r3, #1
 800b804:	4413      	add	r3, r2
 800b806:	00db      	lsls	r3, r3, #3
 800b808:	440b      	add	r3, r1
 800b80a:	3312      	adds	r3, #18
 800b80c:	881b      	ldrh	r3, [r3, #0]
 800b80e:	833b      	strh	r3, [r7, #24]
 800b810:	e033      	b.n	800b87a <etharp_find_entry+0x156>
          }
        } else
        /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 800b812:	7f3a      	ldrb	r2, [r7, #28]
 800b814:	4961      	ldr	r1, [pc, #388]	; (800b99c <etharp_find_entry+0x278>)
 800b816:	4613      	mov	r3, r2
 800b818:	005b      	lsls	r3, r3, #1
 800b81a:	4413      	add	r3, r2
 800b81c:	00db      	lsls	r3, r3, #3
 800b81e:	440b      	add	r3, r1
 800b820:	3312      	adds	r3, #18
 800b822:	881b      	ldrh	r3, [r3, #0]
 800b824:	8afa      	ldrh	r2, [r7, #22]
 800b826:	429a      	cmp	r2, r3
 800b828:	d827      	bhi.n	800b87a <etharp_find_entry+0x156>
            old_pending = i;
 800b82a:	7f3b      	ldrb	r3, [r7, #28]
 800b82c:	77fb      	strb	r3, [r7, #31]
            age_pending = arp_table[i].ctime;
 800b82e:	7f3a      	ldrb	r2, [r7, #28]
 800b830:	495a      	ldr	r1, [pc, #360]	; (800b99c <etharp_find_entry+0x278>)
 800b832:	4613      	mov	r3, r2
 800b834:	005b      	lsls	r3, r3, #1
 800b836:	4413      	add	r3, r2
 800b838:	00db      	lsls	r3, r3, #3
 800b83a:	440b      	add	r3, r1
 800b83c:	3312      	adds	r3, #18
 800b83e:	881b      	ldrh	r3, [r3, #0]
 800b840:	82fb      	strh	r3, [r7, #22]
 800b842:	e01a      	b.n	800b87a <etharp_find_entry+0x156>
          }
        }
      /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 800b844:	7cfb      	ldrb	r3, [r7, #19]
 800b846:	2b01      	cmp	r3, #1
 800b848:	d917      	bls.n	800b87a <etharp_find_entry+0x156>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 800b84a:	7f3a      	ldrb	r2, [r7, #28]
 800b84c:	4953      	ldr	r1, [pc, #332]	; (800b99c <etharp_find_entry+0x278>)
 800b84e:	4613      	mov	r3, r2
 800b850:	005b      	lsls	r3, r3, #1
 800b852:	4413      	add	r3, r2
 800b854:	00db      	lsls	r3, r3, #3
 800b856:	440b      	add	r3, r1
 800b858:	3312      	adds	r3, #18
 800b85a:	881b      	ldrh	r3, [r3, #0]
 800b85c:	8aba      	ldrh	r2, [r7, #20]
 800b85e:	429a      	cmp	r2, r3
 800b860:	d80b      	bhi.n	800b87a <etharp_find_entry+0x156>
            old_stable = i;
 800b862:	7f3b      	ldrb	r3, [r7, #28]
 800b864:	77bb      	strb	r3, [r7, #30]
            age_stable = arp_table[i].ctime;
 800b866:	7f3a      	ldrb	r2, [r7, #28]
 800b868:	494c      	ldr	r1, [pc, #304]	; (800b99c <etharp_find_entry+0x278>)
 800b86a:	4613      	mov	r3, r2
 800b86c:	005b      	lsls	r3, r3, #1
 800b86e:	4413      	add	r3, r2
 800b870:	00db      	lsls	r3, r3, #3
 800b872:	440b      	add	r3, r1
 800b874:	3312      	adds	r3, #18
 800b876:	881b      	ldrh	r3, [r3, #0]
 800b878:	82bb      	strh	r3, [r7, #20]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800b87a:	7f3b      	ldrb	r3, [r7, #28]
 800b87c:	3301      	adds	r3, #1
 800b87e:	773b      	strb	r3, [r7, #28]
 800b880:	7f3b      	ldrb	r3, [r7, #28]
 800b882:	2b09      	cmp	r3, #9
 800b884:	f67f af68 	bls.w	800b758 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 800b888:	7afb      	ldrb	r3, [r7, #11]
 800b88a:	f003 0302 	and.w	r3, r3, #2
 800b88e:	2b00      	cmp	r3, #0
 800b890:	d108      	bne.n	800b8a4 <etharp_find_entry+0x180>
 800b892:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800b896:	2b0a      	cmp	r3, #10
 800b898:	d107      	bne.n	800b8aa <etharp_find_entry+0x186>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 800b89a:	7afb      	ldrb	r3, [r7, #11]
 800b89c:	f003 0301 	and.w	r3, r3, #1
 800b8a0:	2b00      	cmp	r3, #0
 800b8a2:	d102      	bne.n	800b8aa <etharp_find_entry+0x186>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s8_t)ERR_MEM;
 800b8a4:	f04f 33ff 	mov.w	r3, #4294967295
 800b8a8:	e073      	b.n	800b992 <etharp_find_entry+0x26e>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 800b8aa:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800b8ae:	2b09      	cmp	r3, #9
 800b8b0:	dc02      	bgt.n	800b8b8 <etharp_find_entry+0x194>
    i = empty;
 800b8b2:	7f7b      	ldrb	r3, [r7, #29]
 800b8b4:	773b      	strb	r3, [r7, #28]
 800b8b6:	e036      	b.n	800b926 <etharp_find_entry+0x202>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %"U16_F"\n", (u16_t)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 800b8b8:	f997 301e 	ldrsb.w	r3, [r7, #30]
 800b8bc:	2b09      	cmp	r3, #9
 800b8be:	dc13      	bgt.n	800b8e8 <etharp_find_entry+0x1c4>
      /* recycle oldest stable*/
      i = old_stable;
 800b8c0:	7fbb      	ldrb	r3, [r7, #30]
 800b8c2:	773b      	strb	r3, [r7, #28]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %"U16_F"\n", (u16_t)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 800b8c4:	7f3a      	ldrb	r2, [r7, #28]
 800b8c6:	4935      	ldr	r1, [pc, #212]	; (800b99c <etharp_find_entry+0x278>)
 800b8c8:	4613      	mov	r3, r2
 800b8ca:	005b      	lsls	r3, r3, #1
 800b8cc:	4413      	add	r3, r2
 800b8ce:	00db      	lsls	r3, r3, #3
 800b8d0:	440b      	add	r3, r1
 800b8d2:	681b      	ldr	r3, [r3, #0]
 800b8d4:	2b00      	cmp	r3, #0
 800b8d6:	d018      	beq.n	800b90a <etharp_find_entry+0x1e6>
 800b8d8:	4b31      	ldr	r3, [pc, #196]	; (800b9a0 <etharp_find_entry+0x27c>)
 800b8da:	f240 126f 	movw	r2, #367	; 0x16f
 800b8de:	4933      	ldr	r1, [pc, #204]	; (800b9ac <etharp_find_entry+0x288>)
 800b8e0:	4831      	ldr	r0, [pc, #196]	; (800b9a8 <etharp_find_entry+0x284>)
 800b8e2:	f002 f8bd 	bl	800da60 <iprintf>
 800b8e6:	e010      	b.n	800b90a <etharp_find_entry+0x1e6>
    /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 800b8e8:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800b8ec:	2b09      	cmp	r3, #9
 800b8ee:	dc02      	bgt.n	800b8f6 <etharp_find_entry+0x1d2>
      /* recycle oldest pending */
      i = old_pending;
 800b8f0:	7ffb      	ldrb	r3, [r7, #31]
 800b8f2:	773b      	strb	r3, [r7, #28]
 800b8f4:	e009      	b.n	800b90a <etharp_find_entry+0x1e6>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %"U16_F" (without queue)\n", (u16_t)i));
    /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 800b8f6:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800b8fa:	2b09      	cmp	r3, #9
 800b8fc:	dc02      	bgt.n	800b904 <etharp_find_entry+0x1e0>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 800b8fe:	7efb      	ldrb	r3, [r7, #27]
 800b900:	773b      	strb	r3, [r7, #28]
 800b902:	e002      	b.n	800b90a <etharp_find_entry+0x1e6>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %"U16_F", freeing packet queue %p\n", (u16_t)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s8_t)ERR_MEM;
 800b904:	f04f 33ff 	mov.w	r3, #4294967295
 800b908:	e043      	b.n	800b992 <etharp_find_entry+0x26e>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800b90a:	7f3b      	ldrb	r3, [r7, #28]
 800b90c:	2b09      	cmp	r3, #9
 800b90e:	d906      	bls.n	800b91e <etharp_find_entry+0x1fa>
 800b910:	4b23      	ldr	r3, [pc, #140]	; (800b9a0 <etharp_find_entry+0x27c>)
 800b912:	f240 1281 	movw	r2, #385	; 0x181
 800b916:	4926      	ldr	r1, [pc, #152]	; (800b9b0 <etharp_find_entry+0x28c>)
 800b918:	4823      	ldr	r0, [pc, #140]	; (800b9a8 <etharp_find_entry+0x284>)
 800b91a:	f002 f8a1 	bl	800da60 <iprintf>
    etharp_free_entry(i);
 800b91e:	7f3b      	ldrb	r3, [r7, #28]
 800b920:	4618      	mov	r0, r3
 800b922:	f7ff fe25 	bl	800b570 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800b926:	7f3b      	ldrb	r3, [r7, #28]
 800b928:	2b09      	cmp	r3, #9
 800b92a:	d906      	bls.n	800b93a <etharp_find_entry+0x216>
 800b92c:	4b1c      	ldr	r3, [pc, #112]	; (800b9a0 <etharp_find_entry+0x27c>)
 800b92e:	f240 1285 	movw	r2, #389	; 0x185
 800b932:	491f      	ldr	r1, [pc, #124]	; (800b9b0 <etharp_find_entry+0x28c>)
 800b934:	481c      	ldr	r0, [pc, #112]	; (800b9a8 <etharp_find_entry+0x284>)
 800b936:	f002 f893 	bl	800da60 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 800b93a:	7f3a      	ldrb	r2, [r7, #28]
 800b93c:	4917      	ldr	r1, [pc, #92]	; (800b99c <etharp_find_entry+0x278>)
 800b93e:	4613      	mov	r3, r2
 800b940:	005b      	lsls	r3, r3, #1
 800b942:	4413      	add	r3, r2
 800b944:	00db      	lsls	r3, r3, #3
 800b946:	440b      	add	r3, r1
 800b948:	3314      	adds	r3, #20
 800b94a:	781b      	ldrb	r3, [r3, #0]
 800b94c:	2b00      	cmp	r3, #0
 800b94e:	d006      	beq.n	800b95e <etharp_find_entry+0x23a>
 800b950:	4b13      	ldr	r3, [pc, #76]	; (800b9a0 <etharp_find_entry+0x27c>)
 800b952:	f44f 72c3 	mov.w	r2, #390	; 0x186
 800b956:	4917      	ldr	r1, [pc, #92]	; (800b9b4 <etharp_find_entry+0x290>)
 800b958:	4813      	ldr	r0, [pc, #76]	; (800b9a8 <etharp_find_entry+0x284>)
 800b95a:	f002 f881 	bl	800da60 <iprintf>
    arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 800b95e:	68fb      	ldr	r3, [r7, #12]
 800b960:	2b00      	cmp	r3, #0
 800b962:	d00a      	beq.n	800b97a <etharp_find_entry+0x256>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 800b964:	7f3a      	ldrb	r2, [r7, #28]
 800b966:	68fb      	ldr	r3, [r7, #12]
 800b968:	6819      	ldr	r1, [r3, #0]
 800b96a:	480c      	ldr	r0, [pc, #48]	; (800b99c <etharp_find_entry+0x278>)
 800b96c:	4613      	mov	r3, r2
 800b96e:	005b      	lsls	r3, r3, #1
 800b970:	4413      	add	r3, r2
 800b972:	00db      	lsls	r3, r3, #3
 800b974:	4403      	add	r3, r0
 800b976:	3304      	adds	r3, #4
 800b978:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 800b97a:	7f3a      	ldrb	r2, [r7, #28]
 800b97c:	4907      	ldr	r1, [pc, #28]	; (800b99c <etharp_find_entry+0x278>)
 800b97e:	4613      	mov	r3, r2
 800b980:	005b      	lsls	r3, r3, #1
 800b982:	4413      	add	r3, r2
 800b984:	00db      	lsls	r3, r3, #3
 800b986:	440b      	add	r3, r1
 800b988:	3312      	adds	r3, #18
 800b98a:	2200      	movs	r2, #0
 800b98c:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
#endif /* ETHARP_TABLE_MATCH_NETIF*/
  return (err_t)i;
 800b98e:	f997 301c 	ldrsb.w	r3, [r7, #28]
}
 800b992:	4618      	mov	r0, r3
 800b994:	3720      	adds	r7, #32
 800b996:	46bd      	mov	sp, r7
 800b998:	bd80      	pop	{r7, pc}
 800b99a:	bf00      	nop
 800b99c:	2000011c 	.word	0x2000011c
 800b9a0:	080105fc 	.word	0x080105fc
 800b9a4:	08010634 	.word	0x08010634
 800b9a8:	08010674 	.word	0x08010674
 800b9ac:	0801069c 	.word	0x0801069c
 800b9b0:	080106b4 	.word	0x080106b4
 800b9b4:	080106c8 	.word	0x080106c8

0800b9b8 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 800b9b8:	b580      	push	{r7, lr}
 800b9ba:	b088      	sub	sp, #32
 800b9bc:	af02      	add	r7, sp, #8
 800b9be:	60f8      	str	r0, [r7, #12]
 800b9c0:	60b9      	str	r1, [r7, #8]
 800b9c2:	607a      	str	r2, [r7, #4]
 800b9c4:	70fb      	strb	r3, [r7, #3]
  s8_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 800b9c6:	68fb      	ldr	r3, [r7, #12]
 800b9c8:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800b9cc:	2b06      	cmp	r3, #6
 800b9ce:	d006      	beq.n	800b9de <etharp_update_arp_entry+0x26>
 800b9d0:	4b48      	ldr	r3, [pc, #288]	; (800baf4 <etharp_update_arp_entry+0x13c>)
 800b9d2:	f240 12ab 	movw	r2, #427	; 0x1ab
 800b9d6:	4948      	ldr	r1, [pc, #288]	; (800baf8 <etharp_update_arp_entry+0x140>)
 800b9d8:	4848      	ldr	r0, [pc, #288]	; (800bafc <etharp_update_arp_entry+0x144>)
 800b9da:	f002 f841 	bl	800da60 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
    ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
    (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
    (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 800b9de:	68bb      	ldr	r3, [r7, #8]
 800b9e0:	2b00      	cmp	r3, #0
 800b9e2:	d012      	beq.n	800ba0a <etharp_update_arp_entry+0x52>
 800b9e4:	68bb      	ldr	r3, [r7, #8]
 800b9e6:	681b      	ldr	r3, [r3, #0]
 800b9e8:	2b00      	cmp	r3, #0
 800b9ea:	d00e      	beq.n	800ba0a <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800b9ec:	68bb      	ldr	r3, [r7, #8]
 800b9ee:	681b      	ldr	r3, [r3, #0]
 800b9f0:	68f9      	ldr	r1, [r7, #12]
 800b9f2:	4618      	mov	r0, r3
 800b9f4:	f001 f8fe 	bl	800cbf4 <ip4_addr_isbroadcast_u32>
 800b9f8:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 800b9fa:	2b00      	cmp	r3, #0
 800b9fc:	d105      	bne.n	800ba0a <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 800b9fe:	68bb      	ldr	r3, [r7, #8]
 800ba00:	681b      	ldr	r3, [r3, #0]
 800ba02:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800ba06:	2be0      	cmp	r3, #224	; 0xe0
 800ba08:	d102      	bne.n	800ba10 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800ba0a:	f06f 030f 	mvn.w	r3, #15
 800ba0e:	e06c      	b.n	800baea <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 800ba10:	78fb      	ldrb	r3, [r7, #3]
 800ba12:	68fa      	ldr	r2, [r7, #12]
 800ba14:	4619      	mov	r1, r3
 800ba16:	68b8      	ldr	r0, [r7, #8]
 800ba18:	f7ff fe84 	bl	800b724 <etharp_find_entry>
 800ba1c:	4603      	mov	r3, r0
 800ba1e:	75fb      	strb	r3, [r7, #23]
  /* bail out if no entry could be found */
  if (i < 0) {
 800ba20:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ba24:	2b00      	cmp	r3, #0
 800ba26:	da02      	bge.n	800ba2e <etharp_update_arp_entry+0x76>
    return (err_t)i;
 800ba28:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ba2c:	e05d      	b.n	800baea <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 800ba2e:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800ba32:	4933      	ldr	r1, [pc, #204]	; (800bb00 <etharp_update_arp_entry+0x148>)
 800ba34:	4613      	mov	r3, r2
 800ba36:	005b      	lsls	r3, r3, #1
 800ba38:	4413      	add	r3, r2
 800ba3a:	00db      	lsls	r3, r3, #3
 800ba3c:	440b      	add	r3, r1
 800ba3e:	3314      	adds	r3, #20
 800ba40:	2202      	movs	r2, #2
 800ba42:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 800ba44:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800ba48:	492d      	ldr	r1, [pc, #180]	; (800bb00 <etharp_update_arp_entry+0x148>)
 800ba4a:	4613      	mov	r3, r2
 800ba4c:	005b      	lsls	r3, r3, #1
 800ba4e:	4413      	add	r3, r2
 800ba50:	00db      	lsls	r3, r3, #3
 800ba52:	440b      	add	r3, r1
 800ba54:	3308      	adds	r3, #8
 800ba56:	68fa      	ldr	r2, [r7, #12]
 800ba58:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", (s16_t)i));
  /* update address */
  ETHADDR32_COPY(&arp_table[i].ethaddr, ethaddr);
 800ba5a:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800ba5e:	4613      	mov	r3, r2
 800ba60:	005b      	lsls	r3, r3, #1
 800ba62:	4413      	add	r3, r2
 800ba64:	00db      	lsls	r3, r3, #3
 800ba66:	3308      	adds	r3, #8
 800ba68:	4a25      	ldr	r2, [pc, #148]	; (800bb00 <etharp_update_arp_entry+0x148>)
 800ba6a:	4413      	add	r3, r2
 800ba6c:	3304      	adds	r3, #4
 800ba6e:	2206      	movs	r2, #6
 800ba70:	6879      	ldr	r1, [r7, #4]
 800ba72:	4618      	mov	r0, r3
 800ba74:	f001 ffde 	bl	800da34 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 800ba78:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800ba7c:	4920      	ldr	r1, [pc, #128]	; (800bb00 <etharp_update_arp_entry+0x148>)
 800ba7e:	4613      	mov	r3, r2
 800ba80:	005b      	lsls	r3, r3, #1
 800ba82:	4413      	add	r3, r2
 800ba84:	00db      	lsls	r3, r3, #3
 800ba86:	440b      	add	r3, r1
 800ba88:	3312      	adds	r3, #18
 800ba8a:	2200      	movs	r2, #0
 800ba8c:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 800ba8e:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800ba92:	491b      	ldr	r1, [pc, #108]	; (800bb00 <etharp_update_arp_entry+0x148>)
 800ba94:	4613      	mov	r3, r2
 800ba96:	005b      	lsls	r3, r3, #1
 800ba98:	4413      	add	r3, r2
 800ba9a:	00db      	lsls	r3, r3, #3
 800ba9c:	440b      	add	r3, r1
 800ba9e:	681b      	ldr	r3, [r3, #0]
 800baa0:	2b00      	cmp	r3, #0
 800baa2:	d021      	beq.n	800bae8 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 800baa4:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800baa8:	4915      	ldr	r1, [pc, #84]	; (800bb00 <etharp_update_arp_entry+0x148>)
 800baaa:	4613      	mov	r3, r2
 800baac:	005b      	lsls	r3, r3, #1
 800baae:	4413      	add	r3, r2
 800bab0:	00db      	lsls	r3, r3, #3
 800bab2:	440b      	add	r3, r1
 800bab4:	681b      	ldr	r3, [r3, #0]
 800bab6:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 800bab8:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800babc:	4910      	ldr	r1, [pc, #64]	; (800bb00 <etharp_update_arp_entry+0x148>)
 800babe:	4613      	mov	r3, r2
 800bac0:	005b      	lsls	r3, r3, #1
 800bac2:	4413      	add	r3, r2
 800bac4:	00db      	lsls	r3, r3, #3
 800bac6:	440b      	add	r3, r1
 800bac8:	2200      	movs	r2, #0
 800baca:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr*)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 800bacc:	68fb      	ldr	r3, [r7, #12]
 800bace:	f103 022d 	add.w	r2, r3, #45	; 0x2d
 800bad2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800bad6:	9300      	str	r3, [sp, #0]
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	6939      	ldr	r1, [r7, #16]
 800badc:	68f8      	ldr	r0, [r7, #12]
 800bade:	f001 ff2f 	bl	800d940 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 800bae2:	6938      	ldr	r0, [r7, #16]
 800bae4:	f7f8 fbe8 	bl	80042b8 <pbuf_free>
  }
  return ERR_OK;
 800bae8:	2300      	movs	r3, #0
}
 800baea:	4618      	mov	r0, r3
 800baec:	3718      	adds	r7, #24
 800baee:	46bd      	mov	sp, r7
 800baf0:	bd80      	pop	{r7, pc}
 800baf2:	bf00      	nop
 800baf4:	080105fc 	.word	0x080105fc
 800baf8:	080106f4 	.word	0x080106f4
 800bafc:	08010674 	.word	0x08010674
 800bb00:	2000011c 	.word	0x2000011c

0800bb04 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 800bb04:	b580      	push	{r7, lr}
 800bb06:	b084      	sub	sp, #16
 800bb08:	af00      	add	r7, sp, #0
 800bb0a:	6078      	str	r0, [r7, #4]
  u8_t i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800bb0c:	2300      	movs	r3, #0
 800bb0e:	73fb      	strb	r3, [r7, #15]
 800bb10:	e01f      	b.n	800bb52 <etharp_cleanup_netif+0x4e>
    u8_t state = arp_table[i].state;
 800bb12:	7bfa      	ldrb	r2, [r7, #15]
 800bb14:	4913      	ldr	r1, [pc, #76]	; (800bb64 <etharp_cleanup_netif+0x60>)
 800bb16:	4613      	mov	r3, r2
 800bb18:	005b      	lsls	r3, r3, #1
 800bb1a:	4413      	add	r3, r2
 800bb1c:	00db      	lsls	r3, r3, #3
 800bb1e:	440b      	add	r3, r1
 800bb20:	3314      	adds	r3, #20
 800bb22:	781b      	ldrb	r3, [r3, #0]
 800bb24:	73bb      	strb	r3, [r7, #14]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 800bb26:	7bbb      	ldrb	r3, [r7, #14]
 800bb28:	2b00      	cmp	r3, #0
 800bb2a:	d00f      	beq.n	800bb4c <etharp_cleanup_netif+0x48>
 800bb2c:	7bfa      	ldrb	r2, [r7, #15]
 800bb2e:	490d      	ldr	r1, [pc, #52]	; (800bb64 <etharp_cleanup_netif+0x60>)
 800bb30:	4613      	mov	r3, r2
 800bb32:	005b      	lsls	r3, r3, #1
 800bb34:	4413      	add	r3, r2
 800bb36:	00db      	lsls	r3, r3, #3
 800bb38:	440b      	add	r3, r1
 800bb3a:	3308      	adds	r3, #8
 800bb3c:	681b      	ldr	r3, [r3, #0]
 800bb3e:	687a      	ldr	r2, [r7, #4]
 800bb40:	429a      	cmp	r2, r3
 800bb42:	d103      	bne.n	800bb4c <etharp_cleanup_netif+0x48>
      etharp_free_entry(i);
 800bb44:	7bfb      	ldrb	r3, [r7, #15]
 800bb46:	4618      	mov	r0, r3
 800bb48:	f7ff fd12 	bl	800b570 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800bb4c:	7bfb      	ldrb	r3, [r7, #15]
 800bb4e:	3301      	adds	r3, #1
 800bb50:	73fb      	strb	r3, [r7, #15]
 800bb52:	7bfb      	ldrb	r3, [r7, #15]
 800bb54:	2b09      	cmp	r3, #9
 800bb56:	d9dc      	bls.n	800bb12 <etharp_cleanup_netif+0xe>
    }
  }
}
 800bb58:	bf00      	nop
 800bb5a:	bf00      	nop
 800bb5c:	3710      	adds	r7, #16
 800bb5e:	46bd      	mov	sp, r7
 800bb60:	bd80      	pop	{r7, pc}
 800bb62:	bf00      	nop
 800bb64:	2000011c 	.word	0x2000011c

0800bb68 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 800bb68:	b5b0      	push	{r4, r5, r7, lr}
 800bb6a:	b08a      	sub	sp, #40	; 0x28
 800bb6c:	af04      	add	r7, sp, #16
 800bb6e:	6078      	str	r0, [r7, #4]
 800bb70:	6039      	str	r1, [r7, #0]
  struct etharp_hdr *hdr;
  /* these are aligned properly, whereas the ARP header fields might not be */
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800bb72:	683b      	ldr	r3, [r7, #0]
 800bb74:	2b00      	cmp	r3, #0
 800bb76:	d107      	bne.n	800bb88 <etharp_input+0x20>
 800bb78:	4b3f      	ldr	r3, [pc, #252]	; (800bc78 <etharp_input+0x110>)
 800bb7a:	f44f 7222 	mov.w	r2, #648	; 0x288
 800bb7e:	493f      	ldr	r1, [pc, #252]	; (800bc7c <etharp_input+0x114>)
 800bb80:	483f      	ldr	r0, [pc, #252]	; (800bc80 <etharp_input+0x118>)
 800bb82:	f001 ff6d 	bl	800da60 <iprintf>
 800bb86:	e074      	b.n	800bc72 <etharp_input+0x10a>

  hdr = (struct etharp_hdr *)p->payload;
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	685b      	ldr	r3, [r3, #4]
 800bb8c:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(HWTYPE_ETHERNET)) ||
 800bb8e:	693b      	ldr	r3, [r7, #16]
 800bb90:	881b      	ldrh	r3, [r3, #0]
 800bb92:	b29b      	uxth	r3, r3
 800bb94:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bb98:	d10c      	bne.n	800bbb4 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800bb9a:	693b      	ldr	r3, [r7, #16]
 800bb9c:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(HWTYPE_ETHERNET)) ||
 800bb9e:	2b06      	cmp	r3, #6
 800bba0:	d108      	bne.n	800bbb4 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800bba2:	693b      	ldr	r3, [r7, #16]
 800bba4:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800bba6:	2b04      	cmp	r3, #4
 800bba8:	d104      	bne.n	800bbb4 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 800bbaa:	693b      	ldr	r3, [r7, #16]
 800bbac:	885b      	ldrh	r3, [r3, #2]
 800bbae:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800bbb0:	2b08      	cmp	r3, #8
 800bbb2:	d003      	beq.n	800bbbc <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
      ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
      hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 800bbb4:	6878      	ldr	r0, [r7, #4]
 800bbb6:	f7f8 fb7f 	bl	80042b8 <pbuf_free>
    return;
 800bbba:	e05a      	b.n	800bc72 <etharp_input+0x10a>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr2 to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR2_COPY(&sipaddr, &hdr->sipaddr);
 800bbbc:	693b      	ldr	r3, [r7, #16]
 800bbbe:	330e      	adds	r3, #14
 800bbc0:	681b      	ldr	r3, [r3, #0]
 800bbc2:	60fb      	str	r3, [r7, #12]
  IPADDR2_COPY(&dipaddr, &hdr->dipaddr);
 800bbc4:	693b      	ldr	r3, [r7, #16]
 800bbc6:	3318      	adds	r3, #24
 800bbc8:	681b      	ldr	r3, [r3, #0]
 800bbca:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800bbcc:	683b      	ldr	r3, [r7, #0]
 800bbce:	3304      	adds	r3, #4
 800bbd0:	681b      	ldr	r3, [r3, #0]
 800bbd2:	2b00      	cmp	r3, #0
 800bbd4:	d102      	bne.n	800bbdc <etharp_input+0x74>
    for_us = 0;
 800bbd6:	2300      	movs	r3, #0
 800bbd8:	75fb      	strb	r3, [r7, #23]
 800bbda:	e009      	b.n	800bbf0 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 800bbdc:	68ba      	ldr	r2, [r7, #8]
 800bbde:	683b      	ldr	r3, [r7, #0]
 800bbe0:	3304      	adds	r3, #4
 800bbe2:	681b      	ldr	r3, [r3, #0]
 800bbe4:	429a      	cmp	r2, r3
 800bbe6:	bf0c      	ite	eq
 800bbe8:	2301      	moveq	r3, #1
 800bbea:	2300      	movne	r3, #0
 800bbec:	b2db      	uxtb	r3, r3
 800bbee:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800bbf0:	693b      	ldr	r3, [r7, #16]
 800bbf2:	f103 0208 	add.w	r2, r3, #8
 800bbf6:	7dfb      	ldrb	r3, [r7, #23]
 800bbf8:	2b00      	cmp	r3, #0
 800bbfa:	d001      	beq.n	800bc00 <etharp_input+0x98>
 800bbfc:	2301      	movs	r3, #1
 800bbfe:	e000      	b.n	800bc02 <etharp_input+0x9a>
 800bc00:	2302      	movs	r3, #2
 800bc02:	f107 010c 	add.w	r1, r7, #12
 800bc06:	6838      	ldr	r0, [r7, #0]
 800bc08:	f7ff fed6 	bl	800b9b8 <etharp_update_arp_entry>
                   for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 800bc0c:	693b      	ldr	r3, [r7, #16]
 800bc0e:	88db      	ldrh	r3, [r3, #6]
 800bc10:	b29b      	uxth	r3, r3
 800bc12:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bc16:	d003      	beq.n	800bc20 <etharp_input+0xb8>
 800bc18:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bc1c:	d01e      	beq.n	800bc5c <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
    break;
  default:
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
    ETHARP_STATS_INC(etharp.err);
    break;
 800bc1e:	e025      	b.n	800bc6c <etharp_input+0x104>
    if (for_us) {
 800bc20:	7dfb      	ldrb	r3, [r7, #23]
 800bc22:	2b00      	cmp	r3, #0
 800bc24:	d021      	beq.n	800bc6a <etharp_input+0x102>
                 (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 800bc26:	683b      	ldr	r3, [r7, #0]
 800bc28:	f103 002d 	add.w	r0, r3, #45	; 0x2d
 800bc2c:	693b      	ldr	r3, [r7, #16]
 800bc2e:	f103 0408 	add.w	r4, r3, #8
                 (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 800bc32:	683b      	ldr	r3, [r7, #0]
 800bc34:	f103 052d 	add.w	r5, r3, #45	; 0x2d
 800bc38:	683b      	ldr	r3, [r7, #0]
 800bc3a:	3304      	adds	r3, #4
                 &hdr->shwaddr, &sipaddr,
 800bc3c:	693a      	ldr	r2, [r7, #16]
 800bc3e:	3208      	adds	r2, #8
      etharp_raw(netif,
 800bc40:	2102      	movs	r1, #2
 800bc42:	9103      	str	r1, [sp, #12]
 800bc44:	f107 010c 	add.w	r1, r7, #12
 800bc48:	9102      	str	r1, [sp, #8]
 800bc4a:	9201      	str	r2, [sp, #4]
 800bc4c:	9300      	str	r3, [sp, #0]
 800bc4e:	462b      	mov	r3, r5
 800bc50:	4622      	mov	r2, r4
 800bc52:	4601      	mov	r1, r0
 800bc54:	6838      	ldr	r0, [r7, #0]
 800bc56:	f000 fae5 	bl	800c224 <etharp_raw>
    break;
 800bc5a:	e006      	b.n	800bc6a <etharp_input+0x102>
    dhcp_arp_reply(netif, &sipaddr);
 800bc5c:	f107 030c 	add.w	r3, r7, #12
 800bc60:	4619      	mov	r1, r3
 800bc62:	6838      	ldr	r0, [r7, #0]
 800bc64:	f7fe f97c 	bl	8009f60 <dhcp_arp_reply>
    break;
 800bc68:	e000      	b.n	800bc6c <etharp_input+0x104>
    break;
 800bc6a:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 800bc6c:	6878      	ldr	r0, [r7, #4]
 800bc6e:	f7f8 fb23 	bl	80042b8 <pbuf_free>
}
 800bc72:	3718      	adds	r7, #24
 800bc74:	46bd      	mov	sp, r7
 800bc76:	bdb0      	pop	{r4, r5, r7, pc}
 800bc78:	080105fc 	.word	0x080105fc
 800bc7c:	0801074c 	.word	0x0801074c
 800bc80:	08010674 	.word	0x08010674

0800bc84 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, u8_t arp_idx)
{
 800bc84:	b580      	push	{r7, lr}
 800bc86:	b086      	sub	sp, #24
 800bc88:	af02      	add	r7, sp, #8
 800bc8a:	60f8      	str	r0, [r7, #12]
 800bc8c:	60b9      	str	r1, [r7, #8]
 800bc8e:	4613      	mov	r3, r2
 800bc90:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 800bc92:	79fa      	ldrb	r2, [r7, #7]
 800bc94:	4944      	ldr	r1, [pc, #272]	; (800bda8 <etharp_output_to_arp_index+0x124>)
 800bc96:	4613      	mov	r3, r2
 800bc98:	005b      	lsls	r3, r3, #1
 800bc9a:	4413      	add	r3, r2
 800bc9c:	00db      	lsls	r3, r3, #3
 800bc9e:	440b      	add	r3, r1
 800bca0:	3314      	adds	r3, #20
 800bca2:	781b      	ldrb	r3, [r3, #0]
 800bca4:	2b01      	cmp	r3, #1
 800bca6:	d806      	bhi.n	800bcb6 <etharp_output_to_arp_index+0x32>
 800bca8:	4b40      	ldr	r3, [pc, #256]	; (800bdac <etharp_output_to_arp_index+0x128>)
 800bcaa:	f44f 723b 	mov.w	r2, #748	; 0x2ec
 800bcae:	4940      	ldr	r1, [pc, #256]	; (800bdb0 <etharp_output_to_arp_index+0x12c>)
 800bcb0:	4840      	ldr	r0, [pc, #256]	; (800bdb4 <etharp_output_to_arp_index+0x130>)
 800bcb2:	f001 fed5 	bl	800da60 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 800bcb6:	79fa      	ldrb	r2, [r7, #7]
 800bcb8:	493b      	ldr	r1, [pc, #236]	; (800bda8 <etharp_output_to_arp_index+0x124>)
 800bcba:	4613      	mov	r3, r2
 800bcbc:	005b      	lsls	r3, r3, #1
 800bcbe:	4413      	add	r3, r2
 800bcc0:	00db      	lsls	r3, r3, #3
 800bcc2:	440b      	add	r3, r1
 800bcc4:	3314      	adds	r3, #20
 800bcc6:	781b      	ldrb	r3, [r3, #0]
 800bcc8:	2b02      	cmp	r3, #2
 800bcca:	d153      	bne.n	800bd74 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 800bccc:	79fa      	ldrb	r2, [r7, #7]
 800bcce:	4936      	ldr	r1, [pc, #216]	; (800bda8 <etharp_output_to_arp_index+0x124>)
 800bcd0:	4613      	mov	r3, r2
 800bcd2:	005b      	lsls	r3, r3, #1
 800bcd4:	4413      	add	r3, r2
 800bcd6:	00db      	lsls	r3, r3, #3
 800bcd8:	440b      	add	r3, r1
 800bcda:	3312      	adds	r3, #18
 800bcdc:	881b      	ldrh	r3, [r3, #0]
 800bcde:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 800bce2:	d919      	bls.n	800bd18 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 800bce4:	79fa      	ldrb	r2, [r7, #7]
 800bce6:	4613      	mov	r3, r2
 800bce8:	005b      	lsls	r3, r3, #1
 800bcea:	4413      	add	r3, r2
 800bcec:	00db      	lsls	r3, r3, #3
 800bcee:	4a2e      	ldr	r2, [pc, #184]	; (800bda8 <etharp_output_to_arp_index+0x124>)
 800bcf0:	4413      	add	r3, r2
 800bcf2:	3304      	adds	r3, #4
 800bcf4:	4619      	mov	r1, r3
 800bcf6:	68f8      	ldr	r0, [r7, #12]
 800bcf8:	f000 fb42 	bl	800c380 <etharp_request>
 800bcfc:	4603      	mov	r3, r0
 800bcfe:	2b00      	cmp	r3, #0
 800bd00:	d138      	bne.n	800bd74 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800bd02:	79fa      	ldrb	r2, [r7, #7]
 800bd04:	4928      	ldr	r1, [pc, #160]	; (800bda8 <etharp_output_to_arp_index+0x124>)
 800bd06:	4613      	mov	r3, r2
 800bd08:	005b      	lsls	r3, r3, #1
 800bd0a:	4413      	add	r3, r2
 800bd0c:	00db      	lsls	r3, r3, #3
 800bd0e:	440b      	add	r3, r1
 800bd10:	3314      	adds	r3, #20
 800bd12:	2203      	movs	r2, #3
 800bd14:	701a      	strb	r2, [r3, #0]
 800bd16:	e02d      	b.n	800bd74 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 800bd18:	79fa      	ldrb	r2, [r7, #7]
 800bd1a:	4923      	ldr	r1, [pc, #140]	; (800bda8 <etharp_output_to_arp_index+0x124>)
 800bd1c:	4613      	mov	r3, r2
 800bd1e:	005b      	lsls	r3, r3, #1
 800bd20:	4413      	add	r3, r2
 800bd22:	00db      	lsls	r3, r3, #3
 800bd24:	440b      	add	r3, r1
 800bd26:	3312      	adds	r3, #18
 800bd28:	881b      	ldrh	r3, [r3, #0]
 800bd2a:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 800bd2e:	d321      	bcc.n	800bd74 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800bd30:	79fa      	ldrb	r2, [r7, #7]
 800bd32:	4613      	mov	r3, r2
 800bd34:	005b      	lsls	r3, r3, #1
 800bd36:	4413      	add	r3, r2
 800bd38:	00db      	lsls	r3, r3, #3
 800bd3a:	4a1b      	ldr	r2, [pc, #108]	; (800bda8 <etharp_output_to_arp_index+0x124>)
 800bd3c:	4413      	add	r3, r2
 800bd3e:	1d19      	adds	r1, r3, #4
 800bd40:	79fa      	ldrb	r2, [r7, #7]
 800bd42:	4613      	mov	r3, r2
 800bd44:	005b      	lsls	r3, r3, #1
 800bd46:	4413      	add	r3, r2
 800bd48:	00db      	lsls	r3, r3, #3
 800bd4a:	3308      	adds	r3, #8
 800bd4c:	4a16      	ldr	r2, [pc, #88]	; (800bda8 <etharp_output_to_arp_index+0x124>)
 800bd4e:	4413      	add	r3, r2
 800bd50:	3304      	adds	r3, #4
 800bd52:	461a      	mov	r2, r3
 800bd54:	68f8      	ldr	r0, [r7, #12]
 800bd56:	f000 faf1 	bl	800c33c <etharp_request_dst>
 800bd5a:	4603      	mov	r3, r0
 800bd5c:	2b00      	cmp	r3, #0
 800bd5e:	d109      	bne.n	800bd74 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800bd60:	79fa      	ldrb	r2, [r7, #7]
 800bd62:	4911      	ldr	r1, [pc, #68]	; (800bda8 <etharp_output_to_arp_index+0x124>)
 800bd64:	4613      	mov	r3, r2
 800bd66:	005b      	lsls	r3, r3, #1
 800bd68:	4413      	add	r3, r2
 800bd6a:	00db      	lsls	r3, r3, #3
 800bd6c:	440b      	add	r3, r1
 800bd6e:	3314      	adds	r3, #20
 800bd70:	2203      	movs	r2, #3
 800bd72:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr*)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 800bd74:	68fb      	ldr	r3, [r7, #12]
 800bd76:	f103 012d 	add.w	r1, r3, #45	; 0x2d
 800bd7a:	79fa      	ldrb	r2, [r7, #7]
 800bd7c:	4613      	mov	r3, r2
 800bd7e:	005b      	lsls	r3, r3, #1
 800bd80:	4413      	add	r3, r2
 800bd82:	00db      	lsls	r3, r3, #3
 800bd84:	3308      	adds	r3, #8
 800bd86:	4a08      	ldr	r2, [pc, #32]	; (800bda8 <etharp_output_to_arp_index+0x124>)
 800bd88:	4413      	add	r3, r2
 800bd8a:	3304      	adds	r3, #4
 800bd8c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800bd90:	9200      	str	r2, [sp, #0]
 800bd92:	460a      	mov	r2, r1
 800bd94:	68b9      	ldr	r1, [r7, #8]
 800bd96:	68f8      	ldr	r0, [r7, #12]
 800bd98:	f001 fdd2 	bl	800d940 <ethernet_output>
 800bd9c:	4603      	mov	r3, r0
}
 800bd9e:	4618      	mov	r0, r3
 800bda0:	3710      	adds	r7, #16
 800bda2:	46bd      	mov	sp, r7
 800bda4:	bd80      	pop	{r7, pc}
 800bda6:	bf00      	nop
 800bda8:	2000011c 	.word	0x2000011c
 800bdac:	080105fc 	.word	0x080105fc
 800bdb0:	0801076c 	.word	0x0801076c
 800bdb4:	08010674 	.word	0x08010674

0800bdb8 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 800bdb8:	b580      	push	{r7, lr}
 800bdba:	b08a      	sub	sp, #40	; 0x28
 800bdbc:	af02      	add	r7, sp, #8
 800bdbe:	60f8      	str	r0, [r7, #12]
 800bdc0:	60b9      	str	r1, [r7, #8]
 800bdc2:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT("netif != NULL", netif != NULL);
 800bdc8:	68fb      	ldr	r3, [r7, #12]
 800bdca:	2b00      	cmp	r3, #0
 800bdcc:	d106      	bne.n	800bddc <etharp_output+0x24>
 800bdce:	4b69      	ldr	r3, [pc, #420]	; (800bf74 <etharp_output+0x1bc>)
 800bdd0:	f240 321b 	movw	r2, #795	; 0x31b
 800bdd4:	4968      	ldr	r1, [pc, #416]	; (800bf78 <etharp_output+0x1c0>)
 800bdd6:	4869      	ldr	r0, [pc, #420]	; (800bf7c <etharp_output+0x1c4>)
 800bdd8:	f001 fe42 	bl	800da60 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 800bddc:	68bb      	ldr	r3, [r7, #8]
 800bdde:	2b00      	cmp	r3, #0
 800bde0:	d106      	bne.n	800bdf0 <etharp_output+0x38>
 800bde2:	4b64      	ldr	r3, [pc, #400]	; (800bf74 <etharp_output+0x1bc>)
 800bde4:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800bde8:	4965      	ldr	r1, [pc, #404]	; (800bf80 <etharp_output+0x1c8>)
 800bdea:	4864      	ldr	r0, [pc, #400]	; (800bf7c <etharp_output+0x1c4>)
 800bdec:	f001 fe38 	bl	800da60 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	2b00      	cmp	r3, #0
 800bdf4:	d106      	bne.n	800be04 <etharp_output+0x4c>
 800bdf6:	4b5f      	ldr	r3, [pc, #380]	; (800bf74 <etharp_output+0x1bc>)
 800bdf8:	f240 321d 	movw	r2, #797	; 0x31d
 800bdfc:	4961      	ldr	r1, [pc, #388]	; (800bf84 <etharp_output+0x1cc>)
 800bdfe:	485f      	ldr	r0, [pc, #380]	; (800bf7c <etharp_output+0x1c4>)
 800be00:	f001 fe2e 	bl	800da60 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	681b      	ldr	r3, [r3, #0]
 800be08:	68f9      	ldr	r1, [r7, #12]
 800be0a:	4618      	mov	r0, r3
 800be0c:	f000 fef2 	bl	800cbf4 <ip4_addr_isbroadcast_u32>
 800be10:	4603      	mov	r3, r0
 800be12:	2b00      	cmp	r3, #0
 800be14:	d002      	beq.n	800be1c <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 800be16:	4b5c      	ldr	r3, [pc, #368]	; (800bf88 <etharp_output+0x1d0>)
 800be18:	61fb      	str	r3, [r7, #28]
 800be1a:	e09b      	b.n	800bf54 <etharp_output+0x19c>
  /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	681b      	ldr	r3, [r3, #0]
 800be20:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800be24:	2be0      	cmp	r3, #224	; 0xe0
 800be26:	d118      	bne.n	800be5a <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 800be28:	2301      	movs	r3, #1
 800be2a:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 800be2c:	2300      	movs	r3, #0
 800be2e:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 800be30:	235e      	movs	r3, #94	; 0x5e
 800be32:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	3301      	adds	r3, #1
 800be38:	781b      	ldrb	r3, [r3, #0]
 800be3a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800be3e:	b2db      	uxtb	r3, r3
 800be40:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	3302      	adds	r3, #2
 800be46:	781b      	ldrb	r3, [r3, #0]
 800be48:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 800be4a:	687b      	ldr	r3, [r7, #4]
 800be4c:	3303      	adds	r3, #3
 800be4e:	781b      	ldrb	r3, [r3, #0]
 800be50:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 800be52:	f107 0310 	add.w	r3, r7, #16
 800be56:	61fb      	str	r3, [r7, #28]
 800be58:	e07c      	b.n	800bf54 <etharp_output+0x19c>
  /* unicast destination IP address? */
  } else {
    s8_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800be5a:	687b      	ldr	r3, [r7, #4]
 800be5c:	681a      	ldr	r2, [r3, #0]
 800be5e:	68fb      	ldr	r3, [r7, #12]
 800be60:	3304      	adds	r3, #4
 800be62:	681b      	ldr	r3, [r3, #0]
 800be64:	405a      	eors	r2, r3
 800be66:	68fb      	ldr	r3, [r7, #12]
 800be68:	3308      	adds	r3, #8
 800be6a:	681b      	ldr	r3, [r3, #0]
 800be6c:	4013      	ands	r3, r2
 800be6e:	2b00      	cmp	r3, #0
 800be70:	d012      	beq.n	800be98 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	681b      	ldr	r3, [r3, #0]
 800be76:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800be78:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 800be7c:	4293      	cmp	r3, r2
 800be7e:	d00b      	beq.n	800be98 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 800be80:	68fb      	ldr	r3, [r7, #12]
 800be82:	330c      	adds	r3, #12
 800be84:	681b      	ldr	r3, [r3, #0]
 800be86:	2b00      	cmp	r3, #0
 800be88:	d003      	beq.n	800be92 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 800be8a:	68fb      	ldr	r3, [r7, #12]
 800be8c:	330c      	adds	r3, #12
 800be8e:	61bb      	str	r3, [r7, #24]
 800be90:	e002      	b.n	800be98 <etharp_output+0xe0>
          /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 800be92:	f06f 0303 	mvn.w	r3, #3
 800be96:	e069      	b.n	800bf6c <etharp_output+0x1b4>
    if (netif->addr_hint != NULL) {
      /* per-pcb cached entry was given */
      u8_t etharp_cached_entry = *(netif->addr_hint);
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800be98:	4b3c      	ldr	r3, [pc, #240]	; (800bf8c <etharp_output+0x1d4>)
 800be9a:	781b      	ldrb	r3, [r3, #0]
 800be9c:	4619      	mov	r1, r3
 800be9e:	4a3c      	ldr	r2, [pc, #240]	; (800bf90 <etharp_output+0x1d8>)
 800bea0:	460b      	mov	r3, r1
 800bea2:	005b      	lsls	r3, r3, #1
 800bea4:	440b      	add	r3, r1
 800bea6:	00db      	lsls	r3, r3, #3
 800bea8:	4413      	add	r3, r2
 800beaa:	3314      	adds	r3, #20
 800beac:	781b      	ldrb	r3, [r3, #0]
 800beae:	2b01      	cmp	r3, #1
 800beb0:	d917      	bls.n	800bee2 <etharp_output+0x12a>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 800beb2:	69bb      	ldr	r3, [r7, #24]
 800beb4:	681a      	ldr	r2, [r3, #0]
 800beb6:	4b35      	ldr	r3, [pc, #212]	; (800bf8c <etharp_output+0x1d4>)
 800beb8:	781b      	ldrb	r3, [r3, #0]
 800beba:	4618      	mov	r0, r3
 800bebc:	4934      	ldr	r1, [pc, #208]	; (800bf90 <etharp_output+0x1d8>)
 800bebe:	4603      	mov	r3, r0
 800bec0:	005b      	lsls	r3, r3, #1
 800bec2:	4403      	add	r3, r0
 800bec4:	00db      	lsls	r3, r3, #3
 800bec6:	440b      	add	r3, r1
 800bec8:	3304      	adds	r3, #4
 800beca:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800becc:	429a      	cmp	r2, r3
 800bece:	d108      	bne.n	800bee2 <etharp_output+0x12a>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 800bed0:	4b2e      	ldr	r3, [pc, #184]	; (800bf8c <etharp_output+0x1d4>)
 800bed2:	781b      	ldrb	r3, [r3, #0]
 800bed4:	461a      	mov	r2, r3
 800bed6:	68b9      	ldr	r1, [r7, #8]
 800bed8:	68f8      	ldr	r0, [r7, #12]
 800beda:	f7ff fed3 	bl	800bc84 <etharp_output_to_arp_index>
 800bede:	4603      	mov	r3, r0
 800bee0:	e044      	b.n	800bf6c <etharp_output+0x1b4>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800bee2:	2300      	movs	r3, #0
 800bee4:	75fb      	strb	r3, [r7, #23]
 800bee6:	e02a      	b.n	800bf3e <etharp_output+0x186>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800bee8:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800beec:	4928      	ldr	r1, [pc, #160]	; (800bf90 <etharp_output+0x1d8>)
 800beee:	4613      	mov	r3, r2
 800bef0:	005b      	lsls	r3, r3, #1
 800bef2:	4413      	add	r3, r2
 800bef4:	00db      	lsls	r3, r3, #3
 800bef6:	440b      	add	r3, r1
 800bef8:	3314      	adds	r3, #20
 800befa:	781b      	ldrb	r3, [r3, #0]
 800befc:	2b01      	cmp	r3, #1
 800befe:	d918      	bls.n	800bf32 <etharp_output+0x17a>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 800bf00:	69bb      	ldr	r3, [r7, #24]
 800bf02:	6819      	ldr	r1, [r3, #0]
 800bf04:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800bf08:	4821      	ldr	r0, [pc, #132]	; (800bf90 <etharp_output+0x1d8>)
 800bf0a:	4613      	mov	r3, r2
 800bf0c:	005b      	lsls	r3, r3, #1
 800bf0e:	4413      	add	r3, r2
 800bf10:	00db      	lsls	r3, r3, #3
 800bf12:	4403      	add	r3, r0
 800bf14:	3304      	adds	r3, #4
 800bf16:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800bf18:	4299      	cmp	r1, r3
 800bf1a:	d10a      	bne.n	800bf32 <etharp_output+0x17a>
        /* found an existing, stable entry */
        ETHARP_SET_HINT(netif, i);
 800bf1c:	7dfa      	ldrb	r2, [r7, #23]
 800bf1e:	4b1b      	ldr	r3, [pc, #108]	; (800bf8c <etharp_output+0x1d4>)
 800bf20:	701a      	strb	r2, [r3, #0]
        return etharp_output_to_arp_index(netif, q, i);
 800bf22:	7dfb      	ldrb	r3, [r7, #23]
 800bf24:	461a      	mov	r2, r3
 800bf26:	68b9      	ldr	r1, [r7, #8]
 800bf28:	68f8      	ldr	r0, [r7, #12]
 800bf2a:	f7ff feab 	bl	800bc84 <etharp_output_to_arp_index>
 800bf2e:	4603      	mov	r3, r0
 800bf30:	e01c      	b.n	800bf6c <etharp_output+0x1b4>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800bf32:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800bf36:	b2db      	uxtb	r3, r3
 800bf38:	3301      	adds	r3, #1
 800bf3a:	b2db      	uxtb	r3, r3
 800bf3c:	75fb      	strb	r3, [r7, #23]
 800bf3e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800bf42:	2b09      	cmp	r3, #9
 800bf44:	ddd0      	ble.n	800bee8 <etharp_output+0x130>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 800bf46:	68ba      	ldr	r2, [r7, #8]
 800bf48:	69b9      	ldr	r1, [r7, #24]
 800bf4a:	68f8      	ldr	r0, [r7, #12]
 800bf4c:	f000 f822 	bl	800bf94 <etharp_query>
 800bf50:	4603      	mov	r3, r0
 800bf52:	e00b      	b.n	800bf6c <etharp_output+0x1b4>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr*)(netif->hwaddr), dest, ETHTYPE_IP);
 800bf54:	68fb      	ldr	r3, [r7, #12]
 800bf56:	f103 022d 	add.w	r2, r3, #45	; 0x2d
 800bf5a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800bf5e:	9300      	str	r3, [sp, #0]
 800bf60:	69fb      	ldr	r3, [r7, #28]
 800bf62:	68b9      	ldr	r1, [r7, #8]
 800bf64:	68f8      	ldr	r0, [r7, #12]
 800bf66:	f001 fceb 	bl	800d940 <ethernet_output>
 800bf6a:	4603      	mov	r3, r0
}
 800bf6c:	4618      	mov	r0, r3
 800bf6e:	3720      	adds	r7, #32
 800bf70:	46bd      	mov	sp, r7
 800bf72:	bd80      	pop	{r7, pc}
 800bf74:	080105fc 	.word	0x080105fc
 800bf78:	0801074c 	.word	0x0801074c
 800bf7c:	08010674 	.word	0x08010674
 800bf80:	0801079c 	.word	0x0801079c
 800bf84:	0801073c 	.word	0x0801073c
 800bf88:	08010d70 	.word	0x08010d70
 800bf8c:	2000020c 	.word	0x2000020c
 800bf90:	2000011c 	.word	0x2000011c

0800bf94 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 800bf94:	b580      	push	{r7, lr}
 800bf96:	b08c      	sub	sp, #48	; 0x30
 800bf98:	af02      	add	r7, sp, #8
 800bf9a:	60f8      	str	r0, [r7, #12]
 800bf9c:	60b9      	str	r1, [r7, #8]
 800bf9e:	607a      	str	r2, [r7, #4]
  struct eth_addr * srcaddr = (struct eth_addr *)netif->hwaddr;
 800bfa0:	68fb      	ldr	r3, [r7, #12]
 800bfa2:	332d      	adds	r3, #45	; 0x2d
 800bfa4:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 800bfa6:	23ff      	movs	r3, #255	; 0xff
 800bfa8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 800bfac:	2300      	movs	r3, #0
 800bfae:	623b      	str	r3, [r7, #32]
  s8_t i; /* ARP entry index */

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800bfb0:	68bb      	ldr	r3, [r7, #8]
 800bfb2:	681b      	ldr	r3, [r3, #0]
 800bfb4:	68f9      	ldr	r1, [r7, #12]
 800bfb6:	4618      	mov	r0, r3
 800bfb8:	f000 fe1c 	bl	800cbf4 <ip4_addr_isbroadcast_u32>
 800bfbc:	4603      	mov	r3, r0
 800bfbe:	2b00      	cmp	r3, #0
 800bfc0:	d10c      	bne.n	800bfdc <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800bfc2:	68bb      	ldr	r3, [r7, #8]
 800bfc4:	681b      	ldr	r3, [r3, #0]
 800bfc6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800bfca:	2be0      	cmp	r3, #224	; 0xe0
 800bfcc:	d006      	beq.n	800bfdc <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800bfce:	68bb      	ldr	r3, [r7, #8]
 800bfd0:	2b00      	cmp	r3, #0
 800bfd2:	d003      	beq.n	800bfdc <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 800bfd4:	68bb      	ldr	r3, [r7, #8]
 800bfd6:	681b      	ldr	r3, [r3, #0]
 800bfd8:	2b00      	cmp	r3, #0
 800bfda:	d102      	bne.n	800bfe2 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800bfdc:	f06f 030f 	mvn.w	r3, #15
 800bfe0:	e10e      	b.n	800c200 <etharp_query+0x26c>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 800bfe2:	68fa      	ldr	r2, [r7, #12]
 800bfe4:	2101      	movs	r1, #1
 800bfe6:	68b8      	ldr	r0, [r7, #8]
 800bfe8:	f7ff fb9c 	bl	800b724 <etharp_find_entry>
 800bfec:	4603      	mov	r3, r0
 800bfee:	74fb      	strb	r3, [r7, #19]

  /* could not find or create entry? */
  if (i < 0) {
 800bff0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800bff4:	2b00      	cmp	r3, #0
 800bff6:	da02      	bge.n	800bffe <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i;
 800bff8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800bffc:	e100      	b.n	800c200 <etharp_query+0x26c>
  }

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 800bffe:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800c002:	4981      	ldr	r1, [pc, #516]	; (800c208 <etharp_query+0x274>)
 800c004:	4613      	mov	r3, r2
 800c006:	005b      	lsls	r3, r3, #1
 800c008:	4413      	add	r3, r2
 800c00a:	00db      	lsls	r3, r3, #3
 800c00c:	440b      	add	r3, r1
 800c00e:	3314      	adds	r3, #20
 800c010:	781b      	ldrb	r3, [r3, #0]
 800c012:	2b00      	cmp	r3, #0
 800c014:	d117      	bne.n	800c046 <etharp_query+0xb2>
    is_new_entry = 1;
 800c016:	2301      	movs	r3, #1
 800c018:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 800c01a:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800c01e:	497a      	ldr	r1, [pc, #488]	; (800c208 <etharp_query+0x274>)
 800c020:	4613      	mov	r3, r2
 800c022:	005b      	lsls	r3, r3, #1
 800c024:	4413      	add	r3, r2
 800c026:	00db      	lsls	r3, r3, #3
 800c028:	440b      	add	r3, r1
 800c02a:	3314      	adds	r3, #20
 800c02c:	2201      	movs	r2, #1
 800c02e:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 800c030:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800c034:	4974      	ldr	r1, [pc, #464]	; (800c208 <etharp_query+0x274>)
 800c036:	4613      	mov	r3, r2
 800c038:	005b      	lsls	r3, r3, #1
 800c03a:	4413      	add	r3, r2
 800c03c:	00db      	lsls	r3, r3, #3
 800c03e:	440b      	add	r3, r1
 800c040:	3308      	adds	r3, #8
 800c042:	68fa      	ldr	r2, [r7, #12]
 800c044:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 800c046:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800c04a:	496f      	ldr	r1, [pc, #444]	; (800c208 <etharp_query+0x274>)
 800c04c:	4613      	mov	r3, r2
 800c04e:	005b      	lsls	r3, r3, #1
 800c050:	4413      	add	r3, r2
 800c052:	00db      	lsls	r3, r3, #3
 800c054:	440b      	add	r3, r1
 800c056:	3314      	adds	r3, #20
 800c058:	781b      	ldrb	r3, [r3, #0]
 800c05a:	2b01      	cmp	r3, #1
 800c05c:	d012      	beq.n	800c084 <etharp_query+0xf0>
 800c05e:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800c062:	4969      	ldr	r1, [pc, #420]	; (800c208 <etharp_query+0x274>)
 800c064:	4613      	mov	r3, r2
 800c066:	005b      	lsls	r3, r3, #1
 800c068:	4413      	add	r3, r2
 800c06a:	00db      	lsls	r3, r3, #3
 800c06c:	440b      	add	r3, r1
 800c06e:	3314      	adds	r3, #20
 800c070:	781b      	ldrb	r3, [r3, #0]
 800c072:	2b01      	cmp	r3, #1
 800c074:	d806      	bhi.n	800c084 <etharp_query+0xf0>
 800c076:	4b65      	ldr	r3, [pc, #404]	; (800c20c <etharp_query+0x278>)
 800c078:	f240 32c7 	movw	r2, #967	; 0x3c7
 800c07c:	4964      	ldr	r1, [pc, #400]	; (800c210 <etharp_query+0x27c>)
 800c07e:	4865      	ldr	r0, [pc, #404]	; (800c214 <etharp_query+0x280>)
 800c080:	f001 fcee 	bl	800da60 <iprintf>
  ((arp_table[i].state == ETHARP_STATE_PENDING) ||
   (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 800c084:	6a3b      	ldr	r3, [r7, #32]
 800c086:	2b00      	cmp	r3, #0
 800c088:	d102      	bne.n	800c090 <etharp_query+0xfc>
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	2b00      	cmp	r3, #0
 800c08e:	d10c      	bne.n	800c0aa <etharp_query+0x116>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 800c090:	68b9      	ldr	r1, [r7, #8]
 800c092:	68f8      	ldr	r0, [r7, #12]
 800c094:	f000 f974 	bl	800c380 <etharp_request>
 800c098:	4603      	mov	r3, r0
 800c09a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	2b00      	cmp	r3, #0
 800c0a2:	d102      	bne.n	800c0aa <etharp_query+0x116>
      return result;
 800c0a4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c0a8:	e0aa      	b.n	800c200 <etharp_query+0x26c>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	2b00      	cmp	r3, #0
 800c0ae:	d106      	bne.n	800c0be <etharp_query+0x12a>
 800c0b0:	4b56      	ldr	r3, [pc, #344]	; (800c20c <etharp_query+0x278>)
 800c0b2:	f240 32db 	movw	r2, #987	; 0x3db
 800c0b6:	4958      	ldr	r1, [pc, #352]	; (800c218 <etharp_query+0x284>)
 800c0b8:	4856      	ldr	r0, [pc, #344]	; (800c214 <etharp_query+0x280>)
 800c0ba:	f001 fcd1 	bl	800da60 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 800c0be:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800c0c2:	4951      	ldr	r1, [pc, #324]	; (800c208 <etharp_query+0x274>)
 800c0c4:	4613      	mov	r3, r2
 800c0c6:	005b      	lsls	r3, r3, #1
 800c0c8:	4413      	add	r3, r2
 800c0ca:	00db      	lsls	r3, r3, #3
 800c0cc:	440b      	add	r3, r1
 800c0ce:	3314      	adds	r3, #20
 800c0d0:	781b      	ldrb	r3, [r3, #0]
 800c0d2:	2b01      	cmp	r3, #1
 800c0d4:	d918      	bls.n	800c108 <etharp_query+0x174>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_HINT(netif, i);
 800c0d6:	7cfa      	ldrb	r2, [r7, #19]
 800c0d8:	4b50      	ldr	r3, [pc, #320]	; (800c21c <etharp_query+0x288>)
 800c0da:	701a      	strb	r2, [r3, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 800c0dc:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800c0e0:	4613      	mov	r3, r2
 800c0e2:	005b      	lsls	r3, r3, #1
 800c0e4:	4413      	add	r3, r2
 800c0e6:	00db      	lsls	r3, r3, #3
 800c0e8:	3308      	adds	r3, #8
 800c0ea:	4a47      	ldr	r2, [pc, #284]	; (800c208 <etharp_query+0x274>)
 800c0ec:	4413      	add	r3, r2
 800c0ee:	3304      	adds	r3, #4
 800c0f0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c0f4:	9200      	str	r2, [sp, #0]
 800c0f6:	697a      	ldr	r2, [r7, #20]
 800c0f8:	6879      	ldr	r1, [r7, #4]
 800c0fa:	68f8      	ldr	r0, [r7, #12]
 800c0fc:	f001 fc20 	bl	800d940 <ethernet_output>
 800c100:	4603      	mov	r3, r0
 800c102:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c106:	e079      	b.n	800c1fc <etharp_query+0x268>
  /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800c108:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800c10c:	493e      	ldr	r1, [pc, #248]	; (800c208 <etharp_query+0x274>)
 800c10e:	4613      	mov	r3, r2
 800c110:	005b      	lsls	r3, r3, #1
 800c112:	4413      	add	r3, r2
 800c114:	00db      	lsls	r3, r3, #3
 800c116:	440b      	add	r3, r1
 800c118:	3314      	adds	r3, #20
 800c11a:	781b      	ldrb	r3, [r3, #0]
 800c11c:	2b01      	cmp	r3, #1
 800c11e:	d16d      	bne.n	800c1fc <etharp_query+0x268>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 800c120:	2300      	movs	r3, #0
 800c122:	61bb      	str	r3, [r7, #24]
    /* IF q includes a PBUF_REF, PBUF_POOL or PBUF_RAM, we have no choice but
     * to copy the whole queue into a new PBUF_RAM (see bug #11400)
     * PBUF_ROMs can be left as they are, since ROM must not get changed. */
    p = q;
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	61fb      	str	r3, [r7, #28]
    while (p) {
 800c128:	e01a      	b.n	800c160 <etharp_query+0x1cc>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 800c12a:	69fb      	ldr	r3, [r7, #28]
 800c12c:	895a      	ldrh	r2, [r3, #10]
 800c12e:	69fb      	ldr	r3, [r7, #28]
 800c130:	891b      	ldrh	r3, [r3, #8]
 800c132:	429a      	cmp	r2, r3
 800c134:	d10a      	bne.n	800c14c <etharp_query+0x1b8>
 800c136:	69fb      	ldr	r3, [r7, #28]
 800c138:	681b      	ldr	r3, [r3, #0]
 800c13a:	2b00      	cmp	r3, #0
 800c13c:	d006      	beq.n	800c14c <etharp_query+0x1b8>
 800c13e:	4b33      	ldr	r3, [pc, #204]	; (800c20c <etharp_query+0x278>)
 800c140:	f44f 727b 	mov.w	r2, #1004	; 0x3ec
 800c144:	4936      	ldr	r1, [pc, #216]	; (800c220 <etharp_query+0x28c>)
 800c146:	4833      	ldr	r0, [pc, #204]	; (800c214 <etharp_query+0x280>)
 800c148:	f001 fc8a 	bl	800da60 <iprintf>
      if (p->type != PBUF_ROM) {
 800c14c:	69fb      	ldr	r3, [r7, #28]
 800c14e:	7b1b      	ldrb	r3, [r3, #12]
 800c150:	2b01      	cmp	r3, #1
 800c152:	d002      	beq.n	800c15a <etharp_query+0x1c6>
        copy_needed = 1;
 800c154:	2301      	movs	r3, #1
 800c156:	61bb      	str	r3, [r7, #24]
        break;
 800c158:	e005      	b.n	800c166 <etharp_query+0x1d2>
      }
      p = p->next;
 800c15a:	69fb      	ldr	r3, [r7, #28]
 800c15c:	681b      	ldr	r3, [r3, #0]
 800c15e:	61fb      	str	r3, [r7, #28]
    while (p) {
 800c160:	69fb      	ldr	r3, [r7, #28]
 800c162:	2b00      	cmp	r3, #0
 800c164:	d1e1      	bne.n	800c12a <etharp_query+0x196>
    }
    if (copy_needed) {
 800c166:	69bb      	ldr	r3, [r7, #24]
 800c168:	2b00      	cmp	r3, #0
 800c16a:	d017      	beq.n	800c19c <etharp_query+0x208>
      /* copy the whole packet into new pbufs */
      p = pbuf_alloc(PBUF_LINK, p->tot_len, PBUF_RAM);
 800c16c:	69fb      	ldr	r3, [r7, #28]
 800c16e:	891b      	ldrh	r3, [r3, #8]
 800c170:	2200      	movs	r2, #0
 800c172:	4619      	mov	r1, r3
 800c174:	2002      	movs	r0, #2
 800c176:	f7f7 fd2d 	bl	8003bd4 <pbuf_alloc>
 800c17a:	61f8      	str	r0, [r7, #28]
      if (p != NULL) {
 800c17c:	69fb      	ldr	r3, [r7, #28]
 800c17e:	2b00      	cmp	r3, #0
 800c180:	d011      	beq.n	800c1a6 <etharp_query+0x212>
        if (pbuf_copy(p, q) != ERR_OK) {
 800c182:	6879      	ldr	r1, [r7, #4]
 800c184:	69f8      	ldr	r0, [r7, #28]
 800c186:	f7f8 f9c9 	bl	800451c <pbuf_copy>
 800c18a:	4603      	mov	r3, r0
 800c18c:	2b00      	cmp	r3, #0
 800c18e:	d00a      	beq.n	800c1a6 <etharp_query+0x212>
          pbuf_free(p);
 800c190:	69f8      	ldr	r0, [r7, #28]
 800c192:	f7f8 f891 	bl	80042b8 <pbuf_free>
          p = NULL;
 800c196:	2300      	movs	r3, #0
 800c198:	61fb      	str	r3, [r7, #28]
 800c19a:	e004      	b.n	800c1a6 <etharp_query+0x212>
        }
      }
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 800c19c:	687b      	ldr	r3, [r7, #4]
 800c19e:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 800c1a0:	69f8      	ldr	r0, [r7, #28]
 800c1a2:	f7f8 f933 	bl	800440c <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 800c1a6:	69fb      	ldr	r3, [r7, #28]
 800c1a8:	2b00      	cmp	r3, #0
 800c1aa:	d024      	beq.n	800c1f6 <etharp_query+0x262>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 800c1ac:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800c1b0:	4915      	ldr	r1, [pc, #84]	; (800c208 <etharp_query+0x274>)
 800c1b2:	4613      	mov	r3, r2
 800c1b4:	005b      	lsls	r3, r3, #1
 800c1b6:	4413      	add	r3, r2
 800c1b8:	00db      	lsls	r3, r3, #3
 800c1ba:	440b      	add	r3, r1
 800c1bc:	681b      	ldr	r3, [r3, #0]
 800c1be:	2b00      	cmp	r3, #0
 800c1c0:	d00b      	beq.n	800c1da <etharp_query+0x246>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"S16_F"\n", (void *)q, (s16_t)i));
        pbuf_free(arp_table[i].q);
 800c1c2:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800c1c6:	4910      	ldr	r1, [pc, #64]	; (800c208 <etharp_query+0x274>)
 800c1c8:	4613      	mov	r3, r2
 800c1ca:	005b      	lsls	r3, r3, #1
 800c1cc:	4413      	add	r3, r2
 800c1ce:	00db      	lsls	r3, r3, #3
 800c1d0:	440b      	add	r3, r1
 800c1d2:	681b      	ldr	r3, [r3, #0]
 800c1d4:	4618      	mov	r0, r3
 800c1d6:	f7f8 f86f 	bl	80042b8 <pbuf_free>
      }
      arp_table[i].q = p;
 800c1da:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800c1de:	490a      	ldr	r1, [pc, #40]	; (800c208 <etharp_query+0x274>)
 800c1e0:	4613      	mov	r3, r2
 800c1e2:	005b      	lsls	r3, r3, #1
 800c1e4:	4413      	add	r3, r2
 800c1e6:	00db      	lsls	r3, r3, #3
 800c1e8:	440b      	add	r3, r1
 800c1ea:	69fa      	ldr	r2, [r7, #28]
 800c1ec:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 800c1ee:	2300      	movs	r3, #0
 800c1f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c1f4:	e002      	b.n	800c1fc <etharp_query+0x268>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"S16_F"\n", (void *)q, (s16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 800c1f6:	23ff      	movs	r3, #255	; 0xff
 800c1f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 800c1fc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800c200:	4618      	mov	r0, r3
 800c202:	3728      	adds	r7, #40	; 0x28
 800c204:	46bd      	mov	sp, r7
 800c206:	bd80      	pop	{r7, pc}
 800c208:	2000011c 	.word	0x2000011c
 800c20c:	080105fc 	.word	0x080105fc
 800c210:	080107a8 	.word	0x080107a8
 800c214:	08010674 	.word	0x08010674
 800c218:	0801079c 	.word	0x0801079c
 800c21c:	2000020c 	.word	0x2000020c
 800c220:	080107d0 	.word	0x080107d0

0800c224 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 800c224:	b580      	push	{r7, lr}
 800c226:	b08a      	sub	sp, #40	; 0x28
 800c228:	af02      	add	r7, sp, #8
 800c22a:	60f8      	str	r0, [r7, #12]
 800c22c:	60b9      	str	r1, [r7, #8]
 800c22e:	607a      	str	r2, [r7, #4]
 800c230:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 800c232:	2300      	movs	r3, #0
 800c234:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 800c236:	68fb      	ldr	r3, [r7, #12]
 800c238:	2b00      	cmp	r3, #0
 800c23a:	d106      	bne.n	800c24a <etharp_raw+0x26>
 800c23c:	4b3a      	ldr	r3, [pc, #232]	; (800c328 <etharp_raw+0x104>)
 800c23e:	f44f 628b 	mov.w	r2, #1112	; 0x458
 800c242:	493a      	ldr	r1, [pc, #232]	; (800c32c <etharp_raw+0x108>)
 800c244:	483a      	ldr	r0, [pc, #232]	; (800c330 <etharp_raw+0x10c>)
 800c246:	f001 fc0b 	bl	800da60 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 800c24a:	2200      	movs	r2, #0
 800c24c:	211c      	movs	r1, #28
 800c24e:	2002      	movs	r0, #2
 800c250:	f7f7 fcc0 	bl	8003bd4 <pbuf_alloc>
 800c254:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 800c256:	69bb      	ldr	r3, [r7, #24]
 800c258:	2b00      	cmp	r3, #0
 800c25a:	d102      	bne.n	800c262 <etharp_raw+0x3e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
      ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 800c25c:	f04f 33ff 	mov.w	r3, #4294967295
 800c260:	e05d      	b.n	800c31e <etharp_raw+0xfa>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 800c262:	69bb      	ldr	r3, [r7, #24]
 800c264:	895b      	ldrh	r3, [r3, #10]
 800c266:	2b1b      	cmp	r3, #27
 800c268:	d806      	bhi.n	800c278 <etharp_raw+0x54>
 800c26a:	4b2f      	ldr	r3, [pc, #188]	; (800c328 <etharp_raw+0x104>)
 800c26c:	f240 4263 	movw	r2, #1123	; 0x463
 800c270:	4930      	ldr	r1, [pc, #192]	; (800c334 <etharp_raw+0x110>)
 800c272:	482f      	ldr	r0, [pc, #188]	; (800c330 <etharp_raw+0x10c>)
 800c274:	f001 fbf4 	bl	800da60 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 800c278:	69bb      	ldr	r3, [r7, #24]
 800c27a:	685b      	ldr	r3, [r3, #4]
 800c27c:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 800c27e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800c280:	4618      	mov	r0, r3
 800c282:	f7f6 fee6 	bl	8003052 <lwip_htons>
 800c286:	4603      	mov	r3, r0
 800c288:	461a      	mov	r2, r3
 800c28a:	697b      	ldr	r3, [r7, #20]
 800c28c:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 800c28e:	68fb      	ldr	r3, [r7, #12]
 800c290:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800c294:	2b06      	cmp	r3, #6
 800c296:	d006      	beq.n	800c2a6 <etharp_raw+0x82>
 800c298:	4b23      	ldr	r3, [pc, #140]	; (800c328 <etharp_raw+0x104>)
 800c29a:	f240 426a 	movw	r2, #1130	; 0x46a
 800c29e:	4926      	ldr	r1, [pc, #152]	; (800c338 <etharp_raw+0x114>)
 800c2a0:	4823      	ldr	r0, [pc, #140]	; (800c330 <etharp_raw+0x10c>)
 800c2a2:	f001 fbdd 	bl	800da60 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  ETHADDR16_COPY(&hdr->shwaddr, hwsrc_addr);
 800c2a6:	697b      	ldr	r3, [r7, #20]
 800c2a8:	3308      	adds	r3, #8
 800c2aa:	2206      	movs	r2, #6
 800c2ac:	6839      	ldr	r1, [r7, #0]
 800c2ae:	4618      	mov	r0, r3
 800c2b0:	f001 fbc0 	bl	800da34 <memcpy>
  ETHADDR16_COPY(&hdr->dhwaddr, hwdst_addr);
 800c2b4:	697b      	ldr	r3, [r7, #20]
 800c2b6:	3312      	adds	r3, #18
 800c2b8:	2206      	movs	r2, #6
 800c2ba:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c2bc:	4618      	mov	r0, r3
 800c2be:	f001 fbb9 	bl	800da34 <memcpy>
  /* Copy struct ip4_addr2 to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR2_COPY(&hdr->sipaddr, ipsrc_addr);
 800c2c2:	697b      	ldr	r3, [r7, #20]
 800c2c4:	330e      	adds	r3, #14
 800c2c6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c2c8:	6812      	ldr	r2, [r2, #0]
 800c2ca:	601a      	str	r2, [r3, #0]
  IPADDR2_COPY(&hdr->dipaddr, ipdst_addr);
 800c2cc:	697b      	ldr	r3, [r7, #20]
 800c2ce:	3318      	adds	r3, #24
 800c2d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c2d2:	6812      	ldr	r2, [r2, #0]
 800c2d4:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(HWTYPE_ETHERNET);
 800c2d6:	697b      	ldr	r3, [r7, #20]
 800c2d8:	2200      	movs	r2, #0
 800c2da:	701a      	strb	r2, [r3, #0]
 800c2dc:	2200      	movs	r2, #0
 800c2de:	f042 0201 	orr.w	r2, r2, #1
 800c2e2:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 800c2e4:	697b      	ldr	r3, [r7, #20]
 800c2e6:	2200      	movs	r2, #0
 800c2e8:	f042 0208 	orr.w	r2, r2, #8
 800c2ec:	709a      	strb	r2, [r3, #2]
 800c2ee:	2200      	movs	r2, #0
 800c2f0:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 800c2f2:	697b      	ldr	r3, [r7, #20]
 800c2f4:	2206      	movs	r2, #6
 800c2f6:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 800c2f8:	697b      	ldr	r3, [r7, #20]
 800c2fa:	2204      	movs	r2, #4
 800c2fc:	715a      	strb	r2, [r3, #5]
  if(ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 800c2fe:	f640 0306 	movw	r3, #2054	; 0x806
 800c302:	9300      	str	r3, [sp, #0]
 800c304:	687b      	ldr	r3, [r7, #4]
 800c306:	68ba      	ldr	r2, [r7, #8]
 800c308:	69b9      	ldr	r1, [r7, #24]
 800c30a:	68f8      	ldr	r0, [r7, #12]
 800c30c:	f001 fb18 	bl	800d940 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 800c310:	69b8      	ldr	r0, [r7, #24]
 800c312:	f7f7 ffd1 	bl	80042b8 <pbuf_free>
  p = NULL;
 800c316:	2300      	movs	r3, #0
 800c318:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 800c31a:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800c31e:	4618      	mov	r0, r3
 800c320:	3720      	adds	r7, #32
 800c322:	46bd      	mov	sp, r7
 800c324:	bd80      	pop	{r7, pc}
 800c326:	bf00      	nop
 800c328:	080105fc 	.word	0x080105fc
 800c32c:	0801074c 	.word	0x0801074c
 800c330:	08010674 	.word	0x08010674
 800c334:	080107ec 	.word	0x080107ec
 800c338:	08010820 	.word	0x08010820

0800c33c <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr* hw_dst_addr)
{
 800c33c:	b580      	push	{r7, lr}
 800c33e:	b088      	sub	sp, #32
 800c340:	af04      	add	r7, sp, #16
 800c342:	60f8      	str	r0, [r7, #12]
 800c344:	60b9      	str	r1, [r7, #8]
 800c346:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800c348:	68fb      	ldr	r3, [r7, #12]
 800c34a:	f103 012d 	add.w	r1, r3, #45	; 0x2d
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 800c34e:	68fb      	ldr	r3, [r7, #12]
 800c350:	f103 002d 	add.w	r0, r3, #45	; 0x2d
 800c354:	68fb      	ldr	r3, [r7, #12]
 800c356:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800c358:	2201      	movs	r2, #1
 800c35a:	9203      	str	r2, [sp, #12]
 800c35c:	68ba      	ldr	r2, [r7, #8]
 800c35e:	9202      	str	r2, [sp, #8]
 800c360:	4a06      	ldr	r2, [pc, #24]	; (800c37c <etharp_request_dst+0x40>)
 800c362:	9201      	str	r2, [sp, #4]
 800c364:	9300      	str	r3, [sp, #0]
 800c366:	4603      	mov	r3, r0
 800c368:	687a      	ldr	r2, [r7, #4]
 800c36a:	68f8      	ldr	r0, [r7, #12]
 800c36c:	f7ff ff5a 	bl	800c224 <etharp_raw>
 800c370:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 800c372:	4618      	mov	r0, r3
 800c374:	3710      	adds	r7, #16
 800c376:	46bd      	mov	sp, r7
 800c378:	bd80      	pop	{r7, pc}
 800c37a:	bf00      	nop
 800c37c:	08010d78 	.word	0x08010d78

0800c380 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 800c380:	b580      	push	{r7, lr}
 800c382:	b082      	sub	sp, #8
 800c384:	af00      	add	r7, sp, #0
 800c386:	6078      	str	r0, [r7, #4]
 800c388:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 800c38a:	4a05      	ldr	r2, [pc, #20]	; (800c3a0 <etharp_request+0x20>)
 800c38c:	6839      	ldr	r1, [r7, #0]
 800c38e:	6878      	ldr	r0, [r7, #4]
 800c390:	f7ff ffd4 	bl	800c33c <etharp_request_dst>
 800c394:	4603      	mov	r3, r0
}
 800c396:	4618      	mov	r0, r3
 800c398:	3708      	adds	r7, #8
 800c39a:	46bd      	mov	sp, r7
 800c39c:	bd80      	pop	{r7, pc}
 800c39e:	bf00      	nop
 800c3a0:	08010d70 	.word	0x08010d70

0800c3a4 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 800c3a4:	b580      	push	{r7, lr}
 800c3a6:	b08e      	sub	sp, #56	; 0x38
 800c3a8:	af04      	add	r7, sp, #16
 800c3aa:	6078      	str	r0, [r7, #4]
 800c3ac:	6039      	str	r1, [r7, #0]
  const ip4_addr_t* src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 800c3ae:	4b7a      	ldr	r3, [pc, #488]	; (800c598 <icmp_input+0x1f4>)
 800c3b0:	689b      	ldr	r3, [r3, #8]
 800c3b2:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL(iphdr_in) * 4;
 800c3b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3b6:	781b      	ldrb	r3, [r3, #0]
 800c3b8:	b29b      	uxth	r3, r3
 800c3ba:	f003 030f 	and.w	r3, r3, #15
 800c3be:	b29b      	uxth	r3, r3
 800c3c0:	009b      	lsls	r3, r3, #2
 800c3c2:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 800c3c4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c3c6:	2b13      	cmp	r3, #19
 800c3c8:	f240 80d1 	bls.w	800c56e <icmp_input+0x1ca>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t)*2) {
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	895b      	ldrh	r3, [r3, #10]
 800c3d0:	2b03      	cmp	r3, #3
 800c3d2:	f240 80ce 	bls.w	800c572 <icmp_input+0x1ce>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 800c3d6:	687b      	ldr	r3, [r7, #4]
 800c3d8:	685b      	ldr	r3, [r3, #4]
 800c3da:	781b      	ldrb	r3, [r3, #0]
 800c3dc:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload)+1);
#endif /* LWIP_DEBUG */
  switch (type) {
 800c3e0:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800c3e4:	2b00      	cmp	r3, #0
 800c3e6:	f000 80bb 	beq.w	800c560 <icmp_input+0x1bc>
 800c3ea:	2b08      	cmp	r3, #8
 800c3ec:	f040 80bb 	bne.w	800c566 <icmp_input+0x1c2>
       (as obviously, an echo request has been sent, too). */
    MIB2_STATS_INC(mib2.icmpinechoreps);
    break;
  case ICMP_ECHO:
    MIB2_STATS_INC(mib2.icmpinechos);
    src = ip4_current_dest_addr();
 800c3f0:	4b6a      	ldr	r3, [pc, #424]	; (800c59c <icmp_input+0x1f8>)
 800c3f2:	61fb      	str	r3, [r7, #28]
    /* multicast destination address? */
    if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800c3f4:	4b68      	ldr	r3, [pc, #416]	; (800c598 <icmp_input+0x1f4>)
 800c3f6:	695b      	ldr	r3, [r3, #20]
 800c3f8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c3fc:	2be0      	cmp	r3, #224	; 0xe0
 800c3fe:	f000 80bf 	beq.w	800c580 <icmp_input+0x1dc>
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
      goto icmperr;
#endif /* LWIP_MULTICAST_PING */
    }
    /* broadcast destination address? */
    if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 800c402:	4b65      	ldr	r3, [pc, #404]	; (800c598 <icmp_input+0x1f4>)
 800c404:	695b      	ldr	r3, [r3, #20]
 800c406:	4a64      	ldr	r2, [pc, #400]	; (800c598 <icmp_input+0x1f4>)
 800c408:	6812      	ldr	r2, [r2, #0]
 800c40a:	4611      	mov	r1, r2
 800c40c:	4618      	mov	r0, r3
 800c40e:	f000 fbf1 	bl	800cbf4 <ip4_addr_isbroadcast_u32>
 800c412:	4603      	mov	r3, r0
 800c414:	2b00      	cmp	r3, #0
 800c416:	f040 80b5 	bne.w	800c584 <icmp_input+0x1e0>
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
      goto icmperr;
#endif /* LWIP_BROADCAST_PING */
    }
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
    if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 800c41a:	687b      	ldr	r3, [r7, #4]
 800c41c:	891b      	ldrh	r3, [r3, #8]
 800c41e:	2b07      	cmp	r3, #7
 800c420:	f240 80a9 	bls.w	800c576 <icmp_input+0x1d2>
        return;
      }
    }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
    if (pbuf_header(p, (s16_t)(hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN))) {
 800c424:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c426:	330e      	adds	r3, #14
 800c428:	b29b      	uxth	r3, r3
 800c42a:	b21b      	sxth	r3, r3
 800c42c:	4619      	mov	r1, r3
 800c42e:	6878      	ldr	r0, [r7, #4]
 800c430:	f7f7 ff1e 	bl	8004270 <pbuf_header>
 800c434:	4603      	mov	r3, r0
 800c436:	2b00      	cmp	r3, #0
 800c438:	d046      	beq.n	800c4c8 <icmp_input+0x124>
      /* p is not big enough to contain link headers
       * allocate a new one and copy p into it
       */
      struct pbuf *r;
      /* allocate new packet buffer with space for link headers */
      r = pbuf_alloc(PBUF_LINK, p->tot_len + hlen, PBUF_RAM);
 800c43a:	687b      	ldr	r3, [r7, #4]
 800c43c:	891a      	ldrh	r2, [r3, #8]
 800c43e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c440:	4413      	add	r3, r2
 800c442:	b29b      	uxth	r3, r3
 800c444:	2200      	movs	r2, #0
 800c446:	4619      	mov	r1, r3
 800c448:	2002      	movs	r0, #2
 800c44a:	f7f7 fbc3 	bl	8003bd4 <pbuf_alloc>
 800c44e:	61b8      	str	r0, [r7, #24]
      if (r == NULL) {
 800c450:	69bb      	ldr	r3, [r7, #24]
 800c452:	2b00      	cmp	r3, #0
 800c454:	f000 8098 	beq.w	800c588 <icmp_input+0x1e4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
        goto icmperr;
      }
      if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 800c458:	69bb      	ldr	r3, [r7, #24]
 800c45a:	895b      	ldrh	r3, [r3, #10]
 800c45c:	461a      	mov	r2, r3
 800c45e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c460:	3308      	adds	r3, #8
 800c462:	429a      	cmp	r2, r3
 800c464:	d203      	bcs.n	800c46e <icmp_input+0xca>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
        pbuf_free(r);
 800c466:	69b8      	ldr	r0, [r7, #24]
 800c468:	f7f7 ff26 	bl	80042b8 <pbuf_free>
        goto icmperr;
 800c46c:	e08d      	b.n	800c58a <icmp_input+0x1e6>
      }
      /* copy the ip header */
      MEMCPY(r->payload, iphdr_in, hlen);
 800c46e:	69bb      	ldr	r3, [r7, #24]
 800c470:	685b      	ldr	r3, [r3, #4]
 800c472:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800c474:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c476:	4618      	mov	r0, r3
 800c478:	f001 fadc 	bl	800da34 <memcpy>
      /* switch r->payload back to icmp header (cannot fail) */
      if (pbuf_header(r, (s16_t)-hlen)) {
 800c47c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c47e:	425b      	negs	r3, r3
 800c480:	b29b      	uxth	r3, r3
 800c482:	b21b      	sxth	r3, r3
 800c484:	4619      	mov	r1, r3
 800c486:	69b8      	ldr	r0, [r7, #24]
 800c488:	f7f7 fef2 	bl	8004270 <pbuf_header>
 800c48c:	4603      	mov	r3, r0
 800c48e:	2b00      	cmp	r3, #0
 800c490:	d009      	beq.n	800c4a6 <icmp_input+0x102>
        LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 800c492:	4b43      	ldr	r3, [pc, #268]	; (800c5a0 <icmp_input+0x1fc>)
 800c494:	22af      	movs	r2, #175	; 0xaf
 800c496:	4943      	ldr	r1, [pc, #268]	; (800c5a4 <icmp_input+0x200>)
 800c498:	4843      	ldr	r0, [pc, #268]	; (800c5a8 <icmp_input+0x204>)
 800c49a:	f001 fae1 	bl	800da60 <iprintf>
        pbuf_free(r);
 800c49e:	69b8      	ldr	r0, [r7, #24]
 800c4a0:	f7f7 ff0a 	bl	80042b8 <pbuf_free>
        goto icmperr;
 800c4a4:	e071      	b.n	800c58a <icmp_input+0x1e6>
      }
      /* copy the rest of the packet without ip header */
      if (pbuf_copy(r, p) != ERR_OK) {
 800c4a6:	6879      	ldr	r1, [r7, #4]
 800c4a8:	69b8      	ldr	r0, [r7, #24]
 800c4aa:	f7f8 f837 	bl	800451c <pbuf_copy>
 800c4ae:	4603      	mov	r3, r0
 800c4b0:	2b00      	cmp	r3, #0
 800c4b2:	d003      	beq.n	800c4bc <icmp_input+0x118>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
        pbuf_free(r);
 800c4b4:	69b8      	ldr	r0, [r7, #24]
 800c4b6:	f7f7 feff 	bl	80042b8 <pbuf_free>
        goto icmperr;
 800c4ba:	e066      	b.n	800c58a <icmp_input+0x1e6>
      }
      /* free the original p */
      pbuf_free(p);
 800c4bc:	6878      	ldr	r0, [r7, #4]
 800c4be:	f7f7 fefb 	bl	80042b8 <pbuf_free>
      /* we now have an identical copy of p that has room for link headers */
      p = r;
 800c4c2:	69bb      	ldr	r3, [r7, #24]
 800c4c4:	607b      	str	r3, [r7, #4]
 800c4c6:	e015      	b.n	800c4f4 <icmp_input+0x150>
    } else {
      /* restore p->payload to point to icmp header (cannot fail) */
      if (pbuf_header(p, -(s16_t)(hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN))) {
 800c4c8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c4ca:	f1c3 23ff 	rsb	r3, r3, #4278255360	; 0xff00ff00
 800c4ce:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 800c4d2:	33f2      	adds	r3, #242	; 0xf2
 800c4d4:	b29b      	uxth	r3, r3
 800c4d6:	b21b      	sxth	r3, r3
 800c4d8:	4619      	mov	r1, r3
 800c4da:	6878      	ldr	r0, [r7, #4]
 800c4dc:	f7f7 fec8 	bl	8004270 <pbuf_header>
 800c4e0:	4603      	mov	r3, r0
 800c4e2:	2b00      	cmp	r3, #0
 800c4e4:	d006      	beq.n	800c4f4 <icmp_input+0x150>
        LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 800c4e6:	4b2e      	ldr	r3, [pc, #184]	; (800c5a0 <icmp_input+0x1fc>)
 800c4e8:	22c0      	movs	r2, #192	; 0xc0
 800c4ea:	4930      	ldr	r1, [pc, #192]	; (800c5ac <icmp_input+0x208>)
 800c4ec:	482e      	ldr	r0, [pc, #184]	; (800c5a8 <icmp_input+0x204>)
 800c4ee:	f001 fab7 	bl	800da60 <iprintf>
        goto icmperr;
 800c4f2:	e04a      	b.n	800c58a <icmp_input+0x1e6>
    }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
    /* At this point, all checks are OK. */
    /* We generate an answer by switching the dest and src ip addresses,
     * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
    iecho = (struct icmp_echo_hdr *)p->payload;
 800c4f4:	687b      	ldr	r3, [r7, #4]
 800c4f6:	685b      	ldr	r3, [r3, #4]
 800c4f8:	617b      	str	r3, [r7, #20]
    if (pbuf_header(p, (s16_t)hlen)) {
 800c4fa:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800c4fe:	4619      	mov	r1, r3
 800c500:	6878      	ldr	r0, [r7, #4]
 800c502:	f7f7 feb5 	bl	8004270 <pbuf_header>
 800c506:	4603      	mov	r3, r0
 800c508:	2b00      	cmp	r3, #0
 800c50a:	d12b      	bne.n	800c564 <icmp_input+0x1c0>
      LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
    } else {
      err_t ret;
      struct ip_hdr *iphdr = (struct ip_hdr*)p->payload;
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	685b      	ldr	r3, [r3, #4]
 800c510:	613b      	str	r3, [r7, #16]
      ip4_addr_copy(iphdr->src, *src);
 800c512:	69fb      	ldr	r3, [r7, #28]
 800c514:	681a      	ldr	r2, [r3, #0]
 800c516:	693b      	ldr	r3, [r7, #16]
 800c518:	60da      	str	r2, [r3, #12]
      ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 800c51a:	4b1f      	ldr	r3, [pc, #124]	; (800c598 <icmp_input+0x1f4>)
 800c51c:	691a      	ldr	r2, [r3, #16]
 800c51e:	693b      	ldr	r3, [r7, #16]
 800c520:	611a      	str	r2, [r3, #16]
      ICMPH_TYPE_SET(iecho, ICMP_ER);
 800c522:	697b      	ldr	r3, [r7, #20]
 800c524:	2200      	movs	r2, #0
 800c526:	701a      	strb	r2, [r3, #0]
      else {
        iecho->chksum = 0;
      }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
      iecho->chksum = 0;
 800c528:	697b      	ldr	r3, [r7, #20]
 800c52a:	2200      	movs	r2, #0
 800c52c:	709a      	strb	r2, [r3, #2]
 800c52e:	2200      	movs	r2, #0
 800c530:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

      /* Set the correct TTL and recalculate the header checksum. */
      IPH_TTL_SET(iphdr, ICMP_TTL);
 800c532:	693b      	ldr	r3, [r7, #16]
 800c534:	22ff      	movs	r2, #255	; 0xff
 800c536:	721a      	strb	r2, [r3, #8]
      IPH_CHKSUM_SET(iphdr, 0);
 800c538:	693b      	ldr	r3, [r7, #16]
 800c53a:	2200      	movs	r2, #0
 800c53c:	729a      	strb	r2, [r3, #10]
 800c53e:	2200      	movs	r2, #0
 800c540:	72da      	strb	r2, [r3, #11]
      MIB2_STATS_INC(mib2.icmpoutmsgs);
      /* increase number of echo replies attempted to send */
      MIB2_STATS_INC(mib2.icmpoutechoreps);

      /* send an ICMP packet */
      ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 800c542:	683b      	ldr	r3, [r7, #0]
 800c544:	9302      	str	r3, [sp, #8]
 800c546:	2301      	movs	r3, #1
 800c548:	9301      	str	r3, [sp, #4]
 800c54a:	2300      	movs	r3, #0
 800c54c:	9300      	str	r3, [sp, #0]
 800c54e:	23ff      	movs	r3, #255	; 0xff
 800c550:	2200      	movs	r2, #0
 800c552:	69f9      	ldr	r1, [r7, #28]
 800c554:	6878      	ldr	r0, [r7, #4]
 800c556:	f000 fa7b 	bl	800ca50 <ip4_output_if>
 800c55a:	4603      	mov	r3, r0
 800c55c:	73fb      	strb	r3, [r7, #15]
                   ICMP_TTL, 0, IP_PROTO_ICMP, inp);
      if (ret != ERR_OK) {
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
      }
    }
    break;
 800c55e:	e001      	b.n	800c564 <icmp_input+0x1c0>
    break;
 800c560:	bf00      	nop
 800c562:	e000      	b.n	800c566 <icmp_input+0x1c2>
    break;
 800c564:	bf00      	nop
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                (s16_t)type, (s16_t)code));
    ICMP_STATS_INC(icmp.proterr);
    ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 800c566:	6878      	ldr	r0, [r7, #4]
 800c568:	f7f7 fea6 	bl	80042b8 <pbuf_free>
  return;
 800c56c:	e011      	b.n	800c592 <icmp_input+0x1ee>
    goto lenerr;
 800c56e:	bf00      	nop
 800c570:	e002      	b.n	800c578 <icmp_input+0x1d4>
    goto lenerr;
 800c572:	bf00      	nop
 800c574:	e000      	b.n	800c578 <icmp_input+0x1d4>
      goto lenerr;
 800c576:	bf00      	nop
lenerr:
  pbuf_free(p);
 800c578:	6878      	ldr	r0, [r7, #4]
 800c57a:	f7f7 fe9d 	bl	80042b8 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800c57e:	e008      	b.n	800c592 <icmp_input+0x1ee>
      goto icmperr;
 800c580:	bf00      	nop
 800c582:	e002      	b.n	800c58a <icmp_input+0x1e6>
      goto icmperr;
 800c584:	bf00      	nop
 800c586:	e000      	b.n	800c58a <icmp_input+0x1e6>
        goto icmperr;
 800c588:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 800c58a:	6878      	ldr	r0, [r7, #4]
 800c58c:	f7f7 fe94 	bl	80042b8 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800c590:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 800c592:	3728      	adds	r7, #40	; 0x28
 800c594:	46bd      	mov	sp, r7
 800c596:	bd80      	pop	{r7, pc}
 800c598:	20003350 	.word	0x20003350
 800c59c:	20003364 	.word	0x20003364
 800c5a0:	08010864 	.word	0x08010864
 800c5a4:	0801089c 	.word	0x0801089c
 800c5a8:	080108d4 	.word	0x080108d4
 800c5ac:	080108fc 	.word	0x080108fc

0800c5b0 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 800c5b0:	b580      	push	{r7, lr}
 800c5b2:	b082      	sub	sp, #8
 800c5b4:	af00      	add	r7, sp, #0
 800c5b6:	6078      	str	r0, [r7, #4]
 800c5b8:	460b      	mov	r3, r1
 800c5ba:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 800c5bc:	78fb      	ldrb	r3, [r7, #3]
 800c5be:	461a      	mov	r2, r3
 800c5c0:	2103      	movs	r1, #3
 800c5c2:	6878      	ldr	r0, [r7, #4]
 800c5c4:	f000 f814 	bl	800c5f0 <icmp_send_response>
}
 800c5c8:	bf00      	nop
 800c5ca:	3708      	adds	r7, #8
 800c5cc:	46bd      	mov	sp, r7
 800c5ce:	bd80      	pop	{r7, pc}

0800c5d0 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 800c5d0:	b580      	push	{r7, lr}
 800c5d2:	b082      	sub	sp, #8
 800c5d4:	af00      	add	r7, sp, #0
 800c5d6:	6078      	str	r0, [r7, #4]
 800c5d8:	460b      	mov	r3, r1
 800c5da:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 800c5dc:	78fb      	ldrb	r3, [r7, #3]
 800c5de:	461a      	mov	r2, r3
 800c5e0:	210b      	movs	r1, #11
 800c5e2:	6878      	ldr	r0, [r7, #4]
 800c5e4:	f000 f804 	bl	800c5f0 <icmp_send_response>
}
 800c5e8:	bf00      	nop
 800c5ea:	3708      	adds	r7, #8
 800c5ec:	46bd      	mov	sp, r7
 800c5ee:	bd80      	pop	{r7, pc}

0800c5f0 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 800c5f0:	b580      	push	{r7, lr}
 800c5f2:	b08c      	sub	sp, #48	; 0x30
 800c5f4:	af04      	add	r7, sp, #16
 800c5f6:	6078      	str	r0, [r7, #4]
 800c5f8:	460b      	mov	r3, r1
 800c5fa:	70fb      	strb	r3, [r7, #3]
 800c5fc:	4613      	mov	r3, r2
 800c5fe:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 800c600:	2200      	movs	r2, #0
 800c602:	2124      	movs	r1, #36	; 0x24
 800c604:	2001      	movs	r0, #1
 800c606:	f7f7 fae5 	bl	8003bd4 <pbuf_alloc>
 800c60a:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 800c60c:	69fb      	ldr	r3, [r7, #28]
 800c60e:	2b00      	cmp	r3, #0
 800c610:	d04c      	beq.n	800c6ac <icmp_send_response+0xbc>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 800c612:	69fb      	ldr	r3, [r7, #28]
 800c614:	895b      	ldrh	r3, [r3, #10]
 800c616:	2b23      	cmp	r3, #35	; 0x23
 800c618:	d806      	bhi.n	800c628 <icmp_send_response+0x38>
 800c61a:	4b26      	ldr	r3, [pc, #152]	; (800c6b4 <icmp_send_response+0xc4>)
 800c61c:	f240 1261 	movw	r2, #353	; 0x161
 800c620:	4925      	ldr	r1, [pc, #148]	; (800c6b8 <icmp_send_response+0xc8>)
 800c622:	4826      	ldr	r0, [pc, #152]	; (800c6bc <icmp_send_response+0xcc>)
 800c624:	f001 fa1c 	bl	800da60 <iprintf>
             (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 800c628:	687b      	ldr	r3, [r7, #4]
 800c62a:	685b      	ldr	r3, [r3, #4]
 800c62c:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 800c62e:	69fb      	ldr	r3, [r7, #28]
 800c630:	685b      	ldr	r3, [r3, #4]
 800c632:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 800c634:	697b      	ldr	r3, [r7, #20]
 800c636:	78fa      	ldrb	r2, [r7, #3]
 800c638:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 800c63a:	697b      	ldr	r3, [r7, #20]
 800c63c:	78ba      	ldrb	r2, [r7, #2]
 800c63e:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 800c640:	697b      	ldr	r3, [r7, #20]
 800c642:	2200      	movs	r2, #0
 800c644:	711a      	strb	r2, [r3, #4]
 800c646:	2200      	movs	r2, #0
 800c648:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 800c64a:	697b      	ldr	r3, [r7, #20]
 800c64c:	2200      	movs	r2, #0
 800c64e:	719a      	strb	r2, [r3, #6]
 800c650:	2200      	movs	r2, #0
 800c652:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 800c654:	69fb      	ldr	r3, [r7, #28]
 800c656:	685b      	ldr	r3, [r3, #4]
 800c658:	f103 0008 	add.w	r0, r3, #8
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	685b      	ldr	r3, [r3, #4]
 800c660:	221c      	movs	r2, #28
 800c662:	4619      	mov	r1, r3
 800c664:	f001 f9e6 	bl	800da34 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 800c668:	69bb      	ldr	r3, [r7, #24]
 800c66a:	68db      	ldr	r3, [r3, #12]
 800c66c:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_src, &iphdr_dst);
  }
#else
  netif = ip4_route(&iphdr_src);
 800c66e:	f107 030c 	add.w	r3, r7, #12
 800c672:	4618      	mov	r0, r3
 800c674:	f000 f824 	bl	800c6c0 <ip4_route>
 800c678:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 800c67a:	693b      	ldr	r3, [r7, #16]
 800c67c:	2b00      	cmp	r3, #0
 800c67e:	d011      	beq.n	800c6a4 <icmp_send_response+0xb4>
    /* calculate checksum */
    icmphdr->chksum = 0;
 800c680:	697b      	ldr	r3, [r7, #20]
 800c682:	2200      	movs	r2, #0
 800c684:	709a      	strb	r2, [r3, #2]
 800c686:	2200      	movs	r2, #0
 800c688:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 800c68a:	f107 020c 	add.w	r2, r7, #12
 800c68e:	693b      	ldr	r3, [r7, #16]
 800c690:	9302      	str	r3, [sp, #8]
 800c692:	2301      	movs	r3, #1
 800c694:	9301      	str	r3, [sp, #4]
 800c696:	2300      	movs	r3, #0
 800c698:	9300      	str	r3, [sp, #0]
 800c69a:	23ff      	movs	r3, #255	; 0xff
 800c69c:	2100      	movs	r1, #0
 800c69e:	69f8      	ldr	r0, [r7, #28]
 800c6a0:	f000 f9d6 	bl	800ca50 <ip4_output_if>
  }
  pbuf_free(q);
 800c6a4:	69f8      	ldr	r0, [r7, #28]
 800c6a6:	f7f7 fe07 	bl	80042b8 <pbuf_free>
 800c6aa:	e000      	b.n	800c6ae <icmp_send_response+0xbe>
    return;
 800c6ac:	bf00      	nop
}
 800c6ae:	3720      	adds	r7, #32
 800c6b0:	46bd      	mov	sp, r7
 800c6b2:	bd80      	pop	{r7, pc}
 800c6b4:	08010864 	.word	0x08010864
 800c6b8:	08010930 	.word	0x08010930
 800c6bc:	080108d4 	.word	0x080108d4

0800c6c0 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 800c6c0:	b480      	push	{r7}
 800c6c2:	b085      	sub	sp, #20
 800c6c4:	af00      	add	r7, sp, #0
 800c6c6:	6078      	str	r0, [r7, #4]
    return ip4_default_multicast_netif;
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */

  /* iterate through netifs */
  for (netif = netif_list; netif != NULL; netif = netif->next) {
 800c6c8:	4b30      	ldr	r3, [pc, #192]	; (800c78c <ip4_route+0xcc>)
 800c6ca:	681b      	ldr	r3, [r3, #0]
 800c6cc:	60fb      	str	r3, [r7, #12]
 800c6ce:	e036      	b.n	800c73e <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800c6d0:	68fb      	ldr	r3, [r7, #12]
 800c6d2:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 800c6d6:	f003 0301 	and.w	r3, r3, #1
 800c6da:	b2db      	uxtb	r3, r3
 800c6dc:	2b00      	cmp	r3, #0
 800c6de:	d02b      	beq.n	800c738 <ip4_route+0x78>
 800c6e0:	68fb      	ldr	r3, [r7, #12]
 800c6e2:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 800c6e6:	089b      	lsrs	r3, r3, #2
 800c6e8:	f003 0301 	and.w	r3, r3, #1
 800c6ec:	b2db      	uxtb	r3, r3
 800c6ee:	2b00      	cmp	r3, #0
 800c6f0:	d022      	beq.n	800c738 <ip4_route+0x78>
 800c6f2:	68fb      	ldr	r3, [r7, #12]
 800c6f4:	3304      	adds	r3, #4
 800c6f6:	681b      	ldr	r3, [r3, #0]
 800c6f8:	2b00      	cmp	r3, #0
 800c6fa:	d01d      	beq.n	800c738 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 800c6fc:	687b      	ldr	r3, [r7, #4]
 800c6fe:	681a      	ldr	r2, [r3, #0]
 800c700:	68fb      	ldr	r3, [r7, #12]
 800c702:	3304      	adds	r3, #4
 800c704:	681b      	ldr	r3, [r3, #0]
 800c706:	405a      	eors	r2, r3
 800c708:	68fb      	ldr	r3, [r7, #12]
 800c70a:	3308      	adds	r3, #8
 800c70c:	681b      	ldr	r3, [r3, #0]
 800c70e:	4013      	ands	r3, r2
 800c710:	2b00      	cmp	r3, #0
 800c712:	d101      	bne.n	800c718 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 800c714:	68fb      	ldr	r3, [r7, #12]
 800c716:	e033      	b.n	800c780 <ip4_route+0xc0>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 800c718:	68fb      	ldr	r3, [r7, #12]
 800c71a:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 800c71e:	f003 0302 	and.w	r3, r3, #2
 800c722:	2b00      	cmp	r3, #0
 800c724:	d108      	bne.n	800c738 <ip4_route+0x78>
 800c726:	687b      	ldr	r3, [r7, #4]
 800c728:	681a      	ldr	r2, [r3, #0]
 800c72a:	68fb      	ldr	r3, [r7, #12]
 800c72c:	330c      	adds	r3, #12
 800c72e:	681b      	ldr	r3, [r3, #0]
 800c730:	429a      	cmp	r2, r3
 800c732:	d101      	bne.n	800c738 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 800c734:	68fb      	ldr	r3, [r7, #12]
 800c736:	e023      	b.n	800c780 <ip4_route+0xc0>
  for (netif = netif_list; netif != NULL; netif = netif->next) {
 800c738:	68fb      	ldr	r3, [r7, #12]
 800c73a:	681b      	ldr	r3, [r3, #0]
 800c73c:	60fb      	str	r3, [r7, #12]
 800c73e:	68fb      	ldr	r3, [r7, #12]
 800c740:	2b00      	cmp	r3, #0
 800c742:	d1c5      	bne.n	800c6d0 <ip4_route+0x10>
  if (netif != NULL) {
    return netif;
  }
#endif

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800c744:	4b12      	ldr	r3, [pc, #72]	; (800c790 <ip4_route+0xd0>)
 800c746:	681b      	ldr	r3, [r3, #0]
 800c748:	2b00      	cmp	r3, #0
 800c74a:	d015      	beq.n	800c778 <ip4_route+0xb8>
 800c74c:	4b10      	ldr	r3, [pc, #64]	; (800c790 <ip4_route+0xd0>)
 800c74e:	681b      	ldr	r3, [r3, #0]
 800c750:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 800c754:	f003 0301 	and.w	r3, r3, #1
 800c758:	2b00      	cmp	r3, #0
 800c75a:	d00d      	beq.n	800c778 <ip4_route+0xb8>
 800c75c:	4b0c      	ldr	r3, [pc, #48]	; (800c790 <ip4_route+0xd0>)
 800c75e:	681b      	ldr	r3, [r3, #0]
 800c760:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 800c764:	f003 0304 	and.w	r3, r3, #4
 800c768:	2b00      	cmp	r3, #0
 800c76a:	d005      	beq.n	800c778 <ip4_route+0xb8>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default))) {
 800c76c:	4b08      	ldr	r3, [pc, #32]	; (800c790 <ip4_route+0xd0>)
 800c76e:	681b      	ldr	r3, [r3, #0]
 800c770:	3304      	adds	r3, #4
 800c772:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800c774:	2b00      	cmp	r3, #0
 800c776:	d101      	bne.n	800c77c <ip4_route+0xbc>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
      ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 800c778:	2300      	movs	r3, #0
 800c77a:	e001      	b.n	800c780 <ip4_route+0xc0>
  }

  return netif_default;
 800c77c:	4b04      	ldr	r3, [pc, #16]	; (800c790 <ip4_route+0xd0>)
 800c77e:	681b      	ldr	r3, [r3, #0]
}
 800c780:	4618      	mov	r0, r3
 800c782:	3714      	adds	r7, #20
 800c784:	46bd      	mov	sp, r7
 800c786:	bc80      	pop	{r7}
 800c788:	4770      	bx	lr
 800c78a:	bf00      	nop
 800c78c:	20006890 	.word	0x20006890
 800c790:	20006894 	.word	0x20006894

0800c794 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 800c794:	b580      	push	{r7, lr}
 800c796:	b088      	sub	sp, #32
 800c798:	af00      	add	r7, sp, #0
 800c79a:	6078      	str	r0, [r7, #4]
 800c79c:	6039      	str	r1, [r7, #0]
  struct ip_hdr *iphdr;
  struct netif *netif;
  u16_t iphdr_hlen;
  u16_t iphdr_len;
#if IP_ACCEPT_LINK_LAYER_ADDRESSING || LWIP_IGMP
  int check_ip_src = 1;
 800c79e:	2301      	movs	r3, #1
 800c7a0:	617b      	str	r3, [r7, #20]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 800c7a2:	687b      	ldr	r3, [r7, #4]
 800c7a4:	685b      	ldr	r3, [r3, #4]
 800c7a6:	61fb      	str	r3, [r7, #28]
  if (IPH_V(iphdr) != 4) {
 800c7a8:	69fb      	ldr	r3, [r7, #28]
 800c7aa:	781b      	ldrb	r3, [r3, #0]
 800c7ac:	091b      	lsrs	r3, r3, #4
 800c7ae:	b2db      	uxtb	r3, r3
 800c7b0:	2b04      	cmp	r3, #4
 800c7b2:	d004      	beq.n	800c7be <ip4_input+0x2a>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 800c7b4:	6878      	ldr	r0, [r7, #4]
 800c7b6:	f7f7 fd7f 	bl	80042b8 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 800c7ba:	2300      	movs	r3, #0
 800c7bc:	e140      	b.n	800ca40 <ip4_input+0x2ac>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in number of 32-bit words */
  iphdr_hlen = IPH_HL(iphdr);
 800c7be:	69fb      	ldr	r3, [r7, #28]
 800c7c0:	781b      	ldrb	r3, [r3, #0]
 800c7c2:	b29b      	uxth	r3, r3
 800c7c4:	f003 030f 	and.w	r3, r3, #15
 800c7c8:	81fb      	strh	r3, [r7, #14]
  /* calculate IP header length in bytes */
  iphdr_hlen *= 4;
 800c7ca:	89fb      	ldrh	r3, [r7, #14]
 800c7cc:	009b      	lsls	r3, r3, #2
 800c7ce:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 800c7d0:	69fb      	ldr	r3, [r7, #28]
 800c7d2:	885b      	ldrh	r3, [r3, #2]
 800c7d4:	b29b      	uxth	r3, r3
 800c7d6:	4618      	mov	r0, r3
 800c7d8:	f7f6 fc3b 	bl	8003052 <lwip_htons>
 800c7dc:	4603      	mov	r3, r0
 800c7de:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 800c7e0:	687b      	ldr	r3, [r7, #4]
 800c7e2:	891b      	ldrh	r3, [r3, #8]
 800c7e4:	89ba      	ldrh	r2, [r7, #12]
 800c7e6:	429a      	cmp	r2, r3
 800c7e8:	d204      	bcs.n	800c7f4 <ip4_input+0x60>
    pbuf_realloc(p, iphdr_len);
 800c7ea:	89bb      	ldrh	r3, [r7, #12]
 800c7ec:	4619      	mov	r1, r3
 800c7ee:	6878      	ldr	r0, [r7, #4]
 800c7f0:	f7f7 fbee 	bl	8003fd0 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	895b      	ldrh	r3, [r3, #10]
 800c7f8:	89fa      	ldrh	r2, [r7, #14]
 800c7fa:	429a      	cmp	r2, r3
 800c7fc:	d807      	bhi.n	800c80e <ip4_input+0x7a>
 800c7fe:	687b      	ldr	r3, [r7, #4]
 800c800:	891b      	ldrh	r3, [r3, #8]
 800c802:	89ba      	ldrh	r2, [r7, #12]
 800c804:	429a      	cmp	r2, r3
 800c806:	d802      	bhi.n	800c80e <ip4_input+0x7a>
 800c808:	89fb      	ldrh	r3, [r7, #14]
 800c80a:	2b13      	cmp	r3, #19
 800c80c:	d804      	bhi.n	800c818 <ip4_input+0x84>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
        ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
        iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 800c80e:	6878      	ldr	r0, [r7, #4]
 800c810:	f7f7 fd52 	bl	80042b8 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 800c814:	2300      	movs	r3, #0
 800c816:	e113      	b.n	800ca40 <ip4_input+0x2ac>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 800c818:	69fb      	ldr	r3, [r7, #28]
 800c81a:	691b      	ldr	r3, [r3, #16]
 800c81c:	4a8a      	ldr	r2, [pc, #552]	; (800ca48 <ip4_input+0x2b4>)
 800c81e:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 800c820:	69fb      	ldr	r3, [r7, #28]
 800c822:	68db      	ldr	r3, [r3, #12]
 800c824:	4a88      	ldr	r2, [pc, #544]	; (800ca48 <ip4_input+0x2b4>)
 800c826:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800c828:	4b87      	ldr	r3, [pc, #540]	; (800ca48 <ip4_input+0x2b4>)
 800c82a:	695b      	ldr	r3, [r3, #20]
 800c82c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c830:	2be0      	cmp	r3, #224	; 0xe0
 800c832:	d112      	bne.n	800c85a <ip4_input+0xc6>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 800c834:	683b      	ldr	r3, [r7, #0]
 800c836:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 800c83a:	f003 0301 	and.w	r3, r3, #1
 800c83e:	b2db      	uxtb	r3, r3
 800c840:	2b00      	cmp	r3, #0
 800c842:	d007      	beq.n	800c854 <ip4_input+0xc0>
 800c844:	683b      	ldr	r3, [r7, #0]
 800c846:	3304      	adds	r3, #4
 800c848:	681b      	ldr	r3, [r3, #0]
 800c84a:	2b00      	cmp	r3, #0
 800c84c:	d002      	beq.n	800c854 <ip4_input+0xc0>
      netif = inp;
 800c84e:	683b      	ldr	r3, [r7, #0]
 800c850:	61bb      	str	r3, [r7, #24]
 800c852:	e041      	b.n	800c8d8 <ip4_input+0x144>
    } else {
      netif = NULL;
 800c854:	2300      	movs	r3, #0
 800c856:	61bb      	str	r3, [r7, #24]
 800c858:	e03e      	b.n	800c8d8 <ip4_input+0x144>
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs.
       'first' is used as a boolean to mark whether we started walking the list */
    int first = 1;
 800c85a:	2301      	movs	r3, #1
 800c85c:	613b      	str	r3, [r7, #16]
    netif = inp;
 800c85e:	683b      	ldr	r3, [r7, #0]
 800c860:	61bb      	str	r3, [r7, #24]
          ip4_addr_get_u32(&iphdr->dest) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
          ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
          ip4_addr_get_u32(&iphdr->dest) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

      /* interface is up and configured? */
      if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 800c862:	69bb      	ldr	r3, [r7, #24]
 800c864:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 800c868:	f003 0301 	and.w	r3, r3, #1
 800c86c:	b2db      	uxtb	r3, r3
 800c86e:	2b00      	cmp	r3, #0
 800c870:	d014      	beq.n	800c89c <ip4_input+0x108>
 800c872:	69bb      	ldr	r3, [r7, #24]
 800c874:	3304      	adds	r3, #4
 800c876:	681b      	ldr	r3, [r3, #0]
 800c878:	2b00      	cmp	r3, #0
 800c87a:	d00f      	beq.n	800c89c <ip4_input+0x108>
        /* unicast to this interface address? */
        if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800c87c:	4b72      	ldr	r3, [pc, #456]	; (800ca48 <ip4_input+0x2b4>)
 800c87e:	695a      	ldr	r2, [r3, #20]
 800c880:	69bb      	ldr	r3, [r7, #24]
 800c882:	3304      	adds	r3, #4
 800c884:	681b      	ldr	r3, [r3, #0]
 800c886:	429a      	cmp	r2, r3
 800c888:	d026      	beq.n	800c8d8 <ip4_input+0x144>
            /* or broadcast on this interface network address? */
            ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 800c88a:	4b6f      	ldr	r3, [pc, #444]	; (800ca48 <ip4_input+0x2b4>)
 800c88c:	695b      	ldr	r3, [r3, #20]
 800c88e:	69b9      	ldr	r1, [r7, #24]
 800c890:	4618      	mov	r0, r3
 800c892:	f000 f9af 	bl	800cbf4 <ip4_addr_isbroadcast_u32>
 800c896:	4603      	mov	r3, r0
        if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800c898:	2b00      	cmp	r3, #0
 800c89a:	d11d      	bne.n	800c8d8 <ip4_input+0x144>
          /* break out of for loop */
          break;
        }
#endif /* LWIP_AUTOIP */
      }
      if (first) {
 800c89c:	693b      	ldr	r3, [r7, #16]
 800c89e:	2b00      	cmp	r3, #0
 800c8a0:	d00d      	beq.n	800c8be <ip4_input+0x12a>
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
        /* Packets sent to the loopback address must not be accepted on an
         * interface that does not have the loopback address assigned to it,
         * unless a non-loopback interface is used for loopback traffic. */
        if (ip4_addr_isloopback(ip4_current_dest_addr())) {
 800c8a2:	4b69      	ldr	r3, [pc, #420]	; (800ca48 <ip4_input+0x2b4>)
 800c8a4:	695b      	ldr	r3, [r3, #20]
 800c8a6:	b2db      	uxtb	r3, r3
 800c8a8:	2b7f      	cmp	r3, #127	; 0x7f
 800c8aa:	d102      	bne.n	800c8b2 <ip4_input+0x11e>
          netif = NULL;
 800c8ac:	2300      	movs	r3, #0
 800c8ae:	61bb      	str	r3, [r7, #24]
          break;
 800c8b0:	e012      	b.n	800c8d8 <ip4_input+0x144>
        }
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
        first = 0;
 800c8b2:	2300      	movs	r3, #0
 800c8b4:	613b      	str	r3, [r7, #16]
        netif = netif_list;
 800c8b6:	4b65      	ldr	r3, [pc, #404]	; (800ca4c <ip4_input+0x2b8>)
 800c8b8:	681b      	ldr	r3, [r3, #0]
 800c8ba:	61bb      	str	r3, [r7, #24]
 800c8bc:	e002      	b.n	800c8c4 <ip4_input+0x130>
      } else {
        netif = netif->next;
 800c8be:	69bb      	ldr	r3, [r7, #24]
 800c8c0:	681b      	ldr	r3, [r3, #0]
 800c8c2:	61bb      	str	r3, [r7, #24]
      }
      if (netif == inp) {
 800c8c4:	69ba      	ldr	r2, [r7, #24]
 800c8c6:	683b      	ldr	r3, [r7, #0]
 800c8c8:	429a      	cmp	r2, r3
 800c8ca:	d102      	bne.n	800c8d2 <ip4_input+0x13e>
        netif = netif->next;
 800c8cc:	69bb      	ldr	r3, [r7, #24]
 800c8ce:	681b      	ldr	r3, [r3, #0]
 800c8d0:	61bb      	str	r3, [r7, #24]
      }
    } while (netif != NULL);
 800c8d2:	69bb      	ldr	r3, [r7, #24]
 800c8d4:	2b00      	cmp	r3, #0
 800c8d6:	d1c4      	bne.n	800c862 <ip4_input+0xce>
   * If you want to accept private broadcast communication while a netif is down,
   * define LWIP_IP_ACCEPT_UDP_PORT(dst_port), e.g.:
   *
   * #define LWIP_IP_ACCEPT_UDP_PORT(dst_port) ((dst_port) == PP_NTOHS(12345))
   */
  if (netif == NULL) {
 800c8d8:	69bb      	ldr	r3, [r7, #24]
 800c8da:	2b00      	cmp	r3, #0
 800c8dc:	d111      	bne.n	800c902 <ip4_input+0x16e>
    /* remote port is DHCP server? */
    if (IPH_PROTO(iphdr) == IP_PROTO_UDP) {
 800c8de:	69fb      	ldr	r3, [r7, #28]
 800c8e0:	7a5b      	ldrb	r3, [r3, #9]
 800c8e2:	2b11      	cmp	r3, #17
 800c8e4:	d10d      	bne.n	800c902 <ip4_input+0x16e>
      struct udp_hdr *udphdr = (struct udp_hdr *)((u8_t *)iphdr + iphdr_hlen);
 800c8e6:	89fb      	ldrh	r3, [r7, #14]
 800c8e8:	69fa      	ldr	r2, [r7, #28]
 800c8ea:	4413      	add	r3, r2
 800c8ec:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: UDP packet to DHCP client port %"U16_F"\n",
        lwip_ntohs(udphdr->dest)));
      if (IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT(udphdr->dest)) {
 800c8ee:	68bb      	ldr	r3, [r7, #8]
 800c8f0:	885b      	ldrh	r3, [r3, #2]
 800c8f2:	b29b      	uxth	r3, r3
 800c8f4:	f5b3 4f88 	cmp.w	r3, #17408	; 0x4400
 800c8f8:	d103      	bne.n	800c902 <ip4_input+0x16e>
        LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: DHCP packet accepted.\n"));
        netif = inp;
 800c8fa:	683b      	ldr	r3, [r7, #0]
 800c8fc:	61bb      	str	r3, [r7, #24]
        check_ip_src = 0;
 800c8fe:	2300      	movs	r3, #0
 800c900:	617b      	str	r3, [r7, #20]
  }
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */

  /* broadcast or multicast packet source address? Compliant with RFC 1122: 3.2.1.3 */
#if LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING
  if (check_ip_src
 800c902:	697b      	ldr	r3, [r7, #20]
 800c904:	2b00      	cmp	r3, #0
 800c906:	d017      	beq.n	800c938 <ip4_input+0x1a4>
#if IP_ACCEPT_LINK_LAYER_ADDRESSING
  /* DHCP servers need 0.0.0.0 to be allowed as source address (RFC 1.1.2.2: 3.2.1.3/a) */
      && !ip4_addr_isany_val(*ip4_current_src_addr())
 800c908:	4b4f      	ldr	r3, [pc, #316]	; (800ca48 <ip4_input+0x2b4>)
 800c90a:	691b      	ldr	r3, [r3, #16]
 800c90c:	2b00      	cmp	r3, #0
 800c90e:	d013      	beq.n	800c938 <ip4_input+0x1a4>
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800c910:	4b4d      	ldr	r3, [pc, #308]	; (800ca48 <ip4_input+0x2b4>)
 800c912:	691b      	ldr	r3, [r3, #16]
 800c914:	6839      	ldr	r1, [r7, #0]
 800c916:	4618      	mov	r0, r3
 800c918:	f000 f96c 	bl	800cbf4 <ip4_addr_isbroadcast_u32>
 800c91c:	4603      	mov	r3, r0
 800c91e:	2b00      	cmp	r3, #0
 800c920:	d105      	bne.n	800c92e <ip4_input+0x19a>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 800c922:	4b49      	ldr	r3, [pc, #292]	; (800ca48 <ip4_input+0x2b4>)
 800c924:	691b      	ldr	r3, [r3, #16]
 800c926:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800c92a:	2be0      	cmp	r3, #224	; 0xe0
 800c92c:	d104      	bne.n	800c938 <ip4_input+0x1a4>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 800c92e:	6878      	ldr	r0, [r7, #4]
 800c930:	f7f7 fcc2 	bl	80042b8 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 800c934:	2300      	movs	r3, #0
 800c936:	e083      	b.n	800ca40 <ip4_input+0x2ac>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 800c938:	69bb      	ldr	r3, [r7, #24]
 800c93a:	2b00      	cmp	r3, #0
 800c93c:	d104      	bne.n	800c948 <ip4_input+0x1b4>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 800c93e:	6878      	ldr	r0, [r7, #4]
 800c940:	f7f7 fcba 	bl	80042b8 <pbuf_free>
    return ERR_OK;
 800c944:	2300      	movs	r3, #0
 800c946:	e07b      	b.n	800ca40 <ip4_input+0x2ac>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 800c948:	69fb      	ldr	r3, [r7, #28]
 800c94a:	88db      	ldrh	r3, [r3, #6]
 800c94c:	b29b      	uxth	r3, r3
 800c94e:	461a      	mov	r2, r3
 800c950:	f64f 733f 	movw	r3, #65343	; 0xff3f
 800c954:	4013      	ands	r3, r2
 800c956:	2b00      	cmp	r3, #0
 800c958:	d00b      	beq.n	800c972 <ip4_input+0x1de>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
      lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK)*8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 800c95a:	6878      	ldr	r0, [r7, #4]
 800c95c:	f000 fc8e 	bl	800d27c <ip4_reass>
 800c960:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 800c962:	687b      	ldr	r3, [r7, #4]
 800c964:	2b00      	cmp	r3, #0
 800c966:	d101      	bne.n	800c96c <ip4_input+0x1d8>
      return ERR_OK;
 800c968:	2300      	movs	r3, #0
 800c96a:	e069      	b.n	800ca40 <ip4_input+0x2ac>
    }
    iphdr = (struct ip_hdr *)p->payload;
 800c96c:	687b      	ldr	r3, [r7, #4]
 800c96e:	685b      	ldr	r3, [r3, #4]
 800c970:	61fb      	str	r3, [r7, #28]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 800c972:	4a35      	ldr	r2, [pc, #212]	; (800ca48 <ip4_input+0x2b4>)
 800c974:	69bb      	ldr	r3, [r7, #24]
 800c976:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 800c978:	4a33      	ldr	r2, [pc, #204]	; (800ca48 <ip4_input+0x2b4>)
 800c97a:	683b      	ldr	r3, [r7, #0]
 800c97c:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 800c97e:	4a32      	ldr	r2, [pc, #200]	; (800ca48 <ip4_input+0x2b4>)
 800c980:	69fb      	ldr	r3, [r7, #28]
 800c982:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL(iphdr) * 4;
 800c984:	69fb      	ldr	r3, [r7, #28]
 800c986:	781b      	ldrb	r3, [r3, #0]
 800c988:	b29b      	uxth	r3, r3
 800c98a:	f003 030f 	and.w	r3, r3, #15
 800c98e:	b29b      	uxth	r3, r3
 800c990:	009b      	lsls	r3, r3, #2
 800c992:	b29a      	uxth	r2, r3
 800c994:	4b2c      	ldr	r3, [pc, #176]	; (800ca48 <ip4_input+0x2b4>)
 800c996:	819a      	strh	r2, [r3, #12]
#if LWIP_RAW
  /* raw input did not eat the packet? */
  if (raw_input(p, inp) == 0)
#endif /* LWIP_RAW */
  {
    pbuf_header(p, -(s16_t)iphdr_hlen); /* Move to payload, no check necessary. */
 800c998:	89fb      	ldrh	r3, [r7, #14]
 800c99a:	425b      	negs	r3, r3
 800c99c:	b29b      	uxth	r3, r3
 800c99e:	b21b      	sxth	r3, r3
 800c9a0:	4619      	mov	r1, r3
 800c9a2:	6878      	ldr	r0, [r7, #4]
 800c9a4:	f7f7 fc64 	bl	8004270 <pbuf_header>

    switch (IPH_PROTO(iphdr)) {
 800c9a8:	69fb      	ldr	r3, [r7, #28]
 800c9aa:	7a5b      	ldrb	r3, [r3, #9]
 800c9ac:	2b11      	cmp	r3, #17
 800c9ae:	d006      	beq.n	800c9be <ip4_input+0x22a>
 800c9b0:	2b11      	cmp	r3, #17
 800c9b2:	dc13      	bgt.n	800c9dc <ip4_input+0x248>
 800c9b4:	2b01      	cmp	r3, #1
 800c9b6:	d00c      	beq.n	800c9d2 <ip4_input+0x23e>
 800c9b8:	2b06      	cmp	r3, #6
 800c9ba:	d005      	beq.n	800c9c8 <ip4_input+0x234>
 800c9bc:	e00e      	b.n	800c9dc <ip4_input+0x248>
    case IP_PROTO_UDP:
#if LWIP_UDPLITE
    case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
      MIB2_STATS_INC(mib2.ipindelivers);
      udp_input(p, inp);
 800c9be:	6839      	ldr	r1, [r7, #0]
 800c9c0:	6878      	ldr	r0, [r7, #4]
 800c9c2:	f7fc fc0f 	bl	80091e4 <udp_input>
      break;
 800c9c6:	e028      	b.n	800ca1a <ip4_input+0x286>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case IP_PROTO_TCP:
      MIB2_STATS_INC(mib2.ipindelivers);
      tcp_input(p, inp);
 800c9c8:	6839      	ldr	r1, [r7, #0]
 800c9ca:	6878      	ldr	r0, [r7, #4]
 800c9cc:	f7f9 f8c0 	bl	8005b50 <tcp_input>
      break;
 800c9d0:	e023      	b.n	800ca1a <ip4_input+0x286>
#endif /* LWIP_TCP */
#if LWIP_ICMP
    case IP_PROTO_ICMP:
      MIB2_STATS_INC(mib2.ipindelivers);
      icmp_input(p, inp);
 800c9d2:	6839      	ldr	r1, [r7, #0]
 800c9d4:	6878      	ldr	r0, [r7, #4]
 800c9d6:	f7ff fce5 	bl	800c3a4 <icmp_input>
      break;
 800c9da:	e01e      	b.n	800ca1a <ip4_input+0x286>
      break;
#endif /* LWIP_IGMP */
    default:
#if LWIP_ICMP
      /* send ICMP destination protocol unreachable unless is was a broadcast */
      if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800c9dc:	4b1a      	ldr	r3, [pc, #104]	; (800ca48 <ip4_input+0x2b4>)
 800c9de:	695b      	ldr	r3, [r3, #20]
 800c9e0:	69b9      	ldr	r1, [r7, #24]
 800c9e2:	4618      	mov	r0, r3
 800c9e4:	f000 f906 	bl	800cbf4 <ip4_addr_isbroadcast_u32>
 800c9e8:	4603      	mov	r3, r0
 800c9ea:	2b00      	cmp	r3, #0
 800c9ec:	d112      	bne.n	800ca14 <ip4_input+0x280>
          !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800c9ee:	4b16      	ldr	r3, [pc, #88]	; (800ca48 <ip4_input+0x2b4>)
 800c9f0:	695b      	ldr	r3, [r3, #20]
 800c9f2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800c9f6:	2be0      	cmp	r3, #224	; 0xe0
 800c9f8:	d00c      	beq.n	800ca14 <ip4_input+0x280>
        pbuf_header_force(p, iphdr_hlen); /* Move to ip header, no check necessary. */
 800c9fa:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800c9fe:	4619      	mov	r1, r3
 800ca00:	6878      	ldr	r0, [r7, #4]
 800ca02:	f7f7 fc47 	bl	8004294 <pbuf_header_force>
        p->payload = iphdr;
 800ca06:	687b      	ldr	r3, [r7, #4]
 800ca08:	69fa      	ldr	r2, [r7, #28]
 800ca0a:	605a      	str	r2, [r3, #4]
        icmp_dest_unreach(p, ICMP_DUR_PROTO);
 800ca0c:	2102      	movs	r1, #2
 800ca0e:	6878      	ldr	r0, [r7, #4]
 800ca10:	f7ff fdce 	bl	800c5b0 <icmp_dest_unreach>
      }
#endif /* LWIP_ICMP */
      pbuf_free(p);
 800ca14:	6878      	ldr	r0, [r7, #4]
 800ca16:	f7f7 fc4f 	bl	80042b8 <pbuf_free>
      MIB2_STATS_INC(mib2.ipinunknownprotos);
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 800ca1a:	4b0b      	ldr	r3, [pc, #44]	; (800ca48 <ip4_input+0x2b4>)
 800ca1c:	2200      	movs	r2, #0
 800ca1e:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 800ca20:	4b09      	ldr	r3, [pc, #36]	; (800ca48 <ip4_input+0x2b4>)
 800ca22:	2200      	movs	r2, #0
 800ca24:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 800ca26:	4b08      	ldr	r3, [pc, #32]	; (800ca48 <ip4_input+0x2b4>)
 800ca28:	2200      	movs	r2, #0
 800ca2a:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 800ca2c:	4b06      	ldr	r3, [pc, #24]	; (800ca48 <ip4_input+0x2b4>)
 800ca2e:	2200      	movs	r2, #0
 800ca30:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 800ca32:	4b05      	ldr	r3, [pc, #20]	; (800ca48 <ip4_input+0x2b4>)
 800ca34:	2200      	movs	r2, #0
 800ca36:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 800ca38:	4b03      	ldr	r3, [pc, #12]	; (800ca48 <ip4_input+0x2b4>)
 800ca3a:	2200      	movs	r2, #0
 800ca3c:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 800ca3e:	2300      	movs	r3, #0
}
 800ca40:	4618      	mov	r0, r3
 800ca42:	3720      	adds	r7, #32
 800ca44:	46bd      	mov	sp, r7
 800ca46:	bd80      	pop	{r7, pc}
 800ca48:	20003350 	.word	0x20003350
 800ca4c:	20006890 	.word	0x20006890

0800ca50 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
             u8_t ttl, u8_t tos,
             u8_t proto, struct netif *netif)
{
 800ca50:	b580      	push	{r7, lr}
 800ca52:	b08a      	sub	sp, #40	; 0x28
 800ca54:	af04      	add	r7, sp, #16
 800ca56:	60f8      	str	r0, [r7, #12]
 800ca58:	60b9      	str	r1, [r7, #8]
 800ca5a:	607a      	str	r2, [r7, #4]
 800ca5c:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
       u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
       u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 800ca5e:	68bb      	ldr	r3, [r7, #8]
 800ca60:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 800ca62:	687b      	ldr	r3, [r7, #4]
 800ca64:	2b00      	cmp	r3, #0
 800ca66:	d009      	beq.n	800ca7c <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 800ca68:	68bb      	ldr	r3, [r7, #8]
 800ca6a:	2b00      	cmp	r3, #0
 800ca6c:	d003      	beq.n	800ca76 <ip4_output_if+0x26>
 800ca6e:	68bb      	ldr	r3, [r7, #8]
 800ca70:	681b      	ldr	r3, [r3, #0]
 800ca72:	2b00      	cmp	r3, #0
 800ca74:	d102      	bne.n	800ca7c <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 800ca76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca78:	3304      	adds	r3, #4
 800ca7a:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
    ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 800ca7c:	78fa      	ldrb	r2, [r7, #3]
 800ca7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca80:	9302      	str	r3, [sp, #8]
 800ca82:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800ca86:	9301      	str	r3, [sp, #4]
 800ca88:	f897 3020 	ldrb.w	r3, [r7, #32]
 800ca8c:	9300      	str	r3, [sp, #0]
 800ca8e:	4613      	mov	r3, r2
 800ca90:	687a      	ldr	r2, [r7, #4]
 800ca92:	6979      	ldr	r1, [r7, #20]
 800ca94:	68f8      	ldr	r0, [r7, #12]
 800ca96:	f000 f805 	bl	800caa4 <ip4_output_if_src>
 800ca9a:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 800ca9c:	4618      	mov	r0, r3
 800ca9e:	3718      	adds	r7, #24
 800caa0:	46bd      	mov	sp, r7
 800caa2:	bd80      	pop	{r7, pc}

0800caa4 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
             u8_t ttl, u8_t tos,
             u8_t proto, struct netif *netif)
{
 800caa4:	b580      	push	{r7, lr}
 800caa6:	b088      	sub	sp, #32
 800caa8:	af00      	add	r7, sp, #0
 800caaa:	60f8      	str	r0, [r7, #12]
 800caac:	60b9      	str	r1, [r7, #8]
 800caae:	607a      	str	r2, [r7, #4]
 800cab0:	70fb      	strb	r3, [r7, #3]
  ip4_addr_t dest_addr;
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 800cab2:	68fb      	ldr	r3, [r7, #12]
 800cab4:	89db      	ldrh	r3, [r3, #14]
 800cab6:	2b01      	cmp	r3, #1
 800cab8:	d006      	beq.n	800cac8 <ip4_output_if_src+0x24>
 800caba:	4b48      	ldr	r3, [pc, #288]	; (800cbdc <ip4_output_if_src+0x138>)
 800cabc:	f240 3233 	movw	r2, #819	; 0x333
 800cac0:	4947      	ldr	r1, [pc, #284]	; (800cbe0 <ip4_output_if_src+0x13c>)
 800cac2:	4848      	ldr	r0, [pc, #288]	; (800cbe4 <ip4_output_if_src+0x140>)
 800cac4:	f000 ffcc 	bl	800da60 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 800cac8:	687b      	ldr	r3, [r7, #4]
 800caca:	2b00      	cmp	r3, #0
 800cacc:	d060      	beq.n	800cb90 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 800cace:	2314      	movs	r3, #20
 800cad0:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_header(p, IP_HLEN)) {
 800cad2:	2114      	movs	r1, #20
 800cad4:	68f8      	ldr	r0, [r7, #12]
 800cad6:	f7f7 fbcb 	bl	8004270 <pbuf_header>
 800cada:	4603      	mov	r3, r0
 800cadc:	2b00      	cmp	r3, #0
 800cade:	d002      	beq.n	800cae6 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800cae0:	f06f 0301 	mvn.w	r3, #1
 800cae4:	e075      	b.n	800cbd2 <ip4_output_if_src+0x12e>
    }

    iphdr = (struct ip_hdr *)p->payload;
 800cae6:	68fb      	ldr	r3, [r7, #12]
 800cae8:	685b      	ldr	r3, [r3, #4]
 800caea:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 800caec:	68fb      	ldr	r3, [r7, #12]
 800caee:	895b      	ldrh	r3, [r3, #10]
 800caf0:	2b13      	cmp	r3, #19
 800caf2:	d806      	bhi.n	800cb02 <ip4_output_if_src+0x5e>
 800caf4:	4b39      	ldr	r3, [pc, #228]	; (800cbdc <ip4_output_if_src+0x138>)
 800caf6:	f44f 7258 	mov.w	r2, #864	; 0x360
 800cafa:	493b      	ldr	r1, [pc, #236]	; (800cbe8 <ip4_output_if_src+0x144>)
 800cafc:	4839      	ldr	r0, [pc, #228]	; (800cbe4 <ip4_output_if_src+0x140>)
 800cafe:	f000 ffaf 	bl	800da60 <iprintf>
               (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 800cb02:	69fb      	ldr	r3, [r7, #28]
 800cb04:	78fa      	ldrb	r2, [r7, #3]
 800cb06:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 800cb08:	69fb      	ldr	r3, [r7, #28]
 800cb0a:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 800cb0e:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 800cb10:	687b      	ldr	r3, [r7, #4]
 800cb12:	681a      	ldr	r2, [r3, #0]
 800cb14:	69fb      	ldr	r3, [r7, #28]
 800cb16:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 800cb18:	8b7b      	ldrh	r3, [r7, #26]
 800cb1a:	089b      	lsrs	r3, r3, #2
 800cb1c:	b29b      	uxth	r3, r3
 800cb1e:	b2db      	uxtb	r3, r3
 800cb20:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cb24:	b2da      	uxtb	r2, r3
 800cb26:	69fb      	ldr	r3, [r7, #28]
 800cb28:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 800cb2a:	69fb      	ldr	r3, [r7, #28]
 800cb2c:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800cb30:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 800cb32:	68fb      	ldr	r3, [r7, #12]
 800cb34:	891b      	ldrh	r3, [r3, #8]
 800cb36:	4618      	mov	r0, r3
 800cb38:	f7f6 fa8b 	bl	8003052 <lwip_htons>
 800cb3c:	4603      	mov	r3, r0
 800cb3e:	461a      	mov	r2, r3
 800cb40:	69fb      	ldr	r3, [r7, #28]
 800cb42:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 800cb44:	69fb      	ldr	r3, [r7, #28]
 800cb46:	2200      	movs	r2, #0
 800cb48:	719a      	strb	r2, [r3, #6]
 800cb4a:	2200      	movs	r2, #0
 800cb4c:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 800cb4e:	4b27      	ldr	r3, [pc, #156]	; (800cbec <ip4_output_if_src+0x148>)
 800cb50:	881b      	ldrh	r3, [r3, #0]
 800cb52:	4618      	mov	r0, r3
 800cb54:	f7f6 fa7d 	bl	8003052 <lwip_htons>
 800cb58:	4603      	mov	r3, r0
 800cb5a:	461a      	mov	r2, r3
 800cb5c:	69fb      	ldr	r3, [r7, #28]
 800cb5e:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 800cb60:	4b22      	ldr	r3, [pc, #136]	; (800cbec <ip4_output_if_src+0x148>)
 800cb62:	881b      	ldrh	r3, [r3, #0]
 800cb64:	3301      	adds	r3, #1
 800cb66:	b29a      	uxth	r2, r3
 800cb68:	4b20      	ldr	r3, [pc, #128]	; (800cbec <ip4_output_if_src+0x148>)
 800cb6a:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 800cb6c:	68bb      	ldr	r3, [r7, #8]
 800cb6e:	2b00      	cmp	r3, #0
 800cb70:	d104      	bne.n	800cb7c <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 800cb72:	4b1f      	ldr	r3, [pc, #124]	; (800cbf0 <ip4_output_if_src+0x14c>)
 800cb74:	681a      	ldr	r2, [r3, #0]
 800cb76:	69fb      	ldr	r3, [r7, #28]
 800cb78:	60da      	str	r2, [r3, #12]
 800cb7a:	e003      	b.n	800cb84 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 800cb7c:	68bb      	ldr	r3, [r7, #8]
 800cb7e:	681a      	ldr	r2, [r3, #0]
 800cb80:	69fb      	ldr	r3, [r7, #28]
 800cb82:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 800cb84:	69fb      	ldr	r3, [r7, #28]
 800cb86:	2200      	movs	r2, #0
 800cb88:	729a      	strb	r2, [r3, #10]
 800cb8a:	2200      	movs	r2, #0
 800cb8c:	72da      	strb	r2, [r3, #11]
 800cb8e:	e008      	b.n	800cba2 <ip4_output_if_src+0xfe>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    iphdr = (struct ip_hdr *)p->payload;
 800cb90:	68fb      	ldr	r3, [r7, #12]
 800cb92:	685b      	ldr	r3, [r3, #4]
 800cb94:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 800cb96:	69fb      	ldr	r3, [r7, #28]
 800cb98:	691b      	ldr	r3, [r3, #16]
 800cb9a:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 800cb9c:	f107 0314 	add.w	r3, r7, #20
 800cba0:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 800cba2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cba4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cba6:	2b00      	cmp	r3, #0
 800cba8:	d00c      	beq.n	800cbc4 <ip4_output_if_src+0x120>
 800cbaa:	68fb      	ldr	r3, [r7, #12]
 800cbac:	891a      	ldrh	r2, [r3, #8]
 800cbae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbb0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cbb2:	429a      	cmp	r2, r3
 800cbb4:	d906      	bls.n	800cbc4 <ip4_output_if_src+0x120>
    return ip4_frag(p, netif, dest);
 800cbb6:	687a      	ldr	r2, [r7, #4]
 800cbb8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800cbba:	68f8      	ldr	r0, [r7, #12]
 800cbbc:	f000 fd0a 	bl	800d5d4 <ip4_frag>
 800cbc0:	4603      	mov	r3, r0
 800cbc2:	e006      	b.n	800cbd2 <ip4_output_if_src+0x12e>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 800cbc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbc6:	695b      	ldr	r3, [r3, #20]
 800cbc8:	687a      	ldr	r2, [r7, #4]
 800cbca:	68f9      	ldr	r1, [r7, #12]
 800cbcc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cbce:	4798      	blx	r3
 800cbd0:	4603      	mov	r3, r0
}
 800cbd2:	4618      	mov	r0, r3
 800cbd4:	3720      	adds	r7, #32
 800cbd6:	46bd      	mov	sp, r7
 800cbd8:	bd80      	pop	{r7, pc}
 800cbda:	bf00      	nop
 800cbdc:	0801095c 	.word	0x0801095c
 800cbe0:	08010990 	.word	0x08010990
 800cbe4:	0801099c 	.word	0x0801099c
 800cbe8:	080109c4 	.word	0x080109c4
 800cbec:	2000020e 	.word	0x2000020e
 800cbf0:	08010d68 	.word	0x08010d68

0800cbf4 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 800cbf4:	b480      	push	{r7}
 800cbf6:	b085      	sub	sp, #20
 800cbf8:	af00      	add	r7, sp, #0
 800cbfa:	6078      	str	r0, [r7, #4]
 800cbfc:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 800cbfe:	687b      	ldr	r3, [r7, #4]
 800cc00:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 800cc02:	687b      	ldr	r3, [r7, #4]
 800cc04:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cc08:	d002      	beq.n	800cc10 <ip4_addr_isbroadcast_u32+0x1c>
 800cc0a:	687b      	ldr	r3, [r7, #4]
 800cc0c:	2b00      	cmp	r3, #0
 800cc0e:	d101      	bne.n	800cc14 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 800cc10:	2301      	movs	r3, #1
 800cc12:	e02a      	b.n	800cc6a <ip4_addr_isbroadcast_u32+0x76>
  /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 800cc14:	683b      	ldr	r3, [r7, #0]
 800cc16:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 800cc1a:	f003 0302 	and.w	r3, r3, #2
 800cc1e:	2b00      	cmp	r3, #0
 800cc20:	d101      	bne.n	800cc26 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 800cc22:	2300      	movs	r3, #0
 800cc24:	e021      	b.n	800cc6a <ip4_addr_isbroadcast_u32+0x76>
  /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 800cc26:	683b      	ldr	r3, [r7, #0]
 800cc28:	3304      	adds	r3, #4
 800cc2a:	681b      	ldr	r3, [r3, #0]
 800cc2c:	687a      	ldr	r2, [r7, #4]
 800cc2e:	429a      	cmp	r2, r3
 800cc30:	d101      	bne.n	800cc36 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 800cc32:	2300      	movs	r3, #0
 800cc34:	e019      	b.n	800cc6a <ip4_addr_isbroadcast_u32+0x76>
  /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 800cc36:	68fa      	ldr	r2, [r7, #12]
 800cc38:	683b      	ldr	r3, [r7, #0]
 800cc3a:	3304      	adds	r3, #4
 800cc3c:	681b      	ldr	r3, [r3, #0]
 800cc3e:	405a      	eors	r2, r3
 800cc40:	683b      	ldr	r3, [r7, #0]
 800cc42:	3308      	adds	r3, #8
 800cc44:	681b      	ldr	r3, [r3, #0]
 800cc46:	4013      	ands	r3, r2
 800cc48:	2b00      	cmp	r3, #0
 800cc4a:	d10d      	bne.n	800cc68 <ip4_addr_isbroadcast_u32+0x74>
         /* ...and host identifier bits are all ones? =>... */
          && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800cc4c:	683b      	ldr	r3, [r7, #0]
 800cc4e:	3308      	adds	r3, #8
 800cc50:	681b      	ldr	r3, [r3, #0]
 800cc52:	43da      	mvns	r2, r3
 800cc54:	687b      	ldr	r3, [r7, #4]
 800cc56:	401a      	ands	r2, r3
           (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 800cc58:	683b      	ldr	r3, [r7, #0]
 800cc5a:	3308      	adds	r3, #8
 800cc5c:	681b      	ldr	r3, [r3, #0]
 800cc5e:	43db      	mvns	r3, r3
          && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800cc60:	429a      	cmp	r2, r3
 800cc62:	d101      	bne.n	800cc68 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 800cc64:	2301      	movs	r3, #1
 800cc66:	e000      	b.n	800cc6a <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 800cc68:	2300      	movs	r3, #0
  }
}
 800cc6a:	4618      	mov	r0, r3
 800cc6c:	3714      	adds	r7, #20
 800cc6e:	46bd      	mov	sp, r7
 800cc70:	bc80      	pop	{r7}
 800cc72:	4770      	bx	lr

0800cc74 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 800cc74:	b580      	push	{r7, lr}
 800cc76:	b084      	sub	sp, #16
 800cc78:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 800cc7a:	2300      	movs	r3, #0
 800cc7c:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 800cc7e:	4b12      	ldr	r3, [pc, #72]	; (800ccc8 <ip_reass_tmr+0x54>)
 800cc80:	681b      	ldr	r3, [r3, #0]
 800cc82:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 800cc84:	e018      	b.n	800ccb8 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 800cc86:	68fb      	ldr	r3, [r7, #12]
 800cc88:	7fdb      	ldrb	r3, [r3, #31]
 800cc8a:	2b00      	cmp	r3, #0
 800cc8c:	d00b      	beq.n	800cca6 <ip_reass_tmr+0x32>
      r->timer--;
 800cc8e:	68fb      	ldr	r3, [r7, #12]
 800cc90:	7fdb      	ldrb	r3, [r3, #31]
 800cc92:	3b01      	subs	r3, #1
 800cc94:	b2da      	uxtb	r2, r3
 800cc96:	68fb      	ldr	r3, [r7, #12]
 800cc98:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n",(u16_t)r->timer));
      prev = r;
 800cc9a:	68fb      	ldr	r3, [r7, #12]
 800cc9c:	60bb      	str	r3, [r7, #8]
      r = r->next;
 800cc9e:	68fb      	ldr	r3, [r7, #12]
 800cca0:	681b      	ldr	r3, [r3, #0]
 800cca2:	60fb      	str	r3, [r7, #12]
 800cca4:	e008      	b.n	800ccb8 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 800cca6:	68fb      	ldr	r3, [r7, #12]
 800cca8:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 800ccaa:	68fb      	ldr	r3, [r7, #12]
 800ccac:	681b      	ldr	r3, [r3, #0]
 800ccae:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 800ccb0:	68b9      	ldr	r1, [r7, #8]
 800ccb2:	6878      	ldr	r0, [r7, #4]
 800ccb4:	f000 f80a 	bl	800cccc <ip_reass_free_complete_datagram>
  while (r != NULL) {
 800ccb8:	68fb      	ldr	r3, [r7, #12]
 800ccba:	2b00      	cmp	r3, #0
 800ccbc:	d1e3      	bne.n	800cc86 <ip_reass_tmr+0x12>
     }
   }
}
 800ccbe:	bf00      	nop
 800ccc0:	bf00      	nop
 800ccc2:	3710      	adds	r7, #16
 800ccc4:	46bd      	mov	sp, r7
 800ccc6:	bd80      	pop	{r7, pc}
 800ccc8:	20000210 	.word	0x20000210

0800cccc <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800cccc:	b580      	push	{r7, lr}
 800ccce:	b088      	sub	sp, #32
 800ccd0:	af00      	add	r7, sp, #0
 800ccd2:	6078      	str	r0, [r7, #4]
 800ccd4:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 800ccd6:	2300      	movs	r3, #0
 800ccd8:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 800ccda:	683a      	ldr	r2, [r7, #0]
 800ccdc:	687b      	ldr	r3, [r7, #4]
 800ccde:	429a      	cmp	r2, r3
 800cce0:	d105      	bne.n	800ccee <ip_reass_free_complete_datagram+0x22>
 800cce2:	4b45      	ldr	r3, [pc, #276]	; (800cdf8 <ip_reass_free_complete_datagram+0x12c>)
 800cce4:	22ab      	movs	r2, #171	; 0xab
 800cce6:	4945      	ldr	r1, [pc, #276]	; (800cdfc <ip_reass_free_complete_datagram+0x130>)
 800cce8:	4845      	ldr	r0, [pc, #276]	; (800ce00 <ip_reass_free_complete_datagram+0x134>)
 800ccea:	f000 feb9 	bl	800da60 <iprintf>
  if (prev != NULL) {
 800ccee:	683b      	ldr	r3, [r7, #0]
 800ccf0:	2b00      	cmp	r3, #0
 800ccf2:	d00a      	beq.n	800cd0a <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 800ccf4:	683b      	ldr	r3, [r7, #0]
 800ccf6:	681b      	ldr	r3, [r3, #0]
 800ccf8:	687a      	ldr	r2, [r7, #4]
 800ccfa:	429a      	cmp	r2, r3
 800ccfc:	d005      	beq.n	800cd0a <ip_reass_free_complete_datagram+0x3e>
 800ccfe:	4b3e      	ldr	r3, [pc, #248]	; (800cdf8 <ip_reass_free_complete_datagram+0x12c>)
 800cd00:	22ad      	movs	r2, #173	; 0xad
 800cd02:	4940      	ldr	r1, [pc, #256]	; (800ce04 <ip_reass_free_complete_datagram+0x138>)
 800cd04:	483e      	ldr	r0, [pc, #248]	; (800ce00 <ip_reass_free_complete_datagram+0x134>)
 800cd06:	f000 feab 	bl	800da60 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 800cd0a:	687b      	ldr	r3, [r7, #4]
 800cd0c:	685b      	ldr	r3, [r3, #4]
 800cd0e:	685b      	ldr	r3, [r3, #4]
 800cd10:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 800cd12:	697b      	ldr	r3, [r7, #20]
 800cd14:	889b      	ldrh	r3, [r3, #4]
 800cd16:	b29b      	uxth	r3, r3
 800cd18:	2b00      	cmp	r3, #0
 800cd1a:	d12a      	bne.n	800cd72 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 800cd1c:	687b      	ldr	r3, [r7, #4]
 800cd1e:	685b      	ldr	r3, [r3, #4]
 800cd20:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 800cd22:	697b      	ldr	r3, [r7, #20]
 800cd24:	681a      	ldr	r2, [r3, #0]
 800cd26:	687b      	ldr	r3, [r7, #4]
 800cd28:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 800cd2a:	69bb      	ldr	r3, [r7, #24]
 800cd2c:	6858      	ldr	r0, [r3, #4]
 800cd2e:	687b      	ldr	r3, [r7, #4]
 800cd30:	3308      	adds	r3, #8
 800cd32:	2214      	movs	r2, #20
 800cd34:	4619      	mov	r1, r3
 800cd36:	f000 fe7d 	bl	800da34 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 800cd3a:	2101      	movs	r1, #1
 800cd3c:	69b8      	ldr	r0, [r7, #24]
 800cd3e:	f7ff fc47 	bl	800c5d0 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 800cd42:	69b8      	ldr	r0, [r7, #24]
 800cd44:	f7f7 fb4c 	bl	80043e0 <pbuf_clen>
 800cd48:	4603      	mov	r3, r0
 800cd4a:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800cd4c:	8bfa      	ldrh	r2, [r7, #30]
 800cd4e:	8a7b      	ldrh	r3, [r7, #18]
 800cd50:	4413      	add	r3, r2
 800cd52:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cd56:	db05      	blt.n	800cd64 <ip_reass_free_complete_datagram+0x98>
 800cd58:	4b27      	ldr	r3, [pc, #156]	; (800cdf8 <ip_reass_free_complete_datagram+0x12c>)
 800cd5a:	22bc      	movs	r2, #188	; 0xbc
 800cd5c:	492a      	ldr	r1, [pc, #168]	; (800ce08 <ip_reass_free_complete_datagram+0x13c>)
 800cd5e:	4828      	ldr	r0, [pc, #160]	; (800ce00 <ip_reass_free_complete_datagram+0x134>)
 800cd60:	f000 fe7e 	bl	800da60 <iprintf>
    pbufs_freed += clen;
 800cd64:	8bfa      	ldrh	r2, [r7, #30]
 800cd66:	8a7b      	ldrh	r3, [r7, #18]
 800cd68:	4413      	add	r3, r2
 800cd6a:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 800cd6c:	69b8      	ldr	r0, [r7, #24]
 800cd6e:	f7f7 faa3 	bl	80042b8 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 800cd72:	687b      	ldr	r3, [r7, #4]
 800cd74:	685b      	ldr	r3, [r3, #4]
 800cd76:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 800cd78:	e01f      	b.n	800cdba <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 800cd7a:	69bb      	ldr	r3, [r7, #24]
 800cd7c:	685b      	ldr	r3, [r3, #4]
 800cd7e:	617b      	str	r3, [r7, #20]
    pcur = p;
 800cd80:	69bb      	ldr	r3, [r7, #24]
 800cd82:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 800cd84:	697b      	ldr	r3, [r7, #20]
 800cd86:	681b      	ldr	r3, [r3, #0]
 800cd88:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 800cd8a:	68f8      	ldr	r0, [r7, #12]
 800cd8c:	f7f7 fb28 	bl	80043e0 <pbuf_clen>
 800cd90:	4603      	mov	r3, r0
 800cd92:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800cd94:	8bfa      	ldrh	r2, [r7, #30]
 800cd96:	8a7b      	ldrh	r3, [r7, #18]
 800cd98:	4413      	add	r3, r2
 800cd9a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cd9e:	db05      	blt.n	800cdac <ip_reass_free_complete_datagram+0xe0>
 800cda0:	4b15      	ldr	r3, [pc, #84]	; (800cdf8 <ip_reass_free_complete_datagram+0x12c>)
 800cda2:	22cc      	movs	r2, #204	; 0xcc
 800cda4:	4918      	ldr	r1, [pc, #96]	; (800ce08 <ip_reass_free_complete_datagram+0x13c>)
 800cda6:	4816      	ldr	r0, [pc, #88]	; (800ce00 <ip_reass_free_complete_datagram+0x134>)
 800cda8:	f000 fe5a 	bl	800da60 <iprintf>
    pbufs_freed += clen;
 800cdac:	8bfa      	ldrh	r2, [r7, #30]
 800cdae:	8a7b      	ldrh	r3, [r7, #18]
 800cdb0:	4413      	add	r3, r2
 800cdb2:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 800cdb4:	68f8      	ldr	r0, [r7, #12]
 800cdb6:	f7f7 fa7f 	bl	80042b8 <pbuf_free>
  while (p != NULL) {
 800cdba:	69bb      	ldr	r3, [r7, #24]
 800cdbc:	2b00      	cmp	r3, #0
 800cdbe:	d1dc      	bne.n	800cd7a <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 800cdc0:	6839      	ldr	r1, [r7, #0]
 800cdc2:	6878      	ldr	r0, [r7, #4]
 800cdc4:	f000 f8c2 	bl	800cf4c <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= pbufs_freed);
 800cdc8:	4b10      	ldr	r3, [pc, #64]	; (800ce0c <ip_reass_free_complete_datagram+0x140>)
 800cdca:	881b      	ldrh	r3, [r3, #0]
 800cdcc:	8bfa      	ldrh	r2, [r7, #30]
 800cdce:	429a      	cmp	r2, r3
 800cdd0:	d905      	bls.n	800cdde <ip_reass_free_complete_datagram+0x112>
 800cdd2:	4b09      	ldr	r3, [pc, #36]	; (800cdf8 <ip_reass_free_complete_datagram+0x12c>)
 800cdd4:	22d2      	movs	r2, #210	; 0xd2
 800cdd6:	490e      	ldr	r1, [pc, #56]	; (800ce10 <ip_reass_free_complete_datagram+0x144>)
 800cdd8:	4809      	ldr	r0, [pc, #36]	; (800ce00 <ip_reass_free_complete_datagram+0x134>)
 800cdda:	f000 fe41 	bl	800da60 <iprintf>
  ip_reass_pbufcount -= pbufs_freed;
 800cdde:	4b0b      	ldr	r3, [pc, #44]	; (800ce0c <ip_reass_free_complete_datagram+0x140>)
 800cde0:	881a      	ldrh	r2, [r3, #0]
 800cde2:	8bfb      	ldrh	r3, [r7, #30]
 800cde4:	1ad3      	subs	r3, r2, r3
 800cde6:	b29a      	uxth	r2, r3
 800cde8:	4b08      	ldr	r3, [pc, #32]	; (800ce0c <ip_reass_free_complete_datagram+0x140>)
 800cdea:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 800cdec:	8bfb      	ldrh	r3, [r7, #30]
}
 800cdee:	4618      	mov	r0, r3
 800cdf0:	3720      	adds	r7, #32
 800cdf2:	46bd      	mov	sp, r7
 800cdf4:	bd80      	pop	{r7, pc}
 800cdf6:	bf00      	nop
 800cdf8:	080109f4 	.word	0x080109f4
 800cdfc:	08010a30 	.word	0x08010a30
 800ce00:	08010a3c 	.word	0x08010a3c
 800ce04:	08010a64 	.word	0x08010a64
 800ce08:	08010a78 	.word	0x08010a78
 800ce0c:	20000214 	.word	0x20000214
 800ce10:	08010a98 	.word	0x08010a98

0800ce14 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 800ce14:	b580      	push	{r7, lr}
 800ce16:	b08a      	sub	sp, #40	; 0x28
 800ce18:	af00      	add	r7, sp, #0
 800ce1a:	6078      	str	r0, [r7, #4]
 800ce1c:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 800ce1e:	2300      	movs	r3, #0
 800ce20:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 800ce22:	2300      	movs	r3, #0
 800ce24:	623b      	str	r3, [r7, #32]
    prev = NULL;
 800ce26:	2300      	movs	r3, #0
 800ce28:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 800ce2a:	2300      	movs	r3, #0
 800ce2c:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 800ce2e:	2300      	movs	r3, #0
 800ce30:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 800ce32:	4b28      	ldr	r3, [pc, #160]	; (800ced4 <ip_reass_remove_oldest_datagram+0xc0>)
 800ce34:	681b      	ldr	r3, [r3, #0]
 800ce36:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 800ce38:	e030      	b.n	800ce9c <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 800ce3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce3c:	695a      	ldr	r2, [r3, #20]
 800ce3e:	687b      	ldr	r3, [r7, #4]
 800ce40:	68db      	ldr	r3, [r3, #12]
 800ce42:	429a      	cmp	r2, r3
 800ce44:	d10c      	bne.n	800ce60 <ip_reass_remove_oldest_datagram+0x4c>
 800ce46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce48:	699a      	ldr	r2, [r3, #24]
 800ce4a:	687b      	ldr	r3, [r7, #4]
 800ce4c:	691b      	ldr	r3, [r3, #16]
 800ce4e:	429a      	cmp	r2, r3
 800ce50:	d106      	bne.n	800ce60 <ip_reass_remove_oldest_datagram+0x4c>
 800ce52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce54:	899a      	ldrh	r2, [r3, #12]
 800ce56:	687b      	ldr	r3, [r7, #4]
 800ce58:	889b      	ldrh	r3, [r3, #4]
 800ce5a:	b29b      	uxth	r3, r3
 800ce5c:	429a      	cmp	r2, r3
 800ce5e:	d014      	beq.n	800ce8a <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 800ce60:	693b      	ldr	r3, [r7, #16]
 800ce62:	3301      	adds	r3, #1
 800ce64:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 800ce66:	6a3b      	ldr	r3, [r7, #32]
 800ce68:	2b00      	cmp	r3, #0
 800ce6a:	d104      	bne.n	800ce76 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 800ce6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce6e:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800ce70:	69fb      	ldr	r3, [r7, #28]
 800ce72:	61bb      	str	r3, [r7, #24]
 800ce74:	e009      	b.n	800ce8a <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 800ce76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce78:	7fda      	ldrb	r2, [r3, #31]
 800ce7a:	6a3b      	ldr	r3, [r7, #32]
 800ce7c:	7fdb      	ldrb	r3, [r3, #31]
 800ce7e:	429a      	cmp	r2, r3
 800ce80:	d803      	bhi.n	800ce8a <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 800ce82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce84:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800ce86:	69fb      	ldr	r3, [r7, #28]
 800ce88:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 800ce8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce8c:	681b      	ldr	r3, [r3, #0]
 800ce8e:	2b00      	cmp	r3, #0
 800ce90:	d001      	beq.n	800ce96 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 800ce92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce94:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 800ce96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce98:	681b      	ldr	r3, [r3, #0]
 800ce9a:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 800ce9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce9e:	2b00      	cmp	r3, #0
 800cea0:	d1cb      	bne.n	800ce3a <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 800cea2:	6a3b      	ldr	r3, [r7, #32]
 800cea4:	2b00      	cmp	r3, #0
 800cea6:	d008      	beq.n	800ceba <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 800cea8:	69b9      	ldr	r1, [r7, #24]
 800ceaa:	6a38      	ldr	r0, [r7, #32]
 800ceac:	f7ff ff0e 	bl	800cccc <ip_reass_free_complete_datagram>
 800ceb0:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 800ceb2:	697a      	ldr	r2, [r7, #20]
 800ceb4:	68fb      	ldr	r3, [r7, #12]
 800ceb6:	4413      	add	r3, r2
 800ceb8:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 800ceba:	697a      	ldr	r2, [r7, #20]
 800cebc:	683b      	ldr	r3, [r7, #0]
 800cebe:	429a      	cmp	r2, r3
 800cec0:	da02      	bge.n	800cec8 <ip_reass_remove_oldest_datagram+0xb4>
 800cec2:	693b      	ldr	r3, [r7, #16]
 800cec4:	2b01      	cmp	r3, #1
 800cec6:	dcac      	bgt.n	800ce22 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 800cec8:	697b      	ldr	r3, [r7, #20]
}
 800ceca:	4618      	mov	r0, r3
 800cecc:	3728      	adds	r7, #40	; 0x28
 800cece:	46bd      	mov	sp, r7
 800ced0:	bd80      	pop	{r7, pc}
 800ced2:	bf00      	nop
 800ced4:	20000210 	.word	0x20000210

0800ced8 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata*
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 800ced8:	b580      	push	{r7, lr}
 800ceda:	b084      	sub	sp, #16
 800cedc:	af00      	add	r7, sp, #0
 800cede:	6078      	str	r0, [r7, #4]
 800cee0:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800cee2:	2004      	movs	r0, #4
 800cee4:	f7f6 fc5e 	bl	80037a4 <memp_malloc>
 800cee8:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 800ceea:	68fb      	ldr	r3, [r7, #12]
 800ceec:	2b00      	cmp	r3, #0
 800ceee:	d110      	bne.n	800cf12 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 800cef0:	6839      	ldr	r1, [r7, #0]
 800cef2:	6878      	ldr	r0, [r7, #4]
 800cef4:	f7ff ff8e 	bl	800ce14 <ip_reass_remove_oldest_datagram>
 800cef8:	4602      	mov	r2, r0
 800cefa:	683b      	ldr	r3, [r7, #0]
 800cefc:	4293      	cmp	r3, r2
 800cefe:	dc03      	bgt.n	800cf08 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800cf00:	2004      	movs	r0, #4
 800cf02:	f7f6 fc4f 	bl	80037a4 <memp_malloc>
 800cf06:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 800cf08:	68fb      	ldr	r3, [r7, #12]
 800cf0a:	2b00      	cmp	r3, #0
 800cf0c:	d101      	bne.n	800cf12 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG,("Failed to alloc reassdata struct\n"));
      return NULL;
 800cf0e:	2300      	movs	r3, #0
 800cf10:	e016      	b.n	800cf40 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 800cf12:	2220      	movs	r2, #32
 800cf14:	2100      	movs	r1, #0
 800cf16:	68f8      	ldr	r0, [r7, #12]
 800cf18:	f000 fd9a 	bl	800da50 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 800cf1c:	68fb      	ldr	r3, [r7, #12]
 800cf1e:	2203      	movs	r2, #3
 800cf20:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 800cf22:	4b09      	ldr	r3, [pc, #36]	; (800cf48 <ip_reass_enqueue_new_datagram+0x70>)
 800cf24:	681a      	ldr	r2, [r3, #0]
 800cf26:	68fb      	ldr	r3, [r7, #12]
 800cf28:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 800cf2a:	4a07      	ldr	r2, [pc, #28]	; (800cf48 <ip_reass_enqueue_new_datagram+0x70>)
 800cf2c:	68fb      	ldr	r3, [r7, #12]
 800cf2e:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 800cf30:	68fb      	ldr	r3, [r7, #12]
 800cf32:	3308      	adds	r3, #8
 800cf34:	2214      	movs	r2, #20
 800cf36:	6879      	ldr	r1, [r7, #4]
 800cf38:	4618      	mov	r0, r3
 800cf3a:	f000 fd7b 	bl	800da34 <memcpy>
  return ipr;
 800cf3e:	68fb      	ldr	r3, [r7, #12]
}
 800cf40:	4618      	mov	r0, r3
 800cf42:	3710      	adds	r7, #16
 800cf44:	46bd      	mov	sp, r7
 800cf46:	bd80      	pop	{r7, pc}
 800cf48:	20000210 	.word	0x20000210

0800cf4c <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800cf4c:	b580      	push	{r7, lr}
 800cf4e:	b082      	sub	sp, #8
 800cf50:	af00      	add	r7, sp, #0
 800cf52:	6078      	str	r0, [r7, #4]
 800cf54:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 800cf56:	4b10      	ldr	r3, [pc, #64]	; (800cf98 <ip_reass_dequeue_datagram+0x4c>)
 800cf58:	681b      	ldr	r3, [r3, #0]
 800cf5a:	687a      	ldr	r2, [r7, #4]
 800cf5c:	429a      	cmp	r2, r3
 800cf5e:	d104      	bne.n	800cf6a <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 800cf60:	687b      	ldr	r3, [r7, #4]
 800cf62:	681b      	ldr	r3, [r3, #0]
 800cf64:	4a0c      	ldr	r2, [pc, #48]	; (800cf98 <ip_reass_dequeue_datagram+0x4c>)
 800cf66:	6013      	str	r3, [r2, #0]
 800cf68:	e00d      	b.n	800cf86 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 800cf6a:	683b      	ldr	r3, [r7, #0]
 800cf6c:	2b00      	cmp	r3, #0
 800cf6e:	d106      	bne.n	800cf7e <ip_reass_dequeue_datagram+0x32>
 800cf70:	4b0a      	ldr	r3, [pc, #40]	; (800cf9c <ip_reass_dequeue_datagram+0x50>)
 800cf72:	f240 1245 	movw	r2, #325	; 0x145
 800cf76:	490a      	ldr	r1, [pc, #40]	; (800cfa0 <ip_reass_dequeue_datagram+0x54>)
 800cf78:	480a      	ldr	r0, [pc, #40]	; (800cfa4 <ip_reass_dequeue_datagram+0x58>)
 800cf7a:	f000 fd71 	bl	800da60 <iprintf>
    prev->next = ipr->next;
 800cf7e:	687b      	ldr	r3, [r7, #4]
 800cf80:	681a      	ldr	r2, [r3, #0]
 800cf82:	683b      	ldr	r3, [r7, #0]
 800cf84:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 800cf86:	6879      	ldr	r1, [r7, #4]
 800cf88:	2004      	movs	r0, #4
 800cf8a:	f7f6 fc57 	bl	800383c <memp_free>
}
 800cf8e:	bf00      	nop
 800cf90:	3708      	adds	r7, #8
 800cf92:	46bd      	mov	sp, r7
 800cf94:	bd80      	pop	{r7, pc}
 800cf96:	bf00      	nop
 800cf98:	20000210 	.word	0x20000210
 800cf9c:	080109f4 	.word	0x080109f4
 800cfa0:	08010ab4 	.word	0x08010ab4
 800cfa4:	08010a3c 	.word	0x08010a3c

0800cfa8 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 800cfa8:	b580      	push	{r7, lr}
 800cfaa:	b08c      	sub	sp, #48	; 0x30
 800cfac:	af00      	add	r7, sp, #0
 800cfae:	60f8      	str	r0, [r7, #12]
 800cfb0:	60b9      	str	r1, [r7, #8]
 800cfb2:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev=NULL;
 800cfb4:	2300      	movs	r3, #0
 800cfb6:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  struct ip_hdr *fraghdr;
  int valid = 1;
 800cfb8:	2301      	movs	r3, #1
 800cfba:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr*)new_p->payload;
 800cfbc:	68bb      	ldr	r3, [r7, #8]
 800cfbe:	685b      	ldr	r3, [r3, #4]
 800cfc0:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 800cfc2:	69fb      	ldr	r3, [r7, #28]
 800cfc4:	885b      	ldrh	r3, [r3, #2]
 800cfc6:	b29b      	uxth	r3, r3
 800cfc8:	4618      	mov	r0, r3
 800cfca:	f7f6 f842 	bl	8003052 <lwip_htons>
 800cfce:	4603      	mov	r3, r0
 800cfd0:	461a      	mov	r2, r3
 800cfd2:	69fb      	ldr	r3, [r7, #28]
 800cfd4:	781b      	ldrb	r3, [r3, #0]
 800cfd6:	b29b      	uxth	r3, r3
 800cfd8:	f003 030f 	and.w	r3, r3, #15
 800cfdc:	b29b      	uxth	r3, r3
 800cfde:	009b      	lsls	r3, r3, #2
 800cfe0:	b29b      	uxth	r3, r3
 800cfe2:	1ad3      	subs	r3, r2, r3
 800cfe4:	837b      	strh	r3, [r7, #26]
  offset = (lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
 800cfe6:	69fb      	ldr	r3, [r7, #28]
 800cfe8:	88db      	ldrh	r3, [r3, #6]
 800cfea:	b29b      	uxth	r3, r3
 800cfec:	4618      	mov	r0, r3
 800cfee:	f7f6 f830 	bl	8003052 <lwip_htons>
 800cff2:	4603      	mov	r3, r0
 800cff4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800cff8:	b29b      	uxth	r3, r3
 800cffa:	00db      	lsls	r3, r3, #3
 800cffc:	833b      	strh	r3, [r7, #24]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper*)new_p->payload;
 800cffe:	68bb      	ldr	r3, [r7, #8]
 800d000:	685b      	ldr	r3, [r3, #4]
 800d002:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 800d004:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d006:	2200      	movs	r2, #0
 800d008:	701a      	strb	r2, [r3, #0]
 800d00a:	2200      	movs	r2, #0
 800d00c:	705a      	strb	r2, [r3, #1]
 800d00e:	2200      	movs	r2, #0
 800d010:	709a      	strb	r2, [r3, #2]
 800d012:	2200      	movs	r2, #0
 800d014:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 800d016:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d018:	8b3a      	ldrh	r2, [r7, #24]
 800d01a:	809a      	strh	r2, [r3, #4]
  iprh->end = offset + len;
 800d01c:	8b3a      	ldrh	r2, [r7, #24]
 800d01e:	8b7b      	ldrh	r3, [r7, #26]
 800d020:	4413      	add	r3, r2
 800d022:	b29a      	uxth	r2, r3
 800d024:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d026:	80da      	strh	r2, [r3, #6]

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 800d028:	68fb      	ldr	r3, [r7, #12]
 800d02a:	685b      	ldr	r3, [r3, #4]
 800d02c:	627b      	str	r3, [r7, #36]	; 0x24
 800d02e:	e061      	b.n	800d0f4 <ip_reass_chain_frag_into_datagram_and_validate+0x14c>
    iprh_tmp = (struct ip_reass_helper*)q->payload;
 800d030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d032:	685b      	ldr	r3, [r3, #4]
 800d034:	617b      	str	r3, [r7, #20]
    if (iprh->start < iprh_tmp->start) {
 800d036:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d038:	889b      	ldrh	r3, [r3, #4]
 800d03a:	b29a      	uxth	r2, r3
 800d03c:	697b      	ldr	r3, [r7, #20]
 800d03e:	889b      	ldrh	r3, [r3, #4]
 800d040:	b29b      	uxth	r3, r3
 800d042:	429a      	cmp	r2, r3
 800d044:	d232      	bcs.n	800d0ac <ip_reass_chain_frag_into_datagram_and_validate+0x104>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 800d046:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d048:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d04a:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 800d04c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d04e:	2b00      	cmp	r3, #0
 800d050:	d01f      	beq.n	800d092 <ip_reass_chain_frag_into_datagram_and_validate+0xea>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 800d052:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d054:	889b      	ldrh	r3, [r3, #4]
 800d056:	b29a      	uxth	r2, r3
 800d058:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d05a:	88db      	ldrh	r3, [r3, #6]
 800d05c:	b29b      	uxth	r3, r3
 800d05e:	429a      	cmp	r2, r3
 800d060:	f0c0 80e3 	bcc.w	800d22a <ip_reass_chain_frag_into_datagram_and_validate+0x282>
 800d064:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d066:	88db      	ldrh	r3, [r3, #6]
 800d068:	b29a      	uxth	r2, r3
 800d06a:	697b      	ldr	r3, [r7, #20]
 800d06c:	889b      	ldrh	r3, [r3, #4]
 800d06e:	b29b      	uxth	r3, r3
 800d070:	429a      	cmp	r2, r3
 800d072:	f200 80da 	bhi.w	800d22a <ip_reass_chain_frag_into_datagram_and_validate+0x282>
          /* fragment overlaps with previous or following, throw away */
          goto freepbuf;
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 800d076:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d078:	68ba      	ldr	r2, [r7, #8]
 800d07a:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 800d07c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d07e:	88db      	ldrh	r3, [r3, #6]
 800d080:	b29a      	uxth	r2, r3
 800d082:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d084:	889b      	ldrh	r3, [r3, #4]
 800d086:	b29b      	uxth	r3, r3
 800d088:	429a      	cmp	r2, r3
 800d08a:	d037      	beq.n	800d0fc <ip_reass_chain_frag_into_datagram_and_validate+0x154>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800d08c:	2300      	movs	r3, #0
 800d08e:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 800d090:	e034      	b.n	800d0fc <ip_reass_chain_frag_into_datagram_and_validate+0x154>
        if (iprh->end > iprh_tmp->start) {
 800d092:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d094:	88db      	ldrh	r3, [r3, #6]
 800d096:	b29a      	uxth	r2, r3
 800d098:	697b      	ldr	r3, [r7, #20]
 800d09a:	889b      	ldrh	r3, [r3, #4]
 800d09c:	b29b      	uxth	r3, r3
 800d09e:	429a      	cmp	r2, r3
 800d0a0:	f200 80c5 	bhi.w	800d22e <ip_reass_chain_frag_into_datagram_and_validate+0x286>
        ipr->p = new_p;
 800d0a4:	68fb      	ldr	r3, [r7, #12]
 800d0a6:	68ba      	ldr	r2, [r7, #8]
 800d0a8:	605a      	str	r2, [r3, #4]
      break;
 800d0aa:	e027      	b.n	800d0fc <ip_reass_chain_frag_into_datagram_and_validate+0x154>
    } else if (iprh->start == iprh_tmp->start) {
 800d0ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d0ae:	889b      	ldrh	r3, [r3, #4]
 800d0b0:	b29a      	uxth	r2, r3
 800d0b2:	697b      	ldr	r3, [r7, #20]
 800d0b4:	889b      	ldrh	r3, [r3, #4]
 800d0b6:	b29b      	uxth	r3, r3
 800d0b8:	429a      	cmp	r2, r3
 800d0ba:	f000 80ba 	beq.w	800d232 <ip_reass_chain_frag_into_datagram_and_validate+0x28a>
      /* received the same datagram twice: no need to keep the datagram */
      goto freepbuf;
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 800d0be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d0c0:	889b      	ldrh	r3, [r3, #4]
 800d0c2:	b29a      	uxth	r2, r3
 800d0c4:	697b      	ldr	r3, [r7, #20]
 800d0c6:	88db      	ldrh	r3, [r3, #6]
 800d0c8:	b29b      	uxth	r3, r3
 800d0ca:	429a      	cmp	r2, r3
 800d0cc:	f0c0 80b3 	bcc.w	800d236 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
      /* overlap: no need to keep the new datagram */
      goto freepbuf;
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 800d0d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0d2:	2b00      	cmp	r3, #0
 800d0d4:	d009      	beq.n	800d0ea <ip_reass_chain_frag_into_datagram_and_validate+0x142>
        if (iprh_prev->end != iprh_tmp->start) {
 800d0d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0d8:	88db      	ldrh	r3, [r3, #6]
 800d0da:	b29a      	uxth	r2, r3
 800d0dc:	697b      	ldr	r3, [r7, #20]
 800d0de:	889b      	ldrh	r3, [r3, #4]
 800d0e0:	b29b      	uxth	r3, r3
 800d0e2:	429a      	cmp	r2, r3
 800d0e4:	d001      	beq.n	800d0ea <ip_reass_chain_frag_into_datagram_and_validate+0x142>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800d0e6:	2300      	movs	r3, #0
 800d0e8:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 800d0ea:	697b      	ldr	r3, [r7, #20]
 800d0ec:	681b      	ldr	r3, [r3, #0]
 800d0ee:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 800d0f0:	697b      	ldr	r3, [r7, #20]
 800d0f2:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 800d0f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0f6:	2b00      	cmp	r3, #0
 800d0f8:	d19a      	bne.n	800d030 <ip_reass_chain_frag_into_datagram_and_validate+0x88>
 800d0fa:	e000      	b.n	800d0fe <ip_reass_chain_frag_into_datagram_and_validate+0x156>
      break;
 800d0fc:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 800d0fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d100:	2b00      	cmp	r3, #0
 800d102:	d12d      	bne.n	800d160 <ip_reass_chain_frag_into_datagram_and_validate+0x1b8>
    if (iprh_prev != NULL) {
 800d104:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d106:	2b00      	cmp	r3, #0
 800d108:	d01c      	beq.n	800d144 <ip_reass_chain_frag_into_datagram_and_validate+0x19c>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 800d10a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d10c:	88db      	ldrh	r3, [r3, #6]
 800d10e:	b29a      	uxth	r2, r3
 800d110:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d112:	889b      	ldrh	r3, [r3, #4]
 800d114:	b29b      	uxth	r3, r3
 800d116:	429a      	cmp	r2, r3
 800d118:	d906      	bls.n	800d128 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
 800d11a:	4b51      	ldr	r3, [pc, #324]	; (800d260 <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 800d11c:	f240 12ab 	movw	r2, #427	; 0x1ab
 800d120:	4950      	ldr	r1, [pc, #320]	; (800d264 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800d122:	4851      	ldr	r0, [pc, #324]	; (800d268 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 800d124:	f000 fc9c 	bl	800da60 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 800d128:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d12a:	68ba      	ldr	r2, [r7, #8]
 800d12c:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 800d12e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d130:	88db      	ldrh	r3, [r3, #6]
 800d132:	b29a      	uxth	r2, r3
 800d134:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d136:	889b      	ldrh	r3, [r3, #4]
 800d138:	b29b      	uxth	r3, r3
 800d13a:	429a      	cmp	r2, r3
 800d13c:	d010      	beq.n	800d160 <ip_reass_chain_frag_into_datagram_and_validate+0x1b8>
        valid = 0;
 800d13e:	2300      	movs	r3, #0
 800d140:	623b      	str	r3, [r7, #32]
 800d142:	e00d      	b.n	800d160 <ip_reass_chain_frag_into_datagram_and_validate+0x1b8>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 800d144:	68fb      	ldr	r3, [r7, #12]
 800d146:	685b      	ldr	r3, [r3, #4]
 800d148:	2b00      	cmp	r3, #0
 800d14a:	d006      	beq.n	800d15a <ip_reass_chain_frag_into_datagram_and_validate+0x1b2>
 800d14c:	4b44      	ldr	r3, [pc, #272]	; (800d260 <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 800d14e:	f240 12b3 	movw	r2, #435	; 0x1b3
 800d152:	4946      	ldr	r1, [pc, #280]	; (800d26c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800d154:	4844      	ldr	r0, [pc, #272]	; (800d268 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 800d156:	f000 fc83 	bl	800da60 <iprintf>
        ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 800d15a:	68fb      	ldr	r3, [r7, #12]
 800d15c:	68ba      	ldr	r2, [r7, #8]
 800d15e:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 800d160:	687b      	ldr	r3, [r7, #4]
 800d162:	2b00      	cmp	r3, #0
 800d164:	d105      	bne.n	800d172 <ip_reass_chain_frag_into_datagram_and_validate+0x1ca>
 800d166:	68fb      	ldr	r3, [r7, #12]
 800d168:	7f9b      	ldrb	r3, [r3, #30]
 800d16a:	f003 0301 	and.w	r3, r3, #1
 800d16e:	2b00      	cmp	r3, #0
 800d170:	d059      	beq.n	800d226 <ip_reass_chain_frag_into_datagram_and_validate+0x27e>
    /* and had no holes so far */
    if (valid) {
 800d172:	6a3b      	ldr	r3, [r7, #32]
 800d174:	2b00      	cmp	r3, #0
 800d176:	d04f      	beq.n	800d218 <ip_reass_chain_frag_into_datagram_and_validate+0x270>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper*)ipr->p->payload)->start != 0)) {
 800d178:	68fb      	ldr	r3, [r7, #12]
 800d17a:	685b      	ldr	r3, [r3, #4]
 800d17c:	2b00      	cmp	r3, #0
 800d17e:	d006      	beq.n	800d18e <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 800d180:	68fb      	ldr	r3, [r7, #12]
 800d182:	685b      	ldr	r3, [r3, #4]
 800d184:	685b      	ldr	r3, [r3, #4]
 800d186:	889b      	ldrh	r3, [r3, #4]
 800d188:	b29b      	uxth	r3, r3
 800d18a:	2b00      	cmp	r3, #0
 800d18c:	d002      	beq.n	800d194 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 800d18e:	2300      	movs	r3, #0
 800d190:	623b      	str	r3, [r7, #32]
 800d192:	e041      	b.n	800d218 <ip_reass_chain_frag_into_datagram_and_validate+0x270>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 800d194:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d196:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 800d198:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d19a:	681b      	ldr	r3, [r3, #0]
 800d19c:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 800d19e:	e012      	b.n	800d1c6 <ip_reass_chain_frag_into_datagram_and_validate+0x21e>
          iprh = (struct ip_reass_helper*)q->payload;
 800d1a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1a2:	685b      	ldr	r3, [r3, #4]
 800d1a4:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 800d1a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1a8:	88db      	ldrh	r3, [r3, #6]
 800d1aa:	b29a      	uxth	r2, r3
 800d1ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1ae:	889b      	ldrh	r3, [r3, #4]
 800d1b0:	b29b      	uxth	r3, r3
 800d1b2:	429a      	cmp	r2, r3
 800d1b4:	d002      	beq.n	800d1bc <ip_reass_chain_frag_into_datagram_and_validate+0x214>
            valid = 0;
 800d1b6:	2300      	movs	r3, #0
 800d1b8:	623b      	str	r3, [r7, #32]
            break;
 800d1ba:	e007      	b.n	800d1cc <ip_reass_chain_frag_into_datagram_and_validate+0x224>
          }
          iprh_prev = iprh;
 800d1bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1be:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 800d1c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1c2:	681b      	ldr	r3, [r3, #0]
 800d1c4:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 800d1c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1c8:	2b00      	cmp	r3, #0
 800d1ca:	d1e9      	bne.n	800d1a0 <ip_reass_chain_frag_into_datagram_and_validate+0x1f8>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 800d1cc:	6a3b      	ldr	r3, [r7, #32]
 800d1ce:	2b00      	cmp	r3, #0
 800d1d0:	d022      	beq.n	800d218 <ip_reass_chain_frag_into_datagram_and_validate+0x270>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 800d1d2:	68fb      	ldr	r3, [r7, #12]
 800d1d4:	685b      	ldr	r3, [r3, #4]
 800d1d6:	2b00      	cmp	r3, #0
 800d1d8:	d106      	bne.n	800d1e8 <ip_reass_chain_frag_into_datagram_and_validate+0x240>
 800d1da:	4b21      	ldr	r3, [pc, #132]	; (800d260 <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 800d1dc:	f44f 72ea 	mov.w	r2, #468	; 0x1d4
 800d1e0:	4923      	ldr	r1, [pc, #140]	; (800d270 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 800d1e2:	4821      	ldr	r0, [pc, #132]	; (800d268 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 800d1e4:	f000 fc3c 	bl	800da60 <iprintf>
          LWIP_ASSERT("sanity check",
 800d1e8:	68fb      	ldr	r3, [r7, #12]
 800d1ea:	685b      	ldr	r3, [r3, #4]
 800d1ec:	685b      	ldr	r3, [r3, #4]
 800d1ee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d1f0:	429a      	cmp	r2, r3
 800d1f2:	d106      	bne.n	800d202 <ip_reass_chain_frag_into_datagram_and_validate+0x25a>
 800d1f4:	4b1a      	ldr	r3, [pc, #104]	; (800d260 <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 800d1f6:	f240 12d5 	movw	r2, #469	; 0x1d5
 800d1fa:	491d      	ldr	r1, [pc, #116]	; (800d270 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 800d1fc:	481a      	ldr	r0, [pc, #104]	; (800d268 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 800d1fe:	f000 fc2f 	bl	800da60 <iprintf>
            ((struct ip_reass_helper*)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 800d202:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d204:	681b      	ldr	r3, [r3, #0]
 800d206:	2b00      	cmp	r3, #0
 800d208:	d006      	beq.n	800d218 <ip_reass_chain_frag_into_datagram_and_validate+0x270>
 800d20a:	4b15      	ldr	r3, [pc, #84]	; (800d260 <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 800d20c:	f240 12d7 	movw	r2, #471	; 0x1d7
 800d210:	4918      	ldr	r1, [pc, #96]	; (800d274 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800d212:	4815      	ldr	r0, [pc, #84]	; (800d268 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 800d214:	f000 fc24 	bl	800da60 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 800d218:	6a3b      	ldr	r3, [r7, #32]
 800d21a:	2b00      	cmp	r3, #0
 800d21c:	bf14      	ite	ne
 800d21e:	2301      	movne	r3, #1
 800d220:	2300      	moveq	r3, #0
 800d222:	b2db      	uxtb	r3, r3
 800d224:	e018      	b.n	800d258 <ip_reass_chain_frag_into_datagram_and_validate+0x2b0>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 800d226:	2300      	movs	r3, #0
 800d228:	e016      	b.n	800d258 <ip_reass_chain_frag_into_datagram_and_validate+0x2b0>
          goto freepbuf;
 800d22a:	bf00      	nop
 800d22c:	e004      	b.n	800d238 <ip_reass_chain_frag_into_datagram_and_validate+0x290>
          goto freepbuf;
 800d22e:	bf00      	nop
 800d230:	e002      	b.n	800d238 <ip_reass_chain_frag_into_datagram_and_validate+0x290>
      goto freepbuf;
 800d232:	bf00      	nop
 800d234:	e000      	b.n	800d238 <ip_reass_chain_frag_into_datagram_and_validate+0x290>
      goto freepbuf;
 800d236:	bf00      	nop
#if IP_REASS_CHECK_OVERLAP
freepbuf:
  ip_reass_pbufcount -= pbuf_clen(new_p);
 800d238:	68b8      	ldr	r0, [r7, #8]
 800d23a:	f7f7 f8d1 	bl	80043e0 <pbuf_clen>
 800d23e:	4603      	mov	r3, r0
 800d240:	461a      	mov	r2, r3
 800d242:	4b0d      	ldr	r3, [pc, #52]	; (800d278 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 800d244:	881b      	ldrh	r3, [r3, #0]
 800d246:	1a9b      	subs	r3, r3, r2
 800d248:	b29a      	uxth	r2, r3
 800d24a:	4b0b      	ldr	r3, [pc, #44]	; (800d278 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 800d24c:	801a      	strh	r2, [r3, #0]
  pbuf_free(new_p);
 800d24e:	68b8      	ldr	r0, [r7, #8]
 800d250:	f7f7 f832 	bl	80042b8 <pbuf_free>
  return IP_REASS_VALIDATE_PBUF_DROPPED;
 800d254:	f04f 33ff 	mov.w	r3, #4294967295
#endif /* IP_REASS_CHECK_OVERLAP */
}
 800d258:	4618      	mov	r0, r3
 800d25a:	3730      	adds	r7, #48	; 0x30
 800d25c:	46bd      	mov	sp, r7
 800d25e:	bd80      	pop	{r7, pc}
 800d260:	080109f4 	.word	0x080109f4
 800d264:	08010ad0 	.word	0x08010ad0
 800d268:	08010a3c 	.word	0x08010a3c
 800d26c:	08010af0 	.word	0x08010af0
 800d270:	08010b28 	.word	0x08010b28
 800d274:	08010b38 	.word	0x08010b38
 800d278:	20000214 	.word	0x20000214

0800d27c <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 800d27c:	b580      	push	{r7, lr}
 800d27e:	b08e      	sub	sp, #56	; 0x38
 800d280:	af00      	add	r7, sp, #0
 800d282:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr*)p->payload;
 800d284:	687b      	ldr	r3, [r7, #4]
 800d286:	685b      	ldr	r3, [r3, #4]
 800d288:	62bb      	str	r3, [r7, #40]	; 0x28

  if ((IPH_HL(fraghdr) * 4) != IP_HLEN) {
 800d28a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d28c:	781b      	ldrb	r3, [r3, #0]
 800d28e:	f003 030f 	and.w	r3, r3, #15
 800d292:	009b      	lsls	r3, r3, #2
 800d294:	2b14      	cmp	r3, #20
 800d296:	f040 8131 	bne.w	800d4fc <ip4_reass+0x280>
    LWIP_DEBUGF(IP_REASS_DEBUG,("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = (lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
 800d29a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d29c:	88db      	ldrh	r3, [r3, #6]
 800d29e:	b29b      	uxth	r3, r3
 800d2a0:	4618      	mov	r0, r3
 800d2a2:	f7f5 fed6 	bl	8003052 <lwip_htons>
 800d2a6:	4603      	mov	r3, r0
 800d2a8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d2ac:	b29b      	uxth	r3, r3
 800d2ae:	00db      	lsls	r3, r3, #3
 800d2b0:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 800d2b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d2b4:	885b      	ldrh	r3, [r3, #2]
 800d2b6:	b29b      	uxth	r3, r3
 800d2b8:	4618      	mov	r0, r3
 800d2ba:	f7f5 feca 	bl	8003052 <lwip_htons>
 800d2be:	4603      	mov	r3, r0
 800d2c0:	461a      	mov	r2, r3
 800d2c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d2c4:	781b      	ldrb	r3, [r3, #0]
 800d2c6:	b29b      	uxth	r3, r3
 800d2c8:	f003 030f 	and.w	r3, r3, #15
 800d2cc:	b29b      	uxth	r3, r3
 800d2ce:	009b      	lsls	r3, r3, #2
 800d2d0:	b29b      	uxth	r3, r3
 800d2d2:	1ad3      	subs	r3, r2, r3
 800d2d4:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 800d2d6:	6878      	ldr	r0, [r7, #4]
 800d2d8:	f7f7 f882 	bl	80043e0 <pbuf_clen>
 800d2dc:	4603      	mov	r3, r0
 800d2de:	847b      	strh	r3, [r7, #34]	; 0x22
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 800d2e0:	4b8e      	ldr	r3, [pc, #568]	; (800d51c <ip4_reass+0x2a0>)
 800d2e2:	881b      	ldrh	r3, [r3, #0]
 800d2e4:	461a      	mov	r2, r3
 800d2e6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d2e8:	4413      	add	r3, r2
 800d2ea:	2b0a      	cmp	r3, #10
 800d2ec:	dd10      	ble.n	800d310 <ip4_reass+0x94>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800d2ee:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d2f0:	4619      	mov	r1, r3
 800d2f2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d2f4:	f7ff fd8e 	bl	800ce14 <ip_reass_remove_oldest_datagram>
 800d2f8:	4603      	mov	r3, r0
 800d2fa:	2b00      	cmp	r3, #0
 800d2fc:	f000 8100 	beq.w	800d500 <ip4_reass+0x284>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 800d300:	4b86      	ldr	r3, [pc, #536]	; (800d51c <ip4_reass+0x2a0>)
 800d302:	881b      	ldrh	r3, [r3, #0]
 800d304:	461a      	mov	r2, r3
 800d306:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d308:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800d30a:	2b0a      	cmp	r3, #10
 800d30c:	f300 80f8 	bgt.w	800d500 <ip4_reass+0x284>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800d310:	4b83      	ldr	r3, [pc, #524]	; (800d520 <ip4_reass+0x2a4>)
 800d312:	681b      	ldr	r3, [r3, #0]
 800d314:	633b      	str	r3, [r7, #48]	; 0x30
 800d316:	e015      	b.n	800d344 <ip4_reass+0xc8>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 800d318:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d31a:	695a      	ldr	r2, [r3, #20]
 800d31c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d31e:	68db      	ldr	r3, [r3, #12]
 800d320:	429a      	cmp	r2, r3
 800d322:	d10c      	bne.n	800d33e <ip4_reass+0xc2>
 800d324:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d326:	699a      	ldr	r2, [r3, #24]
 800d328:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d32a:	691b      	ldr	r3, [r3, #16]
 800d32c:	429a      	cmp	r2, r3
 800d32e:	d106      	bne.n	800d33e <ip4_reass+0xc2>
 800d330:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d332:	899a      	ldrh	r2, [r3, #12]
 800d334:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d336:	889b      	ldrh	r3, [r3, #4]
 800d338:	b29b      	uxth	r3, r3
 800d33a:	429a      	cmp	r2, r3
 800d33c:	d006      	beq.n	800d34c <ip4_reass+0xd0>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800d33e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d340:	681b      	ldr	r3, [r3, #0]
 800d342:	633b      	str	r3, [r7, #48]	; 0x30
 800d344:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d346:	2b00      	cmp	r3, #0
 800d348:	d1e6      	bne.n	800d318 <ip4_reass+0x9c>
 800d34a:	e000      	b.n	800d34e <ip4_reass+0xd2>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
        lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 800d34c:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 800d34e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d350:	2b00      	cmp	r3, #0
 800d352:	d109      	bne.n	800d368 <ip4_reass+0xec>
  /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 800d354:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d356:	4619      	mov	r1, r3
 800d358:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d35a:	f7ff fdbd 	bl	800ced8 <ip_reass_enqueue_new_datagram>
 800d35e:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 800d360:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d362:	2b00      	cmp	r3, #0
 800d364:	d11c      	bne.n	800d3a0 <ip4_reass+0x124>
      goto nullreturn;
 800d366:	e0d0      	b.n	800d50a <ip4_reass+0x28e>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800d368:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d36a:	88db      	ldrh	r3, [r3, #6]
 800d36c:	b29b      	uxth	r3, r3
 800d36e:	4618      	mov	r0, r3
 800d370:	f7f5 fe6f 	bl	8003052 <lwip_htons>
 800d374:	4603      	mov	r3, r0
 800d376:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d37a:	2b00      	cmp	r3, #0
 800d37c:	d110      	bne.n	800d3a0 <ip4_reass+0x124>
      ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 800d37e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d380:	89db      	ldrh	r3, [r3, #14]
 800d382:	4618      	mov	r0, r3
 800d384:	f7f5 fe65 	bl	8003052 <lwip_htons>
 800d388:	4603      	mov	r3, r0
 800d38a:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800d38e:	2b00      	cmp	r3, #0
 800d390:	d006      	beq.n	800d3a0 <ip4_reass+0x124>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 800d392:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d394:	3308      	adds	r3, #8
 800d396:	2214      	movs	r2, #20
 800d398:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d39a:	4618      	mov	r0, r3
 800d39c:	f000 fb4a 	bl	800da34 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 800d3a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d3a2:	88db      	ldrh	r3, [r3, #6]
 800d3a4:	b29b      	uxth	r3, r3
 800d3a6:	f003 0320 	and.w	r3, r3, #32
 800d3aa:	2b00      	cmp	r3, #0
 800d3ac:	bf0c      	ite	eq
 800d3ae:	2301      	moveq	r3, #1
 800d3b0:	2300      	movne	r3, #0
 800d3b2:	b2db      	uxtb	r3, r3
 800d3b4:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 800d3b6:	69fb      	ldr	r3, [r7, #28]
 800d3b8:	2b00      	cmp	r3, #0
 800d3ba:	d00e      	beq.n	800d3da <ip4_reass+0x15e>
    u16_t datagram_len = (u16_t)(offset + len);
 800d3bc:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800d3be:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d3c0:	4413      	add	r3, r2
 800d3c2:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 800d3c4:	8b7a      	ldrh	r2, [r7, #26]
 800d3c6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800d3c8:	429a      	cmp	r2, r3
 800d3ca:	f0c0 809b 	bcc.w	800d504 <ip4_reass+0x288>
 800d3ce:	8b7b      	ldrh	r3, [r7, #26]
 800d3d0:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 800d3d4:	4293      	cmp	r3, r2
 800d3d6:	f200 8095 	bhi.w	800d504 <ip4_reass+0x288>
      goto nullreturn;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 800d3da:	69fa      	ldr	r2, [r7, #28]
 800d3dc:	6879      	ldr	r1, [r7, #4]
 800d3de:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d3e0:	f7ff fde2 	bl	800cfa8 <ip_reass_chain_frag_into_datagram_and_validate>
 800d3e4:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 800d3e6:	697b      	ldr	r3, [r7, #20]
 800d3e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d3ec:	f000 808c 	beq.w	800d508 <ip4_reass+0x28c>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 800d3f0:	4b4a      	ldr	r3, [pc, #296]	; (800d51c <ip4_reass+0x2a0>)
 800d3f2:	881a      	ldrh	r2, [r3, #0]
 800d3f4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d3f6:	4413      	add	r3, r2
 800d3f8:	b29a      	uxth	r2, r3
 800d3fa:	4b48      	ldr	r3, [pc, #288]	; (800d51c <ip4_reass+0x2a0>)
 800d3fc:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 800d3fe:	69fb      	ldr	r3, [r7, #28]
 800d400:	2b00      	cmp	r3, #0
 800d402:	d00d      	beq.n	800d420 <ip4_reass+0x1a4>
    u16_t datagram_len = (u16_t)(offset + len);
 800d404:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800d406:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d408:	4413      	add	r3, r2
 800d40a:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 800d40c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d40e:	8a7a      	ldrh	r2, [r7, #18]
 800d410:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 800d412:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d414:	7f9b      	ldrb	r3, [r3, #30]
 800d416:	f043 0301 	orr.w	r3, r3, #1
 800d41a:	b2da      	uxtb	r2, r3
 800d41c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d41e:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
     ("ip4_reass: last fragment seen, total len %"S16_F"\n",
      ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 800d420:	697b      	ldr	r3, [r7, #20]
 800d422:	2b01      	cmp	r3, #1
 800d424:	d168      	bne.n	800d4f8 <ip4_reass+0x27c>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    ipr->datagram_len += IP_HLEN;
 800d426:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d428:	8b9b      	ldrh	r3, [r3, #28]
 800d42a:	3314      	adds	r3, #20
 800d42c:	b29a      	uxth	r2, r3
 800d42e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d430:	839a      	strh	r2, [r3, #28]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper*)ipr->p->payload)->next_pbuf;
 800d432:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d434:	685b      	ldr	r3, [r3, #4]
 800d436:	685b      	ldr	r3, [r3, #4]
 800d438:	681b      	ldr	r3, [r3, #0]
 800d43a:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr*)(ipr->p->payload);
 800d43c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d43e:	685b      	ldr	r3, [r3, #4]
 800d440:	685b      	ldr	r3, [r3, #4]
 800d442:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 800d444:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d446:	3308      	adds	r3, #8
 800d448:	2214      	movs	r2, #20
 800d44a:	4619      	mov	r1, r3
 800d44c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d44e:	f000 faf1 	bl	800da34 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(ipr->datagram_len));
 800d452:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d454:	8b9b      	ldrh	r3, [r3, #28]
 800d456:	4618      	mov	r0, r3
 800d458:	f7f5 fdfb 	bl	8003052 <lwip_htons>
 800d45c:	4603      	mov	r3, r0
 800d45e:	461a      	mov	r2, r3
 800d460:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d462:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 800d464:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d466:	2200      	movs	r2, #0
 800d468:	719a      	strb	r2, [r3, #6]
 800d46a:	2200      	movs	r2, #0
 800d46c:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 800d46e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d470:	2200      	movs	r2, #0
 800d472:	729a      	strb	r2, [r3, #10]
 800d474:	2200      	movs	r2, #0
 800d476:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 800d478:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d47a:	685b      	ldr	r3, [r3, #4]
 800d47c:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 800d47e:	e00e      	b.n	800d49e <ip4_reass+0x222>
      iprh = (struct ip_reass_helper*)r->payload;
 800d480:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d482:	685b      	ldr	r3, [r3, #4]
 800d484:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_header(r, -IP_HLEN);
 800d486:	f06f 0113 	mvn.w	r1, #19
 800d48a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800d48c:	f7f6 fef0 	bl	8004270 <pbuf_header>
      pbuf_cat(p, r);
 800d490:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800d492:	6878      	ldr	r0, [r7, #4]
 800d494:	f7f6 ffdc 	bl	8004450 <pbuf_cat>
      r = iprh->next_pbuf;
 800d498:	68fb      	ldr	r3, [r7, #12]
 800d49a:	681b      	ldr	r3, [r3, #0]
 800d49c:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 800d49e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d4a0:	2b00      	cmp	r3, #0
 800d4a2:	d1ed      	bne.n	800d480 <ip4_reass+0x204>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 800d4a4:	4b1e      	ldr	r3, [pc, #120]	; (800d520 <ip4_reass+0x2a4>)
 800d4a6:	681b      	ldr	r3, [r3, #0]
 800d4a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d4aa:	429a      	cmp	r2, r3
 800d4ac:	d102      	bne.n	800d4b4 <ip4_reass+0x238>
      ipr_prev = NULL;
 800d4ae:	2300      	movs	r3, #0
 800d4b0:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d4b2:	e010      	b.n	800d4d6 <ip4_reass+0x25a>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800d4b4:	4b1a      	ldr	r3, [pc, #104]	; (800d520 <ip4_reass+0x2a4>)
 800d4b6:	681b      	ldr	r3, [r3, #0]
 800d4b8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d4ba:	e007      	b.n	800d4cc <ip4_reass+0x250>
        if (ipr_prev->next == ipr) {
 800d4bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d4be:	681b      	ldr	r3, [r3, #0]
 800d4c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d4c2:	429a      	cmp	r2, r3
 800d4c4:	d006      	beq.n	800d4d4 <ip4_reass+0x258>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800d4c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d4c8:	681b      	ldr	r3, [r3, #0]
 800d4ca:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d4cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d4ce:	2b00      	cmp	r3, #0
 800d4d0:	d1f4      	bne.n	800d4bc <ip4_reass+0x240>
 800d4d2:	e000      	b.n	800d4d6 <ip4_reass+0x25a>
          break;
 800d4d4:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 800d4d6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d4d8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d4da:	f7ff fd37 	bl	800cf4c <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    ip_reass_pbufcount -= pbuf_clen(p);
 800d4de:	6878      	ldr	r0, [r7, #4]
 800d4e0:	f7f6 ff7e 	bl	80043e0 <pbuf_clen>
 800d4e4:	4603      	mov	r3, r0
 800d4e6:	461a      	mov	r2, r3
 800d4e8:	4b0c      	ldr	r3, [pc, #48]	; (800d51c <ip4_reass+0x2a0>)
 800d4ea:	881b      	ldrh	r3, [r3, #0]
 800d4ec:	1a9b      	subs	r3, r3, r2
 800d4ee:	b29a      	uxth	r2, r3
 800d4f0:	4b0a      	ldr	r3, [pc, #40]	; (800d51c <ip4_reass+0x2a0>)
 800d4f2:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 800d4f4:	687b      	ldr	r3, [r7, #4]
 800d4f6:	e00c      	b.n	800d512 <ip4_reass+0x296>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG,("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 800d4f8:	2300      	movs	r3, #0
 800d4fa:	e00a      	b.n	800d512 <ip4_reass+0x296>
    goto nullreturn;
 800d4fc:	bf00      	nop
 800d4fe:	e004      	b.n	800d50a <ip4_reass+0x28e>
      goto nullreturn;
 800d500:	bf00      	nop
 800d502:	e002      	b.n	800d50a <ip4_reass+0x28e>
      goto nullreturn;
 800d504:	bf00      	nop
 800d506:	e000      	b.n	800d50a <ip4_reass+0x28e>
    goto nullreturn;
 800d508:	bf00      	nop

nullreturn:
  LWIP_DEBUGF(IP_REASS_DEBUG,("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 800d50a:	6878      	ldr	r0, [r7, #4]
 800d50c:	f7f6 fed4 	bl	80042b8 <pbuf_free>
  return NULL;
 800d510:	2300      	movs	r3, #0
}
 800d512:	4618      	mov	r0, r3
 800d514:	3738      	adds	r7, #56	; 0x38
 800d516:	46bd      	mov	sp, r7
 800d518:	bd80      	pop	{r7, pc}
 800d51a:	bf00      	nop
 800d51c:	20000214 	.word	0x20000214
 800d520:	20000210 	.word	0x20000210

0800d524 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref*
ip_frag_alloc_pbuf_custom_ref(void)
{
 800d524:	b580      	push	{r7, lr}
 800d526:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref*)memp_malloc(MEMP_FRAG_PBUF);
 800d528:	2005      	movs	r0, #5
 800d52a:	f7f6 f93b 	bl	80037a4 <memp_malloc>
 800d52e:	4603      	mov	r3, r0
}
 800d530:	4618      	mov	r0, r3
 800d532:	bd80      	pop	{r7, pc}

0800d534 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref* p)
{
 800d534:	b580      	push	{r7, lr}
 800d536:	b082      	sub	sp, #8
 800d538:	af00      	add	r7, sp, #0
 800d53a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 800d53c:	687b      	ldr	r3, [r7, #4]
 800d53e:	2b00      	cmp	r3, #0
 800d540:	d106      	bne.n	800d550 <ip_frag_free_pbuf_custom_ref+0x1c>
 800d542:	4b07      	ldr	r3, [pc, #28]	; (800d560 <ip_frag_free_pbuf_custom_ref+0x2c>)
 800d544:	f240 22ae 	movw	r2, #686	; 0x2ae
 800d548:	4906      	ldr	r1, [pc, #24]	; (800d564 <ip_frag_free_pbuf_custom_ref+0x30>)
 800d54a:	4807      	ldr	r0, [pc, #28]	; (800d568 <ip_frag_free_pbuf_custom_ref+0x34>)
 800d54c:	f000 fa88 	bl	800da60 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 800d550:	6879      	ldr	r1, [r7, #4]
 800d552:	2005      	movs	r0, #5
 800d554:	f7f6 f972 	bl	800383c <memp_free>
}
 800d558:	bf00      	nop
 800d55a:	3708      	adds	r7, #8
 800d55c:	46bd      	mov	sp, r7
 800d55e:	bd80      	pop	{r7, pc}
 800d560:	080109f4 	.word	0x080109f4
 800d564:	08010b5c 	.word	0x08010b5c
 800d568:	08010a3c 	.word	0x08010a3c

0800d56c <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 800d56c:	b580      	push	{r7, lr}
 800d56e:	b084      	sub	sp, #16
 800d570:	af00      	add	r7, sp, #0
 800d572:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref*)p;
 800d574:	687b      	ldr	r3, [r7, #4]
 800d576:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 800d578:	68fb      	ldr	r3, [r7, #12]
 800d57a:	2b00      	cmp	r3, #0
 800d57c:	d106      	bne.n	800d58c <ipfrag_free_pbuf_custom+0x20>
 800d57e:	4b11      	ldr	r3, [pc, #68]	; (800d5c4 <ipfrag_free_pbuf_custom+0x58>)
 800d580:	f44f 722e 	mov.w	r2, #696	; 0x2b8
 800d584:	4910      	ldr	r1, [pc, #64]	; (800d5c8 <ipfrag_free_pbuf_custom+0x5c>)
 800d586:	4811      	ldr	r0, [pc, #68]	; (800d5cc <ipfrag_free_pbuf_custom+0x60>)
 800d588:	f000 fa6a 	bl	800da60 <iprintf>
  LWIP_ASSERT("pcr == p", (void*)pcr == (void*)p);
 800d58c:	68fa      	ldr	r2, [r7, #12]
 800d58e:	687b      	ldr	r3, [r7, #4]
 800d590:	429a      	cmp	r2, r3
 800d592:	d006      	beq.n	800d5a2 <ipfrag_free_pbuf_custom+0x36>
 800d594:	4b0b      	ldr	r3, [pc, #44]	; (800d5c4 <ipfrag_free_pbuf_custom+0x58>)
 800d596:	f240 22b9 	movw	r2, #697	; 0x2b9
 800d59a:	490d      	ldr	r1, [pc, #52]	; (800d5d0 <ipfrag_free_pbuf_custom+0x64>)
 800d59c:	480b      	ldr	r0, [pc, #44]	; (800d5cc <ipfrag_free_pbuf_custom+0x60>)
 800d59e:	f000 fa5f 	bl	800da60 <iprintf>
  if (pcr->original != NULL) {
 800d5a2:	68fb      	ldr	r3, [r7, #12]
 800d5a4:	695b      	ldr	r3, [r3, #20]
 800d5a6:	2b00      	cmp	r3, #0
 800d5a8:	d004      	beq.n	800d5b4 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 800d5aa:	68fb      	ldr	r3, [r7, #12]
 800d5ac:	695b      	ldr	r3, [r3, #20]
 800d5ae:	4618      	mov	r0, r3
 800d5b0:	f7f6 fe82 	bl	80042b8 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 800d5b4:	68f8      	ldr	r0, [r7, #12]
 800d5b6:	f7ff ffbd 	bl	800d534 <ip_frag_free_pbuf_custom_ref>
}
 800d5ba:	bf00      	nop
 800d5bc:	3710      	adds	r7, #16
 800d5be:	46bd      	mov	sp, r7
 800d5c0:	bd80      	pop	{r7, pc}
 800d5c2:	bf00      	nop
 800d5c4:	080109f4 	.word	0x080109f4
 800d5c8:	08010b68 	.word	0x08010b68
 800d5cc:	08010a3c 	.word	0x08010a3c
 800d5d0:	08010b74 	.word	0x08010b74

0800d5d4 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 800d5d4:	b580      	push	{r7, lr}
 800d5d6:	b092      	sub	sp, #72	; 0x48
 800d5d8:	af02      	add	r7, sp, #8
 800d5da:	60f8      	str	r0, [r7, #12]
 800d5dc:	60b9      	str	r1, [r7, #8]
 800d5de:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 800d5e0:	2300      	movs	r3, #0
 800d5e2:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (netif->mtu - IP_HLEN) / 8;
 800d5e4:	68bb      	ldr	r3, [r7, #8]
 800d5e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d5e8:	3b14      	subs	r3, #20
 800d5ea:	2b00      	cmp	r3, #0
 800d5ec:	da00      	bge.n	800d5f0 <ip4_frag+0x1c>
 800d5ee:	3307      	adds	r3, #7
 800d5f0:	10db      	asrs	r3, r3, #3
 800d5f2:	867b      	strh	r3, [r7, #50]	; 0x32
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 800d5f4:	2314      	movs	r3, #20
 800d5f6:	86fb      	strh	r3, [r7, #54]	; 0x36
  u16_t tmp;

  original_iphdr = (struct ip_hdr *)p->payload;
 800d5f8:	68fb      	ldr	r3, [r7, #12]
 800d5fa:	685b      	ldr	r3, [r3, #4]
 800d5fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  iphdr = original_iphdr;
 800d5fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d600:	62bb      	str	r3, [r7, #40]	; 0x28
  LWIP_ERROR("ip4_frag() does not support IP options", IPH_HL(iphdr) * 4 == IP_HLEN, return ERR_VAL);
 800d602:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d604:	781b      	ldrb	r3, [r3, #0]
 800d606:	f003 030f 	and.w	r3, r3, #15
 800d60a:	009b      	lsls	r3, r3, #2
 800d60c:	2b14      	cmp	r3, #20
 800d60e:	d009      	beq.n	800d624 <ip4_frag+0x50>
 800d610:	4b7a      	ldr	r3, [pc, #488]	; (800d7fc <ip4_frag+0x228>)
 800d612:	f240 22e1 	movw	r2, #737	; 0x2e1
 800d616:	497a      	ldr	r1, [pc, #488]	; (800d800 <ip4_frag+0x22c>)
 800d618:	487a      	ldr	r0, [pc, #488]	; (800d804 <ip4_frag+0x230>)
 800d61a:	f000 fa21 	bl	800da60 <iprintf>
 800d61e:	f06f 0305 	mvn.w	r3, #5
 800d622:	e0e6      	b.n	800d7f2 <ip4_frag+0x21e>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 800d624:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d626:	88db      	ldrh	r3, [r3, #6]
 800d628:	b29b      	uxth	r3, r3
 800d62a:	4618      	mov	r0, r3
 800d62c:	f7f5 fd11 	bl	8003052 <lwip_htons>
 800d630:	4603      	mov	r3, r0
 800d632:	86bb      	strh	r3, [r7, #52]	; 0x34
  ofo = tmp & IP_OFFMASK;
 800d634:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800d636:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d63a:	873b      	strh	r3, [r7, #56]	; 0x38
  LWIP_ERROR("ip_frag(): MF already set", (tmp & IP_MF) == 0, return ERR_VAL);
 800d63c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800d63e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800d642:	2b00      	cmp	r3, #0
 800d644:	d009      	beq.n	800d65a <ip4_frag+0x86>
 800d646:	4b6d      	ldr	r3, [pc, #436]	; (800d7fc <ip4_frag+0x228>)
 800d648:	f240 22e6 	movw	r2, #742	; 0x2e6
 800d64c:	496e      	ldr	r1, [pc, #440]	; (800d808 <ip4_frag+0x234>)
 800d64e:	486d      	ldr	r0, [pc, #436]	; (800d804 <ip4_frag+0x230>)
 800d650:	f000 fa06 	bl	800da60 <iprintf>
 800d654:	f06f 0305 	mvn.w	r3, #5
 800d658:	e0cb      	b.n	800d7f2 <ip4_frag+0x21e>

  left = p->tot_len - IP_HLEN;
 800d65a:	68fb      	ldr	r3, [r7, #12]
 800d65c:	891b      	ldrh	r3, [r3, #8]
 800d65e:	3b14      	subs	r3, #20
 800d660:	877b      	strh	r3, [r7, #58]	; 0x3a

  while (left) {
 800d662:	e0bd      	b.n	800d7e0 <ip4_frag+0x20c>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, nfb * 8);
 800d664:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800d666:	00da      	lsls	r2, r3, #3
 800d668:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800d66a:	4293      	cmp	r3, r2
 800d66c:	bfa8      	it	ge
 800d66e:	4613      	movge	r3, r2
 800d670:	84fb      	strh	r3, [r7, #38]	; 0x26
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 800d672:	2200      	movs	r2, #0
 800d674:	2114      	movs	r1, #20
 800d676:	2002      	movs	r0, #2
 800d678:	f7f6 faac 	bl	8003bd4 <pbuf_alloc>
 800d67c:	6238      	str	r0, [r7, #32]
    if (rambuf == NULL) {
 800d67e:	6a3b      	ldr	r3, [r7, #32]
 800d680:	2b00      	cmp	r3, #0
 800d682:	f000 80b3 	beq.w	800d7ec <ip4_frag+0x218>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 800d686:	68fb      	ldr	r3, [r7, #12]
 800d688:	895b      	ldrh	r3, [r3, #10]
 800d68a:	2b13      	cmp	r3, #19
 800d68c:	d806      	bhi.n	800d69c <ip4_frag+0xc8>
 800d68e:	4b5b      	ldr	r3, [pc, #364]	; (800d7fc <ip4_frag+0x228>)
 800d690:	f44f 7242 	mov.w	r2, #776	; 0x308
 800d694:	495d      	ldr	r1, [pc, #372]	; (800d80c <ip4_frag+0x238>)
 800d696:	485b      	ldr	r0, [pc, #364]	; (800d804 <ip4_frag+0x230>)
 800d698:	f000 f9e2 	bl	800da60 <iprintf>
                (p->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 800d69c:	6a3b      	ldr	r3, [r7, #32]
 800d69e:	685b      	ldr	r3, [r3, #4]
 800d6a0:	2214      	movs	r2, #20
 800d6a2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d6a4:	4618      	mov	r0, r3
 800d6a6:	f000 f9c5 	bl	800da34 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 800d6aa:	6a3b      	ldr	r3, [r7, #32]
 800d6ac:	685b      	ldr	r3, [r3, #4]
 800d6ae:	62bb      	str	r3, [r7, #40]	; 0x28

    left_to_copy = fragsize;
 800d6b0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800d6b2:	87bb      	strh	r3, [r7, #60]	; 0x3c
    while (left_to_copy) {
 800d6b4:	e04f      	b.n	800d756 <ip4_frag+0x182>
      struct pbuf_custom_ref *pcr;
      u16_t plen = p->len - poff;
 800d6b6:	68fb      	ldr	r3, [r7, #12]
 800d6b8:	895a      	ldrh	r2, [r3, #10]
 800d6ba:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800d6bc:	1ad3      	subs	r3, r2, r3
 800d6be:	837b      	strh	r3, [r7, #26]
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 800d6c0:	8b7a      	ldrh	r2, [r7, #26]
 800d6c2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800d6c4:	4293      	cmp	r3, r2
 800d6c6:	bf28      	it	cs
 800d6c8:	4613      	movcs	r3, r2
 800d6ca:	87fb      	strh	r3, [r7, #62]	; 0x3e
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 800d6cc:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800d6ce:	2b00      	cmp	r3, #0
 800d6d0:	d105      	bne.n	800d6de <ip4_frag+0x10a>
        poff = 0;
 800d6d2:	2300      	movs	r3, #0
 800d6d4:	86fb      	strh	r3, [r7, #54]	; 0x36
        p = p->next;
 800d6d6:	68fb      	ldr	r3, [r7, #12]
 800d6d8:	681b      	ldr	r3, [r3, #0]
 800d6da:	60fb      	str	r3, [r7, #12]
        continue;
 800d6dc:	e03b      	b.n	800d756 <ip4_frag+0x182>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 800d6de:	f7ff ff21 	bl	800d524 <ip_frag_alloc_pbuf_custom_ref>
 800d6e2:	6178      	str	r0, [r7, #20]
      if (pcr == NULL) {
 800d6e4:	697b      	ldr	r3, [r7, #20]
 800d6e6:	2b00      	cmp	r3, #0
 800d6e8:	d103      	bne.n	800d6f2 <ip4_frag+0x11e>
        pbuf_free(rambuf);
 800d6ea:	6a38      	ldr	r0, [r7, #32]
 800d6ec:	f7f6 fde4 	bl	80042b8 <pbuf_free>
        goto memerr;
 800d6f0:	e07d      	b.n	800d7ee <ip4_frag+0x21a>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800d6f2:	6978      	ldr	r0, [r7, #20]
        (u8_t*)p->payload + poff, newpbuflen);
 800d6f4:	68fb      	ldr	r3, [r7, #12]
 800d6f6:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800d6f8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800d6fa:	4413      	add	r3, r2
 800d6fc:	8ff9      	ldrh	r1, [r7, #62]	; 0x3e
 800d6fe:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800d700:	9201      	str	r2, [sp, #4]
 800d702:	9300      	str	r3, [sp, #0]
 800d704:	4603      	mov	r3, r0
 800d706:	2202      	movs	r2, #2
 800d708:	2004      	movs	r0, #4
 800d70a:	f7f6 fbf7 	bl	8003efc <pbuf_alloced_custom>
 800d70e:	6138      	str	r0, [r7, #16]
      if (newpbuf == NULL) {
 800d710:	693b      	ldr	r3, [r7, #16]
 800d712:	2b00      	cmp	r3, #0
 800d714:	d106      	bne.n	800d724 <ip4_frag+0x150>
        ip_frag_free_pbuf_custom_ref(pcr);
 800d716:	6978      	ldr	r0, [r7, #20]
 800d718:	f7ff ff0c 	bl	800d534 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 800d71c:	6a38      	ldr	r0, [r7, #32]
 800d71e:	f7f6 fdcb 	bl	80042b8 <pbuf_free>
        goto memerr;
 800d722:	e064      	b.n	800d7ee <ip4_frag+0x21a>
      }
      pbuf_ref(p);
 800d724:	68f8      	ldr	r0, [r7, #12]
 800d726:	f7f6 fe71 	bl	800440c <pbuf_ref>
      pcr->original = p;
 800d72a:	697b      	ldr	r3, [r7, #20]
 800d72c:	68fa      	ldr	r2, [r7, #12]
 800d72e:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 800d730:	697b      	ldr	r3, [r7, #20]
 800d732:	4a37      	ldr	r2, [pc, #220]	; (800d810 <ip4_frag+0x23c>)
 800d734:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 800d736:	6939      	ldr	r1, [r7, #16]
 800d738:	6a38      	ldr	r0, [r7, #32]
 800d73a:	f7f6 fe89 	bl	8004450 <pbuf_cat>
      left_to_copy -= newpbuflen;
 800d73e:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 800d740:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800d742:	1ad3      	subs	r3, r2, r3
 800d744:	87bb      	strh	r3, [r7, #60]	; 0x3c
      if (left_to_copy) {
 800d746:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800d748:	2b00      	cmp	r3, #0
 800d74a:	d004      	beq.n	800d756 <ip4_frag+0x182>
        poff = 0;
 800d74c:	2300      	movs	r3, #0
 800d74e:	86fb      	strh	r3, [r7, #54]	; 0x36
        p = p->next;
 800d750:	68fb      	ldr	r3, [r7, #12]
 800d752:	681b      	ldr	r3, [r3, #0]
 800d754:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 800d756:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800d758:	2b00      	cmp	r3, #0
 800d75a:	d1ac      	bne.n	800d6b6 <ip4_frag+0xe2>
      }
    }
    poff += newpbuflen;
 800d75c:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800d75e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800d760:	4413      	add	r3, r2
 800d762:	86fb      	strh	r3, [r7, #54]	; 0x36
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 800d764:	68bb      	ldr	r3, [r7, #8]
 800d766:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d768:	f1a3 0213 	sub.w	r2, r3, #19
 800d76c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800d76e:	429a      	cmp	r2, r3
 800d770:	bfcc      	ite	gt
 800d772:	2301      	movgt	r3, #1
 800d774:	2300      	movle	r3, #0
 800d776:	b2db      	uxtb	r3, r3
 800d778:	61fb      	str	r3, [r7, #28]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 800d77a:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800d77c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d780:	86bb      	strh	r3, [r7, #52]	; 0x34
    if (!last) {
 800d782:	69fb      	ldr	r3, [r7, #28]
 800d784:	2b00      	cmp	r3, #0
 800d786:	d103      	bne.n	800d790 <ip4_frag+0x1bc>
      tmp = tmp | IP_MF;
 800d788:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800d78a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800d78e:	86bb      	strh	r3, [r7, #52]	; 0x34
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 800d790:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800d792:	4618      	mov	r0, r3
 800d794:	f7f5 fc5d 	bl	8003052 <lwip_htons>
 800d798:	4603      	mov	r3, r0
 800d79a:	461a      	mov	r2, r3
 800d79c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d79e:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons(fragsize + IP_HLEN));
 800d7a0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800d7a2:	3314      	adds	r3, #20
 800d7a4:	b29b      	uxth	r3, r3
 800d7a6:	4618      	mov	r0, r3
 800d7a8:	f7f5 fc53 	bl	8003052 <lwip_htons>
 800d7ac:	4603      	mov	r3, r0
 800d7ae:	461a      	mov	r2, r3
 800d7b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7b2:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 800d7b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7b6:	2200      	movs	r2, #0
 800d7b8:	729a      	strb	r2, [r3, #10]
 800d7ba:	2200      	movs	r2, #0
 800d7bc:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 800d7be:	68bb      	ldr	r3, [r7, #8]
 800d7c0:	695b      	ldr	r3, [r3, #20]
 800d7c2:	687a      	ldr	r2, [r7, #4]
 800d7c4:	6a39      	ldr	r1, [r7, #32]
 800d7c6:	68b8      	ldr	r0, [r7, #8]
 800d7c8:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 800d7ca:	6a38      	ldr	r0, [r7, #32]
 800d7cc:	f7f6 fd74 	bl	80042b8 <pbuf_free>
    left -= fragsize;
 800d7d0:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800d7d2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800d7d4:	1ad3      	subs	r3, r2, r3
 800d7d6:	877b      	strh	r3, [r7, #58]	; 0x3a
    ofo += nfb;
 800d7d8:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 800d7da:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800d7dc:	4413      	add	r3, r2
 800d7de:	873b      	strh	r3, [r7, #56]	; 0x38
  while (left) {
 800d7e0:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800d7e2:	2b00      	cmp	r3, #0
 800d7e4:	f47f af3e 	bne.w	800d664 <ip4_frag+0x90>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 800d7e8:	2300      	movs	r3, #0
 800d7ea:	e002      	b.n	800d7f2 <ip4_frag+0x21e>
      goto memerr;
 800d7ec:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 800d7ee:	f04f 33ff 	mov.w	r3, #4294967295
}
 800d7f2:	4618      	mov	r0, r3
 800d7f4:	3740      	adds	r7, #64	; 0x40
 800d7f6:	46bd      	mov	sp, r7
 800d7f8:	bd80      	pop	{r7, pc}
 800d7fa:	bf00      	nop
 800d7fc:	080109f4 	.word	0x080109f4
 800d800:	08010b80 	.word	0x08010b80
 800d804:	08010a3c 	.word	0x08010a3c
 800d808:	08010ba8 	.word	0x08010ba8
 800d80c:	08010bc4 	.word	0x08010bc4
 800d810:	0800d56d 	.word	0x0800d56d

0800d814 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 800d814:	b580      	push	{r7, lr}
 800d816:	b086      	sub	sp, #24
 800d818:	af00      	add	r7, sp, #0
 800d81a:	6078      	str	r0, [r7, #4]
 800d81c:	6039      	str	r1, [r7, #0]
  struct eth_hdr* ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  s16_t ip_hdr_offset = SIZEOF_ETH_HDR;
 800d81e:	230e      	movs	r3, #14
 800d820:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  if (p->len <= SIZEOF_ETH_HDR) {
 800d822:	687b      	ldr	r3, [r7, #4]
 800d824:	895b      	ldrh	r3, [r3, #10]
 800d826:	2b0e      	cmp	r3, #14
 800d828:	d977      	bls.n	800d91a <ethernet_input+0x106>
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 800d82a:	687b      	ldr	r3, [r7, #4]
 800d82c:	685b      	ldr	r3, [r3, #4]
 800d82e:	613b      	str	r3, [r7, #16]
     (unsigned)ethhdr->dest.addr[3], (unsigned)ethhdr->dest.addr[4], (unsigned)ethhdr->dest.addr[5],
     (unsigned)ethhdr->src.addr[0],  (unsigned)ethhdr->src.addr[1],  (unsigned)ethhdr->src.addr[2],
     (unsigned)ethhdr->src.addr[3],  (unsigned)ethhdr->src.addr[4],  (unsigned)ethhdr->src.addr[5],
     lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 800d830:	693b      	ldr	r3, [r7, #16]
 800d832:	7b1a      	ldrb	r2, [r3, #12]
 800d834:	7b5b      	ldrb	r3, [r3, #13]
 800d836:	021b      	lsls	r3, r3, #8
 800d838:	4313      	orrs	r3, r2
 800d83a:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 800d83c:	693b      	ldr	r3, [r7, #16]
 800d83e:	781b      	ldrb	r3, [r3, #0]
 800d840:	f003 0301 	and.w	r3, r3, #1
 800d844:	2b00      	cmp	r3, #0
 800d846:	d023      	beq.n	800d890 <ethernet_input+0x7c>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 800d848:	693b      	ldr	r3, [r7, #16]
 800d84a:	781b      	ldrb	r3, [r3, #0]
 800d84c:	2b01      	cmp	r3, #1
 800d84e:	d10f      	bne.n	800d870 <ethernet_input+0x5c>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800d850:	693b      	ldr	r3, [r7, #16]
 800d852:	785b      	ldrb	r3, [r3, #1]
 800d854:	2b00      	cmp	r3, #0
 800d856:	d11b      	bne.n	800d890 <ethernet_input+0x7c>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 800d858:	693b      	ldr	r3, [r7, #16]
 800d85a:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800d85c:	2b5e      	cmp	r3, #94	; 0x5e
 800d85e:	d117      	bne.n	800d890 <ethernet_input+0x7c>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 800d860:	687b      	ldr	r3, [r7, #4]
 800d862:	7b5b      	ldrb	r3, [r3, #13]
 800d864:	f043 0310 	orr.w	r3, r3, #16
 800d868:	b2da      	uxtb	r2, r3
 800d86a:	687b      	ldr	r3, [r7, #4]
 800d86c:	735a      	strb	r2, [r3, #13]
 800d86e:	e00f      	b.n	800d890 <ethernet_input+0x7c>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 800d870:	693b      	ldr	r3, [r7, #16]
 800d872:	2206      	movs	r2, #6
 800d874:	4931      	ldr	r1, [pc, #196]	; (800d93c <ethernet_input+0x128>)
 800d876:	4618      	mov	r0, r3
 800d878:	f000 f8ce 	bl	800da18 <memcmp>
 800d87c:	4603      	mov	r3, r0
 800d87e:	2b00      	cmp	r3, #0
 800d880:	d106      	bne.n	800d890 <ethernet_input+0x7c>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 800d882:	687b      	ldr	r3, [r7, #4]
 800d884:	7b5b      	ldrb	r3, [r3, #13]
 800d886:	f043 0308 	orr.w	r3, r3, #8
 800d88a:	b2da      	uxtb	r2, r3
 800d88c:	687b      	ldr	r3, [r7, #4]
 800d88e:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 800d890:	89fb      	ldrh	r3, [r7, #14]
 800d892:	2b08      	cmp	r3, #8
 800d894:	d003      	beq.n	800d89e <ethernet_input+0x8a>
 800d896:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 800d89a:	d01e      	beq.n	800d8da <ethernet_input+0xc6>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 800d89c:	e046      	b.n	800d92c <ethernet_input+0x118>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800d89e:	683b      	ldr	r3, [r7, #0]
 800d8a0:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 800d8a4:	f003 0308 	and.w	r3, r3, #8
 800d8a8:	2b00      	cmp	r3, #0
 800d8aa:	d038      	beq.n	800d91e <ethernet_input+0x10a>
      if ((p->len < ip_hdr_offset) || pbuf_header(p, (s16_t)-ip_hdr_offset)) {
 800d8ac:	687b      	ldr	r3, [r7, #4]
 800d8ae:	895b      	ldrh	r3, [r3, #10]
 800d8b0:	461a      	mov	r2, r3
 800d8b2:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800d8b6:	429a      	cmp	r2, r3
 800d8b8:	db33      	blt.n	800d922 <ethernet_input+0x10e>
 800d8ba:	8afb      	ldrh	r3, [r7, #22]
 800d8bc:	425b      	negs	r3, r3
 800d8be:	b29b      	uxth	r3, r3
 800d8c0:	b21b      	sxth	r3, r3
 800d8c2:	4619      	mov	r1, r3
 800d8c4:	6878      	ldr	r0, [r7, #4]
 800d8c6:	f7f6 fcd3 	bl	8004270 <pbuf_header>
 800d8ca:	4603      	mov	r3, r0
 800d8cc:	2b00      	cmp	r3, #0
 800d8ce:	d128      	bne.n	800d922 <ethernet_input+0x10e>
        ip4_input(p, netif);
 800d8d0:	6839      	ldr	r1, [r7, #0]
 800d8d2:	6878      	ldr	r0, [r7, #4]
 800d8d4:	f7fe ff5e 	bl	800c794 <ip4_input>
      break;
 800d8d8:	e01d      	b.n	800d916 <ethernet_input+0x102>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800d8da:	683b      	ldr	r3, [r7, #0]
 800d8dc:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 800d8e0:	f003 0308 	and.w	r3, r3, #8
 800d8e4:	2b00      	cmp	r3, #0
 800d8e6:	d01e      	beq.n	800d926 <ethernet_input+0x112>
      if ((p->len < ip_hdr_offset) || pbuf_header(p, (s16_t)-ip_hdr_offset)) {
 800d8e8:	687b      	ldr	r3, [r7, #4]
 800d8ea:	895b      	ldrh	r3, [r3, #10]
 800d8ec:	461a      	mov	r2, r3
 800d8ee:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800d8f2:	429a      	cmp	r2, r3
 800d8f4:	db19      	blt.n	800d92a <ethernet_input+0x116>
 800d8f6:	8afb      	ldrh	r3, [r7, #22]
 800d8f8:	425b      	negs	r3, r3
 800d8fa:	b29b      	uxth	r3, r3
 800d8fc:	b21b      	sxth	r3, r3
 800d8fe:	4619      	mov	r1, r3
 800d900:	6878      	ldr	r0, [r7, #4]
 800d902:	f7f6 fcb5 	bl	8004270 <pbuf_header>
 800d906:	4603      	mov	r3, r0
 800d908:	2b00      	cmp	r3, #0
 800d90a:	d10e      	bne.n	800d92a <ethernet_input+0x116>
        etharp_input(p, netif);
 800d90c:	6839      	ldr	r1, [r7, #0]
 800d90e:	6878      	ldr	r0, [r7, #4]
 800d910:	f7fe f92a 	bl	800bb68 <etharp_input>
      break;
 800d914:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 800d916:	2300      	movs	r3, #0
 800d918:	e00c      	b.n	800d934 <ethernet_input+0x120>
    goto free_and_return;
 800d91a:	bf00      	nop
 800d91c:	e006      	b.n	800d92c <ethernet_input+0x118>
        goto free_and_return;
 800d91e:	bf00      	nop
 800d920:	e004      	b.n	800d92c <ethernet_input+0x118>
        goto free_and_return;
 800d922:	bf00      	nop
 800d924:	e002      	b.n	800d92c <ethernet_input+0x118>
        goto free_and_return;
 800d926:	bf00      	nop
 800d928:	e000      	b.n	800d92c <ethernet_input+0x118>
        goto free_and_return;
 800d92a:	bf00      	nop

free_and_return:
  pbuf_free(p);
 800d92c:	6878      	ldr	r0, [r7, #4]
 800d92e:	f7f6 fcc3 	bl	80042b8 <pbuf_free>
  return ERR_OK;
 800d932:	2300      	movs	r3, #0
}
 800d934:	4618      	mov	r0, r3
 800d936:	3718      	adds	r7, #24
 800d938:	46bd      	mov	sp, r7
 800d93a:	bd80      	pop	{r7, pc}
 800d93c:	08010d70 	.word	0x08010d70

0800d940 <ethernet_output>:
 */
err_t
ethernet_output(struct netif* netif, struct pbuf* p,
                const struct eth_addr* src, const struct eth_addr* dst,
                u16_t eth_type)
{
 800d940:	b580      	push	{r7, lr}
 800d942:	b086      	sub	sp, #24
 800d944:	af00      	add	r7, sp, #0
 800d946:	60f8      	str	r0, [r7, #12]
 800d948:	60b9      	str	r1, [r7, #8]
 800d94a:	607a      	str	r2, [r7, #4]
 800d94c:	603b      	str	r3, [r7, #0]
  struct eth_hdr* ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 800d94e:	8c3b      	ldrh	r3, [r7, #32]
 800d950:	4618      	mov	r0, r3
 800d952:	f7f5 fb7e 	bl	8003052 <lwip_htons>
 800d956:	4603      	mov	r3, r0
 800d958:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_header(p, SIZEOF_ETH_HDR) != 0) {
 800d95a:	210e      	movs	r1, #14
 800d95c:	68b8      	ldr	r0, [r7, #8]
 800d95e:	f7f6 fc87 	bl	8004270 <pbuf_header>
 800d962:	4603      	mov	r3, r0
 800d964:	2b00      	cmp	r3, #0
 800d966:	d125      	bne.n	800d9b4 <ethernet_output+0x74>
      goto pbuf_header_failed;
    }
  }

  ethhdr = (struct eth_hdr*)p->payload;
 800d968:	68bb      	ldr	r3, [r7, #8]
 800d96a:	685b      	ldr	r3, [r3, #4]
 800d96c:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 800d96e:	693b      	ldr	r3, [r7, #16]
 800d970:	8afa      	ldrh	r2, [r7, #22]
 800d972:	819a      	strh	r2, [r3, #12]
  ETHADDR32_COPY(&ethhdr->dest, dst);
 800d974:	693b      	ldr	r3, [r7, #16]
 800d976:	2206      	movs	r2, #6
 800d978:	6839      	ldr	r1, [r7, #0]
 800d97a:	4618      	mov	r0, r3
 800d97c:	f000 f85a 	bl	800da34 <memcpy>
  ETHADDR16_COPY(&ethhdr->src,  src);
 800d980:	693b      	ldr	r3, [r7, #16]
 800d982:	3306      	adds	r3, #6
 800d984:	2206      	movs	r2, #6
 800d986:	6879      	ldr	r1, [r7, #4]
 800d988:	4618      	mov	r0, r3
 800d98a:	f000 f853 	bl	800da34 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 800d98e:	68fb      	ldr	r3, [r7, #12]
 800d990:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800d994:	2b06      	cmp	r3, #6
 800d996:	d006      	beq.n	800d9a6 <ethernet_output+0x66>
 800d998:	4b0a      	ldr	r3, [pc, #40]	; (800d9c4 <ethernet_output+0x84>)
 800d99a:	f240 122b 	movw	r2, #299	; 0x12b
 800d99e:	490a      	ldr	r1, [pc, #40]	; (800d9c8 <ethernet_output+0x88>)
 800d9a0:	480a      	ldr	r0, [pc, #40]	; (800d9cc <ethernet_output+0x8c>)
 800d9a2:	f000 f85d 	bl	800da60 <iprintf>
    (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
    ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 800d9a6:	68fb      	ldr	r3, [r7, #12]
 800d9a8:	699b      	ldr	r3, [r3, #24]
 800d9aa:	68b9      	ldr	r1, [r7, #8]
 800d9ac:	68f8      	ldr	r0, [r7, #12]
 800d9ae:	4798      	blx	r3
 800d9b0:	4603      	mov	r3, r0
 800d9b2:	e002      	b.n	800d9ba <ethernet_output+0x7a>
      goto pbuf_header_failed;
 800d9b4:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
    ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 800d9b6:	f06f 0301 	mvn.w	r3, #1
}
 800d9ba:	4618      	mov	r0, r3
 800d9bc:	3718      	adds	r7, #24
 800d9be:	46bd      	mov	sp, r7
 800d9c0:	bd80      	pop	{r7, pc}
 800d9c2:	bf00      	nop
 800d9c4:	08010be4 	.word	0x08010be4
 800d9c8:	08010c1c 	.word	0x08010c1c
 800d9cc:	08010c50 	.word	0x08010c50

0800d9d0 <__libc_init_array>:
 800d9d0:	b570      	push	{r4, r5, r6, lr}
 800d9d2:	2600      	movs	r6, #0
 800d9d4:	4d0c      	ldr	r5, [pc, #48]	; (800da08 <__libc_init_array+0x38>)
 800d9d6:	4c0d      	ldr	r4, [pc, #52]	; (800da0c <__libc_init_array+0x3c>)
 800d9d8:	1b64      	subs	r4, r4, r5
 800d9da:	10a4      	asrs	r4, r4, #2
 800d9dc:	42a6      	cmp	r6, r4
 800d9de:	d109      	bne.n	800d9f4 <__libc_init_array+0x24>
 800d9e0:	f001 f862 	bl	800eaa8 <_init>
 800d9e4:	2600      	movs	r6, #0
 800d9e6:	4d0a      	ldr	r5, [pc, #40]	; (800da10 <__libc_init_array+0x40>)
 800d9e8:	4c0a      	ldr	r4, [pc, #40]	; (800da14 <__libc_init_array+0x44>)
 800d9ea:	1b64      	subs	r4, r4, r5
 800d9ec:	10a4      	asrs	r4, r4, #2
 800d9ee:	42a6      	cmp	r6, r4
 800d9f0:	d105      	bne.n	800d9fe <__libc_init_array+0x2e>
 800d9f2:	bd70      	pop	{r4, r5, r6, pc}
 800d9f4:	f855 3b04 	ldr.w	r3, [r5], #4
 800d9f8:	4798      	blx	r3
 800d9fa:	3601      	adds	r6, #1
 800d9fc:	e7ee      	b.n	800d9dc <__libc_init_array+0xc>
 800d9fe:	f855 3b04 	ldr.w	r3, [r5], #4
 800da02:	4798      	blx	r3
 800da04:	3601      	adds	r6, #1
 800da06:	e7f2      	b.n	800d9ee <__libc_init_array+0x1e>
 800da08:	08010ed4 	.word	0x08010ed4
 800da0c:	08010ed4 	.word	0x08010ed4
 800da10:	08010ed4 	.word	0x08010ed4
 800da14:	08010ed8 	.word	0x08010ed8

0800da18 <memcmp>:
 800da18:	b530      	push	{r4, r5, lr}
 800da1a:	2400      	movs	r4, #0
 800da1c:	3901      	subs	r1, #1
 800da1e:	42a2      	cmp	r2, r4
 800da20:	d101      	bne.n	800da26 <memcmp+0xe>
 800da22:	2000      	movs	r0, #0
 800da24:	e005      	b.n	800da32 <memcmp+0x1a>
 800da26:	5d03      	ldrb	r3, [r0, r4]
 800da28:	3401      	adds	r4, #1
 800da2a:	5d0d      	ldrb	r5, [r1, r4]
 800da2c:	42ab      	cmp	r3, r5
 800da2e:	d0f6      	beq.n	800da1e <memcmp+0x6>
 800da30:	1b58      	subs	r0, r3, r5
 800da32:	bd30      	pop	{r4, r5, pc}

0800da34 <memcpy>:
 800da34:	440a      	add	r2, r1
 800da36:	4291      	cmp	r1, r2
 800da38:	f100 33ff 	add.w	r3, r0, #4294967295
 800da3c:	d100      	bne.n	800da40 <memcpy+0xc>
 800da3e:	4770      	bx	lr
 800da40:	b510      	push	{r4, lr}
 800da42:	f811 4b01 	ldrb.w	r4, [r1], #1
 800da46:	4291      	cmp	r1, r2
 800da48:	f803 4f01 	strb.w	r4, [r3, #1]!
 800da4c:	d1f9      	bne.n	800da42 <memcpy+0xe>
 800da4e:	bd10      	pop	{r4, pc}

0800da50 <memset>:
 800da50:	4603      	mov	r3, r0
 800da52:	4402      	add	r2, r0
 800da54:	4293      	cmp	r3, r2
 800da56:	d100      	bne.n	800da5a <memset+0xa>
 800da58:	4770      	bx	lr
 800da5a:	f803 1b01 	strb.w	r1, [r3], #1
 800da5e:	e7f9      	b.n	800da54 <memset+0x4>

0800da60 <iprintf>:
 800da60:	b40f      	push	{r0, r1, r2, r3}
 800da62:	4b0a      	ldr	r3, [pc, #40]	; (800da8c <iprintf+0x2c>)
 800da64:	b513      	push	{r0, r1, r4, lr}
 800da66:	681c      	ldr	r4, [r3, #0]
 800da68:	b124      	cbz	r4, 800da74 <iprintf+0x14>
 800da6a:	69a3      	ldr	r3, [r4, #24]
 800da6c:	b913      	cbnz	r3, 800da74 <iprintf+0x14>
 800da6e:	4620      	mov	r0, r4
 800da70:	f000 f8c4 	bl	800dbfc <__sinit>
 800da74:	ab05      	add	r3, sp, #20
 800da76:	4620      	mov	r0, r4
 800da78:	9a04      	ldr	r2, [sp, #16]
 800da7a:	68a1      	ldr	r1, [r4, #8]
 800da7c:	9301      	str	r3, [sp, #4]
 800da7e:	f000 fa45 	bl	800df0c <_vfiprintf_r>
 800da82:	b002      	add	sp, #8
 800da84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800da88:	b004      	add	sp, #16
 800da8a:	4770      	bx	lr
 800da8c:	20000018 	.word	0x20000018

0800da90 <rand>:
 800da90:	4b17      	ldr	r3, [pc, #92]	; (800daf0 <rand+0x60>)
 800da92:	b510      	push	{r4, lr}
 800da94:	681c      	ldr	r4, [r3, #0]
 800da96:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800da98:	b9b3      	cbnz	r3, 800dac8 <rand+0x38>
 800da9a:	2018      	movs	r0, #24
 800da9c:	f000 f960 	bl	800dd60 <malloc>
 800daa0:	4602      	mov	r2, r0
 800daa2:	63a0      	str	r0, [r4, #56]	; 0x38
 800daa4:	b920      	cbnz	r0, 800dab0 <rand+0x20>
 800daa6:	214e      	movs	r1, #78	; 0x4e
 800daa8:	4b12      	ldr	r3, [pc, #72]	; (800daf4 <rand+0x64>)
 800daaa:	4813      	ldr	r0, [pc, #76]	; (800daf8 <rand+0x68>)
 800daac:	f000 f830 	bl	800db10 <__assert_func>
 800dab0:	4912      	ldr	r1, [pc, #72]	; (800dafc <rand+0x6c>)
 800dab2:	4b13      	ldr	r3, [pc, #76]	; (800db00 <rand+0x70>)
 800dab4:	e9c0 1300 	strd	r1, r3, [r0]
 800dab8:	4b12      	ldr	r3, [pc, #72]	; (800db04 <rand+0x74>)
 800daba:	2100      	movs	r1, #0
 800dabc:	6083      	str	r3, [r0, #8]
 800dabe:	230b      	movs	r3, #11
 800dac0:	8183      	strh	r3, [r0, #12]
 800dac2:	2001      	movs	r0, #1
 800dac4:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800dac8:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800daca:	480f      	ldr	r0, [pc, #60]	; (800db08 <rand+0x78>)
 800dacc:	690a      	ldr	r2, [r1, #16]
 800dace:	694b      	ldr	r3, [r1, #20]
 800dad0:	4350      	muls	r0, r2
 800dad2:	4c0e      	ldr	r4, [pc, #56]	; (800db0c <rand+0x7c>)
 800dad4:	fb04 0003 	mla	r0, r4, r3, r0
 800dad8:	fba2 3404 	umull	r3, r4, r2, r4
 800dadc:	1c5a      	adds	r2, r3, #1
 800dade:	4404      	add	r4, r0
 800dae0:	f144 0000 	adc.w	r0, r4, #0
 800dae4:	e9c1 2004 	strd	r2, r0, [r1, #16]
 800dae8:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800daec:	bd10      	pop	{r4, pc}
 800daee:	bf00      	nop
 800daf0:	20000018 	.word	0x20000018
 800daf4:	08010d84 	.word	0x08010d84
 800daf8:	08010d9b 	.word	0x08010d9b
 800dafc:	abcd330e 	.word	0xabcd330e
 800db00:	e66d1234 	.word	0xe66d1234
 800db04:	0005deec 	.word	0x0005deec
 800db08:	5851f42d 	.word	0x5851f42d
 800db0c:	4c957f2d 	.word	0x4c957f2d

0800db10 <__assert_func>:
 800db10:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800db12:	4614      	mov	r4, r2
 800db14:	461a      	mov	r2, r3
 800db16:	4b09      	ldr	r3, [pc, #36]	; (800db3c <__assert_func+0x2c>)
 800db18:	4605      	mov	r5, r0
 800db1a:	681b      	ldr	r3, [r3, #0]
 800db1c:	68d8      	ldr	r0, [r3, #12]
 800db1e:	b14c      	cbz	r4, 800db34 <__assert_func+0x24>
 800db20:	4b07      	ldr	r3, [pc, #28]	; (800db40 <__assert_func+0x30>)
 800db22:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800db26:	9100      	str	r1, [sp, #0]
 800db28:	462b      	mov	r3, r5
 800db2a:	4906      	ldr	r1, [pc, #24]	; (800db44 <__assert_func+0x34>)
 800db2c:	f000 f8e4 	bl	800dcf8 <fiprintf>
 800db30:	f000 fdd8 	bl	800e6e4 <abort>
 800db34:	4b04      	ldr	r3, [pc, #16]	; (800db48 <__assert_func+0x38>)
 800db36:	461c      	mov	r4, r3
 800db38:	e7f3      	b.n	800db22 <__assert_func+0x12>
 800db3a:	bf00      	nop
 800db3c:	20000018 	.word	0x20000018
 800db40:	08010dfa 	.word	0x08010dfa
 800db44:	08010e07 	.word	0x08010e07
 800db48:	08010e35 	.word	0x08010e35

0800db4c <std>:
 800db4c:	2300      	movs	r3, #0
 800db4e:	b510      	push	{r4, lr}
 800db50:	4604      	mov	r4, r0
 800db52:	e9c0 3300 	strd	r3, r3, [r0]
 800db56:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800db5a:	6083      	str	r3, [r0, #8]
 800db5c:	8181      	strh	r1, [r0, #12]
 800db5e:	6643      	str	r3, [r0, #100]	; 0x64
 800db60:	81c2      	strh	r2, [r0, #14]
 800db62:	6183      	str	r3, [r0, #24]
 800db64:	4619      	mov	r1, r3
 800db66:	2208      	movs	r2, #8
 800db68:	305c      	adds	r0, #92	; 0x5c
 800db6a:	f7ff ff71 	bl	800da50 <memset>
 800db6e:	4b05      	ldr	r3, [pc, #20]	; (800db84 <std+0x38>)
 800db70:	6224      	str	r4, [r4, #32]
 800db72:	6263      	str	r3, [r4, #36]	; 0x24
 800db74:	4b04      	ldr	r3, [pc, #16]	; (800db88 <std+0x3c>)
 800db76:	62a3      	str	r3, [r4, #40]	; 0x28
 800db78:	4b04      	ldr	r3, [pc, #16]	; (800db8c <std+0x40>)
 800db7a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800db7c:	4b04      	ldr	r3, [pc, #16]	; (800db90 <std+0x44>)
 800db7e:	6323      	str	r3, [r4, #48]	; 0x30
 800db80:	bd10      	pop	{r4, pc}
 800db82:	bf00      	nop
 800db84:	0800e4b9 	.word	0x0800e4b9
 800db88:	0800e4db 	.word	0x0800e4db
 800db8c:	0800e513 	.word	0x0800e513
 800db90:	0800e537 	.word	0x0800e537

0800db94 <_cleanup_r>:
 800db94:	4901      	ldr	r1, [pc, #4]	; (800db9c <_cleanup_r+0x8>)
 800db96:	f000 b8c1 	b.w	800dd1c <_fwalk_reent>
 800db9a:	bf00      	nop
 800db9c:	0800e821 	.word	0x0800e821

0800dba0 <__sfmoreglue>:
 800dba0:	b570      	push	{r4, r5, r6, lr}
 800dba2:	2568      	movs	r5, #104	; 0x68
 800dba4:	1e4a      	subs	r2, r1, #1
 800dba6:	4355      	muls	r5, r2
 800dba8:	460e      	mov	r6, r1
 800dbaa:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800dbae:	f000 f92b 	bl	800de08 <_malloc_r>
 800dbb2:	4604      	mov	r4, r0
 800dbb4:	b140      	cbz	r0, 800dbc8 <__sfmoreglue+0x28>
 800dbb6:	2100      	movs	r1, #0
 800dbb8:	e9c0 1600 	strd	r1, r6, [r0]
 800dbbc:	300c      	adds	r0, #12
 800dbbe:	60a0      	str	r0, [r4, #8]
 800dbc0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800dbc4:	f7ff ff44 	bl	800da50 <memset>
 800dbc8:	4620      	mov	r0, r4
 800dbca:	bd70      	pop	{r4, r5, r6, pc}

0800dbcc <__sfp_lock_acquire>:
 800dbcc:	4801      	ldr	r0, [pc, #4]	; (800dbd4 <__sfp_lock_acquire+0x8>)
 800dbce:	f000 b8c5 	b.w	800dd5c <__retarget_lock_acquire_recursive>
 800dbd2:	bf00      	nop
 800dbd4:	200068f0 	.word	0x200068f0

0800dbd8 <__sfp_lock_release>:
 800dbd8:	4801      	ldr	r0, [pc, #4]	; (800dbe0 <__sfp_lock_release+0x8>)
 800dbda:	f000 b8c0 	b.w	800dd5e <__retarget_lock_release_recursive>
 800dbde:	bf00      	nop
 800dbe0:	200068f0 	.word	0x200068f0

0800dbe4 <__sinit_lock_acquire>:
 800dbe4:	4801      	ldr	r0, [pc, #4]	; (800dbec <__sinit_lock_acquire+0x8>)
 800dbe6:	f000 b8b9 	b.w	800dd5c <__retarget_lock_acquire_recursive>
 800dbea:	bf00      	nop
 800dbec:	200068eb 	.word	0x200068eb

0800dbf0 <__sinit_lock_release>:
 800dbf0:	4801      	ldr	r0, [pc, #4]	; (800dbf8 <__sinit_lock_release+0x8>)
 800dbf2:	f000 b8b4 	b.w	800dd5e <__retarget_lock_release_recursive>
 800dbf6:	bf00      	nop
 800dbf8:	200068eb 	.word	0x200068eb

0800dbfc <__sinit>:
 800dbfc:	b510      	push	{r4, lr}
 800dbfe:	4604      	mov	r4, r0
 800dc00:	f7ff fff0 	bl	800dbe4 <__sinit_lock_acquire>
 800dc04:	69a3      	ldr	r3, [r4, #24]
 800dc06:	b11b      	cbz	r3, 800dc10 <__sinit+0x14>
 800dc08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800dc0c:	f7ff bff0 	b.w	800dbf0 <__sinit_lock_release>
 800dc10:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800dc14:	6523      	str	r3, [r4, #80]	; 0x50
 800dc16:	4b13      	ldr	r3, [pc, #76]	; (800dc64 <__sinit+0x68>)
 800dc18:	4a13      	ldr	r2, [pc, #76]	; (800dc68 <__sinit+0x6c>)
 800dc1a:	681b      	ldr	r3, [r3, #0]
 800dc1c:	62a2      	str	r2, [r4, #40]	; 0x28
 800dc1e:	42a3      	cmp	r3, r4
 800dc20:	bf08      	it	eq
 800dc22:	2301      	moveq	r3, #1
 800dc24:	4620      	mov	r0, r4
 800dc26:	bf08      	it	eq
 800dc28:	61a3      	streq	r3, [r4, #24]
 800dc2a:	f000 f81f 	bl	800dc6c <__sfp>
 800dc2e:	6060      	str	r0, [r4, #4]
 800dc30:	4620      	mov	r0, r4
 800dc32:	f000 f81b 	bl	800dc6c <__sfp>
 800dc36:	60a0      	str	r0, [r4, #8]
 800dc38:	4620      	mov	r0, r4
 800dc3a:	f000 f817 	bl	800dc6c <__sfp>
 800dc3e:	2200      	movs	r2, #0
 800dc40:	2104      	movs	r1, #4
 800dc42:	60e0      	str	r0, [r4, #12]
 800dc44:	6860      	ldr	r0, [r4, #4]
 800dc46:	f7ff ff81 	bl	800db4c <std>
 800dc4a:	2201      	movs	r2, #1
 800dc4c:	2109      	movs	r1, #9
 800dc4e:	68a0      	ldr	r0, [r4, #8]
 800dc50:	f7ff ff7c 	bl	800db4c <std>
 800dc54:	2202      	movs	r2, #2
 800dc56:	2112      	movs	r1, #18
 800dc58:	68e0      	ldr	r0, [r4, #12]
 800dc5a:	f7ff ff77 	bl	800db4c <std>
 800dc5e:	2301      	movs	r3, #1
 800dc60:	61a3      	str	r3, [r4, #24]
 800dc62:	e7d1      	b.n	800dc08 <__sinit+0xc>
 800dc64:	08010d80 	.word	0x08010d80
 800dc68:	0800db95 	.word	0x0800db95

0800dc6c <__sfp>:
 800dc6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dc6e:	4607      	mov	r7, r0
 800dc70:	f7ff ffac 	bl	800dbcc <__sfp_lock_acquire>
 800dc74:	4b1e      	ldr	r3, [pc, #120]	; (800dcf0 <__sfp+0x84>)
 800dc76:	681e      	ldr	r6, [r3, #0]
 800dc78:	69b3      	ldr	r3, [r6, #24]
 800dc7a:	b913      	cbnz	r3, 800dc82 <__sfp+0x16>
 800dc7c:	4630      	mov	r0, r6
 800dc7e:	f7ff ffbd 	bl	800dbfc <__sinit>
 800dc82:	3648      	adds	r6, #72	; 0x48
 800dc84:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800dc88:	3b01      	subs	r3, #1
 800dc8a:	d503      	bpl.n	800dc94 <__sfp+0x28>
 800dc8c:	6833      	ldr	r3, [r6, #0]
 800dc8e:	b30b      	cbz	r3, 800dcd4 <__sfp+0x68>
 800dc90:	6836      	ldr	r6, [r6, #0]
 800dc92:	e7f7      	b.n	800dc84 <__sfp+0x18>
 800dc94:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800dc98:	b9d5      	cbnz	r5, 800dcd0 <__sfp+0x64>
 800dc9a:	4b16      	ldr	r3, [pc, #88]	; (800dcf4 <__sfp+0x88>)
 800dc9c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800dca0:	60e3      	str	r3, [r4, #12]
 800dca2:	6665      	str	r5, [r4, #100]	; 0x64
 800dca4:	f000 f859 	bl	800dd5a <__retarget_lock_init_recursive>
 800dca8:	f7ff ff96 	bl	800dbd8 <__sfp_lock_release>
 800dcac:	2208      	movs	r2, #8
 800dcae:	4629      	mov	r1, r5
 800dcb0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800dcb4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800dcb8:	6025      	str	r5, [r4, #0]
 800dcba:	61a5      	str	r5, [r4, #24]
 800dcbc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800dcc0:	f7ff fec6 	bl	800da50 <memset>
 800dcc4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800dcc8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800dccc:	4620      	mov	r0, r4
 800dcce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dcd0:	3468      	adds	r4, #104	; 0x68
 800dcd2:	e7d9      	b.n	800dc88 <__sfp+0x1c>
 800dcd4:	2104      	movs	r1, #4
 800dcd6:	4638      	mov	r0, r7
 800dcd8:	f7ff ff62 	bl	800dba0 <__sfmoreglue>
 800dcdc:	4604      	mov	r4, r0
 800dcde:	6030      	str	r0, [r6, #0]
 800dce0:	2800      	cmp	r0, #0
 800dce2:	d1d5      	bne.n	800dc90 <__sfp+0x24>
 800dce4:	f7ff ff78 	bl	800dbd8 <__sfp_lock_release>
 800dce8:	230c      	movs	r3, #12
 800dcea:	603b      	str	r3, [r7, #0]
 800dcec:	e7ee      	b.n	800dccc <__sfp+0x60>
 800dcee:	bf00      	nop
 800dcf0:	08010d80 	.word	0x08010d80
 800dcf4:	ffff0001 	.word	0xffff0001

0800dcf8 <fiprintf>:
 800dcf8:	b40e      	push	{r1, r2, r3}
 800dcfa:	b503      	push	{r0, r1, lr}
 800dcfc:	4601      	mov	r1, r0
 800dcfe:	ab03      	add	r3, sp, #12
 800dd00:	4805      	ldr	r0, [pc, #20]	; (800dd18 <fiprintf+0x20>)
 800dd02:	f853 2b04 	ldr.w	r2, [r3], #4
 800dd06:	6800      	ldr	r0, [r0, #0]
 800dd08:	9301      	str	r3, [sp, #4]
 800dd0a:	f000 f8ff 	bl	800df0c <_vfiprintf_r>
 800dd0e:	b002      	add	sp, #8
 800dd10:	f85d eb04 	ldr.w	lr, [sp], #4
 800dd14:	b003      	add	sp, #12
 800dd16:	4770      	bx	lr
 800dd18:	20000018 	.word	0x20000018

0800dd1c <_fwalk_reent>:
 800dd1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dd20:	4606      	mov	r6, r0
 800dd22:	4688      	mov	r8, r1
 800dd24:	2700      	movs	r7, #0
 800dd26:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800dd2a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800dd2e:	f1b9 0901 	subs.w	r9, r9, #1
 800dd32:	d505      	bpl.n	800dd40 <_fwalk_reent+0x24>
 800dd34:	6824      	ldr	r4, [r4, #0]
 800dd36:	2c00      	cmp	r4, #0
 800dd38:	d1f7      	bne.n	800dd2a <_fwalk_reent+0xe>
 800dd3a:	4638      	mov	r0, r7
 800dd3c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dd40:	89ab      	ldrh	r3, [r5, #12]
 800dd42:	2b01      	cmp	r3, #1
 800dd44:	d907      	bls.n	800dd56 <_fwalk_reent+0x3a>
 800dd46:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800dd4a:	3301      	adds	r3, #1
 800dd4c:	d003      	beq.n	800dd56 <_fwalk_reent+0x3a>
 800dd4e:	4629      	mov	r1, r5
 800dd50:	4630      	mov	r0, r6
 800dd52:	47c0      	blx	r8
 800dd54:	4307      	orrs	r7, r0
 800dd56:	3568      	adds	r5, #104	; 0x68
 800dd58:	e7e9      	b.n	800dd2e <_fwalk_reent+0x12>

0800dd5a <__retarget_lock_init_recursive>:
 800dd5a:	4770      	bx	lr

0800dd5c <__retarget_lock_acquire_recursive>:
 800dd5c:	4770      	bx	lr

0800dd5e <__retarget_lock_release_recursive>:
 800dd5e:	4770      	bx	lr

0800dd60 <malloc>:
 800dd60:	4b02      	ldr	r3, [pc, #8]	; (800dd6c <malloc+0xc>)
 800dd62:	4601      	mov	r1, r0
 800dd64:	6818      	ldr	r0, [r3, #0]
 800dd66:	f000 b84f 	b.w	800de08 <_malloc_r>
 800dd6a:	bf00      	nop
 800dd6c:	20000018 	.word	0x20000018

0800dd70 <_free_r>:
 800dd70:	b538      	push	{r3, r4, r5, lr}
 800dd72:	4605      	mov	r5, r0
 800dd74:	2900      	cmp	r1, #0
 800dd76:	d043      	beq.n	800de00 <_free_r+0x90>
 800dd78:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800dd7c:	1f0c      	subs	r4, r1, #4
 800dd7e:	2b00      	cmp	r3, #0
 800dd80:	bfb8      	it	lt
 800dd82:	18e4      	addlt	r4, r4, r3
 800dd84:	f000 fe0c 	bl	800e9a0 <__malloc_lock>
 800dd88:	4a1e      	ldr	r2, [pc, #120]	; (800de04 <_free_r+0x94>)
 800dd8a:	6813      	ldr	r3, [r2, #0]
 800dd8c:	4610      	mov	r0, r2
 800dd8e:	b933      	cbnz	r3, 800dd9e <_free_r+0x2e>
 800dd90:	6063      	str	r3, [r4, #4]
 800dd92:	6014      	str	r4, [r2, #0]
 800dd94:	4628      	mov	r0, r5
 800dd96:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800dd9a:	f000 be07 	b.w	800e9ac <__malloc_unlock>
 800dd9e:	42a3      	cmp	r3, r4
 800dda0:	d90a      	bls.n	800ddb8 <_free_r+0x48>
 800dda2:	6821      	ldr	r1, [r4, #0]
 800dda4:	1862      	adds	r2, r4, r1
 800dda6:	4293      	cmp	r3, r2
 800dda8:	bf01      	itttt	eq
 800ddaa:	681a      	ldreq	r2, [r3, #0]
 800ddac:	685b      	ldreq	r3, [r3, #4]
 800ddae:	1852      	addeq	r2, r2, r1
 800ddb0:	6022      	streq	r2, [r4, #0]
 800ddb2:	6063      	str	r3, [r4, #4]
 800ddb4:	6004      	str	r4, [r0, #0]
 800ddb6:	e7ed      	b.n	800dd94 <_free_r+0x24>
 800ddb8:	461a      	mov	r2, r3
 800ddba:	685b      	ldr	r3, [r3, #4]
 800ddbc:	b10b      	cbz	r3, 800ddc2 <_free_r+0x52>
 800ddbe:	42a3      	cmp	r3, r4
 800ddc0:	d9fa      	bls.n	800ddb8 <_free_r+0x48>
 800ddc2:	6811      	ldr	r1, [r2, #0]
 800ddc4:	1850      	adds	r0, r2, r1
 800ddc6:	42a0      	cmp	r0, r4
 800ddc8:	d10b      	bne.n	800dde2 <_free_r+0x72>
 800ddca:	6820      	ldr	r0, [r4, #0]
 800ddcc:	4401      	add	r1, r0
 800ddce:	1850      	adds	r0, r2, r1
 800ddd0:	4283      	cmp	r3, r0
 800ddd2:	6011      	str	r1, [r2, #0]
 800ddd4:	d1de      	bne.n	800dd94 <_free_r+0x24>
 800ddd6:	6818      	ldr	r0, [r3, #0]
 800ddd8:	685b      	ldr	r3, [r3, #4]
 800ddda:	4401      	add	r1, r0
 800dddc:	6011      	str	r1, [r2, #0]
 800ddde:	6053      	str	r3, [r2, #4]
 800dde0:	e7d8      	b.n	800dd94 <_free_r+0x24>
 800dde2:	d902      	bls.n	800ddea <_free_r+0x7a>
 800dde4:	230c      	movs	r3, #12
 800dde6:	602b      	str	r3, [r5, #0]
 800dde8:	e7d4      	b.n	800dd94 <_free_r+0x24>
 800ddea:	6820      	ldr	r0, [r4, #0]
 800ddec:	1821      	adds	r1, r4, r0
 800ddee:	428b      	cmp	r3, r1
 800ddf0:	bf01      	itttt	eq
 800ddf2:	6819      	ldreq	r1, [r3, #0]
 800ddf4:	685b      	ldreq	r3, [r3, #4]
 800ddf6:	1809      	addeq	r1, r1, r0
 800ddf8:	6021      	streq	r1, [r4, #0]
 800ddfa:	6063      	str	r3, [r4, #4]
 800ddfc:	6054      	str	r4, [r2, #4]
 800ddfe:	e7c9      	b.n	800dd94 <_free_r+0x24>
 800de00:	bd38      	pop	{r3, r4, r5, pc}
 800de02:	bf00      	nop
 800de04:	20000218 	.word	0x20000218

0800de08 <_malloc_r>:
 800de08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800de0a:	1ccd      	adds	r5, r1, #3
 800de0c:	f025 0503 	bic.w	r5, r5, #3
 800de10:	3508      	adds	r5, #8
 800de12:	2d0c      	cmp	r5, #12
 800de14:	bf38      	it	cc
 800de16:	250c      	movcc	r5, #12
 800de18:	2d00      	cmp	r5, #0
 800de1a:	4606      	mov	r6, r0
 800de1c:	db01      	blt.n	800de22 <_malloc_r+0x1a>
 800de1e:	42a9      	cmp	r1, r5
 800de20:	d903      	bls.n	800de2a <_malloc_r+0x22>
 800de22:	230c      	movs	r3, #12
 800de24:	6033      	str	r3, [r6, #0]
 800de26:	2000      	movs	r0, #0
 800de28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800de2a:	f000 fdb9 	bl	800e9a0 <__malloc_lock>
 800de2e:	4921      	ldr	r1, [pc, #132]	; (800deb4 <_malloc_r+0xac>)
 800de30:	680a      	ldr	r2, [r1, #0]
 800de32:	4614      	mov	r4, r2
 800de34:	b99c      	cbnz	r4, 800de5e <_malloc_r+0x56>
 800de36:	4f20      	ldr	r7, [pc, #128]	; (800deb8 <_malloc_r+0xb0>)
 800de38:	683b      	ldr	r3, [r7, #0]
 800de3a:	b923      	cbnz	r3, 800de46 <_malloc_r+0x3e>
 800de3c:	4621      	mov	r1, r4
 800de3e:	4630      	mov	r0, r6
 800de40:	f000 fb2a 	bl	800e498 <_sbrk_r>
 800de44:	6038      	str	r0, [r7, #0]
 800de46:	4629      	mov	r1, r5
 800de48:	4630      	mov	r0, r6
 800de4a:	f000 fb25 	bl	800e498 <_sbrk_r>
 800de4e:	1c43      	adds	r3, r0, #1
 800de50:	d123      	bne.n	800de9a <_malloc_r+0x92>
 800de52:	230c      	movs	r3, #12
 800de54:	4630      	mov	r0, r6
 800de56:	6033      	str	r3, [r6, #0]
 800de58:	f000 fda8 	bl	800e9ac <__malloc_unlock>
 800de5c:	e7e3      	b.n	800de26 <_malloc_r+0x1e>
 800de5e:	6823      	ldr	r3, [r4, #0]
 800de60:	1b5b      	subs	r3, r3, r5
 800de62:	d417      	bmi.n	800de94 <_malloc_r+0x8c>
 800de64:	2b0b      	cmp	r3, #11
 800de66:	d903      	bls.n	800de70 <_malloc_r+0x68>
 800de68:	6023      	str	r3, [r4, #0]
 800de6a:	441c      	add	r4, r3
 800de6c:	6025      	str	r5, [r4, #0]
 800de6e:	e004      	b.n	800de7a <_malloc_r+0x72>
 800de70:	6863      	ldr	r3, [r4, #4]
 800de72:	42a2      	cmp	r2, r4
 800de74:	bf0c      	ite	eq
 800de76:	600b      	streq	r3, [r1, #0]
 800de78:	6053      	strne	r3, [r2, #4]
 800de7a:	4630      	mov	r0, r6
 800de7c:	f000 fd96 	bl	800e9ac <__malloc_unlock>
 800de80:	f104 000b 	add.w	r0, r4, #11
 800de84:	1d23      	adds	r3, r4, #4
 800de86:	f020 0007 	bic.w	r0, r0, #7
 800de8a:	1ac2      	subs	r2, r0, r3
 800de8c:	d0cc      	beq.n	800de28 <_malloc_r+0x20>
 800de8e:	1a1b      	subs	r3, r3, r0
 800de90:	50a3      	str	r3, [r4, r2]
 800de92:	e7c9      	b.n	800de28 <_malloc_r+0x20>
 800de94:	4622      	mov	r2, r4
 800de96:	6864      	ldr	r4, [r4, #4]
 800de98:	e7cc      	b.n	800de34 <_malloc_r+0x2c>
 800de9a:	1cc4      	adds	r4, r0, #3
 800de9c:	f024 0403 	bic.w	r4, r4, #3
 800dea0:	42a0      	cmp	r0, r4
 800dea2:	d0e3      	beq.n	800de6c <_malloc_r+0x64>
 800dea4:	1a21      	subs	r1, r4, r0
 800dea6:	4630      	mov	r0, r6
 800dea8:	f000 faf6 	bl	800e498 <_sbrk_r>
 800deac:	3001      	adds	r0, #1
 800deae:	d1dd      	bne.n	800de6c <_malloc_r+0x64>
 800deb0:	e7cf      	b.n	800de52 <_malloc_r+0x4a>
 800deb2:	bf00      	nop
 800deb4:	20000218 	.word	0x20000218
 800deb8:	2000021c 	.word	0x2000021c

0800debc <__sfputc_r>:
 800debc:	6893      	ldr	r3, [r2, #8]
 800debe:	b410      	push	{r4}
 800dec0:	3b01      	subs	r3, #1
 800dec2:	2b00      	cmp	r3, #0
 800dec4:	6093      	str	r3, [r2, #8]
 800dec6:	da07      	bge.n	800ded8 <__sfputc_r+0x1c>
 800dec8:	6994      	ldr	r4, [r2, #24]
 800deca:	42a3      	cmp	r3, r4
 800decc:	db01      	blt.n	800ded2 <__sfputc_r+0x16>
 800dece:	290a      	cmp	r1, #10
 800ded0:	d102      	bne.n	800ded8 <__sfputc_r+0x1c>
 800ded2:	bc10      	pop	{r4}
 800ded4:	f000 bb34 	b.w	800e540 <__swbuf_r>
 800ded8:	6813      	ldr	r3, [r2, #0]
 800deda:	1c58      	adds	r0, r3, #1
 800dedc:	6010      	str	r0, [r2, #0]
 800dede:	7019      	strb	r1, [r3, #0]
 800dee0:	4608      	mov	r0, r1
 800dee2:	bc10      	pop	{r4}
 800dee4:	4770      	bx	lr

0800dee6 <__sfputs_r>:
 800dee6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dee8:	4606      	mov	r6, r0
 800deea:	460f      	mov	r7, r1
 800deec:	4614      	mov	r4, r2
 800deee:	18d5      	adds	r5, r2, r3
 800def0:	42ac      	cmp	r4, r5
 800def2:	d101      	bne.n	800def8 <__sfputs_r+0x12>
 800def4:	2000      	movs	r0, #0
 800def6:	e007      	b.n	800df08 <__sfputs_r+0x22>
 800def8:	463a      	mov	r2, r7
 800defa:	4630      	mov	r0, r6
 800defc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800df00:	f7ff ffdc 	bl	800debc <__sfputc_r>
 800df04:	1c43      	adds	r3, r0, #1
 800df06:	d1f3      	bne.n	800def0 <__sfputs_r+0xa>
 800df08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800df0c <_vfiprintf_r>:
 800df0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800df10:	460d      	mov	r5, r1
 800df12:	4614      	mov	r4, r2
 800df14:	4698      	mov	r8, r3
 800df16:	4606      	mov	r6, r0
 800df18:	b09d      	sub	sp, #116	; 0x74
 800df1a:	b118      	cbz	r0, 800df24 <_vfiprintf_r+0x18>
 800df1c:	6983      	ldr	r3, [r0, #24]
 800df1e:	b90b      	cbnz	r3, 800df24 <_vfiprintf_r+0x18>
 800df20:	f7ff fe6c 	bl	800dbfc <__sinit>
 800df24:	4b89      	ldr	r3, [pc, #548]	; (800e14c <_vfiprintf_r+0x240>)
 800df26:	429d      	cmp	r5, r3
 800df28:	d11b      	bne.n	800df62 <_vfiprintf_r+0x56>
 800df2a:	6875      	ldr	r5, [r6, #4]
 800df2c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800df2e:	07d9      	lsls	r1, r3, #31
 800df30:	d405      	bmi.n	800df3e <_vfiprintf_r+0x32>
 800df32:	89ab      	ldrh	r3, [r5, #12]
 800df34:	059a      	lsls	r2, r3, #22
 800df36:	d402      	bmi.n	800df3e <_vfiprintf_r+0x32>
 800df38:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800df3a:	f7ff ff0f 	bl	800dd5c <__retarget_lock_acquire_recursive>
 800df3e:	89ab      	ldrh	r3, [r5, #12]
 800df40:	071b      	lsls	r3, r3, #28
 800df42:	d501      	bpl.n	800df48 <_vfiprintf_r+0x3c>
 800df44:	692b      	ldr	r3, [r5, #16]
 800df46:	b9eb      	cbnz	r3, 800df84 <_vfiprintf_r+0x78>
 800df48:	4629      	mov	r1, r5
 800df4a:	4630      	mov	r0, r6
 800df4c:	f000 fb5c 	bl	800e608 <__swsetup_r>
 800df50:	b1c0      	cbz	r0, 800df84 <_vfiprintf_r+0x78>
 800df52:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800df54:	07dc      	lsls	r4, r3, #31
 800df56:	d50e      	bpl.n	800df76 <_vfiprintf_r+0x6a>
 800df58:	f04f 30ff 	mov.w	r0, #4294967295
 800df5c:	b01d      	add	sp, #116	; 0x74
 800df5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800df62:	4b7b      	ldr	r3, [pc, #492]	; (800e150 <_vfiprintf_r+0x244>)
 800df64:	429d      	cmp	r5, r3
 800df66:	d101      	bne.n	800df6c <_vfiprintf_r+0x60>
 800df68:	68b5      	ldr	r5, [r6, #8]
 800df6a:	e7df      	b.n	800df2c <_vfiprintf_r+0x20>
 800df6c:	4b79      	ldr	r3, [pc, #484]	; (800e154 <_vfiprintf_r+0x248>)
 800df6e:	429d      	cmp	r5, r3
 800df70:	bf08      	it	eq
 800df72:	68f5      	ldreq	r5, [r6, #12]
 800df74:	e7da      	b.n	800df2c <_vfiprintf_r+0x20>
 800df76:	89ab      	ldrh	r3, [r5, #12]
 800df78:	0598      	lsls	r0, r3, #22
 800df7a:	d4ed      	bmi.n	800df58 <_vfiprintf_r+0x4c>
 800df7c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800df7e:	f7ff feee 	bl	800dd5e <__retarget_lock_release_recursive>
 800df82:	e7e9      	b.n	800df58 <_vfiprintf_r+0x4c>
 800df84:	2300      	movs	r3, #0
 800df86:	9309      	str	r3, [sp, #36]	; 0x24
 800df88:	2320      	movs	r3, #32
 800df8a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800df8e:	2330      	movs	r3, #48	; 0x30
 800df90:	f04f 0901 	mov.w	r9, #1
 800df94:	f8cd 800c 	str.w	r8, [sp, #12]
 800df98:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800e158 <_vfiprintf_r+0x24c>
 800df9c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800dfa0:	4623      	mov	r3, r4
 800dfa2:	469a      	mov	sl, r3
 800dfa4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800dfa8:	b10a      	cbz	r2, 800dfae <_vfiprintf_r+0xa2>
 800dfaa:	2a25      	cmp	r2, #37	; 0x25
 800dfac:	d1f9      	bne.n	800dfa2 <_vfiprintf_r+0x96>
 800dfae:	ebba 0b04 	subs.w	fp, sl, r4
 800dfb2:	d00b      	beq.n	800dfcc <_vfiprintf_r+0xc0>
 800dfb4:	465b      	mov	r3, fp
 800dfb6:	4622      	mov	r2, r4
 800dfb8:	4629      	mov	r1, r5
 800dfba:	4630      	mov	r0, r6
 800dfbc:	f7ff ff93 	bl	800dee6 <__sfputs_r>
 800dfc0:	3001      	adds	r0, #1
 800dfc2:	f000 80aa 	beq.w	800e11a <_vfiprintf_r+0x20e>
 800dfc6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800dfc8:	445a      	add	r2, fp
 800dfca:	9209      	str	r2, [sp, #36]	; 0x24
 800dfcc:	f89a 3000 	ldrb.w	r3, [sl]
 800dfd0:	2b00      	cmp	r3, #0
 800dfd2:	f000 80a2 	beq.w	800e11a <_vfiprintf_r+0x20e>
 800dfd6:	2300      	movs	r3, #0
 800dfd8:	f04f 32ff 	mov.w	r2, #4294967295
 800dfdc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800dfe0:	f10a 0a01 	add.w	sl, sl, #1
 800dfe4:	9304      	str	r3, [sp, #16]
 800dfe6:	9307      	str	r3, [sp, #28]
 800dfe8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800dfec:	931a      	str	r3, [sp, #104]	; 0x68
 800dfee:	4654      	mov	r4, sl
 800dff0:	2205      	movs	r2, #5
 800dff2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dff6:	4858      	ldr	r0, [pc, #352]	; (800e158 <_vfiprintf_r+0x24c>)
 800dff8:	f000 fcc4 	bl	800e984 <memchr>
 800dffc:	9a04      	ldr	r2, [sp, #16]
 800dffe:	b9d8      	cbnz	r0, 800e038 <_vfiprintf_r+0x12c>
 800e000:	06d1      	lsls	r1, r2, #27
 800e002:	bf44      	itt	mi
 800e004:	2320      	movmi	r3, #32
 800e006:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e00a:	0713      	lsls	r3, r2, #28
 800e00c:	bf44      	itt	mi
 800e00e:	232b      	movmi	r3, #43	; 0x2b
 800e010:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e014:	f89a 3000 	ldrb.w	r3, [sl]
 800e018:	2b2a      	cmp	r3, #42	; 0x2a
 800e01a:	d015      	beq.n	800e048 <_vfiprintf_r+0x13c>
 800e01c:	4654      	mov	r4, sl
 800e01e:	2000      	movs	r0, #0
 800e020:	f04f 0c0a 	mov.w	ip, #10
 800e024:	9a07      	ldr	r2, [sp, #28]
 800e026:	4621      	mov	r1, r4
 800e028:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e02c:	3b30      	subs	r3, #48	; 0x30
 800e02e:	2b09      	cmp	r3, #9
 800e030:	d94e      	bls.n	800e0d0 <_vfiprintf_r+0x1c4>
 800e032:	b1b0      	cbz	r0, 800e062 <_vfiprintf_r+0x156>
 800e034:	9207      	str	r2, [sp, #28]
 800e036:	e014      	b.n	800e062 <_vfiprintf_r+0x156>
 800e038:	eba0 0308 	sub.w	r3, r0, r8
 800e03c:	fa09 f303 	lsl.w	r3, r9, r3
 800e040:	4313      	orrs	r3, r2
 800e042:	46a2      	mov	sl, r4
 800e044:	9304      	str	r3, [sp, #16]
 800e046:	e7d2      	b.n	800dfee <_vfiprintf_r+0xe2>
 800e048:	9b03      	ldr	r3, [sp, #12]
 800e04a:	1d19      	adds	r1, r3, #4
 800e04c:	681b      	ldr	r3, [r3, #0]
 800e04e:	9103      	str	r1, [sp, #12]
 800e050:	2b00      	cmp	r3, #0
 800e052:	bfbb      	ittet	lt
 800e054:	425b      	neglt	r3, r3
 800e056:	f042 0202 	orrlt.w	r2, r2, #2
 800e05a:	9307      	strge	r3, [sp, #28]
 800e05c:	9307      	strlt	r3, [sp, #28]
 800e05e:	bfb8      	it	lt
 800e060:	9204      	strlt	r2, [sp, #16]
 800e062:	7823      	ldrb	r3, [r4, #0]
 800e064:	2b2e      	cmp	r3, #46	; 0x2e
 800e066:	d10c      	bne.n	800e082 <_vfiprintf_r+0x176>
 800e068:	7863      	ldrb	r3, [r4, #1]
 800e06a:	2b2a      	cmp	r3, #42	; 0x2a
 800e06c:	d135      	bne.n	800e0da <_vfiprintf_r+0x1ce>
 800e06e:	9b03      	ldr	r3, [sp, #12]
 800e070:	3402      	adds	r4, #2
 800e072:	1d1a      	adds	r2, r3, #4
 800e074:	681b      	ldr	r3, [r3, #0]
 800e076:	9203      	str	r2, [sp, #12]
 800e078:	2b00      	cmp	r3, #0
 800e07a:	bfb8      	it	lt
 800e07c:	f04f 33ff 	movlt.w	r3, #4294967295
 800e080:	9305      	str	r3, [sp, #20]
 800e082:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800e168 <_vfiprintf_r+0x25c>
 800e086:	2203      	movs	r2, #3
 800e088:	4650      	mov	r0, sl
 800e08a:	7821      	ldrb	r1, [r4, #0]
 800e08c:	f000 fc7a 	bl	800e984 <memchr>
 800e090:	b140      	cbz	r0, 800e0a4 <_vfiprintf_r+0x198>
 800e092:	2340      	movs	r3, #64	; 0x40
 800e094:	eba0 000a 	sub.w	r0, r0, sl
 800e098:	fa03 f000 	lsl.w	r0, r3, r0
 800e09c:	9b04      	ldr	r3, [sp, #16]
 800e09e:	3401      	adds	r4, #1
 800e0a0:	4303      	orrs	r3, r0
 800e0a2:	9304      	str	r3, [sp, #16]
 800e0a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e0a8:	2206      	movs	r2, #6
 800e0aa:	482c      	ldr	r0, [pc, #176]	; (800e15c <_vfiprintf_r+0x250>)
 800e0ac:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e0b0:	f000 fc68 	bl	800e984 <memchr>
 800e0b4:	2800      	cmp	r0, #0
 800e0b6:	d03f      	beq.n	800e138 <_vfiprintf_r+0x22c>
 800e0b8:	4b29      	ldr	r3, [pc, #164]	; (800e160 <_vfiprintf_r+0x254>)
 800e0ba:	bb1b      	cbnz	r3, 800e104 <_vfiprintf_r+0x1f8>
 800e0bc:	9b03      	ldr	r3, [sp, #12]
 800e0be:	3307      	adds	r3, #7
 800e0c0:	f023 0307 	bic.w	r3, r3, #7
 800e0c4:	3308      	adds	r3, #8
 800e0c6:	9303      	str	r3, [sp, #12]
 800e0c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e0ca:	443b      	add	r3, r7
 800e0cc:	9309      	str	r3, [sp, #36]	; 0x24
 800e0ce:	e767      	b.n	800dfa0 <_vfiprintf_r+0x94>
 800e0d0:	460c      	mov	r4, r1
 800e0d2:	2001      	movs	r0, #1
 800e0d4:	fb0c 3202 	mla	r2, ip, r2, r3
 800e0d8:	e7a5      	b.n	800e026 <_vfiprintf_r+0x11a>
 800e0da:	2300      	movs	r3, #0
 800e0dc:	f04f 0c0a 	mov.w	ip, #10
 800e0e0:	4619      	mov	r1, r3
 800e0e2:	3401      	adds	r4, #1
 800e0e4:	9305      	str	r3, [sp, #20]
 800e0e6:	4620      	mov	r0, r4
 800e0e8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e0ec:	3a30      	subs	r2, #48	; 0x30
 800e0ee:	2a09      	cmp	r2, #9
 800e0f0:	d903      	bls.n	800e0fa <_vfiprintf_r+0x1ee>
 800e0f2:	2b00      	cmp	r3, #0
 800e0f4:	d0c5      	beq.n	800e082 <_vfiprintf_r+0x176>
 800e0f6:	9105      	str	r1, [sp, #20]
 800e0f8:	e7c3      	b.n	800e082 <_vfiprintf_r+0x176>
 800e0fa:	4604      	mov	r4, r0
 800e0fc:	2301      	movs	r3, #1
 800e0fe:	fb0c 2101 	mla	r1, ip, r1, r2
 800e102:	e7f0      	b.n	800e0e6 <_vfiprintf_r+0x1da>
 800e104:	ab03      	add	r3, sp, #12
 800e106:	9300      	str	r3, [sp, #0]
 800e108:	462a      	mov	r2, r5
 800e10a:	4630      	mov	r0, r6
 800e10c:	4b15      	ldr	r3, [pc, #84]	; (800e164 <_vfiprintf_r+0x258>)
 800e10e:	a904      	add	r1, sp, #16
 800e110:	f3af 8000 	nop.w
 800e114:	4607      	mov	r7, r0
 800e116:	1c78      	adds	r0, r7, #1
 800e118:	d1d6      	bne.n	800e0c8 <_vfiprintf_r+0x1bc>
 800e11a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e11c:	07d9      	lsls	r1, r3, #31
 800e11e:	d405      	bmi.n	800e12c <_vfiprintf_r+0x220>
 800e120:	89ab      	ldrh	r3, [r5, #12]
 800e122:	059a      	lsls	r2, r3, #22
 800e124:	d402      	bmi.n	800e12c <_vfiprintf_r+0x220>
 800e126:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e128:	f7ff fe19 	bl	800dd5e <__retarget_lock_release_recursive>
 800e12c:	89ab      	ldrh	r3, [r5, #12]
 800e12e:	065b      	lsls	r3, r3, #25
 800e130:	f53f af12 	bmi.w	800df58 <_vfiprintf_r+0x4c>
 800e134:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e136:	e711      	b.n	800df5c <_vfiprintf_r+0x50>
 800e138:	ab03      	add	r3, sp, #12
 800e13a:	9300      	str	r3, [sp, #0]
 800e13c:	462a      	mov	r2, r5
 800e13e:	4630      	mov	r0, r6
 800e140:	4b08      	ldr	r3, [pc, #32]	; (800e164 <_vfiprintf_r+0x258>)
 800e142:	a904      	add	r1, sp, #16
 800e144:	f000 f882 	bl	800e24c <_printf_i>
 800e148:	e7e4      	b.n	800e114 <_vfiprintf_r+0x208>
 800e14a:	bf00      	nop
 800e14c:	08010e58 	.word	0x08010e58
 800e150:	08010e78 	.word	0x08010e78
 800e154:	08010e38 	.word	0x08010e38
 800e158:	08010e98 	.word	0x08010e98
 800e15c:	08010ea2 	.word	0x08010ea2
 800e160:	00000000 	.word	0x00000000
 800e164:	0800dee7 	.word	0x0800dee7
 800e168:	08010e9e 	.word	0x08010e9e

0800e16c <_printf_common>:
 800e16c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e170:	4616      	mov	r6, r2
 800e172:	4699      	mov	r9, r3
 800e174:	688a      	ldr	r2, [r1, #8]
 800e176:	690b      	ldr	r3, [r1, #16]
 800e178:	4607      	mov	r7, r0
 800e17a:	4293      	cmp	r3, r2
 800e17c:	bfb8      	it	lt
 800e17e:	4613      	movlt	r3, r2
 800e180:	6033      	str	r3, [r6, #0]
 800e182:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800e186:	460c      	mov	r4, r1
 800e188:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800e18c:	b10a      	cbz	r2, 800e192 <_printf_common+0x26>
 800e18e:	3301      	adds	r3, #1
 800e190:	6033      	str	r3, [r6, #0]
 800e192:	6823      	ldr	r3, [r4, #0]
 800e194:	0699      	lsls	r1, r3, #26
 800e196:	bf42      	ittt	mi
 800e198:	6833      	ldrmi	r3, [r6, #0]
 800e19a:	3302      	addmi	r3, #2
 800e19c:	6033      	strmi	r3, [r6, #0]
 800e19e:	6825      	ldr	r5, [r4, #0]
 800e1a0:	f015 0506 	ands.w	r5, r5, #6
 800e1a4:	d106      	bne.n	800e1b4 <_printf_common+0x48>
 800e1a6:	f104 0a19 	add.w	sl, r4, #25
 800e1aa:	68e3      	ldr	r3, [r4, #12]
 800e1ac:	6832      	ldr	r2, [r6, #0]
 800e1ae:	1a9b      	subs	r3, r3, r2
 800e1b0:	42ab      	cmp	r3, r5
 800e1b2:	dc28      	bgt.n	800e206 <_printf_common+0x9a>
 800e1b4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800e1b8:	1e13      	subs	r3, r2, #0
 800e1ba:	6822      	ldr	r2, [r4, #0]
 800e1bc:	bf18      	it	ne
 800e1be:	2301      	movne	r3, #1
 800e1c0:	0692      	lsls	r2, r2, #26
 800e1c2:	d42d      	bmi.n	800e220 <_printf_common+0xb4>
 800e1c4:	4649      	mov	r1, r9
 800e1c6:	4638      	mov	r0, r7
 800e1c8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800e1cc:	47c0      	blx	r8
 800e1ce:	3001      	adds	r0, #1
 800e1d0:	d020      	beq.n	800e214 <_printf_common+0xa8>
 800e1d2:	6823      	ldr	r3, [r4, #0]
 800e1d4:	68e5      	ldr	r5, [r4, #12]
 800e1d6:	f003 0306 	and.w	r3, r3, #6
 800e1da:	2b04      	cmp	r3, #4
 800e1dc:	bf18      	it	ne
 800e1de:	2500      	movne	r5, #0
 800e1e0:	6832      	ldr	r2, [r6, #0]
 800e1e2:	f04f 0600 	mov.w	r6, #0
 800e1e6:	68a3      	ldr	r3, [r4, #8]
 800e1e8:	bf08      	it	eq
 800e1ea:	1aad      	subeq	r5, r5, r2
 800e1ec:	6922      	ldr	r2, [r4, #16]
 800e1ee:	bf08      	it	eq
 800e1f0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e1f4:	4293      	cmp	r3, r2
 800e1f6:	bfc4      	itt	gt
 800e1f8:	1a9b      	subgt	r3, r3, r2
 800e1fa:	18ed      	addgt	r5, r5, r3
 800e1fc:	341a      	adds	r4, #26
 800e1fe:	42b5      	cmp	r5, r6
 800e200:	d11a      	bne.n	800e238 <_printf_common+0xcc>
 800e202:	2000      	movs	r0, #0
 800e204:	e008      	b.n	800e218 <_printf_common+0xac>
 800e206:	2301      	movs	r3, #1
 800e208:	4652      	mov	r2, sl
 800e20a:	4649      	mov	r1, r9
 800e20c:	4638      	mov	r0, r7
 800e20e:	47c0      	blx	r8
 800e210:	3001      	adds	r0, #1
 800e212:	d103      	bne.n	800e21c <_printf_common+0xb0>
 800e214:	f04f 30ff 	mov.w	r0, #4294967295
 800e218:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e21c:	3501      	adds	r5, #1
 800e21e:	e7c4      	b.n	800e1aa <_printf_common+0x3e>
 800e220:	2030      	movs	r0, #48	; 0x30
 800e222:	18e1      	adds	r1, r4, r3
 800e224:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800e228:	1c5a      	adds	r2, r3, #1
 800e22a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800e22e:	4422      	add	r2, r4
 800e230:	3302      	adds	r3, #2
 800e232:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800e236:	e7c5      	b.n	800e1c4 <_printf_common+0x58>
 800e238:	2301      	movs	r3, #1
 800e23a:	4622      	mov	r2, r4
 800e23c:	4649      	mov	r1, r9
 800e23e:	4638      	mov	r0, r7
 800e240:	47c0      	blx	r8
 800e242:	3001      	adds	r0, #1
 800e244:	d0e6      	beq.n	800e214 <_printf_common+0xa8>
 800e246:	3601      	adds	r6, #1
 800e248:	e7d9      	b.n	800e1fe <_printf_common+0x92>
	...

0800e24c <_printf_i>:
 800e24c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e250:	460c      	mov	r4, r1
 800e252:	7e27      	ldrb	r7, [r4, #24]
 800e254:	4691      	mov	r9, r2
 800e256:	2f78      	cmp	r7, #120	; 0x78
 800e258:	4680      	mov	r8, r0
 800e25a:	469a      	mov	sl, r3
 800e25c:	990c      	ldr	r1, [sp, #48]	; 0x30
 800e25e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800e262:	d807      	bhi.n	800e274 <_printf_i+0x28>
 800e264:	2f62      	cmp	r7, #98	; 0x62
 800e266:	d80a      	bhi.n	800e27e <_printf_i+0x32>
 800e268:	2f00      	cmp	r7, #0
 800e26a:	f000 80d9 	beq.w	800e420 <_printf_i+0x1d4>
 800e26e:	2f58      	cmp	r7, #88	; 0x58
 800e270:	f000 80a4 	beq.w	800e3bc <_printf_i+0x170>
 800e274:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800e278:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800e27c:	e03a      	b.n	800e2f4 <_printf_i+0xa8>
 800e27e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800e282:	2b15      	cmp	r3, #21
 800e284:	d8f6      	bhi.n	800e274 <_printf_i+0x28>
 800e286:	a001      	add	r0, pc, #4	; (adr r0, 800e28c <_printf_i+0x40>)
 800e288:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800e28c:	0800e2e5 	.word	0x0800e2e5
 800e290:	0800e2f9 	.word	0x0800e2f9
 800e294:	0800e275 	.word	0x0800e275
 800e298:	0800e275 	.word	0x0800e275
 800e29c:	0800e275 	.word	0x0800e275
 800e2a0:	0800e275 	.word	0x0800e275
 800e2a4:	0800e2f9 	.word	0x0800e2f9
 800e2a8:	0800e275 	.word	0x0800e275
 800e2ac:	0800e275 	.word	0x0800e275
 800e2b0:	0800e275 	.word	0x0800e275
 800e2b4:	0800e275 	.word	0x0800e275
 800e2b8:	0800e407 	.word	0x0800e407
 800e2bc:	0800e329 	.word	0x0800e329
 800e2c0:	0800e3e9 	.word	0x0800e3e9
 800e2c4:	0800e275 	.word	0x0800e275
 800e2c8:	0800e275 	.word	0x0800e275
 800e2cc:	0800e429 	.word	0x0800e429
 800e2d0:	0800e275 	.word	0x0800e275
 800e2d4:	0800e329 	.word	0x0800e329
 800e2d8:	0800e275 	.word	0x0800e275
 800e2dc:	0800e275 	.word	0x0800e275
 800e2e0:	0800e3f1 	.word	0x0800e3f1
 800e2e4:	680b      	ldr	r3, [r1, #0]
 800e2e6:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800e2ea:	1d1a      	adds	r2, r3, #4
 800e2ec:	681b      	ldr	r3, [r3, #0]
 800e2ee:	600a      	str	r2, [r1, #0]
 800e2f0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800e2f4:	2301      	movs	r3, #1
 800e2f6:	e0a4      	b.n	800e442 <_printf_i+0x1f6>
 800e2f8:	6825      	ldr	r5, [r4, #0]
 800e2fa:	6808      	ldr	r0, [r1, #0]
 800e2fc:	062e      	lsls	r6, r5, #24
 800e2fe:	f100 0304 	add.w	r3, r0, #4
 800e302:	d50a      	bpl.n	800e31a <_printf_i+0xce>
 800e304:	6805      	ldr	r5, [r0, #0]
 800e306:	600b      	str	r3, [r1, #0]
 800e308:	2d00      	cmp	r5, #0
 800e30a:	da03      	bge.n	800e314 <_printf_i+0xc8>
 800e30c:	232d      	movs	r3, #45	; 0x2d
 800e30e:	426d      	negs	r5, r5
 800e310:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e314:	230a      	movs	r3, #10
 800e316:	485e      	ldr	r0, [pc, #376]	; (800e490 <_printf_i+0x244>)
 800e318:	e019      	b.n	800e34e <_printf_i+0x102>
 800e31a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800e31e:	6805      	ldr	r5, [r0, #0]
 800e320:	600b      	str	r3, [r1, #0]
 800e322:	bf18      	it	ne
 800e324:	b22d      	sxthne	r5, r5
 800e326:	e7ef      	b.n	800e308 <_printf_i+0xbc>
 800e328:	680b      	ldr	r3, [r1, #0]
 800e32a:	6825      	ldr	r5, [r4, #0]
 800e32c:	1d18      	adds	r0, r3, #4
 800e32e:	6008      	str	r0, [r1, #0]
 800e330:	0628      	lsls	r0, r5, #24
 800e332:	d501      	bpl.n	800e338 <_printf_i+0xec>
 800e334:	681d      	ldr	r5, [r3, #0]
 800e336:	e002      	b.n	800e33e <_printf_i+0xf2>
 800e338:	0669      	lsls	r1, r5, #25
 800e33a:	d5fb      	bpl.n	800e334 <_printf_i+0xe8>
 800e33c:	881d      	ldrh	r5, [r3, #0]
 800e33e:	2f6f      	cmp	r7, #111	; 0x6f
 800e340:	bf0c      	ite	eq
 800e342:	2308      	moveq	r3, #8
 800e344:	230a      	movne	r3, #10
 800e346:	4852      	ldr	r0, [pc, #328]	; (800e490 <_printf_i+0x244>)
 800e348:	2100      	movs	r1, #0
 800e34a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800e34e:	6866      	ldr	r6, [r4, #4]
 800e350:	2e00      	cmp	r6, #0
 800e352:	bfa8      	it	ge
 800e354:	6821      	ldrge	r1, [r4, #0]
 800e356:	60a6      	str	r6, [r4, #8]
 800e358:	bfa4      	itt	ge
 800e35a:	f021 0104 	bicge.w	r1, r1, #4
 800e35e:	6021      	strge	r1, [r4, #0]
 800e360:	b90d      	cbnz	r5, 800e366 <_printf_i+0x11a>
 800e362:	2e00      	cmp	r6, #0
 800e364:	d04d      	beq.n	800e402 <_printf_i+0x1b6>
 800e366:	4616      	mov	r6, r2
 800e368:	fbb5 f1f3 	udiv	r1, r5, r3
 800e36c:	fb03 5711 	mls	r7, r3, r1, r5
 800e370:	5dc7      	ldrb	r7, [r0, r7]
 800e372:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800e376:	462f      	mov	r7, r5
 800e378:	42bb      	cmp	r3, r7
 800e37a:	460d      	mov	r5, r1
 800e37c:	d9f4      	bls.n	800e368 <_printf_i+0x11c>
 800e37e:	2b08      	cmp	r3, #8
 800e380:	d10b      	bne.n	800e39a <_printf_i+0x14e>
 800e382:	6823      	ldr	r3, [r4, #0]
 800e384:	07df      	lsls	r7, r3, #31
 800e386:	d508      	bpl.n	800e39a <_printf_i+0x14e>
 800e388:	6923      	ldr	r3, [r4, #16]
 800e38a:	6861      	ldr	r1, [r4, #4]
 800e38c:	4299      	cmp	r1, r3
 800e38e:	bfde      	ittt	le
 800e390:	2330      	movle	r3, #48	; 0x30
 800e392:	f806 3c01 	strble.w	r3, [r6, #-1]
 800e396:	f106 36ff 	addle.w	r6, r6, #4294967295
 800e39a:	1b92      	subs	r2, r2, r6
 800e39c:	6122      	str	r2, [r4, #16]
 800e39e:	464b      	mov	r3, r9
 800e3a0:	4621      	mov	r1, r4
 800e3a2:	4640      	mov	r0, r8
 800e3a4:	f8cd a000 	str.w	sl, [sp]
 800e3a8:	aa03      	add	r2, sp, #12
 800e3aa:	f7ff fedf 	bl	800e16c <_printf_common>
 800e3ae:	3001      	adds	r0, #1
 800e3b0:	d14c      	bne.n	800e44c <_printf_i+0x200>
 800e3b2:	f04f 30ff 	mov.w	r0, #4294967295
 800e3b6:	b004      	add	sp, #16
 800e3b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e3bc:	4834      	ldr	r0, [pc, #208]	; (800e490 <_printf_i+0x244>)
 800e3be:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800e3c2:	680e      	ldr	r6, [r1, #0]
 800e3c4:	6823      	ldr	r3, [r4, #0]
 800e3c6:	f856 5b04 	ldr.w	r5, [r6], #4
 800e3ca:	061f      	lsls	r7, r3, #24
 800e3cc:	600e      	str	r6, [r1, #0]
 800e3ce:	d514      	bpl.n	800e3fa <_printf_i+0x1ae>
 800e3d0:	07d9      	lsls	r1, r3, #31
 800e3d2:	bf44      	itt	mi
 800e3d4:	f043 0320 	orrmi.w	r3, r3, #32
 800e3d8:	6023      	strmi	r3, [r4, #0]
 800e3da:	b91d      	cbnz	r5, 800e3e4 <_printf_i+0x198>
 800e3dc:	6823      	ldr	r3, [r4, #0]
 800e3de:	f023 0320 	bic.w	r3, r3, #32
 800e3e2:	6023      	str	r3, [r4, #0]
 800e3e4:	2310      	movs	r3, #16
 800e3e6:	e7af      	b.n	800e348 <_printf_i+0xfc>
 800e3e8:	6823      	ldr	r3, [r4, #0]
 800e3ea:	f043 0320 	orr.w	r3, r3, #32
 800e3ee:	6023      	str	r3, [r4, #0]
 800e3f0:	2378      	movs	r3, #120	; 0x78
 800e3f2:	4828      	ldr	r0, [pc, #160]	; (800e494 <_printf_i+0x248>)
 800e3f4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800e3f8:	e7e3      	b.n	800e3c2 <_printf_i+0x176>
 800e3fa:	065e      	lsls	r6, r3, #25
 800e3fc:	bf48      	it	mi
 800e3fe:	b2ad      	uxthmi	r5, r5
 800e400:	e7e6      	b.n	800e3d0 <_printf_i+0x184>
 800e402:	4616      	mov	r6, r2
 800e404:	e7bb      	b.n	800e37e <_printf_i+0x132>
 800e406:	680b      	ldr	r3, [r1, #0]
 800e408:	6826      	ldr	r6, [r4, #0]
 800e40a:	1d1d      	adds	r5, r3, #4
 800e40c:	6960      	ldr	r0, [r4, #20]
 800e40e:	600d      	str	r5, [r1, #0]
 800e410:	0635      	lsls	r5, r6, #24
 800e412:	681b      	ldr	r3, [r3, #0]
 800e414:	d501      	bpl.n	800e41a <_printf_i+0x1ce>
 800e416:	6018      	str	r0, [r3, #0]
 800e418:	e002      	b.n	800e420 <_printf_i+0x1d4>
 800e41a:	0671      	lsls	r1, r6, #25
 800e41c:	d5fb      	bpl.n	800e416 <_printf_i+0x1ca>
 800e41e:	8018      	strh	r0, [r3, #0]
 800e420:	2300      	movs	r3, #0
 800e422:	4616      	mov	r6, r2
 800e424:	6123      	str	r3, [r4, #16]
 800e426:	e7ba      	b.n	800e39e <_printf_i+0x152>
 800e428:	680b      	ldr	r3, [r1, #0]
 800e42a:	1d1a      	adds	r2, r3, #4
 800e42c:	600a      	str	r2, [r1, #0]
 800e42e:	681e      	ldr	r6, [r3, #0]
 800e430:	2100      	movs	r1, #0
 800e432:	4630      	mov	r0, r6
 800e434:	6862      	ldr	r2, [r4, #4]
 800e436:	f000 faa5 	bl	800e984 <memchr>
 800e43a:	b108      	cbz	r0, 800e440 <_printf_i+0x1f4>
 800e43c:	1b80      	subs	r0, r0, r6
 800e43e:	6060      	str	r0, [r4, #4]
 800e440:	6863      	ldr	r3, [r4, #4]
 800e442:	6123      	str	r3, [r4, #16]
 800e444:	2300      	movs	r3, #0
 800e446:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e44a:	e7a8      	b.n	800e39e <_printf_i+0x152>
 800e44c:	4632      	mov	r2, r6
 800e44e:	4649      	mov	r1, r9
 800e450:	4640      	mov	r0, r8
 800e452:	6923      	ldr	r3, [r4, #16]
 800e454:	47d0      	blx	sl
 800e456:	3001      	adds	r0, #1
 800e458:	d0ab      	beq.n	800e3b2 <_printf_i+0x166>
 800e45a:	6823      	ldr	r3, [r4, #0]
 800e45c:	079b      	lsls	r3, r3, #30
 800e45e:	d413      	bmi.n	800e488 <_printf_i+0x23c>
 800e460:	68e0      	ldr	r0, [r4, #12]
 800e462:	9b03      	ldr	r3, [sp, #12]
 800e464:	4298      	cmp	r0, r3
 800e466:	bfb8      	it	lt
 800e468:	4618      	movlt	r0, r3
 800e46a:	e7a4      	b.n	800e3b6 <_printf_i+0x16a>
 800e46c:	2301      	movs	r3, #1
 800e46e:	4632      	mov	r2, r6
 800e470:	4649      	mov	r1, r9
 800e472:	4640      	mov	r0, r8
 800e474:	47d0      	blx	sl
 800e476:	3001      	adds	r0, #1
 800e478:	d09b      	beq.n	800e3b2 <_printf_i+0x166>
 800e47a:	3501      	adds	r5, #1
 800e47c:	68e3      	ldr	r3, [r4, #12]
 800e47e:	9903      	ldr	r1, [sp, #12]
 800e480:	1a5b      	subs	r3, r3, r1
 800e482:	42ab      	cmp	r3, r5
 800e484:	dcf2      	bgt.n	800e46c <_printf_i+0x220>
 800e486:	e7eb      	b.n	800e460 <_printf_i+0x214>
 800e488:	2500      	movs	r5, #0
 800e48a:	f104 0619 	add.w	r6, r4, #25
 800e48e:	e7f5      	b.n	800e47c <_printf_i+0x230>
 800e490:	08010ea9 	.word	0x08010ea9
 800e494:	08010eba 	.word	0x08010eba

0800e498 <_sbrk_r>:
 800e498:	b538      	push	{r3, r4, r5, lr}
 800e49a:	2300      	movs	r3, #0
 800e49c:	4d05      	ldr	r5, [pc, #20]	; (800e4b4 <_sbrk_r+0x1c>)
 800e49e:	4604      	mov	r4, r0
 800e4a0:	4608      	mov	r0, r1
 800e4a2:	602b      	str	r3, [r5, #0]
 800e4a4:	f7f2 f980 	bl	80007a8 <_sbrk>
 800e4a8:	1c43      	adds	r3, r0, #1
 800e4aa:	d102      	bne.n	800e4b2 <_sbrk_r+0x1a>
 800e4ac:	682b      	ldr	r3, [r5, #0]
 800e4ae:	b103      	cbz	r3, 800e4b2 <_sbrk_r+0x1a>
 800e4b0:	6023      	str	r3, [r4, #0]
 800e4b2:	bd38      	pop	{r3, r4, r5, pc}
 800e4b4:	200068e4 	.word	0x200068e4

0800e4b8 <__sread>:
 800e4b8:	b510      	push	{r4, lr}
 800e4ba:	460c      	mov	r4, r1
 800e4bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e4c0:	f000 fa7a 	bl	800e9b8 <_read_r>
 800e4c4:	2800      	cmp	r0, #0
 800e4c6:	bfab      	itete	ge
 800e4c8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800e4ca:	89a3      	ldrhlt	r3, [r4, #12]
 800e4cc:	181b      	addge	r3, r3, r0
 800e4ce:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800e4d2:	bfac      	ite	ge
 800e4d4:	6563      	strge	r3, [r4, #84]	; 0x54
 800e4d6:	81a3      	strhlt	r3, [r4, #12]
 800e4d8:	bd10      	pop	{r4, pc}

0800e4da <__swrite>:
 800e4da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e4de:	461f      	mov	r7, r3
 800e4e0:	898b      	ldrh	r3, [r1, #12]
 800e4e2:	4605      	mov	r5, r0
 800e4e4:	05db      	lsls	r3, r3, #23
 800e4e6:	460c      	mov	r4, r1
 800e4e8:	4616      	mov	r6, r2
 800e4ea:	d505      	bpl.n	800e4f8 <__swrite+0x1e>
 800e4ec:	2302      	movs	r3, #2
 800e4ee:	2200      	movs	r2, #0
 800e4f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e4f4:	f000 f9d0 	bl	800e898 <_lseek_r>
 800e4f8:	89a3      	ldrh	r3, [r4, #12]
 800e4fa:	4632      	mov	r2, r6
 800e4fc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e500:	81a3      	strh	r3, [r4, #12]
 800e502:	4628      	mov	r0, r5
 800e504:	463b      	mov	r3, r7
 800e506:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e50a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e50e:	f000 b869 	b.w	800e5e4 <_write_r>

0800e512 <__sseek>:
 800e512:	b510      	push	{r4, lr}
 800e514:	460c      	mov	r4, r1
 800e516:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e51a:	f000 f9bd 	bl	800e898 <_lseek_r>
 800e51e:	1c43      	adds	r3, r0, #1
 800e520:	89a3      	ldrh	r3, [r4, #12]
 800e522:	bf15      	itete	ne
 800e524:	6560      	strne	r0, [r4, #84]	; 0x54
 800e526:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800e52a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800e52e:	81a3      	strheq	r3, [r4, #12]
 800e530:	bf18      	it	ne
 800e532:	81a3      	strhne	r3, [r4, #12]
 800e534:	bd10      	pop	{r4, pc}

0800e536 <__sclose>:
 800e536:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e53a:	f000 b8db 	b.w	800e6f4 <_close_r>
	...

0800e540 <__swbuf_r>:
 800e540:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e542:	460e      	mov	r6, r1
 800e544:	4614      	mov	r4, r2
 800e546:	4605      	mov	r5, r0
 800e548:	b118      	cbz	r0, 800e552 <__swbuf_r+0x12>
 800e54a:	6983      	ldr	r3, [r0, #24]
 800e54c:	b90b      	cbnz	r3, 800e552 <__swbuf_r+0x12>
 800e54e:	f7ff fb55 	bl	800dbfc <__sinit>
 800e552:	4b21      	ldr	r3, [pc, #132]	; (800e5d8 <__swbuf_r+0x98>)
 800e554:	429c      	cmp	r4, r3
 800e556:	d12b      	bne.n	800e5b0 <__swbuf_r+0x70>
 800e558:	686c      	ldr	r4, [r5, #4]
 800e55a:	69a3      	ldr	r3, [r4, #24]
 800e55c:	60a3      	str	r3, [r4, #8]
 800e55e:	89a3      	ldrh	r3, [r4, #12]
 800e560:	071a      	lsls	r2, r3, #28
 800e562:	d52f      	bpl.n	800e5c4 <__swbuf_r+0x84>
 800e564:	6923      	ldr	r3, [r4, #16]
 800e566:	b36b      	cbz	r3, 800e5c4 <__swbuf_r+0x84>
 800e568:	6923      	ldr	r3, [r4, #16]
 800e56a:	6820      	ldr	r0, [r4, #0]
 800e56c:	b2f6      	uxtb	r6, r6
 800e56e:	1ac0      	subs	r0, r0, r3
 800e570:	6963      	ldr	r3, [r4, #20]
 800e572:	4637      	mov	r7, r6
 800e574:	4283      	cmp	r3, r0
 800e576:	dc04      	bgt.n	800e582 <__swbuf_r+0x42>
 800e578:	4621      	mov	r1, r4
 800e57a:	4628      	mov	r0, r5
 800e57c:	f000 f950 	bl	800e820 <_fflush_r>
 800e580:	bb30      	cbnz	r0, 800e5d0 <__swbuf_r+0x90>
 800e582:	68a3      	ldr	r3, [r4, #8]
 800e584:	3001      	adds	r0, #1
 800e586:	3b01      	subs	r3, #1
 800e588:	60a3      	str	r3, [r4, #8]
 800e58a:	6823      	ldr	r3, [r4, #0]
 800e58c:	1c5a      	adds	r2, r3, #1
 800e58e:	6022      	str	r2, [r4, #0]
 800e590:	701e      	strb	r6, [r3, #0]
 800e592:	6963      	ldr	r3, [r4, #20]
 800e594:	4283      	cmp	r3, r0
 800e596:	d004      	beq.n	800e5a2 <__swbuf_r+0x62>
 800e598:	89a3      	ldrh	r3, [r4, #12]
 800e59a:	07db      	lsls	r3, r3, #31
 800e59c:	d506      	bpl.n	800e5ac <__swbuf_r+0x6c>
 800e59e:	2e0a      	cmp	r6, #10
 800e5a0:	d104      	bne.n	800e5ac <__swbuf_r+0x6c>
 800e5a2:	4621      	mov	r1, r4
 800e5a4:	4628      	mov	r0, r5
 800e5a6:	f000 f93b 	bl	800e820 <_fflush_r>
 800e5aa:	b988      	cbnz	r0, 800e5d0 <__swbuf_r+0x90>
 800e5ac:	4638      	mov	r0, r7
 800e5ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e5b0:	4b0a      	ldr	r3, [pc, #40]	; (800e5dc <__swbuf_r+0x9c>)
 800e5b2:	429c      	cmp	r4, r3
 800e5b4:	d101      	bne.n	800e5ba <__swbuf_r+0x7a>
 800e5b6:	68ac      	ldr	r4, [r5, #8]
 800e5b8:	e7cf      	b.n	800e55a <__swbuf_r+0x1a>
 800e5ba:	4b09      	ldr	r3, [pc, #36]	; (800e5e0 <__swbuf_r+0xa0>)
 800e5bc:	429c      	cmp	r4, r3
 800e5be:	bf08      	it	eq
 800e5c0:	68ec      	ldreq	r4, [r5, #12]
 800e5c2:	e7ca      	b.n	800e55a <__swbuf_r+0x1a>
 800e5c4:	4621      	mov	r1, r4
 800e5c6:	4628      	mov	r0, r5
 800e5c8:	f000 f81e 	bl	800e608 <__swsetup_r>
 800e5cc:	2800      	cmp	r0, #0
 800e5ce:	d0cb      	beq.n	800e568 <__swbuf_r+0x28>
 800e5d0:	f04f 37ff 	mov.w	r7, #4294967295
 800e5d4:	e7ea      	b.n	800e5ac <__swbuf_r+0x6c>
 800e5d6:	bf00      	nop
 800e5d8:	08010e58 	.word	0x08010e58
 800e5dc:	08010e78 	.word	0x08010e78
 800e5e0:	08010e38 	.word	0x08010e38

0800e5e4 <_write_r>:
 800e5e4:	b538      	push	{r3, r4, r5, lr}
 800e5e6:	4604      	mov	r4, r0
 800e5e8:	4608      	mov	r0, r1
 800e5ea:	4611      	mov	r1, r2
 800e5ec:	2200      	movs	r2, #0
 800e5ee:	4d05      	ldr	r5, [pc, #20]	; (800e604 <_write_r+0x20>)
 800e5f0:	602a      	str	r2, [r5, #0]
 800e5f2:	461a      	mov	r2, r3
 800e5f4:	f7f2 f88b 	bl	800070e <_write>
 800e5f8:	1c43      	adds	r3, r0, #1
 800e5fa:	d102      	bne.n	800e602 <_write_r+0x1e>
 800e5fc:	682b      	ldr	r3, [r5, #0]
 800e5fe:	b103      	cbz	r3, 800e602 <_write_r+0x1e>
 800e600:	6023      	str	r3, [r4, #0]
 800e602:	bd38      	pop	{r3, r4, r5, pc}
 800e604:	200068e4 	.word	0x200068e4

0800e608 <__swsetup_r>:
 800e608:	4b32      	ldr	r3, [pc, #200]	; (800e6d4 <__swsetup_r+0xcc>)
 800e60a:	b570      	push	{r4, r5, r6, lr}
 800e60c:	681d      	ldr	r5, [r3, #0]
 800e60e:	4606      	mov	r6, r0
 800e610:	460c      	mov	r4, r1
 800e612:	b125      	cbz	r5, 800e61e <__swsetup_r+0x16>
 800e614:	69ab      	ldr	r3, [r5, #24]
 800e616:	b913      	cbnz	r3, 800e61e <__swsetup_r+0x16>
 800e618:	4628      	mov	r0, r5
 800e61a:	f7ff faef 	bl	800dbfc <__sinit>
 800e61e:	4b2e      	ldr	r3, [pc, #184]	; (800e6d8 <__swsetup_r+0xd0>)
 800e620:	429c      	cmp	r4, r3
 800e622:	d10f      	bne.n	800e644 <__swsetup_r+0x3c>
 800e624:	686c      	ldr	r4, [r5, #4]
 800e626:	89a3      	ldrh	r3, [r4, #12]
 800e628:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e62c:	0719      	lsls	r1, r3, #28
 800e62e:	d42c      	bmi.n	800e68a <__swsetup_r+0x82>
 800e630:	06dd      	lsls	r5, r3, #27
 800e632:	d411      	bmi.n	800e658 <__swsetup_r+0x50>
 800e634:	2309      	movs	r3, #9
 800e636:	6033      	str	r3, [r6, #0]
 800e638:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800e63c:	f04f 30ff 	mov.w	r0, #4294967295
 800e640:	81a3      	strh	r3, [r4, #12]
 800e642:	e03e      	b.n	800e6c2 <__swsetup_r+0xba>
 800e644:	4b25      	ldr	r3, [pc, #148]	; (800e6dc <__swsetup_r+0xd4>)
 800e646:	429c      	cmp	r4, r3
 800e648:	d101      	bne.n	800e64e <__swsetup_r+0x46>
 800e64a:	68ac      	ldr	r4, [r5, #8]
 800e64c:	e7eb      	b.n	800e626 <__swsetup_r+0x1e>
 800e64e:	4b24      	ldr	r3, [pc, #144]	; (800e6e0 <__swsetup_r+0xd8>)
 800e650:	429c      	cmp	r4, r3
 800e652:	bf08      	it	eq
 800e654:	68ec      	ldreq	r4, [r5, #12]
 800e656:	e7e6      	b.n	800e626 <__swsetup_r+0x1e>
 800e658:	0758      	lsls	r0, r3, #29
 800e65a:	d512      	bpl.n	800e682 <__swsetup_r+0x7a>
 800e65c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e65e:	b141      	cbz	r1, 800e672 <__swsetup_r+0x6a>
 800e660:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e664:	4299      	cmp	r1, r3
 800e666:	d002      	beq.n	800e66e <__swsetup_r+0x66>
 800e668:	4630      	mov	r0, r6
 800e66a:	f7ff fb81 	bl	800dd70 <_free_r>
 800e66e:	2300      	movs	r3, #0
 800e670:	6363      	str	r3, [r4, #52]	; 0x34
 800e672:	89a3      	ldrh	r3, [r4, #12]
 800e674:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800e678:	81a3      	strh	r3, [r4, #12]
 800e67a:	2300      	movs	r3, #0
 800e67c:	6063      	str	r3, [r4, #4]
 800e67e:	6923      	ldr	r3, [r4, #16]
 800e680:	6023      	str	r3, [r4, #0]
 800e682:	89a3      	ldrh	r3, [r4, #12]
 800e684:	f043 0308 	orr.w	r3, r3, #8
 800e688:	81a3      	strh	r3, [r4, #12]
 800e68a:	6923      	ldr	r3, [r4, #16]
 800e68c:	b94b      	cbnz	r3, 800e6a2 <__swsetup_r+0x9a>
 800e68e:	89a3      	ldrh	r3, [r4, #12]
 800e690:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800e694:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e698:	d003      	beq.n	800e6a2 <__swsetup_r+0x9a>
 800e69a:	4621      	mov	r1, r4
 800e69c:	4630      	mov	r0, r6
 800e69e:	f000 f931 	bl	800e904 <__smakebuf_r>
 800e6a2:	89a0      	ldrh	r0, [r4, #12]
 800e6a4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e6a8:	f010 0301 	ands.w	r3, r0, #1
 800e6ac:	d00a      	beq.n	800e6c4 <__swsetup_r+0xbc>
 800e6ae:	2300      	movs	r3, #0
 800e6b0:	60a3      	str	r3, [r4, #8]
 800e6b2:	6963      	ldr	r3, [r4, #20]
 800e6b4:	425b      	negs	r3, r3
 800e6b6:	61a3      	str	r3, [r4, #24]
 800e6b8:	6923      	ldr	r3, [r4, #16]
 800e6ba:	b943      	cbnz	r3, 800e6ce <__swsetup_r+0xc6>
 800e6bc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800e6c0:	d1ba      	bne.n	800e638 <__swsetup_r+0x30>
 800e6c2:	bd70      	pop	{r4, r5, r6, pc}
 800e6c4:	0781      	lsls	r1, r0, #30
 800e6c6:	bf58      	it	pl
 800e6c8:	6963      	ldrpl	r3, [r4, #20]
 800e6ca:	60a3      	str	r3, [r4, #8]
 800e6cc:	e7f4      	b.n	800e6b8 <__swsetup_r+0xb0>
 800e6ce:	2000      	movs	r0, #0
 800e6d0:	e7f7      	b.n	800e6c2 <__swsetup_r+0xba>
 800e6d2:	bf00      	nop
 800e6d4:	20000018 	.word	0x20000018
 800e6d8:	08010e58 	.word	0x08010e58
 800e6dc:	08010e78 	.word	0x08010e78
 800e6e0:	08010e38 	.word	0x08010e38

0800e6e4 <abort>:
 800e6e4:	2006      	movs	r0, #6
 800e6e6:	b508      	push	{r3, lr}
 800e6e8:	f000 f9a0 	bl	800ea2c <raise>
 800e6ec:	2001      	movs	r0, #1
 800e6ee:	f7f1 ffe7 	bl	80006c0 <_exit>
	...

0800e6f4 <_close_r>:
 800e6f4:	b538      	push	{r3, r4, r5, lr}
 800e6f6:	2300      	movs	r3, #0
 800e6f8:	4d05      	ldr	r5, [pc, #20]	; (800e710 <_close_r+0x1c>)
 800e6fa:	4604      	mov	r4, r0
 800e6fc:	4608      	mov	r0, r1
 800e6fe:	602b      	str	r3, [r5, #0]
 800e700:	f7f2 f821 	bl	8000746 <_close>
 800e704:	1c43      	adds	r3, r0, #1
 800e706:	d102      	bne.n	800e70e <_close_r+0x1a>
 800e708:	682b      	ldr	r3, [r5, #0]
 800e70a:	b103      	cbz	r3, 800e70e <_close_r+0x1a>
 800e70c:	6023      	str	r3, [r4, #0]
 800e70e:	bd38      	pop	{r3, r4, r5, pc}
 800e710:	200068e4 	.word	0x200068e4

0800e714 <__sflush_r>:
 800e714:	898a      	ldrh	r2, [r1, #12]
 800e716:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e71a:	4605      	mov	r5, r0
 800e71c:	0710      	lsls	r0, r2, #28
 800e71e:	460c      	mov	r4, r1
 800e720:	d458      	bmi.n	800e7d4 <__sflush_r+0xc0>
 800e722:	684b      	ldr	r3, [r1, #4]
 800e724:	2b00      	cmp	r3, #0
 800e726:	dc05      	bgt.n	800e734 <__sflush_r+0x20>
 800e728:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800e72a:	2b00      	cmp	r3, #0
 800e72c:	dc02      	bgt.n	800e734 <__sflush_r+0x20>
 800e72e:	2000      	movs	r0, #0
 800e730:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e734:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e736:	2e00      	cmp	r6, #0
 800e738:	d0f9      	beq.n	800e72e <__sflush_r+0x1a>
 800e73a:	2300      	movs	r3, #0
 800e73c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800e740:	682f      	ldr	r7, [r5, #0]
 800e742:	602b      	str	r3, [r5, #0]
 800e744:	d032      	beq.n	800e7ac <__sflush_r+0x98>
 800e746:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800e748:	89a3      	ldrh	r3, [r4, #12]
 800e74a:	075a      	lsls	r2, r3, #29
 800e74c:	d505      	bpl.n	800e75a <__sflush_r+0x46>
 800e74e:	6863      	ldr	r3, [r4, #4]
 800e750:	1ac0      	subs	r0, r0, r3
 800e752:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e754:	b10b      	cbz	r3, 800e75a <__sflush_r+0x46>
 800e756:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800e758:	1ac0      	subs	r0, r0, r3
 800e75a:	2300      	movs	r3, #0
 800e75c:	4602      	mov	r2, r0
 800e75e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e760:	4628      	mov	r0, r5
 800e762:	6a21      	ldr	r1, [r4, #32]
 800e764:	47b0      	blx	r6
 800e766:	1c43      	adds	r3, r0, #1
 800e768:	89a3      	ldrh	r3, [r4, #12]
 800e76a:	d106      	bne.n	800e77a <__sflush_r+0x66>
 800e76c:	6829      	ldr	r1, [r5, #0]
 800e76e:	291d      	cmp	r1, #29
 800e770:	d82c      	bhi.n	800e7cc <__sflush_r+0xb8>
 800e772:	4a2a      	ldr	r2, [pc, #168]	; (800e81c <__sflush_r+0x108>)
 800e774:	40ca      	lsrs	r2, r1
 800e776:	07d6      	lsls	r6, r2, #31
 800e778:	d528      	bpl.n	800e7cc <__sflush_r+0xb8>
 800e77a:	2200      	movs	r2, #0
 800e77c:	6062      	str	r2, [r4, #4]
 800e77e:	6922      	ldr	r2, [r4, #16]
 800e780:	04d9      	lsls	r1, r3, #19
 800e782:	6022      	str	r2, [r4, #0]
 800e784:	d504      	bpl.n	800e790 <__sflush_r+0x7c>
 800e786:	1c42      	adds	r2, r0, #1
 800e788:	d101      	bne.n	800e78e <__sflush_r+0x7a>
 800e78a:	682b      	ldr	r3, [r5, #0]
 800e78c:	b903      	cbnz	r3, 800e790 <__sflush_r+0x7c>
 800e78e:	6560      	str	r0, [r4, #84]	; 0x54
 800e790:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e792:	602f      	str	r7, [r5, #0]
 800e794:	2900      	cmp	r1, #0
 800e796:	d0ca      	beq.n	800e72e <__sflush_r+0x1a>
 800e798:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e79c:	4299      	cmp	r1, r3
 800e79e:	d002      	beq.n	800e7a6 <__sflush_r+0x92>
 800e7a0:	4628      	mov	r0, r5
 800e7a2:	f7ff fae5 	bl	800dd70 <_free_r>
 800e7a6:	2000      	movs	r0, #0
 800e7a8:	6360      	str	r0, [r4, #52]	; 0x34
 800e7aa:	e7c1      	b.n	800e730 <__sflush_r+0x1c>
 800e7ac:	6a21      	ldr	r1, [r4, #32]
 800e7ae:	2301      	movs	r3, #1
 800e7b0:	4628      	mov	r0, r5
 800e7b2:	47b0      	blx	r6
 800e7b4:	1c41      	adds	r1, r0, #1
 800e7b6:	d1c7      	bne.n	800e748 <__sflush_r+0x34>
 800e7b8:	682b      	ldr	r3, [r5, #0]
 800e7ba:	2b00      	cmp	r3, #0
 800e7bc:	d0c4      	beq.n	800e748 <__sflush_r+0x34>
 800e7be:	2b1d      	cmp	r3, #29
 800e7c0:	d001      	beq.n	800e7c6 <__sflush_r+0xb2>
 800e7c2:	2b16      	cmp	r3, #22
 800e7c4:	d101      	bne.n	800e7ca <__sflush_r+0xb6>
 800e7c6:	602f      	str	r7, [r5, #0]
 800e7c8:	e7b1      	b.n	800e72e <__sflush_r+0x1a>
 800e7ca:	89a3      	ldrh	r3, [r4, #12]
 800e7cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e7d0:	81a3      	strh	r3, [r4, #12]
 800e7d2:	e7ad      	b.n	800e730 <__sflush_r+0x1c>
 800e7d4:	690f      	ldr	r7, [r1, #16]
 800e7d6:	2f00      	cmp	r7, #0
 800e7d8:	d0a9      	beq.n	800e72e <__sflush_r+0x1a>
 800e7da:	0793      	lsls	r3, r2, #30
 800e7dc:	bf18      	it	ne
 800e7de:	2300      	movne	r3, #0
 800e7e0:	680e      	ldr	r6, [r1, #0]
 800e7e2:	bf08      	it	eq
 800e7e4:	694b      	ldreq	r3, [r1, #20]
 800e7e6:	eba6 0807 	sub.w	r8, r6, r7
 800e7ea:	600f      	str	r7, [r1, #0]
 800e7ec:	608b      	str	r3, [r1, #8]
 800e7ee:	f1b8 0f00 	cmp.w	r8, #0
 800e7f2:	dd9c      	ble.n	800e72e <__sflush_r+0x1a>
 800e7f4:	4643      	mov	r3, r8
 800e7f6:	463a      	mov	r2, r7
 800e7f8:	4628      	mov	r0, r5
 800e7fa:	6a21      	ldr	r1, [r4, #32]
 800e7fc:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800e7fe:	47b0      	blx	r6
 800e800:	2800      	cmp	r0, #0
 800e802:	dc06      	bgt.n	800e812 <__sflush_r+0xfe>
 800e804:	89a3      	ldrh	r3, [r4, #12]
 800e806:	f04f 30ff 	mov.w	r0, #4294967295
 800e80a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e80e:	81a3      	strh	r3, [r4, #12]
 800e810:	e78e      	b.n	800e730 <__sflush_r+0x1c>
 800e812:	4407      	add	r7, r0
 800e814:	eba8 0800 	sub.w	r8, r8, r0
 800e818:	e7e9      	b.n	800e7ee <__sflush_r+0xda>
 800e81a:	bf00      	nop
 800e81c:	20400001 	.word	0x20400001

0800e820 <_fflush_r>:
 800e820:	b538      	push	{r3, r4, r5, lr}
 800e822:	690b      	ldr	r3, [r1, #16]
 800e824:	4605      	mov	r5, r0
 800e826:	460c      	mov	r4, r1
 800e828:	b913      	cbnz	r3, 800e830 <_fflush_r+0x10>
 800e82a:	2500      	movs	r5, #0
 800e82c:	4628      	mov	r0, r5
 800e82e:	bd38      	pop	{r3, r4, r5, pc}
 800e830:	b118      	cbz	r0, 800e83a <_fflush_r+0x1a>
 800e832:	6983      	ldr	r3, [r0, #24]
 800e834:	b90b      	cbnz	r3, 800e83a <_fflush_r+0x1a>
 800e836:	f7ff f9e1 	bl	800dbfc <__sinit>
 800e83a:	4b14      	ldr	r3, [pc, #80]	; (800e88c <_fflush_r+0x6c>)
 800e83c:	429c      	cmp	r4, r3
 800e83e:	d11b      	bne.n	800e878 <_fflush_r+0x58>
 800e840:	686c      	ldr	r4, [r5, #4]
 800e842:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e846:	2b00      	cmp	r3, #0
 800e848:	d0ef      	beq.n	800e82a <_fflush_r+0xa>
 800e84a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800e84c:	07d0      	lsls	r0, r2, #31
 800e84e:	d404      	bmi.n	800e85a <_fflush_r+0x3a>
 800e850:	0599      	lsls	r1, r3, #22
 800e852:	d402      	bmi.n	800e85a <_fflush_r+0x3a>
 800e854:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e856:	f7ff fa81 	bl	800dd5c <__retarget_lock_acquire_recursive>
 800e85a:	4628      	mov	r0, r5
 800e85c:	4621      	mov	r1, r4
 800e85e:	f7ff ff59 	bl	800e714 <__sflush_r>
 800e862:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e864:	4605      	mov	r5, r0
 800e866:	07da      	lsls	r2, r3, #31
 800e868:	d4e0      	bmi.n	800e82c <_fflush_r+0xc>
 800e86a:	89a3      	ldrh	r3, [r4, #12]
 800e86c:	059b      	lsls	r3, r3, #22
 800e86e:	d4dd      	bmi.n	800e82c <_fflush_r+0xc>
 800e870:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e872:	f7ff fa74 	bl	800dd5e <__retarget_lock_release_recursive>
 800e876:	e7d9      	b.n	800e82c <_fflush_r+0xc>
 800e878:	4b05      	ldr	r3, [pc, #20]	; (800e890 <_fflush_r+0x70>)
 800e87a:	429c      	cmp	r4, r3
 800e87c:	d101      	bne.n	800e882 <_fflush_r+0x62>
 800e87e:	68ac      	ldr	r4, [r5, #8]
 800e880:	e7df      	b.n	800e842 <_fflush_r+0x22>
 800e882:	4b04      	ldr	r3, [pc, #16]	; (800e894 <_fflush_r+0x74>)
 800e884:	429c      	cmp	r4, r3
 800e886:	bf08      	it	eq
 800e888:	68ec      	ldreq	r4, [r5, #12]
 800e88a:	e7da      	b.n	800e842 <_fflush_r+0x22>
 800e88c:	08010e58 	.word	0x08010e58
 800e890:	08010e78 	.word	0x08010e78
 800e894:	08010e38 	.word	0x08010e38

0800e898 <_lseek_r>:
 800e898:	b538      	push	{r3, r4, r5, lr}
 800e89a:	4604      	mov	r4, r0
 800e89c:	4608      	mov	r0, r1
 800e89e:	4611      	mov	r1, r2
 800e8a0:	2200      	movs	r2, #0
 800e8a2:	4d05      	ldr	r5, [pc, #20]	; (800e8b8 <_lseek_r+0x20>)
 800e8a4:	602a      	str	r2, [r5, #0]
 800e8a6:	461a      	mov	r2, r3
 800e8a8:	f7f1 ff71 	bl	800078e <_lseek>
 800e8ac:	1c43      	adds	r3, r0, #1
 800e8ae:	d102      	bne.n	800e8b6 <_lseek_r+0x1e>
 800e8b0:	682b      	ldr	r3, [r5, #0]
 800e8b2:	b103      	cbz	r3, 800e8b6 <_lseek_r+0x1e>
 800e8b4:	6023      	str	r3, [r4, #0]
 800e8b6:	bd38      	pop	{r3, r4, r5, pc}
 800e8b8:	200068e4 	.word	0x200068e4

0800e8bc <__swhatbuf_r>:
 800e8bc:	b570      	push	{r4, r5, r6, lr}
 800e8be:	460e      	mov	r6, r1
 800e8c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e8c4:	4614      	mov	r4, r2
 800e8c6:	2900      	cmp	r1, #0
 800e8c8:	461d      	mov	r5, r3
 800e8ca:	b096      	sub	sp, #88	; 0x58
 800e8cc:	da07      	bge.n	800e8de <__swhatbuf_r+0x22>
 800e8ce:	2300      	movs	r3, #0
 800e8d0:	602b      	str	r3, [r5, #0]
 800e8d2:	89b3      	ldrh	r3, [r6, #12]
 800e8d4:	061a      	lsls	r2, r3, #24
 800e8d6:	d410      	bmi.n	800e8fa <__swhatbuf_r+0x3e>
 800e8d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e8dc:	e00e      	b.n	800e8fc <__swhatbuf_r+0x40>
 800e8de:	466a      	mov	r2, sp
 800e8e0:	f000 f8c0 	bl	800ea64 <_fstat_r>
 800e8e4:	2800      	cmp	r0, #0
 800e8e6:	dbf2      	blt.n	800e8ce <__swhatbuf_r+0x12>
 800e8e8:	9a01      	ldr	r2, [sp, #4]
 800e8ea:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800e8ee:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800e8f2:	425a      	negs	r2, r3
 800e8f4:	415a      	adcs	r2, r3
 800e8f6:	602a      	str	r2, [r5, #0]
 800e8f8:	e7ee      	b.n	800e8d8 <__swhatbuf_r+0x1c>
 800e8fa:	2340      	movs	r3, #64	; 0x40
 800e8fc:	2000      	movs	r0, #0
 800e8fe:	6023      	str	r3, [r4, #0]
 800e900:	b016      	add	sp, #88	; 0x58
 800e902:	bd70      	pop	{r4, r5, r6, pc}

0800e904 <__smakebuf_r>:
 800e904:	898b      	ldrh	r3, [r1, #12]
 800e906:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e908:	079d      	lsls	r5, r3, #30
 800e90a:	4606      	mov	r6, r0
 800e90c:	460c      	mov	r4, r1
 800e90e:	d507      	bpl.n	800e920 <__smakebuf_r+0x1c>
 800e910:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800e914:	6023      	str	r3, [r4, #0]
 800e916:	6123      	str	r3, [r4, #16]
 800e918:	2301      	movs	r3, #1
 800e91a:	6163      	str	r3, [r4, #20]
 800e91c:	b002      	add	sp, #8
 800e91e:	bd70      	pop	{r4, r5, r6, pc}
 800e920:	466a      	mov	r2, sp
 800e922:	ab01      	add	r3, sp, #4
 800e924:	f7ff ffca 	bl	800e8bc <__swhatbuf_r>
 800e928:	9900      	ldr	r1, [sp, #0]
 800e92a:	4605      	mov	r5, r0
 800e92c:	4630      	mov	r0, r6
 800e92e:	f7ff fa6b 	bl	800de08 <_malloc_r>
 800e932:	b948      	cbnz	r0, 800e948 <__smakebuf_r+0x44>
 800e934:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e938:	059a      	lsls	r2, r3, #22
 800e93a:	d4ef      	bmi.n	800e91c <__smakebuf_r+0x18>
 800e93c:	f023 0303 	bic.w	r3, r3, #3
 800e940:	f043 0302 	orr.w	r3, r3, #2
 800e944:	81a3      	strh	r3, [r4, #12]
 800e946:	e7e3      	b.n	800e910 <__smakebuf_r+0xc>
 800e948:	4b0d      	ldr	r3, [pc, #52]	; (800e980 <__smakebuf_r+0x7c>)
 800e94a:	62b3      	str	r3, [r6, #40]	; 0x28
 800e94c:	89a3      	ldrh	r3, [r4, #12]
 800e94e:	6020      	str	r0, [r4, #0]
 800e950:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e954:	81a3      	strh	r3, [r4, #12]
 800e956:	9b00      	ldr	r3, [sp, #0]
 800e958:	6120      	str	r0, [r4, #16]
 800e95a:	6163      	str	r3, [r4, #20]
 800e95c:	9b01      	ldr	r3, [sp, #4]
 800e95e:	b15b      	cbz	r3, 800e978 <__smakebuf_r+0x74>
 800e960:	4630      	mov	r0, r6
 800e962:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e966:	f000 f88f 	bl	800ea88 <_isatty_r>
 800e96a:	b128      	cbz	r0, 800e978 <__smakebuf_r+0x74>
 800e96c:	89a3      	ldrh	r3, [r4, #12]
 800e96e:	f023 0303 	bic.w	r3, r3, #3
 800e972:	f043 0301 	orr.w	r3, r3, #1
 800e976:	81a3      	strh	r3, [r4, #12]
 800e978:	89a0      	ldrh	r0, [r4, #12]
 800e97a:	4305      	orrs	r5, r0
 800e97c:	81a5      	strh	r5, [r4, #12]
 800e97e:	e7cd      	b.n	800e91c <__smakebuf_r+0x18>
 800e980:	0800db95 	.word	0x0800db95

0800e984 <memchr>:
 800e984:	4603      	mov	r3, r0
 800e986:	b510      	push	{r4, lr}
 800e988:	b2c9      	uxtb	r1, r1
 800e98a:	4402      	add	r2, r0
 800e98c:	4293      	cmp	r3, r2
 800e98e:	4618      	mov	r0, r3
 800e990:	d101      	bne.n	800e996 <memchr+0x12>
 800e992:	2000      	movs	r0, #0
 800e994:	e003      	b.n	800e99e <memchr+0x1a>
 800e996:	7804      	ldrb	r4, [r0, #0]
 800e998:	3301      	adds	r3, #1
 800e99a:	428c      	cmp	r4, r1
 800e99c:	d1f6      	bne.n	800e98c <memchr+0x8>
 800e99e:	bd10      	pop	{r4, pc}

0800e9a0 <__malloc_lock>:
 800e9a0:	4801      	ldr	r0, [pc, #4]	; (800e9a8 <__malloc_lock+0x8>)
 800e9a2:	f7ff b9db 	b.w	800dd5c <__retarget_lock_acquire_recursive>
 800e9a6:	bf00      	nop
 800e9a8:	200068ec 	.word	0x200068ec

0800e9ac <__malloc_unlock>:
 800e9ac:	4801      	ldr	r0, [pc, #4]	; (800e9b4 <__malloc_unlock+0x8>)
 800e9ae:	f7ff b9d6 	b.w	800dd5e <__retarget_lock_release_recursive>
 800e9b2:	bf00      	nop
 800e9b4:	200068ec 	.word	0x200068ec

0800e9b8 <_read_r>:
 800e9b8:	b538      	push	{r3, r4, r5, lr}
 800e9ba:	4604      	mov	r4, r0
 800e9bc:	4608      	mov	r0, r1
 800e9be:	4611      	mov	r1, r2
 800e9c0:	2200      	movs	r2, #0
 800e9c2:	4d05      	ldr	r5, [pc, #20]	; (800e9d8 <_read_r+0x20>)
 800e9c4:	602a      	str	r2, [r5, #0]
 800e9c6:	461a      	mov	r2, r3
 800e9c8:	f7f1 fe84 	bl	80006d4 <_read>
 800e9cc:	1c43      	adds	r3, r0, #1
 800e9ce:	d102      	bne.n	800e9d6 <_read_r+0x1e>
 800e9d0:	682b      	ldr	r3, [r5, #0]
 800e9d2:	b103      	cbz	r3, 800e9d6 <_read_r+0x1e>
 800e9d4:	6023      	str	r3, [r4, #0]
 800e9d6:	bd38      	pop	{r3, r4, r5, pc}
 800e9d8:	200068e4 	.word	0x200068e4

0800e9dc <_raise_r>:
 800e9dc:	291f      	cmp	r1, #31
 800e9de:	b538      	push	{r3, r4, r5, lr}
 800e9e0:	4604      	mov	r4, r0
 800e9e2:	460d      	mov	r5, r1
 800e9e4:	d904      	bls.n	800e9f0 <_raise_r+0x14>
 800e9e6:	2316      	movs	r3, #22
 800e9e8:	6003      	str	r3, [r0, #0]
 800e9ea:	f04f 30ff 	mov.w	r0, #4294967295
 800e9ee:	bd38      	pop	{r3, r4, r5, pc}
 800e9f0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800e9f2:	b112      	cbz	r2, 800e9fa <_raise_r+0x1e>
 800e9f4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e9f8:	b94b      	cbnz	r3, 800ea0e <_raise_r+0x32>
 800e9fa:	4620      	mov	r0, r4
 800e9fc:	f000 f830 	bl	800ea60 <_getpid_r>
 800ea00:	462a      	mov	r2, r5
 800ea02:	4601      	mov	r1, r0
 800ea04:	4620      	mov	r0, r4
 800ea06:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ea0a:	f000 b817 	b.w	800ea3c <_kill_r>
 800ea0e:	2b01      	cmp	r3, #1
 800ea10:	d00a      	beq.n	800ea28 <_raise_r+0x4c>
 800ea12:	1c59      	adds	r1, r3, #1
 800ea14:	d103      	bne.n	800ea1e <_raise_r+0x42>
 800ea16:	2316      	movs	r3, #22
 800ea18:	6003      	str	r3, [r0, #0]
 800ea1a:	2001      	movs	r0, #1
 800ea1c:	e7e7      	b.n	800e9ee <_raise_r+0x12>
 800ea1e:	2400      	movs	r4, #0
 800ea20:	4628      	mov	r0, r5
 800ea22:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800ea26:	4798      	blx	r3
 800ea28:	2000      	movs	r0, #0
 800ea2a:	e7e0      	b.n	800e9ee <_raise_r+0x12>

0800ea2c <raise>:
 800ea2c:	4b02      	ldr	r3, [pc, #8]	; (800ea38 <raise+0xc>)
 800ea2e:	4601      	mov	r1, r0
 800ea30:	6818      	ldr	r0, [r3, #0]
 800ea32:	f7ff bfd3 	b.w	800e9dc <_raise_r>
 800ea36:	bf00      	nop
 800ea38:	20000018 	.word	0x20000018

0800ea3c <_kill_r>:
 800ea3c:	b538      	push	{r3, r4, r5, lr}
 800ea3e:	2300      	movs	r3, #0
 800ea40:	4d06      	ldr	r5, [pc, #24]	; (800ea5c <_kill_r+0x20>)
 800ea42:	4604      	mov	r4, r0
 800ea44:	4608      	mov	r0, r1
 800ea46:	4611      	mov	r1, r2
 800ea48:	602b      	str	r3, [r5, #0]
 800ea4a:	f7f1 fe27 	bl	800069c <_kill>
 800ea4e:	1c43      	adds	r3, r0, #1
 800ea50:	d102      	bne.n	800ea58 <_kill_r+0x1c>
 800ea52:	682b      	ldr	r3, [r5, #0]
 800ea54:	b103      	cbz	r3, 800ea58 <_kill_r+0x1c>
 800ea56:	6023      	str	r3, [r4, #0]
 800ea58:	bd38      	pop	{r3, r4, r5, pc}
 800ea5a:	bf00      	nop
 800ea5c:	200068e4 	.word	0x200068e4

0800ea60 <_getpid_r>:
 800ea60:	f7f1 be15 	b.w	800068e <_getpid>

0800ea64 <_fstat_r>:
 800ea64:	b538      	push	{r3, r4, r5, lr}
 800ea66:	2300      	movs	r3, #0
 800ea68:	4d06      	ldr	r5, [pc, #24]	; (800ea84 <_fstat_r+0x20>)
 800ea6a:	4604      	mov	r4, r0
 800ea6c:	4608      	mov	r0, r1
 800ea6e:	4611      	mov	r1, r2
 800ea70:	602b      	str	r3, [r5, #0]
 800ea72:	f7f1 fe73 	bl	800075c <_fstat>
 800ea76:	1c43      	adds	r3, r0, #1
 800ea78:	d102      	bne.n	800ea80 <_fstat_r+0x1c>
 800ea7a:	682b      	ldr	r3, [r5, #0]
 800ea7c:	b103      	cbz	r3, 800ea80 <_fstat_r+0x1c>
 800ea7e:	6023      	str	r3, [r4, #0]
 800ea80:	bd38      	pop	{r3, r4, r5, pc}
 800ea82:	bf00      	nop
 800ea84:	200068e4 	.word	0x200068e4

0800ea88 <_isatty_r>:
 800ea88:	b538      	push	{r3, r4, r5, lr}
 800ea8a:	2300      	movs	r3, #0
 800ea8c:	4d05      	ldr	r5, [pc, #20]	; (800eaa4 <_isatty_r+0x1c>)
 800ea8e:	4604      	mov	r4, r0
 800ea90:	4608      	mov	r0, r1
 800ea92:	602b      	str	r3, [r5, #0]
 800ea94:	f7f1 fe71 	bl	800077a <_isatty>
 800ea98:	1c43      	adds	r3, r0, #1
 800ea9a:	d102      	bne.n	800eaa2 <_isatty_r+0x1a>
 800ea9c:	682b      	ldr	r3, [r5, #0]
 800ea9e:	b103      	cbz	r3, 800eaa2 <_isatty_r+0x1a>
 800eaa0:	6023      	str	r3, [r4, #0]
 800eaa2:	bd38      	pop	{r3, r4, r5, pc}
 800eaa4:	200068e4 	.word	0x200068e4

0800eaa8 <_init>:
 800eaa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eaaa:	bf00      	nop
 800eaac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800eaae:	bc08      	pop	{r3}
 800eab0:	469e      	mov	lr, r3
 800eab2:	4770      	bx	lr

0800eab4 <_fini>:
 800eab4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eab6:	bf00      	nop
 800eab8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800eaba:	bc08      	pop	{r3}
 800eabc:	469e      	mov	lr, r3
 800eabe:	4770      	bx	lr
